<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class BulkCreateTransaction extends TestCase
{
    public function testBulkCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\BulkCreateTransaction(
            "3OQSs9cvMVMzYpfEHHq4AVCPhpF",
            "l2NE9Oo",
            "hrFLhvABt92YjeNGkeRyZCxDwnyuzPdWfYw4"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testBulkCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\BulkCreateTransaction(
            "3OQSs9cvMVMzYpfEHHq4AVCPhpF",
            "l2NE9Oo",
            "hrFLhvABt92YjeNGkeRyZCxDwnyuzPdWfYw4",
            [
                'private_money_id' => "764583b8-f1b2-4f53-9f0c-29a381545536"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testBulkCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\BulkCreateTransaction(
            "3OQSs9cvMVMzYpfEHHq4AVCPhpF",
            "l2NE9Oo",
            "hrFLhvABt92YjeNGkeRyZCxDwnyuzPdWfYw4",
            [
                'description' => "HFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy2qiGNeSDJueWNAF2",
                'private_money_id' => "be50ce8a-2b92-4dbc-a9a4-88af0586c65c"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
