<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "PV8lVcOO1w2GShMQxP1XNaA4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7Ry"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["payment", "exchange_outflow", "cashback", "exchange_inflow"],
                'description' => "IVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["expire", "exchange_outflow", "topup", "exchange_inflow", "cashback", "payment"],
                'description' => "ZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "62c302d4-35f1-4e7e-87c4-3215645cc062",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "topup"],
                'description' => "v4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPy"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "k1SSX-r",
                'private_money_id' => "311bd1b2-821b-4fe2-94e0-f5a4694a8a3d",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_inflow", "expire", "topup", "exchange_outflow", "cashback"],
                'description' => "FSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhY"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "IeaGt",
                'organization_code' => "D9A--UB-y5Wn--5I--9u393gS--s3",
                'private_money_id' => "fe6213e7-e07d-4a7e-adfe-2cf43ac6f070",
                'is_modified' => TRUE,
                'types' => ["expire", "topup", "cashback", "payment", "exchange_outflow", "exchange_inflow"],
                'description' => "BR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8S"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "9b31a3e7-fc60-4e5d-9839-b6718f656803",
                'transaction_id' => "O6",
                'organization_code' => "3iJ-9dD---7-YolA58m-Vc-996y5l",
                'private_money_id' => "1750ab2f-d7c2-480d-842e-9bc53e6fa6aa",
                'is_modified' => TRUE,
                'types' => ["cashback"],
                'description' => "S5KI84n4B4JwtxMbsrynF"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "zleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqEvtHSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2L",
                'terminal_id' => "0cdc7118-47d0-4396-a2a9-9f8c6a148ab0",
                'transaction_id' => "vCf",
                'organization_code' => "U8m-EI8MS8hII-tI",
                'private_money_id' => "26687349-3c16-4178-b708-abe5d4699ac8",
                'is_modified' => TRUE,
                'types' => ["expire"],
                'description' => "VFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "05b57152-289f-42cc-99c3-c34692786d8b",
                'customer_name' => "S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixL",
                'terminal_id' => "8df7af26-c41d-4788-b003-3d76867b583d",
                'transaction_id' => "lY8MFYZ",
                'organization_code' => "Y03-2UWgF9",
                'private_money_id' => "0e260079-0ae0-4332-921a-f0180b856949",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "topup", "expire", "payment", "cashback", "exchange_inflow"],
                'description' => "CUonyUv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "977e2b08-a061-4a79-8a06-64febe0d9c5a",
                'customer_id' => "1bff689c-8cfb-475b-a32a-95326e526f27",
                'customer_name' => "E32vm3RMvvWttu1PJb3d04IfskzbRh2",
                'terminal_id' => "f52d39cb-6a2d-48aa-9358-6123c140ac44",
                'transaction_id' => "Jqy1UyPaGH",
                'organization_code' => "v39jFTlu-XkApk--324-FW3m--8",
                'private_money_id' => "d897650b-e0a6-4c4f-b61c-e2d8149b3754",
                'is_modified' => FALSE,
                'types' => ["topup", "cashback", "expire"],
                'description' => "PEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 2395,
                'shop_id' => "7b52361c-ab20-4604-aea4-95c333415836",
                'customer_id' => "cd4922a1-cbf2-4319-84f9-005989664ef5",
                'customer_name' => "uG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYM",
                'terminal_id' => "2743e2fa-a1c8-49fc-8065-9650cee5841f",
                'transaction_id' => "RHJLPebY",
                'organization_code' => "-Cq10S-E8gQ----jDNN98mfGHwMEIBk",
                'private_money_id' => "34e88dfc-36bd-404c-9bb5-d4e327efddb4",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "cashback", "topup", "exchange_inflow"],
                'description' => "Pi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 7539,
                'per_page' => 8246,
                'shop_id' => "7261d6a9-1fb2-463f-8e20-eb786615d1ed",
                'customer_id' => "66eb1f15-3d9c-431d-9b12-329d5a93ed89",
                'customer_name' => "So3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfMVYN8tFORiCKaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oa",
                'terminal_id' => "bf1043fa-ff9c-4b4f-a0a9-5aeedb4aaf53",
                'transaction_id' => "RVBAD",
                'organization_code' => "-i2w-XaN03-R-7n",
                'private_money_id' => "b5e91b2f-b889-4b22-a38e-7bc7310df541",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "exchange_inflow", "payment", "expire", "cashback"],
                'description' => "AIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4A"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2020-07-26T10:55:21.000000Z",
                'page' => 2784,
                'per_page' => 4219,
                'shop_id' => "f98b4df5-c995-408a-bb6b-47a2f3349e71",
                'customer_id' => "7bdf35a9-2b58-4e69-a9b0-1b92641220af",
                'customer_name' => "wz9NdLnaFp0d8NnYZXWwwPUfmYGEVrOM4dkj0diMGxwkBMFBNKhTrrG",
                'terminal_id' => "f8b5d8eb-2220-422d-88af-8fc79f2630a0",
                'transaction_id' => "nz7dW1L",
                'organization_code' => "e--Pwgc9HmVBlTce5-o-6v-Mx23q",
                'private_money_id' => "87fcfd6b-5fb5-49b5-9cdb-6529a6653d70",
                'is_modified' => TRUE,
                'types' => ["expire"],
                'description' => "BmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YX"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2024-02-05T13:13:38.000000Z",
                'to' => "2023-03-16T23:25:29.000000Z",
                'page' => 3546,
                'per_page' => 3920,
                'shop_id' => "9b3545d7-4db0-4b06-8d6f-09019542ff11",
                'customer_id' => "4423a488-860a-46e1-85ac-dc3b1dddcc1f",
                'customer_name' => "SUOR88F7Ubd6EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK7",
                'terminal_id' => "f1c2eeb7-2535-44a0-8655-b1ea851422ca",
                'transaction_id' => "wWsCFU",
                'organization_code' => "LYQf-X-6--oZ",
                'private_money_id' => "4591de5a-0210-4461-a6c3-1e458e9de94d",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "payment", "expire"],
                'description' => "u8UbXHSU9E0Qlg3gebv"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
