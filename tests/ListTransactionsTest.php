<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "KlOmIqFEpEzlkbZXsHeK96R7zZjofXop8q4Bfps6VchHwOSBaSPaNKxM4bPYP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["payment"],
                'description' => "RAISeS032nbwP9uwXrTBWthKP8SFB1epaCsenfTVlWMFnuMgJI5wZ1cKhV863o3fLMEPLjDOHv"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => [],
                'description' => "6QE7ACXnugqJAsKtBEhfGR87GnzBbD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "7f2082f4-9223-4ff1-8ea9-ca80e84c03ac",
                'is_modified' => FALSE,
                'types' => ["payment", "topup"],
                'description' => "ShMC6uD2oZ5QpD7GXwDf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "p-0-8ta----IxZppDb5jZny-",
                'private_money_id' => "bde4e85e-1983-4f36-a9a7-2444613d42e1",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "topup"],
                'description' => "MDzJC7wMAkFYNemkzZpvDvog0lglLv"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "4c698532-b254-43a0-b930-bd1b52a1f111",
                'organization_code' => "L--KO",
                'private_money_id' => "d2244ef7-cea6-47cb-94b7-06fc8aff8d8a",
                'is_modified' => TRUE,
                'types' => ["payment"],
                'description' => "MDJDN9kjnEAtWkM10yTZC3mt5NbCfjtxFXhJHyZxe38yvM1SEczLfO3bcMSuKdq3FslGbkHo1PhxbbT2umORVj1yDfkPqeu7VGzhCxzDjEPJsA"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "c4e89e1d-79f2-4e27-833f-9b885dbfb556",
                'transaction_id' => "331190b0-c89a-4371-8576-818a7b69cc02",
                'organization_code' => "3J-W5--173",
                'private_money_id' => "27bf382a-2348-465d-9998-8a70d0ca3fcc",
                'is_modified' => TRUE,
                'types' => ["topup", "payment", "exchange_outflow"],
                'description' => "gaMAc0JPVvhl1tkrYQHQhhRs2PIaofbMQ1Wyxx6iPX8wNVpCNUyiEzApKM66ZkEOto1oTpzcZyDOIWVwoFQcmGYbDKlivyrCrMwSNsOLmKdqXCCeTbwp9jzAmkVeybVqp1YrzurkqIA"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "cJ63x2WplkqrFdjX6CETl764u1bEUuZsZXEigsXHGq2ofRToY5BXgCjIyZIJEzXmOEMtSXxzZokGYkRiArikWZSvWA49o8HQUEwypAtZsgSDOAS6m6W4ycEKeHr4636lRXTr2iPpZt0j1CI3l6J30qBjXV2f99mPOolq1eiW9RuNHXLsbYmrfHwiW6AehvKLu9jSykyDMxjQhXvqsNkUwpnxOJbMzTMi5NaDqvIkEgkU1iGJo4Veu1nD",
                'terminal_id' => "832e90a4-ccb6-4632-b045-1865a1c66dee",
                'transaction_id' => "0c92646e-83c1-4b2c-ade6-7f5802b9f2cf",
                'organization_code' => "mZ",
                'private_money_id' => "6a5172a1-9b3d-450c-960f-eb1ff2485420",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "exchange_outflow", "topup"],
                'description' => "XZBxfQ6TXMiAoASOIgsAFMRnA6RqJv3Yoi1HNQ6SUUxfHdkFZrSjoj4E906hjOODSKfXhRhf12fH18u3lWSr6bxBxhq8hzLJKGl7pegu99iLkGceRH09p3D"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "3ed4673f-1e02-4dea-bb27-8ba4722622e6",
                'customer_name' => "3UXXM3TuFXvJTrk8Ursx5VM8uakcEIyxQz",
                'terminal_id' => "17180d60-11b7-4d44-917f-d50bf42deb3b",
                'transaction_id' => "53bfbb85-f834-4101-8936-4ea9dc10a996",
                'organization_code' => "qh--JV-mTQ-3SKv3-xfRIh-ztv-NSac",
                'private_money_id' => "e614e634-fda1-46f7-aec8-bf46239fa7e2",
                'is_modified' => FALSE,
                'types' => [],
                'description' => "Xzqx2wtaKpu1qdmiKn22F3ctIsxTTV24W3iMjgCaf4v1F7zb24TvVYyzGoNYLIXxqonkMGqXlJpJRQwp9nn9cv0p2uygmHKqGnnOeMtFto3ZtBMyDD0JldWFE85ZjbUaTENhmx5ChLqBvfWnrg6wEB880lMBDEt"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "4f87f26f-93e6-4b1e-8f77-41f5ccba2e22",
                'customer_id' => "e496a5d8-9e34-4791-84ed-122b5d1c2c58",
                'customer_name' => "scPUoeV1XH78h5Guqwmdx9H0OP7RXsy",
                'terminal_id' => "4323c4ba-469f-4890-a0b9-3670fef113b5",
                'transaction_id' => "e81f550f-97de-40f9-b241-e195d5f24fb7",
                'organization_code' => "h-th-cR7A-Bri-",
                'private_money_id' => "e8ad0766-9d50-4206-95f5-11c4876d2bee",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_outflow", "payment", "exchange_inflow"],
                'description' => "GTKy9baAXpUrNxQgJv2d1RjRDvxxlQFhM2eopmIlmvqzqnGOYbg6rdqjemTbEPE7it6nxw8VlzyCN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 3043,
                'shop_id' => "955aa57a-8b05-40b8-8f7a-ba7e71893963",
                'customer_id' => "e4ccd4c1-c89f-45cc-963b-139366c29c7b",
                'customer_name' => "qfahEqSWpbWk8lIjmXf3crokuVBQQlsA8T5nZUMuDqspHuPmG",
                'terminal_id' => "b44280e9-557d-45d5-a16f-b428a85fec88",
                'transaction_id' => "75438f19-5726-470f-ba50-618bd9cac1f4",
                'organization_code' => "",
                'private_money_id' => "3dc98a88-bc9f-4992-a8de-cb201cbbbd4d",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "topup", "exchange_inflow", "payment"],
                'description' => "DI0zSm63cU49za1QJALcpDZJ7YKoaGZqFQRMYj7eI0OiTgfPr68fP2A8RCqVjIMZulltZtjgMfuDxn3QgsidEuf2NvBHeZX8hYKnrzJW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 6588,
                'per_page' => 892,
                'shop_id' => "beea30a9-0c70-4ef4-bc88-fb98551357cd",
                'customer_id' => "907aaee8-c22a-423f-b922-2caa5dc78a81",
                'customer_name' => "WUi64YZbGeyCSFHt3mcrCB8tq8q2IVY2UPxEK8mwHnigIC2xteLEmOps6u4P22rjT4dupTBgLrwJlYmSqD3jh0KtoQaeaW3v7wYe7b9HTOawWBmOJlSRN9rogVZwJO2xNcltqUbvpNyoJI0v",
                'terminal_id' => "abd6e12e-ebac-432a-b1ca-b5af36ca5838",
                'transaction_id' => "b35297db-c7ac-4fee-b0dc-8e6fb1a22155",
                'organization_code' => "Sn-d-GcWG",
                'private_money_id' => "cde20499-fb42-476b-ae13-2422fab0dde3",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "exchange_outflow", "topup", "payment"],
                'description' => "YiSNlDYC6MEWe"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2022-11-20T19:23:13.000000+09:00",
                'page' => 8315,
                'per_page' => 7847,
                'shop_id' => "edac4d5f-672b-4be9-a906-81c8281ba306",
                'customer_id' => "7dd129c9-9db3-4e8d-8579-4fff842e0f6b",
                'customer_name' => "pjwCPjAkzyY2kmUe2JJ53U3N6F0e26pbO3HttlG4eyiatMI7VF3dtugJSz1Q3vovXNsgFsW05W19aXuGVVRQlUVJv9CZ2ZsBhmJBENJ2Jp2YLnPueitIaB8AWaFb8JKCZbl1FLUJSG0fudQ9bvTSzMBL1Qigyh82R8yfv5oZ1A8LucSTZwJytxSEpRfXYxFxMDsqe8NITOunWJG",
                'terminal_id' => "cda18d14-cfad-4c2d-a52e-2c7f0af2b9ff",
                'transaction_id' => "b5650323-4005-4bc7-bdcd-5ee69a8c001c",
                'organization_code' => "",
                'private_money_id' => "0d774fad-2e35-41fe-a61f-06dc37d7dcf8",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "topup", "payment"],
                'description' => "GOh83wDY3YT1DlU5jqThl0v0LlAw1sxsypKPTUBVqh1Y1karSx9kbbfwykuboyLPrrY2btuxHx9YophvSLqEzRt6XTR3oDpLSuhWGSp4IuNXEvAYv341undTljbWPhfpiwPMjupC65xVDnAJbsKD6b895if"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2025-06-17T12:46:00.000000+09:00",
                'to' => "2022-08-08T03:48:40.000000+09:00",
                'page' => 7095,
                'per_page' => 680,
                'shop_id' => "ce8583db-f955-4597-b4b2-687ab2e43abe",
                'customer_id' => "e43eb19d-029b-4692-8e8d-3ebc60e767bb",
                'customer_name' => "sAKH6lKT6gJXbaEKAddoUM0CRd",
                'terminal_id' => "2406fc61-6253-4bad-ad44-2fa7c7bebf65",
                'transaction_id' => "87e9b96f-c140-4551-9c5e-cf2f2eaf561b",
                'organization_code' => "0s-fTaWQTh9dz--e-5WuIdqM",
                'private_money_id' => "5d1a9dd1-a898-4b5e-9995-1d33b730b9fa",
                'is_modified' => TRUE,
                'types' => [],
                'description' => "LCcC3cDzGwCmJXHiF5C2aKJupg0Hph0EUCWBeCDLYnE6HiVXoG09ihrRj4aejWMyEn4Q3X3BDxBJJ5t6h3IPcBKQDcagEkitF8iACEva8PGaDArnv6F3HhJclpvEl0kBLWjkCR0Mj5I3Hqz506kx1IdZKDk"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
