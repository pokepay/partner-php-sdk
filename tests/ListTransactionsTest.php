<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "8fK7SBxethCuCr4dBSWzD3agM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["topup", "payment"],
                'description' => "CmtviHLHOBHoLHZ5Hyso5u9Osji"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => FALSE,
                'types' => ["exchange_inflow"],
                'description' => "3o"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "37d793f6-50f7-450c-bbf0-c731e85e91d1",
                'is_modified' => TRUE,
                'types' => [],
                'description' => "fTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "yBG23J4r5m-Y0T5RdV8-AWz7Z-arBk66",
                'private_money_id' => "5f7ece5d-8e1e-4c10-b46f-fd08df7f8bf6",
                'is_modified' => FALSE,
                'types' => ["payment"],
                'description' => "f4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRdkY0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "ae278820-8bf0-4c66-a5d8-5300ae21310f",
                'organization_code' => "-551--RPEW--1N7-",
                'private_money_id' => "968c2e33-6349-4f80-b26b-a81b8f08e846",
                'is_modified' => FALSE,
                'types' => [],
                'description' => "QksZB6ByT3"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "a174c088-526c-457f-9f29-0056a8b8f410",
                'transaction_id' => "d426d352-c951-4284-be37-22cff830132c",
                'organization_code' => "XWH-t5u1mKvDD26-e3-S79wquImT32p-",
                'private_money_id' => "0661f61d-34e2-4d0f-b11a-52aa845f9d24",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow"],
                'description' => "GNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "PB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2I",
                'terminal_id' => "30329426-2752-4a09-a73f-d2668d8cbc7c",
                'transaction_id' => "02a9c1fb-936c-4111-96f3-8ff6163f2377",
                'organization_code' => "-I3w-bd-7d-g-b6iS32WX",
                'private_money_id' => "071ac1fb-3260-47c6-acb0-f5d9cd7b4bcb",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "payment", "topup"],
                'description' => "lCMK7WZ9OzNLNkjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "49b9c7d9-e808-4cfd-92bb-c5a010426ee1",
                'customer_name' => "H9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbM",
                'terminal_id' => "9fbf7b94-f6ea-4580-a147-533d4b3050e2",
                'transaction_id' => "446f6428-e871-4ac3-8818-aa0a38ec41e1",
                'organization_code' => "78-b6-7---2-684SFIq7br65V897-n",
                'private_money_id' => "aa18e04d-f933-4694-b0ec-516759b065ca",
                'is_modified' => TRUE,
                'types' => ["payment", "topup", "exchange_inflow", "exchange_outflow"],
                'description' => "wzKIFQcpGZZVlRU03Fa2F6PUopGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "50c2d693-1828-4a9c-bd16-ca4b87248a21",
                'customer_id' => "30780644-adf6-4d82-9ab2-30502a96acf5",
                'customer_name' => "FKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJg",
                'terminal_id' => "922c4767-6dc9-4ccd-be2f-d0ad93ed9227",
                'transaction_id' => "51cedb89-ff19-4723-813d-7b15eef5d3b5",
                'organization_code' => "--0-",
                'private_money_id' => "71cf1133-99bc-4378-a7d6-9da362ac564a",
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_outflow", "payment"],
                'description' => "FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 7134,
                'shop_id' => "39fe6fdf-9647-4f13-bf9f-6a06741869b5",
                'customer_id' => "138080e3-6634-4485-9be2-e3d390a6b5a6",
                'customer_name' => "VBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH",
                'terminal_id' => "4e399835-b206-493b-adb6-79e771a94b2d",
                'transaction_id' => "08afd9dd-0a6e-4a9f-b923-e11535092675",
                'organization_code' => "l---QRTs---lt858-8ZqO",
                'private_money_id' => "2c724c4d-7e84-4d3f-b074-3b73c1d4f0f0",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_outflow"],
                'description' => "BqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 4023,
                'per_page' => 7995,
                'shop_id' => "97fac9da-4a1c-4622-8e33-18e40b07f190",
                'customer_id' => "94ddd3d0-2715-40c7-98ca-2a96176e14d9",
                'customer_name' => "ssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMP",
                'terminal_id' => "b93ff5ec-63d9-4a22-99c1-f0ff53003a39",
                'transaction_id' => "a8d1bb64-0bb2-4d89-b48f-d77b920a7de7",
                'organization_code' => "Z2-G-4-2-LzD--2Q1m7-mdp-X7--l-6Y",
                'private_money_id' => "7c2bd41a-f1d0-45bc-b1a1-02108c4685a4",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow"],
                'description' => "A4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2025-03-30T13:25:34.000000+09:00",
                'page' => 8283,
                'per_page' => 2322,
                'shop_id' => "62737187-aaa4-4b01-be8c-a13936d4d681",
                'customer_id' => "14d5ce3b-6a7c-4462-9ff5-213cb8512173",
                'customer_name' => "52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaD",
                'terminal_id' => "228c24d5-1f4d-4423-a721-4c617b71e9b8",
                'transaction_id' => "dd54d9c8-b55e-4c3b-bd1f-f5bd256a4e50",
                'organization_code' => "J3--X--9E-G-E2P-um-sY",
                'private_money_id' => "3aa18985-00cd-4a46-a10d-b9eb1e45bba4",
                'is_modified' => TRUE,
                'types' => ["payment", "exchange_inflow", "exchange_outflow", "topup"],
                'description' => "ttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2024-07-22T11:16:32.000000+09:00",
                'to' => "2015-12-03T06:29:54.000000+09:00",
                'page' => 4403,
                'per_page' => 8576,
                'shop_id' => "4f60ae8c-1cd2-42ba-bf73-13e77342e07d",
                'customer_id' => "1984da7e-6ced-49fe-b470-38fc5f3bd71d",
                'customer_name' => "zruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdz",
                'terminal_id' => "181cba89-bcc8-4914-ae2e-94d3f896a5bb",
                'transaction_id' => "e7ee55b5-4981-44cb-abc9-c338061b0497",
                'organization_code' => "160SXNVg5HI0E--M3of8uvT3y-R",
                'private_money_id' => "70558694-cc11-440e-8740-148cb4fceabf",
                'is_modified' => TRUE,
                'types' => ["payment"],
                'description' => "Xt2RyxOmHZB8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
