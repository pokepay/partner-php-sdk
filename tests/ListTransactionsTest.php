<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "0LlAw1sxsypKPTUBVqh1Y1karSx9kbbfwykuboyLPrrY2btuxHx9YophvSLqEzRt6XTR3oDpLSuhWGSp4IuNXEvAYv341undTljbWPhfpiwPMjupC65xVDn"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["payment", "cashback", "topup", "expire", "exchange_outflow", "exchange_inflow"],
                'description' => "KD6b895iftqbY67Ut2zsAKH6lKT6gJXbaEKAddoUM0CRdaSDeoQ9lXXELG9oQdgpEse81VvpXr3HeuSevupI3Lg6cydG4CQY3zROLCcC3cDzGwCmJXHi"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["topup", "cashback", "payment"],
                'description' => "0Hph0EUCWBeCDLYnE6HiVXoG09ihrRj4aejWMyEn4Q3X3BDxBJJ5t6h3IPcBKQDcagEkitF8iACEva8PGaDArnv6F3HhJclpvEl0kBLW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "2d32b3ea-316b-48c3-92ab-eb04d3b77f30",
                'is_modified' => FALSE,
                'types' => ["expire", "exchange_inflow", "payment"],
                'description' => "Hqz506kx1IdZKDkCNCl989Inr9h5bKrK2A0mcFTtdvdsEkzDVoxJr0lAnMovtOnbZ68JstsOcxw5PoatcF0TU5W5omYIqjFLKdIYieVX7m2aCCypluKCuWAlkVHsDkHFJvihW5VcQOv2mc2ISnCuuu6HEZICTUsFd55cysKpzPw06buTFvYo"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "m-1P8-DRe8w9--",
                'private_money_id' => "f58f3463-6d9c-4d05-a2a6-d5d16856ae87",
                'is_modified' => FALSE,
                'types' => ["payment"],
                'description' => "Xsspdkp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "VkTB",
                'organization_code' => "Qxug-eb--F",
                'private_money_id' => "9198e666-e92c-4824-a83b-09c850eb46d6",
                'is_modified' => FALSE,
                'types' => ["cashback", "payment", "expire", "exchange_inflow", "topup"],
                'description' => "6bqVzq0H9hNDIpWOGRlL4QDCIWrLzYwdZH6RYisLngmui2yyfAvCUPPfC6gPSyCFjnlF5wS89FXtStGksuJSc3uI6YbNMb4YSuPWKo7xO0kav9UABs7zcS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "6e5673d3-ef25-4663-ab72-2792fc64b709",
                'transaction_id' => "rP7zrKa6D",
                'organization_code' => "",
                'private_money_id' => "0afb389e-7f60-4103-b6ab-4c6384b1be46",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow"],
                'description' => "yrsGLqJFlRMGfDCisIe5qHDsMdG7wbTKEpXzySqqc4sXPad6xuwUqi64YRTYtsOeEN9XbwlgwBy5OkIYkbdAf4PBqh2Y5zV0C85Vn4l2htJKp8EeWwIbRZU73CECtq6YH4jkVjZI7iaSuegvmESb5ZkkQma0HXRKUqv4lzkwZFtSWx4aRECgS2Rzs2ylIq5ZtrGXVCQU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "bREfojZVoiIjURbvF5cuoyvA3tbiunsY6SNRraYwc8QDfAEfV4F8XUQw7FOCvHUkEBp2LxsthHBe9EWUoT5QLe9Yg2CBY3rucfBues6uHoyn0kY9tu08AkjC0WPKbQvYow9FaOH3zD7SQmRuyNCMpGLgUAKK4AYXStTHGYGCT6FSvry2ciGzpWdg5yn158N5eaT1YQUtPEMBFK5RCvbOFISTKPBIbnB4IlVfzKQeA",
                'terminal_id' => "e8c61726-a622-4506-9a97-9df4176fd5f7",
                'transaction_id' => "qv",
                'organization_code' => "T-I-lEPs7",
                'private_money_id' => "2a1718bd-121c-4fb7-b86c-0c125c8f7e0a",
                'is_modified' => FALSE,
                'types' => ["expire"],
                'description' => "7qlClsr3peE1RPsdDZEoaT5osfv5Au45ikmQzjXEIrL5tEVsPccciqGzpCuGxgjotbAnD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "86a693c6-983b-43ae-ada9-ea3f4a20cdb6",
                'customer_name' => "nBFTBcp5MgKi6djde9q9Gx06zspIhW3gma",
                'terminal_id' => "fd7114ce-12be-4836-8d98-9d7b6700ee4a",
                'transaction_id' => "rvmX",
                'organization_code' => "2XFd24F",
                'private_money_id' => "5980da18-3cd1-4fcf-9daf-e0737984e8cc",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "exchange_outflow"],
                'description' => "pshyxjFJxJ7Fc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "3361f08a-baa6-489b-aab7-17911f097909",
                'customer_id' => "2af59759-1677-46e2-a4ab-6d34b01ecc84",
                'customer_name' => "WRFS5iP8DHnWS95dKYCDWjMDqXUFGoRA4XvfiL62Wv2vl8qJa",
                'terminal_id' => "498c89aa-d266-4f8a-a377-983a5a00e842",
                'transaction_id' => "pLTRN",
                'organization_code' => "IUKI6a-VK13d974krrhZl--3-6U74",
                'private_money_id' => "7925eedb-4cb3-430a-a9a1-c5a275977184",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "topup", "exchange_outflow", "expire", "payment", "cashback"],
                'description' => "LKGiMRgfz5jiMdvRW63Z9043h9SU3fTD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 8176,
                'shop_id' => "18dc9f17-e7fb-4b34-8bee-a336bd235683",
                'customer_id' => "e645dfd4-257e-4a1b-93d1-fab53094f193",
                'customer_name' => "sH9YtmnNiOZyV9AO3DnB1YRES4xlc6449ibwy8gDnWqdIP3eIh1PycrJFKeRKa6OogwkyZYeik5qw2qVOD7lJwoEqJ4uimGtF4vDevDABoV1497oKjyplKXUyjuZoAdZaiUShsjoKemD9IJVji3EhQ10nakJ4Xx7BosawhL51XW0ltZ8tyBqdUl09HCPEoMCgQwCdLCVxkfS7LC09",
                'terminal_id' => "376a6ae8-ef31-4504-a761-bf90504428b3",
                'transaction_id' => "P4fe",
                'organization_code' => "v-59O",
                'private_money_id' => "95f50044-54ce-4fa1-9263-046deb1bd4a4",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow"],
                'description' => "uvpVmJgh2hspBOtxaFVpQwu69vaYb020lVhpK1ujAV4SIGQkIPmfa5YJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 5395,
                'per_page' => 7065,
                'shop_id' => "86ae5307-839d-4349-8dd6-bf35aa9f9b48",
                'customer_id' => "d37e5a30-013d-4c83-a068-5d00509e68cb",
                'customer_name' => "ZRjFJsBJwxE5ymHkkfvwj75uGxXyxLiKvyAHQ0Cmh0GR2iNpQgbrTS2HEffP70DHCUohTMu",
                'terminal_id' => "a7cd18b2-8f36-4139-8acf-d2dfdf580627",
                'transaction_id' => "O6DIw8",
                'organization_code' => "9es4rdU1V85719I3Dn-H2x--j-0",
                'private_money_id' => "ca209fc1-4a4d-4cd2-abb3-7110966b754b",
                'is_modified' => FALSE,
                'types' => ["payment", "expire", "exchange_inflow", "cashback", "exchange_outflow", "topup"],
                'description' => "vn680BNVo61whu52VEWHzeXnCqnnjKe2ZokcQxt9okwN5c4Mkgq5YYKEEntoCEiLAHJ2s"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2023-11-12T20:04:39.000000+09:00",
                'page' => 3911,
                'per_page' => 9578,
                'shop_id' => "4e45cd12-e374-4b6a-8675-c4f406323595",
                'customer_id' => "6500bf55-de4a-414a-b393-f049d16ba46b",
                'customer_name' => "CXGENUTkzcX2ykkKJlN107OaiUpqdHMS0BnQNQ8yntRPdiO7nDWAmmXsETvex6EwUtMqxtCSMEZWLR3IYMZqZQp71KYV2dqAhSRH0jBaTj6CKr7da3Hc5MrDSrYQmTFD",
                'terminal_id' => "db6219ac-f81b-43b8-a04d-1e0417113ccb",
                'transaction_id' => "LhwIR",
                'organization_code' => "-A-4G0v1y1LD-93nYvF6-kxYQQ4-vjD",
                'private_money_id' => "6dd55f4e-eb56-4afb-ae70-2113dc246f5f",
                'is_modified' => TRUE,
                'types' => ["payment", "expire"],
                'description' => "4FvafoOT5XflXygJfyBJl1nws6Ne3S7kdpHli9FCf9vj51iwX"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2021-12-28T22:18:34.000000+09:00",
                'to' => "2024-02-07T13:10:02.000000+09:00",
                'page' => 4714,
                'per_page' => 2679,
                'shop_id' => "d20c68de-abd6-4282-9d7e-b211c2c30b19",
                'customer_id' => "ea35ec6b-5c1c-4ee1-a937-7c6645db2e4d",
                'customer_name' => "idPllBkchJ2ELHNBkuEPtWGn6U1tknXv7iBjpuz8kXfTQVtq7nYSMGg6A5q48d0",
                'terminal_id' => "4fed5d3d-1156-4b1c-8576-5080535ea6df",
                'transaction_id' => "bqvZRxaI0",
                'organization_code' => "FI54-8j-JlqW-Z-D--57Q9uC4uJZ",
                'private_money_id' => "f6318575-f38e-4c75-842f-2b8dcdeb5bfe",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_outflow", "exchange_inflow"],
                'description' => "kiJUlQ4dKgR3uo3pyHQKCLEzAV2HW0T6wtgFowhjkpuax7inTCKJlAlkDX0z9k4WtlP60t1pG"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
