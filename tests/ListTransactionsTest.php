<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXu"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["payment"],
                'description' => "q9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqEvtHSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCA"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["payment"],
                'description' => "f4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "7fa37eed-4d43-4f3c-b2b6-b411425247b0",
                'is_modified' => TRUE,
                'types' => ["cashback", "payment"],
                'description' => "7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixLpvf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "803-2UWgF9A28O1--25djJe--",
                'private_money_id' => "ada11cee-4e79-408b-bda5-b1d542c267a2",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow"],
                'description' => "1h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "5lY5r",
                'organization_code' => "-SPF--Ue-xT-4af1yX--Qo3P-88",
                'private_money_id' => "2674231f-ff7f-43b2-84c3-4c6ceedee5b6",
                'is_modified' => TRUE,
                'types' => ["payment", "topup", "cashback", "expire", "exchange_inflow"],
                'description' => "2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "16dbac2a-774f-4f16-9eb1-33222607a3df",
                'transaction_id' => "h3s3e",
                'organization_code' => "",
                'private_money_id' => "2893ee91-9131-4550-8a92-0a2dcc76bea5",
                'is_modified' => TRUE,
                'types' => ["topup", "cashback", "exchange_inflow"],
                'description' => "4IfskzbRh2KXDkJqy1UyPaGHVkyMSdmemZcovbEUc9TiM3DTS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPI",
                'terminal_id' => "669a3849-4187-44c2-a5d5-8d53644ea80d",
                'transaction_id' => "xLQqoj9SXP",
                'organization_code' => "---39",
                'private_money_id' => "1c45b4fa-8a23-479b-81c1-4b370fc82244",
                'is_modified' => FALSE,
                'types' => ["topup", "expire"],
                'description' => "6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "ee00df3b-d072-4254-9901-4876686f83c8",
                'customer_name' => "gdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzW",
                'terminal_id' => "92014d83-8f2f-44e6-8dbd-3e3e7243b88b",
                'transaction_id' => "YN8tFOR",
                'organization_code' => "Y-u",
                'private_money_id' => "37208acc-0117-48c4-87bc-979678a4c767",
                'is_modified' => FALSE,
                'types' => ["payment", "expire", "topup", "cashback", "exchange_outflow", "exchange_inflow"],
                'description' => "HQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8H"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "220e5ac6-5a3a-47ab-b8da-03f468a6ae0e",
                'customer_id' => "5ebe53c3-108f-47bd-8035-e40645c13b8e",
                'customer_name' => "ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4Az",
                'terminal_id' => "f98b4df5-c995-408a-bb6b-47a2f3349e71",
                'transaction_id' => "Xii06wz9Nd",
                'organization_code' => "W2--U-l5xjH-",
                'private_money_id' => "75cb9122-945c-4faa-9f83-ba8444fa9aaa",
                'is_modified' => TRUE,
                'types' => ["topup"],
                'description' => "kBMFBNKhTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 282,
                'shop_id' => "65719173-820d-4a91-b829-3433f2e9fa2c",
                'customer_id' => "b55e6feb-aa84-4b88-827a-34d322722b8f",
                'customer_name' => "ot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlm",
                'terminal_id' => "794e5de6-a982-48e2-89d7-c7a5d468571d",
                'transaction_id' => "jq1",
                'organization_code' => "-oW",
                'private_money_id' => "84ad74bb-a6b2-4c97-8869-a00e6da9db2f",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "topup", "expire", "cashback", "payment", "exchange_outflow"],
                'description' => "KUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0ru"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 5103,
                'per_page' => 106,
                'shop_id' => "9e6fdaf3-adbc-4bae-9fcc-a256ada8901c",
                'customer_id' => "04e72a3f-308d-4ac1-8b24-7a85bf70fc21",
                'customer_name' => "D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5q",
                'terminal_id' => "a8764f09-9022-4ad9-93e6-af609463b027",
                'transaction_id' => "dpEz",
                'organization_code' => "yFH3l-oWbAVbaS-p-1i-rU6H0r5jHe",
                'private_money_id' => "6b7d83b2-c16c-45aa-b20b-53ca574cb36e",
                'is_modified' => TRUE,
                'types' => ["topup", "cashback", "expire", "exchange_outflow"],
                'description' => "2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYA"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2022-08-11T11:06:41.000000Z",
                'page' => 8459,
                'per_page' => 7873,
                'shop_id' => "17d7361e-5f26-46e1-97ee-368e6a3f8367",
                'customer_id' => "0d4b08f1-92b9-4450-8abd-4b51317ebd0a",
                'customer_name' => "fQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0",
                'terminal_id' => "69f06cdb-6214-4c15-807d-8cbd8538079b",
                'transaction_id' => "ZYNIF",
                'organization_code' => "s--aXS-ZgJJ-y--WsY4x--Dyl",
                'private_money_id' => "7440e812-d811-462f-af5f-b514d20a65a5",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_inflow", "topup", "expire", "exchange_outflow"],
                'description' => "RdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2in"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2024-05-23T02:09:21.000000Z",
                'to' => "2021-07-19T10:37:33.000000Z",
                'page' => 3824,
                'per_page' => 5692,
                'shop_id' => "5cb6a40b-f3f3-407a-ba7a-0bea481bd33e",
                'customer_id' => "271ce8dc-c716-49b7-a267-496a1db4773c",
                'customer_name' => "cZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86",
                'terminal_id' => "a069e5c4-b57f-4ea4-b996-25d8c6009908",
                'transaction_id' => "fo8j",
                'organization_code' => "--iE55--f5D851N-akMUy6-",
                'private_money_id' => "6481f61a-2228-4de5-90c4-47010df61e71",
                'is_modified' => FALSE,
                'types' => ["expire", "exchange_outflow"],
                'description' => "7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
