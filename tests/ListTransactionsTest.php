<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84S"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["exchange_outflow", "cashback", "expire"],
                'description' => "CEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOn"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["payment", "exchange_outflow"],
                'description' => "v1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "94ba5d95-cfd8-4227-86d3-ef9ba08c5818",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "expire", "exchange_outflow"],
                'description' => "vBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "h2G20-20--2X-",
                'private_money_id' => "66aa7d43-6573-4c80-8631-59584b34e44f",
                'is_modified' => TRUE,
                'types' => ["expire", "exchange_inflow", "topup", "payment"],
                'description' => "Ri8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "WtANH",
                'organization_code' => "eL--9gGRcC3iJ-9dD---7-YolA58",
                'private_money_id' => "d211449c-405a-4dec-a3f1-6e35024716d0",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "topup"],
                'description' => "V0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Y"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "a034f464-edb9-4506-a6aa-69d4fe189182",
                'transaction_id' => "L0bkCAVqSR",
                'organization_code' => "-A4tF-6W7",
                'private_money_id' => "0c3ab2ad-4d3f-4fda-b106-3453b0deebd8",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow"],
                'description' => "5RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2LPb0nLBvCfu5QWsdUnRr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "H9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQ",
                'terminal_id' => "abe82fa3-1058-4b4e-acb3-8cafc35ed927",
                'transaction_id' => "fMMea",
                'organization_code' => "6KS-3R--VY6Id6z7n97",
                'private_money_id' => "d35dcc20-07f6-4e6c-bde6-90d087e77b5a",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_inflow", "expire", "cashback"],
                'description' => "Rs2DjUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "6f194c6c-e5b6-4a2e-a97f-07edc524739f",
                'customer_name' => "Jgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbR",
                'terminal_id' => "8286f2df-2a68-4e32-8b2d-68aaa28e9093",
                'transaction_id' => "DkJqy1UyP",
                'organization_code' => "-v39jFTlu-XkApk--3",
                'private_money_id' => "56f95536-769a-4d0e-92a6-4e14103c7aab",
                'is_modified' => FALSE,
                'types' => ["expire", "exchange_outflow", "cashback", "topup", "exchange_inflow"],
                'description' => "8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0u"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "8a72c869-59e2-4a76-b690-a6be8c5966cf",
                'customer_id' => "0a403c30-c81a-416e-86fc-648244597822",
                'customer_name' => "LFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp7HiQ",
                'terminal_id' => "46e83883-2b81-43ad-a18d-646a1f208b29",
                'transaction_id' => "pl09d6QIi",
                'organization_code' => "BPV9y-6-",
                'private_money_id' => "39854ec5-137d-4a29-850d-476691523590",
                'is_modified' => TRUE,
                'types' => ["payment", "exchange_outflow", "cashback", "expire"],
                'description' => "wCi2K41MKrJ8u3J"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 1572,
                'shop_id' => "1f40f8f4-e200-4d0b-8719-6ca8e4c6754a",
                'customer_id' => "3dad4fc8-4877-4ab1-b3c2-7d0a1956294a",
                'customer_name' => "qURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfMVYN8tFORiCKaN1GSB",
                'terminal_id' => "1179d22a-4b6b-49af-946d-a373d5f2a36e",
                'transaction_id' => "E",
                'organization_code' => "nBA-g---A--ZH2Ax-Vhu5--4bi--4g",
                'private_money_id' => "354d272f-19c8-48bf-84c5-16969b7cab81",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "payment", "exchange_outflow", "topup", "cashback"],
                'description' => "LSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlq"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 1886,
                'per_page' => 5563,
                'shop_id' => "95a53c4b-d807-49a5-be29-aaa68e864860",
                'customer_id' => "c10427d6-1362-4acc-888b-597d2a0499bd",
                'customer_name' => "J59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz9NdLnaFp0d8NnYZXWwwPUf",
                'terminal_id' => "fe240dbb-b50f-4c6d-99c7-1624e3921f95",
                'transaction_id' => "VrOM4d",
                'organization_code' => "s2--np-w-OxxMf-Ka-6--",
                'private_money_id' => "00f44e87-3f71-41d7-bb3b-640ce52c6d47",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "cashback", "expire"],
                'description' => "SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2020-08-20T17:04:41.000000Z",
                'page' => 1801,
                'per_page' => 2192,
                'shop_id' => "089389d5-2ae2-42e4-a736-ed818ef5ed24",
                'customer_id' => "53d5f8a5-c599-4c45-9ca5-cf92b4f420c9",
                'customer_name' => "lmfbIWBjq1h3aM3MFSn6Z9",
                'terminal_id' => "8a9c539d-2cfe-402f-9898-f85bb2d00103",
                'transaction_id' => "0",
                'organization_code' => "Mi-V-8-5EhX",
                'private_money_id' => "2ee0ef4b-347a-40bb-8545-5e46d1ce1e72",
                'is_modified' => TRUE,
                'types' => ["topup", "expire", "cashback", "exchange_inflow"],
                'description' => "2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvA"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2020-02-03T13:56:07.000000Z",
                'to' => "2022-12-09T03:32:45.000000Z",
                'page' => 2173,
                'per_page' => 2120,
                'shop_id' => "f6068c38-7e55-4959-871d-b25e578a2b03",
                'customer_id' => "fa444761-c0ac-40db-b004-a1aead26701d",
                'customer_name' => "A4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzK",
                'terminal_id' => "d1f3ed43-d9fe-454d-a3f2-484fd07c0e44",
                'transaction_id' => "6Emk",
                'organization_code' => "B06X7ZkR6Y-25--5",
                'private_money_id' => "75d40b66-6980-4733-ad57-0dc1c3815bc5",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "topup", "expire", "payment", "cashback", "exchange_inflow"],
                'description' => "FelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
