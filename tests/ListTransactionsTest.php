<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "0JkMlU3FKBSqBajr4O1vxLqctQaDlI40ektOyF8e3KYQr6tnH2J91niyss7pzWOjvJsNMylcVCs5Vpm3xnSXbmPLq3yEovNuOy0FIgZTG9zJSZJS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["cashback", "exchange_inflow"],
                'description' => "FGnqYTAfBt4gZZ94D7rVpIqcCiRU7pXYS1bmIMYSf1k3f5ft8sLH7wWLC03fHmivEYqWnO5JhVwSUtgiALLWJgxmoh1bLEVcsrRnmOLHqRdki6xbrZkgJ7x1oJpxgnDmu1XkkSJ60fCdPRhg2I7wrb2ualLPCyxC9Rgn1t0leVGnr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["topup", "cashback"],
                'description' => "tllNKw8s1xVwue1fPzPMA8kpLiMA1uI65gf8jUsQjXzNwKnUombmcsjAuspgg4K3obinOuNlPrUkKqxgoHE7oVIWMPud40pPRKatK4EJXzT4Bsp11dHhjacP9qkzDNwDrr1yqUvhWn2UnKsvFEfWqHcQejb6vOLg5KCvwxBvaYXMdhl4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "d25ffecd-449e-48a6-88c7-8835082b7e7d",
                'is_modified' => TRUE,
                'types' => ["payment", "cashback"],
                'description' => "LvEsCYT87wVznTWpE"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "k1DCdB36",
                'private_money_id' => "d6f56fcf-4a65-48bb-aee1-978079f5d205",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "cashback", "payment", "expire", "topup"],
                'description' => "T5Zi0JlAs"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "h",
                'organization_code' => "r1--Nos3-q--06CM92-",
                'private_money_id' => "8e3aba37-79a9-4096-8bbf-ef2d11221ce7",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "expire"],
                'description' => "qXUi4NFWDOCk4lTrBtN3DRBu2utKrAmWX0XDEwhcJei9jkBxIUZHTEHR9vHk9wjvUB3623HEHFdEa1pgMpXjiAl67YH5Za6TGxiJEjm3HZkAOSxMWWiS2wmwhtlWIM2Nmve"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "bf985022-877f-4390-a11d-5159510229b8",
                'transaction_id' => "xdAEapBgP9",
                'organization_code' => "MuY-pc3",
                'private_money_id' => "e3212df7-d122-4f22-a99b-5ebf29d5c8e9",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow"],
                'description' => "YEiqdVMrVl57W1DvCvzkDNpz7IobUHYD7n9DS8eYcIj99nOIKXqMcxiaPYd8SYTonOUUFeuxgChAS88XlOIY6ystjJSfLQwjmFlZhSpvio524OcoEu2hC1eY"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "LOmxy0",
                'terminal_id' => "15e2edbb-36ae-4a6c-a8b2-35574bb1b3e2",
                'transaction_id' => "VORXNG",
                'organization_code' => "-u-rNmBY-0XP77e---f0x",
                'private_money_id' => "becb5733-b908-4e1e-8d64-ab9708257a9e",
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_outflow"],
                'description' => "zYjCGDvz3WK2znDFlDWpe7JNzDVYqITAQY4BS8lvUyjBLvUU1R1Ct8m9LIBFato78ldHzLWKyJhwRk7jl0X8dhcemGENjI4J"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "eedaa38b-585d-4ba3-a05a-f250fd64eb7e",
                'customer_name' => "gLzhr9WeVTz3mH21O783CMCmuB5EMDMb9E9uQ28XXRbtAIM8xnraRpWqSwk7odoW2qHm38vBGLUsIOAuOkE2YIZP9Ssv6IlvADcbTt8QniDhFUEmC8sdyQqek52yk0n2Nb5xlZ8mQvF05illQXOz",
                'terminal_id' => "9031c205-3604-48fa-86b8-82f463df41af",
                'transaction_id' => "PbPLAEg",
                'organization_code' => "0-f-JGJ-Vk91-yp70B1Nk-nl--8hUBRE",
                'private_money_id' => "cc5e9e8e-224e-4186-b80f-3a45adbcbee3",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow"],
                'description' => "pqcULvqkLn9WSSh9wXIig99l4ASvbmk6uhBitDXuRAqPwP2QfblLmIuXafMWqKDo8a4zhy7d6Oe8odqWGMDXmazdM1ijf2vg7xKPmyeU4dw4iEIAieSkEu8JEWigzwe06z6Kk7Z57Xic9knOWmSZ841ZULjJwC1tYbBx6pSDdS6S2cWyEr029uG7Hv7iAV76"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "b6414d81-8bfa-43d8-b992-782187a640fa",
                'customer_id' => "fde055a9-b875-4744-a003-9dfd3d627e8f",
                'customer_name' => "zc8anHNvj6bj0hXkAsKEOF16ZglXzd0FpXuorHtS4Uapxn01krAkyscEtHf4wlqSupTvKnN09fwOoCJkm4HeN34nlOWW9UyZEYlrGEeSbAo1LYEVcedrJvcAn1e0hnjAx9szyz0OHV7zR1vRzgPzlzLwhfbCV12lVQV4bZKpP4uQ2b4c",
                'terminal_id' => "d33b3fb9-c3de-424c-94fd-e0e5370686ac",
                'transaction_id' => "YlgX",
                'organization_code' => "-0hxZ0",
                'private_money_id' => "cb512874-1ff5-4945-b709-903ba754112f",
                'is_modified' => TRUE,
                'types' => ["cashback", "expire", "payment", "exchange_outflow", "topup", "exchange_inflow"],
                'description' => "Eo1YosXRq2LKZ1bTyBgg4kX4VC8zqv82aN4CJS8cjfQsnQNsqsqhd9kLgJj0YcnC7MhEGo97Zcma7zIVoUR5teAK8JuJo2xPj84dsLTmfMOwHqjVQkxwTUVppAs7FhA0flpqF7bKxugZ4fD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 4632,
                'shop_id' => "f7444dde-3072-4e82-a13d-1ea7c03068b1",
                'customer_id' => "204ca45f-0a4c-4fb9-b8e0-8448fcab5891",
                'customer_name' => "DUpZu0prDFt0tIL1trkmRmwSerSO3RT",
                'terminal_id' => "378558fe-b057-4401-b813-1a953a116f89",
                'transaction_id' => "NtI8c",
                'organization_code' => "-FZG-r-X-",
                'private_money_id' => "16a2a6a6-7e7c-40e6-81ec-d20bbd625f13",
                'is_modified' => FALSE,
                'types' => ["cashback", "payment", "expire", "exchange_outflow", "exchange_inflow"],
                'description' => "TpEXrlnMu7uSzimn6LKFz"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 6528,
                'per_page' => 9244,
                'shop_id' => "9bcf5fec-b043-4c65-a079-6faa8a264221",
                'customer_id' => "fb280f99-d0c8-430b-9333-b43e2922f754",
                'customer_name' => "RKkA2TwcCuplEOMqeXLMdvtOWT92qFbg2pQYhHfygMu8ybA65cuPWr8UrDFJdoAcUVbGKwlTcsUy1ibw",
                'terminal_id' => "74068303-5299-46f2-a50d-79883d9db012",
                'transaction_id' => "8t2f8Zlst",
                'organization_code' => "PTi13tuHwS--fj--daRFAdw-",
                'private_money_id' => "d87f1dcd-ae7a-41f4-88dd-79dc45fea8f6",
                'is_modified' => TRUE,
                'types' => ["cashback"],
                'description' => "JG8bYrkUoJPgvPMOThpp3aQClTiZU26Jd0Bk0s41NuEWfdPpquNsSRpYtjzmqU5ftK40bAb65luCFr5Mk8bjaHG9WsfjSL8OkbFVt0JkUpJ63duvFpqA3VgeZ5K05sOH8QKemlDFDzQ2KsgpzTeAAH82sDh"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2021-01-08T09:56:05.000000+09:00",
                'page' => 4966,
                'per_page' => 6681,
                'shop_id' => "61a0cf8e-9692-4740-b230-b30779da4206",
                'customer_id' => "b6f1c335-0939-4fcc-bb1e-ab6bec041eba",
                'customer_name' => "J24ok0YpbnznNNJNuWNxfOYuy12qcRHsd1sdrswrOSKla90TmXTQ2O9CWcoTBLsHSFvMmXYTIPkSvtfa49oH5klbkhu24KYSdSaiGsmqW6Xm1UwTtsAdIMyAxhOV4aJ9BDMjbdoAM6RKMER5zx7MnDQGSLqBPrRdDuriYXdc38",
                'terminal_id' => "6141b85f-26c6-485c-8cb4-d12bb1e66774",
                'transaction_id' => "7KPQnUaq",
                'organization_code' => "",
                'private_money_id' => "96e51b37-bd1c-417c-8580-951e03569d71",
                'is_modified' => TRUE,
                'types' => ["cashback", "payment", "exchange_outflow", "topup", "expire"],
                'description' => "SNkaDvp6Sm8uF2Xi7CfMmZOvEMjNfM6Hm9rY4fFN3v43pLVrUAdWGjZ2ycf4Fwv7KqeTsR2Mw5AjLYN8bJKZstL1kCYPiMqVJis1uLlBD0jKsfdSHBfYh94ziBL3p2apj5kLU2OhkGbuVfPrUBDDnhDQ2CZRQUyhmlDiEowsewhZRADOft1nFj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2022-03-02T22:26:46.000000+09:00",
                'to' => "2021-04-16T10:46:21.000000+09:00",
                'page' => 1097,
                'per_page' => 5955,
                'shop_id' => "60cde94f-0b7f-4a92-9a33-abd41cdd2dd1",
                'customer_id' => "d6ade582-8d58-4e20-b084-bb9888768fcb",
                'customer_name' => "d6sf9eQvtX1awTzzZBeKr5QGhNGwIg185DIBGNQlCikZmHWn6ATKpiDW8qDbGmsEei7DxGUyUE6vlVHVatDzGHrPyHRO8ZZYYy2nwx2lnmYdTSsrxhggPUn6wKITIGfTnRe0PMU5zSHoLCR5HHqYjEbhvhbJFIjwJOJYSp5bNJIZtEc5lx3lWnIii2SVcEJwQYf2jyGrjU3",
                'terminal_id' => "9b1f8549-b3a3-4749-a7a3-00c1a8250f7f",
                'transaction_id' => "2lm1HY",
                'organization_code' => "0Q0dC-lhXOOqA7-b88g--i",
                'private_money_id' => "20bc2abd-d725-4b9d-9bc3-7ff44bdc72c5",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "expire", "exchange_outflow"],
                'description' => "U4KNf8oAo9P6XjSLN0EA5vE8kWzdB0xnOMI45IBbWLNxTdhIbAFzLwfLRk6GN6hV31EoZp0ulD5GlZ8os5cyP8Pe5583jsnBHdTmv15y2irozGx37mL6JmrDwT1f6iVkEE4AKEldLNpjQkLhpHA90IAM7Pp26pM0UJWDUBxzFQn5Dv5GjAaamAUbUW2HSfNPVb1x"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
