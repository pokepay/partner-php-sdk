<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "EI8cjLLBoqoV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["exchange_inflow", "payment", "expire"],
                'description' => "dhKqmTdgwXwMpJw50Q3VTdAB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => FALSE,
                'types' => ["exchange_inflow"],
                'description' => "7hTT9HCzul8iDs8KAJEGJF87JDA6uSd0jxZZsgytd9WV0wcdGbZR5mcKD1FIW9jMXGzKKUYeDLAySV4gboNzfTMfmtIYmACb86jZYYG4AQEE7YldDcYw5vxxcIAfyveQ5PmlpTaUM0LabSmPeA8j5vHTq9eUYB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "d568956f-453f-41e3-8497-639a6c7fa5fc",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "exchange_outflow", "topup", "expire"],
                'description' => "zKam"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "J-jS0XZx--xX9ANBX--50R16-",
                'private_money_id' => "8d620ae4-0237-46de-82bf-b50d54aff0a7",
                'is_modified' => FALSE,
                'types' => ["expire", "payment", "exchange_outflow", "topup", "cashback", "exchange_inflow"],
                'description' => "Cg6cI8OqqzDclIHxJ4kYp5Y1GrAV4hfinhcHTlnLRIFWZGkaygUJKW7BPj5Kh2IVBntToYfhLHYxlMI48p8PqiqKHU7q35Va7x52D8zAMS5dpsSXrrhcwu9y84v0KIozYmNqMU4j4f180fP5c1L5nGfS00wrDtFm6jbMqVAxCFSfj1txkr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "X",
                'organization_code' => "-m--n--4-",
                'private_money_id' => "42f18213-79bf-4c68-bd12-cbc90042591f",
                'is_modified' => TRUE,
                'types' => ["cashback", "payment", "expire"],
                'description' => "f2G4wIjrclsbDSrRpMr6g1byJ6zLQH6XRXfjWfobqzBBH6GPQv6F6elMe4dfdTB4gKnewjIg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "6108cc7c-ff03-4e8d-b80a-61ce9c0dd5bb",
                'transaction_id' => "yfmbE",
                'organization_code' => "lM9b5J-",
                'private_money_id' => "345ebeac-76df-4f81-a3da-102935fa3e2f",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "topup", "payment", "exchange_outflow", "expire"],
                'description' => "5jBfSeBTBvHCxU1NvYfVESMB97pRR1FDoaYRXkvCXPPl24Azk"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "f4IW4knrGHl0TR1xxEjRkzP55FkN9KaqhLJYNFjdQdDPcKYswz1KGIIQxemmGSBfFVG7yS1x9e65CkFUPSZdnC8Nbd0GAMDtpExjAOL9txxvBDq74Zcv4lxbZkZAsxqjGZZnD30rTzVwJllk7AmnUWAZFPyOt3pktOJBQNvyxNd81mETXBAwcDbgRS83ISSTE08jfX2Omd3NMjFlRLJvC6KKEtPK2YiWIn9hnlpuWkv9vCC",
                'terminal_id' => "d66695c6-5ec1-4064-bfd2-0815539cebce",
                'transaction_id' => "gGRk28xaBN",
                'organization_code' => "hAWAlEfiC028L-gWc-",
                'private_money_id' => "830b6e97-a606-443f-a2f0-ad4e56b65b68",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow"],
                'description' => "o6JGjFLLOGZO0oAllJiZr4re6LWLgSkk2ZDUPdz1BhJvWNhb1UlY8gVa2hXfzW4DNhu8v9wZu0fWkZyfAZKnUDFE99Mnwnu5OtOf4ilY3NpmdcwanlDlu0IrmsH8EsDeezi4jYkSH918X0jGAYz0AuaoOoyLPqw51DmjCWv1MDES09bsjDJFkIb5xAqDpTjFMPKMQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "a652adb1-beb3-4343-8f17-34d236fc45ee",
                'customer_name' => "g41h3amcuul1yByCRpmXDgHNBQaoIMR9zPGyYm63xUyy5Lv7oTqtem0CnZ3EEZw55Gboo5hpfF1Hpb0RbR7D8yvhSwIzpaQ4KzL2meWNVVwDgpJqef1CpLupibRMoXLp8MHMfUv2FJIgMo734XdeCG",
                'terminal_id' => "68d4ee13-9437-499e-96c2-c4689ba96185",
                'transaction_id' => "wLeeL",
                'organization_code' => "3WI4s",
                'private_money_id' => "f3458455-807a-4b13-ad09-651f71574997",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "expire", "exchange_inflow", "topup", "cashback"],
                'description' => "djRhGfa0yLPBNXYOJzOncitmbWDPrz6d"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "4c010da9-d02a-4a7a-8f9d-fdb385fbc6b7",
                'customer_id' => "2d95d23d-b1c1-4e60-9ad9-2e654e6d3069",
                'customer_name' => "F76ZwhFQ3FAy9yso4lFSwRswxdTAQ9WC0cvkqgXkR",
                'terminal_id' => "d06e9265-54f1-4672-9dd3-80b26bcd55ff",
                'transaction_id' => "Si",
                'organization_code' => "gL",
                'private_money_id' => "7f942225-c41d-4c91-9d83-0e7a5a9b22f6",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "cashback"],
                'description' => "kWfbEr5omA7L0OesKnaA2925CICFc9Yi"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 4104,
                'shop_id' => "119a56a8-f825-4d91-87fe-825e1d9f2a8f",
                'customer_id' => "8dec7160-1fae-4afc-a214-1046a4e2a0e8",
                'customer_name' => "HuxZx0kErjYhFF8L0s3HmTbCv0vs46AUUu2pfmS3y8rWkeGY78TmLpJkbnvg7derUWKSNpuLl7xZYDZsabSpc0uKpcBQAXHmzjFH8x6CDzw9SQwogUY2AjilRovHayz8YyL84tSBRirOjWywMKpR0ZNHTQzlWhqAUDLyUjiL5h79b8Mq1iCGeBaSpQPD6dBfbbaTLCXXwtnmblF81hLyHqrkno1IRdYmotXWqYy5cWhC8K9",
                'terminal_id' => "19f2ea68-52f1-43b9-8ed6-596b0c2bc7b7",
                'transaction_id' => "eiqBVcclw",
                'organization_code' => "ZBv0-p0rM18476D0-UAj1-",
                'private_money_id' => "dbc6071e-ee6f-4886-b723-5b3318e14cea",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "expire", "cashback", "payment", "topup", "exchange_outflow"],
                'description' => "lnP2oKpAkp8PiItR1sKyYoCMNif5QP3KXDpCVGLWGOHFEzapKvNXPC1CkiwHqFmPHg1nDo4oueFOj023vS0mewatHnea0dCU94sWp47O7C5wT4wYrVN1K9mYldOQjsir5CqIfO5L8Zq3bTMBqwr9Z5qKSziS34atNThxJhMGQiNXxPc9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 8793,
                'per_page' => 1320,
                'shop_id' => "5bea61a9-11b2-4c7b-b42f-cc59261188a7",
                'customer_id' => "9585f239-db18-49df-a39a-601ae0fa8784",
                'customer_name' => "063jeiC0sEMTifXwPUAwxE0V3AioYGgiTWexQGgsWhjEbcteNrFFjyWUeOcoTl6khkqH4OC72gKD",
                'terminal_id' => "fcd6038b-2362-4506-8f91-3603c30c50c8",
                'transaction_id' => "xfd9c8VQaX",
                'organization_code' => "023G7Jp--R-7ZMoNt2vH95t3tIwt-k-",
                'private_money_id' => "746933c8-733c-435e-bcc7-6f01bb4252f3",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "cashback"],
                'description' => "6p9JGwN67nitnvEXl7HTtWDnKgmYJWOFJqIru7u3eDlXpCUVae0iDE64cm6yBcfdcJkiXTqWHPGya4deZm0fSDTtTOJ1ul4n4rd80SnO9JMQZQOi46n24N1Vd6UWqHbjbEB2k2UV3XLhESUPHX6wvpRKl2rU5wN9oKicMImC5FkW3NN6hqssLEbEWPKl9WkWniNMe"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2023-01-22T05:35:49.000000+09:00",
                'page' => 9360,
                'per_page' => 6216,
                'shop_id' => "3e38e961-8bac-4227-ba12-f429ecda3301",
                'customer_id' => "70f3ffa1-8255-4a86-936f-db6554875c46",
                'customer_name' => "UhuzR92flJna3o8lSubVHDQKnCMFBUToCMNtZ6d7oqX5HAjEgFXSsN9r5fYqwBwIeFwCdwWTHBvTSeC4v5viv0SuTrdZ8q3Q4Tuionr4icEoYIZ8TnBORlevStTpTvNkwGTx4XeaHsbnASQL7dNbIjKdxZ4qw5diKtbXpwhzV4pZWBByF0VHHSTDwDvpGuPijQkiZTa2NELJ",
                'terminal_id' => "9e469a82-11e6-48c4-b896-caecf0a510dd",
                'transaction_id' => "kJ0",
                'organization_code' => "qM-fhT--mqzW0tdVsqXb-",
                'private_money_id' => "d2507ba4-9bf3-4860-b585-a5c6131d46d9",
                'is_modified' => TRUE,
                'types' => ["expire"],
                'description' => "yRsnB2locmdC25l11LJOUFzokJVd8OkaH3pU0UTPkjH2EeDBk3SW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2023-04-23T10:30:25.000000+09:00",
                'to' => "2022-10-06T03:08:53.000000+09:00",
                'page' => 4059,
                'per_page' => 759,
                'shop_id' => "f4d31960-e10f-47d7-b9a4-441b8cb97957",
                'customer_id' => "f191d142-e7db-44a1-b168-d0c22dd19c73",
                'customer_name' => "sdQo5TGlUVEpfdZcZJP7Ea9bKCEuCZ8sxLvuEzvUjczHKQJ2OEy7zncPwNBhQSRj705CVd4KAEoApqec4dEMKO5v8HWsixFIF8iFDKY3dOtpIK1j0atj5IE8OtyLejHxzmskBv5sCGJVI5vigrnBOvsvNbTMAapoK9cesWNuBTobNIUTM2MqFf1wXtcs0hGfv7Mj342OhHjs52XI9OKxIYAe1odvgMkIbgg9tQV2tX5VlEtOvgX",
                'terminal_id' => "ad87f041-14e9-4731-80ca-576f1387342b",
                'transaction_id' => "vlinmF8qXh",
                'organization_code' => "-w--7g9uhM8",
                'private_money_id' => "a5523875-8a3c-4201-ae45-5d35979c4c02",
                'is_modified' => TRUE,
                'types' => ["expire", "exchange_outflow"],
                'description' => "xT1hjIB3fppTw7PI6djkQm8QO1knSl3QgsavXpLvUzXwfBc2NAmqBiiUjxGuutIttifWQdg1mtC4VYuGN7COPHcRjPzJyNNlPvzxgNBAx3CrIdIQ4A6upZuluJRm2nGpQyVF10EF7PaNv8ZkW5JwYZcZzH1gITdb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
