<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "F4fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["exchange_inflow", "topup", "exchange_outflow", "payment"],
                'description' => "kjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClY"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => FALSE,
                'types' => ["topup"],
                'description' => "jLV6mNckmXW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "a40cfb3f-af62-467d-b6e3-c1af51828844",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "payment", "exchange_inflow", "topup"],
                'description' => "EvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "ig--4-fcSL",
                'private_money_id' => "aa92f50d-93f6-40a2-9803-fed3e036e42f",
                'is_modified' => FALSE,
                'types' => ["payment"],
                'description' => "KMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "0fb67407-43e3-4511-8399-d1974a85b8da",
                'organization_code' => "F--Z-5I-1mh8EC-B8-ZcAV-",
                'private_money_id' => "efd2a76f-9ab7-4890-9a8c-efcd17be6265",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_outflow", "payment"],
                'description' => "Rh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2Hwa"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "8e458efe-91de-4e56-8fd6-ded7b78bb2c7",
                'transaction_id' => "2f6339e3-904f-4df6-92e7-a2fe07d2701f",
                'organization_code' => "qh2M--2-9BgDQ-L41a5t16640PHY",
                'private_money_id' => "e4fae6f0-0800-49c7-8372-bc4f3be9d20a",
                'is_modified' => FALSE,
                'types' => [],
                'description' => "VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXw"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "mFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s",
                'terminal_id' => "afc82730-867d-4fb9-b384-fcb2f9f13d44",
                'transaction_id' => "50349298-229b-4cb0-b75a-2dca7e16a0fd",
                'organization_code' => "H64O--QS--G-q--P-6",
                'private_money_id' => "a259373f-52a9-4586-ac65-5cab84228a3c",
                'is_modified' => FALSE,
                'types' => [],
                'description' => "Zr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSq"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "6d04b015-9c56-403e-82c7-808b9a0345fd",
                'customer_name' => "p3Ank6BTTvgxHzzgdLIxgPMdYrCUs",
                'terminal_id' => "90023026-69bc-407c-948d-9e11135456aa",
                'transaction_id' => "3c5fe1e7-910a-46e0-b704-41ed5d3c1c46",
                'organization_code' => "67",
                'private_money_id' => "694d2edc-4dab-4d19-803b-cc69c379a756",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_outflow", "topup", "exchange_inflow"],
                'description' => "qahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "5dae2af2-ebf6-445b-bad7-fa3b475d913f",
                'customer_id' => "6e68a055-afa0-4f82-886e-1001fd307d6b",
                'customer_name' => "7KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5",
                'terminal_id' => "fcb66ced-3d2c-49c1-9b8f-2546816ea216",
                'transaction_id' => "dd584a5e-f8dc-4441-bd3d-39c963bad19c",
                'organization_code' => "3So-gBis-Dk--zO-olBuG-7XhI92-qH1",
                'private_money_id' => "6033af2a-2850-4426-a6d7-1d4450a2086e",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "topup", "exchange_outflow"],
                'description' => "peMsqUtDBV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 2023,
                'shop_id' => "97f940b5-bbca-4005-8ed7-c1d0858659c2",
                'customer_id' => "3a0776c0-7bfb-4a70-bad3-1800628e550a",
                'customer_name' => "tetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIP",
                'terminal_id' => "51efd7e2-6f9d-4bac-a9cd-bf5d5db4905e",
                'transaction_id' => "29a3eaa3-231c-451f-a8d9-faec39ca81ad",
                'organization_code' => "nI-s85b-BLd-6dCV-0Brcq",
                'private_money_id' => "64ce4fd5-e801-44cf-9412-9d80b97a29bf",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_inflow", "exchange_outflow"],
                'description' => "7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 5497,
                'per_page' => 9594,
                'shop_id' => "d03d8be0-1757-4c89-a30f-613e284a8ce7",
                'customer_id' => "1316862f-53a1-469d-8092-487bd5226a40",
                'customer_name' => "vBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMPlYYA9d24g2qlkQeuW1v6Ot04J",
                'terminal_id' => "6dff4f01-af6a-47d2-be74-c8e0d4ef07dd",
                'transaction_id' => "3d08c424-18a1-42a9-9ecb-b85d1e6e884a",
                'organization_code' => "-mdp-X7--l-6Y0rQy1",
                'private_money_id' => "dcc480ac-5d41-4298-b474-fb4dd4432d13",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "exchange_outflow", "topup", "payment"],
                'description' => "CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84S"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2015-12-17T05:32:38.000000+09:00",
                'page' => 7262,
                'per_page' => 5704,
                'shop_id' => "e82469f7-3983-4b97-8190-f22ad3a9db2e",
                'customer_id' => "96c233c3-1fc5-4268-96db-2f9cd23b3e6f",
                'customer_name' => "VmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdI",
                'terminal_id' => "dd96efe5-4be1-4cac-9dfb-e509011991c0",
                'transaction_id' => "d1842a47-085c-4c74-a49d-097989f0e19d",
                'organization_code' => "l-UB-y5Wn--5I--9u393gS--s3",
                'private_money_id' => "fe6213e7-e07d-4a7e-adfe-2cf43ac6f070",
                'is_modified' => TRUE,
                'types' => ["payment", "topup"],
                'description' => "uBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0ac"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2017-06-11T03:38:01.000000+09:00",
                'to' => "2015-11-22T15:59:25.000000+09:00",
                'page' => 1622,
                'per_page' => 1059,
                'shop_id' => "dd17bced-76aa-4cc1-82a8-c1450ce3e6b9",
                'customer_id' => "59b79ec4-2f57-4974-814e-a4206a752548",
                'customer_name' => "5sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqEvt",
                'terminal_id' => "c0716dc8-7e53-4bed-a5df-c42ab08daccc",
                'transaction_id' => "9bac8fe6-e33d-40db-b67e-67e70c3ab2ad",
                'organization_code' => "10-7--Wn--w1A-43n-n7u38w9q",
                'private_money_id' => "ace6436e-314c-4242-b6c3-8ce6c180cdf5",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow"],
                'description' => "WsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
