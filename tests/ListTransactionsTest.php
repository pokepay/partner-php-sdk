<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "aKVwY3NNc5PExzaN2MS2U9WruTliuckdyREt41Tf4RbyvFydCt2sEFzgnRm6NDLQswbxadg9hjZlRqW7tCqMNtjzqV6qbMt62sKAXWriO1rncPvkJCWtIV8rZHlzo07F5suQ0yMieqNAnMsv4291bTKd8PpkE1cw7n4nr19r5HhEBWHVcWBuLVtew"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["payment", "topup"],
                'description' => "JZ1OnOyFGK4IbDpV0LNqjGJ512FsEs7vlKdUJ7DyA3y6aGY0TOn8TgsPGQxt7lmWB8WwSmFfCxkDsb790CjccdJ7XNakYeHAJDL6tfMXEXDfv4mOksKRIaYcOnKGfC03r7xpuLhwQcDwE4Rcv1BM4PKCjJHfWtreTRVzd6WboI38lRFemfEPUTg83El1tNPbFNKxCSRB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_inflow", "cashback", "topup", "exchange_outflow"],
                'description' => "XlzxuIwfdNv3NJIRhtduCYHBFG6tXofbqmiZKZzMMsArN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "d47e6c4b-a257-4c48-8f9a-b728640c6d14",
                'is_modified' => FALSE,
                'types' => ["cashback", "expire", "topup", "exchange_outflow", "payment"],
                'description' => "QBEOWaH2CP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "c-N--1H-2--0ts60H-yh2sBhc-A",
                'private_money_id' => "07fbb965-c06d-438c-8c01-6814667dbef5",
                'is_modified' => FALSE,
                'types' => ["cashback", "expire", "payment"],
                'description' => "mazhleelXkndKFcOup9j94YxqtsR1e4fPPXPFISLiczB2JaehVUiiYBneydwAMtDFkhcONtyztOpPnfT8wWuw177Oo1J9XYv"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "P9T2Evl1C",
                'organization_code' => "W3Oe",
                'private_money_id' => "e1224ca1-a60a-4231-98e7-a3f77d38b48e",
                'is_modified' => FALSE,
                'types' => ["payment", "cashback", "exchange_inflow", "topup", "expire", "exchange_outflow"],
                'description' => "uhtssz0BfRGe57JYCnHkqxMD9ZGSBISNmIhoeqwlXZXXitVlWeE3A3DsgQIzAvh5XdyZ4fpkpvhbaF0qhwn4BS8upKXV787UFUGsYdSMLSx6vwfm21jqrgmFmX7w9oFnA1Hv0pS16Ewc0OCU6SPDvSnZpYwykYp9X2W1lUJa4hkDyw89NpOkdJYNTNYC3gYzIYCxzRu"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "1ed885f2-4e40-4455-8139-c07e428dec85",
                'transaction_id' => "j",
                'organization_code' => "-z0-Y99C0LwG8iI8uRY130v",
                'private_money_id' => "b7449c36-9ec0-4c15-96e7-eee30ac4e932",
                'is_modified' => TRUE,
                'types' => ["cashback", "payment"],
                'description' => "gr0PuNeTZDJ0cszox1mqmDa94Yn0EZO5MiE2QQrT0l3xocdlV9jcNIYrGtslXar2nlDhWvtsuryhx7QpdgqjjvPdNF7JQVuNKCms7r1OZtGUxjq1v74UgX6HmUlVVxTQ7QBT9ONuRiU2IUTE39TsIbrrOVaD8IGJ9K35nqgV3wblrPqZbJPXt2Ks1Br2c4Pby1Af"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "TB48MsJRUkEQIiz88a5fJwSkKVAc8g1oieM5JKlPAmPsclR44kCTZ1jtOc9Cgd61FmfuxLaLUDYm4GUTa2TrJbR6E5qloFil4VytxPuMzHrSSdb4WNHnGwJK0AvGxA9nVi7S",
                'terminal_id' => "813010d3-e2fe-497f-a6f9-d7d285de7237",
                'transaction_id' => "VF",
                'organization_code' => "8H2Tbs-V",
                'private_money_id' => "fa36c045-7a57-4cd1-be4a-af6ba7937395",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "topup", "exchange_outflow", "expire", "cashback"],
                'description' => "erEZ1co"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "3528a16b-1af9-4073-ad9b-425a6aaa3bed",
                'customer_name' => "yrfFr8T113i5AlNI34yWnYau9QL5FN7Nlv0P2QmInxcMq4Z0dXFSsdLggmiQcKurCijZl4UdTy96fYw2UefYJ79VKELEwxIlRlrLSMDfl5z3nUxlOAYRzwSfZjlvj6Xhc8mqwkPn5SDI44L0y2viZQVDYhU0OOOyXgBtIJ",
                'terminal_id' => "15272a53-6d56-42db-a132-0683c40e268e",
                'transaction_id' => "z3FW9rdC",
                'organization_code' => "KW7-Ws38-",
                'private_money_id' => "884a785f-fb53-47cf-88d8-bc0cc663daf6",
                'is_modified' => TRUE,
                'types' => ["expire", "exchange_outflow", "exchange_inflow", "topup", "payment"],
                'description' => "PmDePccCEK0X9dxB5v9K75lwUastcK9peuE7G0tGprJQnBFMJEkp6hUAov3gPQtEe19vkjWFrapZjWTl4UBFJgzCgnWlM301sXaCVTjyJJIclsy5o27JWejhzKqdr7EbMMIwYuqrTZE9VpwyoxKlQRoGQxzBFo1hSA0Oo"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "2784e5e1-f77f-4cd5-8586-3be4eab790f5",
                'customer_id' => "a0527322-5f1c-48f2-96f9-69da4abf39d6",
                'customer_name' => "Tn3JVv4KrEIyMC4mcJQzk3bhUbtonfSS6kChiTivlKQCxe04uOTy4dATYky9NJbCj0jlZ3GnyiPjX5WgenXNxzYWQpN3nbvMEAHKKkWqpAzebd72CpAPaGedlzvNdHstl8zeNox0Rp15MHwJhnFI4JSeG3XUJfwyuH9btw6RZlFkg6EotJshLa2LMnQhWOsLs2DpRZSFw0XdSarjXZp7qTB",
                'terminal_id' => "0607611d-6e94-4006-b953-72d9db895300",
                'transaction_id' => "Z8NYax",
                'organization_code' => "4J0e5----0ED0j-Jb",
                'private_money_id' => "25fd88ae-da21-452a-bf61-3d0d210062bb",
                'is_modified' => TRUE,
                'types' => ["payment", "topup", "expire", "cashback"],
                'description' => "PBZKmBgwzfGa7dXHWsknWMaMlxxggP92"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 296,
                'shop_id' => "e41a80c3-fa3a-4482-8de8-f043d40f6441",
                'customer_id' => "9c9bdca0-25af-4b22-9387-d033d4d050ea",
                'customer_name' => "Y8SBHN27se0IuytEVcxUGKv50cgSHfQeGqwKPsXixZyxhBzGnD8DUHVydhsGUEAnzfvAJlHhm6Tl2hPzp7f5cnPyS5nCyMuLwtp7Te5wrrTiDY4hUVG2bptJk9Ctyuwbx7oVp3j0MgcuUqMGnKf5r8eg4LvLW79madIdW8KobqgK2HOw8TIkYqJ3nhCM9hp8CgWi5zo1Z",
                'terminal_id' => "6056ef78-61a7-4c69-8af2-5e07964c8b32",
                'transaction_id' => "cXDzK2aob",
                'organization_code' => "0",
                'private_money_id' => "66c69a7c-eb11-4928-98c9-9fe6451d49f9",
                'is_modified' => TRUE,
                'types' => ["topup", "expire", "exchange_outflow", "exchange_inflow"],
                'description' => "1x3uuz6Ehp7UqIgNyQQIwlldTdIb2PxeA5Ga9mYOli"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 1364,
                'per_page' => 5677,
                'shop_id' => "4f7022ac-e9b0-487d-b153-80a207b9bb53",
                'customer_id' => "a8e53977-f0f9-4a46-b523-14987c72affb",
                'customer_name' => "L7ICbLGnHUzEoHozXvmBbVHeuvP708j7AdD4z4LHpLCsCzail3uI7HlWHY6yRZaQmXl1igWbAiQXzRxIUoNdnRWKNhxZ68ehD9sJ51MfM",
                'terminal_id' => "9038cb61-bfd7-4953-a236-a179582b8d69",
                'transaction_id' => "ZnO5",
                'organization_code' => "55-t-X9",
                'private_money_id' => "d7e70c62-4cee-448d-8deb-b7fe045eabdf",
                'is_modified' => TRUE,
                'types' => ["topup", "payment", "exchange_outflow", "exchange_inflow"],
                'description' => "yUaJbABa0L"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2022-06-09T09:13:44.000000+09:00",
                'page' => 6955,
                'per_page' => 9730,
                'shop_id' => "ce41a853-38b5-44e6-9f07-a52a6c6e55e2",
                'customer_id' => "17848807-edb2-4c12-8ae7-0e0ebedaea85",
                'customer_name' => "9f8AbzjKyW3QQzCCj6jaGiCVBqPihEXE3PmVS5tDu6Qec4Solz2K7nmPExX1DCmf1npk9tFWtcZrXgCMOi7rpb7rD7Yert5o3XNipRrjmcSd6thdycLJrlMB",
                'terminal_id' => "c95437ee-876a-4e0d-98b3-36868864bfbf",
                'transaction_id' => "bjx2",
                'organization_code' => "N-SL0BV3Zshk",
                'private_money_id' => "2fb2ad7c-e410-478e-ad19-7754cbe45ba3",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow"],
                'description' => "k6WKqz2uakI2xt5TDqq5xXOplO6IKX79mCMvjK4FaIhmUibWVyyWpbzOLWhjpbNSav8akTUcscLtT0GzGH6VHDw5Cqaq7sN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2023-12-18T07:53:40.000000+09:00",
                'to' => "2023-10-04T15:02:04.000000+09:00",
                'page' => 5552,
                'per_page' => 2963,
                'shop_id' => "9e1db161-19d8-4187-8815-454251870891",
                'customer_id' => "60716908-e118-42a7-82e6-ba62905dd044",
                'customer_name' => "NEyhEGrbNXTsmHhhdvk5gkKJR7HrcXGpvp1a8wKVnwtqGzx95ncSIVVaOnd5HoAt5YI5IegkKtoj3tg4o5XPUeHdTIjEV7b3QC94BkImiyW0AiAYLMhYhExtktg4DQYVIkTU6FEs3qgvNCBMNDhNjrBMYtD5PQXieWvizJUobhoxCzdtoEhmEmrsu3MKFEDk1Omzwsd1HzU9DLrSFhgZ0WbKPJJu9EEbLUwnYZpdgcCvuy4RdR5rZgSB78wvl9Nr",
                'terminal_id' => "b849e079-acf7-4cd1-be38-4322de8489f0",
                'transaction_id' => "LIM7Q3nZ",
                'organization_code' => "P----0w-ys--Xdv-19",
                'private_money_id' => "67c29725-3d3f-4bd9-8e55-bb2f0bbb94c3",
                'is_modified' => FALSE,
                'types' => ["payment", "cashback", "exchange_outflow"],
                'description' => "ZhenhLIB0QFvotKB0tYvBpzpav30L4nBbgCvqQ5Tm2YkmjGny2d1p7vJgkShsmtnQ1v6Txg752sYVs8ob57nn3KhdjjGRVXew1Wx5LEw21wL5GUS32fwBlN1UZX24O"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
