<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "S6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6r"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["payment", "expire", "exchange_inflow", "cashback", "topup", "exchange_outflow"],
                'description' => "1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => FALSE,
                'types' => ["cashback", "expire"],
                'description' => "m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "3746b7a8-ba32-49a7-8c23-864b276dad1f",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_outflow", "exchange_inflow", "expire", "topup", "payment"],
                'description' => "u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDx"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "RB2B-lG1---24T02U-7P7-",
                'private_money_id' => "b0bfb75d-e226-45a8-b75d-773d0511463a",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "topup", "payment", "exchange_outflow", "expire"],
                'description' => "4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "7aG3",
                'organization_code' => "539R98i843-AG8z0Y-mSWRJpV--",
                'private_money_id' => "58b06de1-43fa-4f9c-8f60-f8a9ca405aee",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_inflow", "payment", "expire", "topup", "exchange_outflow"],
                'description' => "ADkHpYoJtK8deELoxPb8vCqW8Zrq"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "eef4d2bb-71e6-4b4e-bea7-3aa4dd138cff",
                'transaction_id' => "GAkbzmAISc",
                'organization_code' => "-C59P5SpCp",
                'private_money_id' => "12317a12-9c61-4525-baed-becbbaf1ce3e",
                'is_modified' => FALSE,
                'types' => ["payment", "topup", "exchange_outflow", "cashback", "expire"],
                'description' => "vI3TLRDU2wR06"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "BrqE4xR4GA8B6QEvmEtQ",
                'terminal_id' => "f45bd711-8054-43ba-9c0f-3e98702caff1",
                'transaction_id' => "fI",
                'organization_code' => "--5K--1YJs-9-52-Kz4h14i-eY-9",
                'private_money_id' => "96bad78d-ad2c-4b0f-9caa-03294ae5cc2a",
                'is_modified' => TRUE,
                'types' => ["topup", "payment", "exchange_inflow", "expire", "exchange_outflow", "cashback"],
                'description' => "EVrOM4dkj0diMGxwkBMFBNKhTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "171ebc56-0c05-409e-bdea-da62c248bbde",
                'customer_name' => "9UCbPcY",
                'terminal_id' => "2d0f7cf8-4cc0-4eb5-991c-8658dfb4fe02",
                'transaction_id' => "YOW0oa5SUO",
                'organization_code' => "5-R3i31N--Gl-6CPy-",
                'private_money_id' => "b2d00103-db70-4630-bae4-a60b204c7059",
                'is_modified' => FALSE,
                'types' => ["payment", "cashback", "exchange_outflow", "expire", "topup", "exchange_inflow"],
                'description' => "2HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "e056e313-a628-41d4-a8f8-4a084de31a72",
                'customer_id' => "30da325e-3e1a-4fed-89a5-b2d0d10af684",
                'customer_name' => "2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp",
                'terminal_id' => "5a6d8132-1169-4c10-a258-500b7633bafa",
                'transaction_id' => "ZD",
                'organization_code' => "R6Y-25--50-XFc71-",
                'private_money_id' => "3fdd3d0a-83e6-46f5-9646-38866209de65",
                'is_modified' => TRUE,
                'types' => ["cashback"],
                'description' => "Ayi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7Ydoyh"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 7287,
                'shop_id' => "5d0da4c9-e74f-4b09-8ccb-12393a12eab6",
                'customer_id' => "66166123-faef-43d1-8a3d-93979b0a027c",
                'customer_name' => "vpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvP",
                'terminal_id' => "ae340a84-f2c3-4cd2-bbb5-49490f0c4d13",
                'transaction_id' => "YZhX71qxxC",
                'organization_code' => "-92q",
                'private_money_id' => "acd12850-5c10-4c02-8abf-087f75eba043",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "exchange_inflow", "topup", "expire", "payment"],
                'description' => "DRxcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2Ln"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 9040,
                'per_page' => 7835,
                'shop_id' => "9aeaa147-8a25-424c-b0b9-3ef2bc2f1781",
                'customer_id' => "73214ef2-5f96-44d2-8a96-b6984431a142",
                'customer_name' => "aBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51r",
                'terminal_id' => "cad91eca-ff0c-434c-bce4-2ef73853e632",
                'transaction_id' => "tQf",
                'organization_code' => "",
                'private_money_id' => "1b368cbe-c24b-466a-a517-c247951e5dae",
                'is_modified' => FALSE,
                'types' => ["topup"],
                'description' => "alhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98V"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2023-06-25T00:31:44.000000+09:00",
                'page' => 2640,
                'per_page' => 6248,
                'shop_id' => "195604a3-19bb-45ed-888f-e99933747763",
                'customer_id' => "15cbab96-7008-4b38-b0fc-29ae27c00c53",
                'customer_name' => "7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTi",
                'terminal_id' => "dae37824-5a73-4d55-af23-c8b7a125e08c",
                'transaction_id' => "JGahMN0ps",
                'organization_code' => "y9mI3Tb6h5h7-lq51gZ-z5--H-r8",
                'private_money_id' => "b4c52131-9ba4-4060-aa7d-979396786e14",
                'is_modified' => TRUE,
                'types' => ["payment"],
                'description' => "XAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2025-01-05T22:01:15.000000+09:00",
                'to' => "2023-01-10T10:30:00.000000+09:00",
                'page' => 149,
                'per_page' => 6468,
                'shop_id' => "62ea025f-0b77-4d31-a487-78af949c22d5",
                'customer_id' => "34a319ee-2eb7-4e1a-ae5e-d88abc3e703d",
                'customer_name' => "naTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRc",
                'terminal_id' => "3ef1adff-27d3-49a1-a645-a9367fa83d28",
                'transaction_id' => "5QH",
                'organization_code' => "j7-W9-Zxq-I2FPaS",
                'private_money_id' => "0b63b0b5-aeb4-43ab-9a73-a3629cab16c3",
                'is_modified' => TRUE,
                'types' => ["topup", "expire", "exchange_inflow", "cashback"],
                'description' => "W34z4jE8W9hhkpYWEzZLn5uyvb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
