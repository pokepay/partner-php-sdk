<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "eaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSq"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => [],
                'description' => "3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["topup"],
                'description' => "QYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "40c0c1d0-59c2-46c0-bb70-f1fa7723c9d3",
                'is_modified' => TRUE,
                'types' => [],
                'description' => "Kx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSF"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "bhtDRbU7-a--Qv4rj-2-18Ej",
                'private_money_id' => "b4c1c0d4-27b4-42a1-af30-8d49a6d59abf",
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_outflow", "expire"],
                'description' => "sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0Yedj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "9710a841-20f4-429f-8168-c17b1b169421",
                'organization_code' => "m0PO-jZqVz52G0z9Zs",
                'private_money_id' => "537b1d89-a0b4-4c8f-bbe7-a132094d3e71",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "exchange_outflow", "payment", "cashback", "expire"],
                'description' => "W1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRMPV8lVcOO1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "9771b1f7-5d32-4cc7-97d3-12e8c7e7a98b",
                'transaction_id' => "d732f05b-d31e-4ecd-ae86-61d1f844d678",
                'organization_code' => "lL5U18-tw7--UchiiFa84Hj--9",
                'private_money_id' => "aed21271-1579-466a-8451-014350804076",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_outflow", "expire", "exchange_inflow", "topup", "cashback"],
                'description' => "Loht"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6q",
                'terminal_id' => "09176af8-cf6c-408d-897d-8054f41d78fd",
                'transaction_id' => "8d7939a0-f115-4d67-bd08-408e9a14a861",
                'organization_code' => "-PQYVruHv11eB6w--EN--Bi0Igkg-wK8",
                'private_money_id' => "f4b0868f-854c-44d1-a043-d9eed6abce36",
                'is_modified' => FALSE,
                'types' => [],
                'description' => "pPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "8498e40a-af35-4899-a8df-b7071d5c0fe6",
                'customer_name' => "4vi32RsgmtpDzruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xb",
                'terminal_id' => "488e2785-d9e4-4c8b-afc2-d80dbb360dc4",
                'transaction_id' => "c34bfa2e-9bc5-46aa-b6e4-3a28f9edd396",
                'organization_code' => "6mE160SXN",
                'private_money_id' => "71fdf319-3dda-4a35-b8e6-9f7a851e6575",
                'is_modified' => FALSE,
                'types' => ["expire", "payment", "cashback", "exchange_inflow"],
                'description' => "AlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqEvtHSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "57a1079e-6f52-41cb-84df-515ca23018e5",
                'customer_id' => "13cfc56d-4b03-4aff-bd9b-b7bd01b81597",
                'customer_name' => "YdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixLpvflY",
                'terminal_id' => "6e0e613e-2097-46b8-8dc6-2cd9634f4bda",
                'transaction_id' => "b67bd6ca-7d97-4c20-b66c-97bdb07ca2e6",
                'organization_code' => "Y03-2UWgF9A28O1-",
                'private_money_id' => "a4d353cb-7c4e-4de2-bec5-9ea434ece743",
                'is_modified' => TRUE,
                'types' => ["payment", "exchange_outflow", "topup"],
                'description' => "Uv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 9436,
                'shop_id' => "c87f0487-4712-4c70-9851-2d13add88c2f",
                'customer_id' => "0d6cc9f6-f74c-462d-a53f-32e2a156bce8",
                'customer_name' => "65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPaGHVkyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrV",
                'terminal_id' => "d098775d-b66d-43cd-9137-0e3dff74b5fa",
                'transaction_id' => "1ea2c4d1-3a66-457f-b46a-45b1bf3c8d58",
                'organization_code' => "E-751jH5TJjmR--",
                'private_money_id' => "47ef94de-66ab-466a-a305-042bc4aacc8f",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "payment", "topup", "exchange_outflow", "expire"],
                'description' => "gDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 6276,
                'per_page' => 1213,
                'shop_id' => "a344e1d0-5f6f-4c6c-bea9-14fec42d5e73",
                'customer_id' => "7e433225-4a64-4003-a27b-9e7296bb7017",
                'customer_name' => "xUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebY",
                'terminal_id' => "7f35485f-53c3-4f41-bf9d-9e33b1d415f1",
                'transaction_id' => "93cc8961-0be2-42f0-a8fc-6d79e7879700",
                'organization_code' => "",
                'private_money_id' => "b89dc1d1-c5fa-4b0c-9cdb-20d01edd7a9d",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "exchange_outflow", "payment", "expire"],
                'description' => "mp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2021-11-24T12:12:03.000000+09:00",
                'page' => 1498,
                'per_page' => 6534,
                'shop_id' => "367806f4-330f-45a5-9195-2ba133f57846",
                'customer_id' => "a4aa801b-fe9c-414f-9f3e-a4d29efde369",
                'customer_name' => "CKaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRl",
                'terminal_id' => "bed23e28-88f1-475d-ba4b-d807e81099a5",
                'transaction_id' => "0eb2777e-c829-4aa6-a0d6-13621cb88acc",
                'organization_code' => "aQY-mSWR",
                'private_money_id' => "1c7ce23d-7a89-47b0-af3d-1f155407895f",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_inflow", "exchange_outflow", "topup", "expire", "cashback"],
                'description' => "DRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKq"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2017-04-06T22:34:39.000000+09:00",
                'to' => "2023-02-26T03:46:48.000000+09:00",
                'page' => 5846,
                'per_page' => 736,
                'shop_id' => "c26dbdf6-2cfc-4d49-b354-86cca5dca2d2",
                'customer_id' => "95eebd05-2ec4-4516-9655-6ab280cc1f8a",
                'customer_name' => "wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz9NdLnaFp0d8NnYZXWwwPUfmYGEVrOM4dkj0diMGxwkBMFBNKhTrrGkGVnz7dW1L5JRcqW",
                'terminal_id' => "6f7b183b-023b-440c-87da-416fdf201bc2",
                'transaction_id' => "8bef939e-07ff-412b-bfbf-23374b9eea60",
                'organization_code' => "ce5-o-6v-Mx23q-VjaV0fI",
                'private_money_id' => "35fad67b-5992-4942-ad52-b9b63d5cfc1b",
                'is_modified' => FALSE,
                'types' => ["expire", "cashback", "exchange_inflow", "exchange_outflow", "topup", "payment"],
                'description' => "Qf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfbIWBjq"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
