<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "mPZ6EOOI9k0v5qphoHq8zNjZs3dQP4walfaGtXaOALu4X1fUn0EV2TMlSRH97C1IhwVV0iVl7yZpEQXMRfPeoYMiBoDLIS8O1rblqS36CqSTXUp9AelonFTE38oijcT34dZnSIYuolbxZxgXa2gwMKZgwSJ9Xduit4W3QDRQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["cashback", "exchange_outflow", "payment", "topup", "exchange_inflow"],
                'description' => "ZZ81eZIkIUyTmySEJkpReFuUd6ZTbIPosUEQDc0ZNV52VW04R5ZVEaNFhTPy2Z3Bl7HVbkNRVuBu9oPnBrxrlEfPclIMWJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_outflow", "expire", "exchange_inflow", "payment"],
                'description' => "UTp8SHjdnlDVuWGRnKZzx8a6pGKobPpRrpsozQAnkDnydsNfWZzXyKp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "c80740f7-1231-41d0-b956-c1bf9ef9ac6a",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "expire"],
                'description' => "GyDfceXbs9doxg8zLevrt0l2WpT7LowVdM81Y7uK1uSRCU4UiMf29mz7Jyu4ezNBz8uxFlBLNikoOWLFDLOD43zGAMCX21Cv98QvhMEPEHqdhUY03HxUb7SmJtlrW8JmttV2VdZYEsoIoPSvJz1KrOGBz5J0uvz9kgw20JdqhPr5xxU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "",
                'private_money_id' => "36680811-c61d-4746-aa13-97e3880afe38",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "exchange_outflow", "cashback"],
                'description' => "zVxtFu8mpM3tOuMqcxthvZNn55HlzQ1lu9cnQ3DcJLg4CNf5tt4rI4Miy159CaHluo17n8WpuC0EHah1utn7PE5gO4cNly9aJjpkeiaGJkfgNiKmBjihNfZM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "qSqsPw",
                'organization_code' => "----7-2WU0---HS-iPJ",
                'private_money_id' => "874a8c94-ea35-4938-8dac-65bad86bb72d",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "topup", "cashback", "expire", "payment", "exchange_inflow"],
                'description' => "jd9mUWcXUdGw5MWsmSzBemJMbG9jL46vPROp51a4WoEhkJCwpdx4s28q5Bt7qBp7H95r8e2KAgBB0mmxZUxQIyb9Z1vzVDfdufOsPtykKjiD4kibhQuQ1wf3l7EwJNtqYjmpGu3dGEPLeUxWgM5YCaEyrXSNAieuRMD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "80dd76fa-8258-4bbe-b7c2-7741c1247fc3",
                'transaction_id' => "ne6y2sBGD",
                'organization_code' => "-3K-7-4r40fS16as-8",
                'private_money_id' => "f4d62ed7-7472-4b18-b930-dde50479db91",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "topup", "expire"],
                'description' => "RQBJONnrdvWENWGESLf6e80aphnjfDmWPlSP3E2UEls9oLBRI0aFgG7rfRjdI6lxM9Hq0Mdri98msB610Ctjq5ANv3H1g2LSdTgWyY6yQ6LB1fDX6Aweyp99E1U13Ui7heRpQd7JkPL3SgiVAzHuQsWflMSQsXM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "Xef1mUHMPEnZYQ0qwnIpcNt1oBV7u5N3RMa9VPVvck2N9HSVTHeBBaARpN0oaBUJ5jfa88JOR0aiizJbqMWG7pmQ2nsR1fKTZutRy3WCGkdazJzg4IzBW7AA4cb3hEfp52OnXPBYzRtaLxS3HlV5RhWJJ9PkOKquFRsvxohXkvQFJxAPltYtc8XWZnkbSKrvvFFntGvXJR7Z6",
                'terminal_id' => "c7cb3ddf-69a3-45f7-874b-069c3cb343f2",
                'transaction_id' => "r7KFv",
                'organization_code' => "I08",
                'private_money_id' => "ed253c99-1422-4c23-b184-031f7e91f8d2",
                'is_modified' => FALSE,
                'types' => ["cashback", "payment", "exchange_outflow"],
                'description' => "VmrB0uZFVFUX41X519RDNm0yliyCOn2gPIg2t5ctdSrRGIRf3pVhk1Dm7USnjn531OBUC0HnbxhH6K4bItdPJZuKjvAOiQuqz05veYnZdZmBx9mWZhuyv01uzUIGdkPcz3w"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "632fa4a4-aaa9-4bda-99e1-99de8529cefc",
                'customer_name' => "c9wW9N6PPP6OcZ0EETw7rBJVLTRuWyWafLmCYRTIetIr7Wq95qxG7mDTXsUCJ2NtLpKBB59Ow6QKZAnrDxddTxfOcwPNgWJjSPkqOTQdjr5JL9JjUeXk0QBGilXxqhjE4km",
                'terminal_id' => "5fdc195b-9c98-4c0e-84d0-01af0d23cbec",
                'transaction_id' => "tnO",
                'organization_code' => "4TE7G8yDNS2f-u9-vF",
                'private_money_id' => "56417ac8-727f-4f18-9cd4-0e71c59b7291",
                'is_modified' => FALSE,
                'types' => ["expire", "cashback", "exchange_inflow", "topup", "payment"],
                'description' => "SZVoDdLQphelKHrQHN0dljjdGAj3uATtmB7fWzVFIr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "d59652c5-44a4-42f9-82e8-179af50f7803",
                'customer_id' => "52e1eb4a-5122-406a-b633-c8e12b2909e0",
                'customer_name' => "gSvLmgHSKNXNJvmgG8FNNpQ0tu4d0vuj2g2vqWcfdna6u1lkMtRhEVwJ0GzdR0gufzitlOl3D",
                'terminal_id' => "812c7e4c-9a19-4d45-a550-b6c677f0bfc9",
                'transaction_id' => "bZxfSk",
                'organization_code' => "-05-4ZapfAM2-E---4M53oM-Zd9--77",
                'private_money_id' => "17f63943-b923-4ef8-a5a6-c4d176836c54",
                'is_modified' => TRUE,
                'types' => ["expire", "topup"],
                'description' => "SInPM52QyaAq8cJUVFnUrM3PtqnLDYcM376HiIA9qXXtnzrBLoLgCimWY4IRVdAYssAFdOwWM5jYRT0af1LVMq"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 8127,
                'shop_id' => "7bffdcf6-91da-4c23-8a58-cd90e1ae0e0a",
                'customer_id' => "c3af26da-6e2c-47fe-b55e-38b0b5b45b51",
                'customer_name' => "ruKdc68eXHiUqvnfzClkdieRKsvccIf8I2MfBGk7H",
                'terminal_id' => "42315d0b-d82b-41f4-85ca-9394f4dcba1f",
                'transaction_id' => "oqpUlk",
                'organization_code' => "XK-6--Tz-R1-Qv8--TDZQP63-aRt",
                'private_money_id' => "7f5f0005-fc78-4d0f-82cb-90c8ac8c9ef3",
                'is_modified' => TRUE,
                'types' => ["topup", "cashback", "payment"],
                'description' => "EgQxeTMdpgty5hcx43IiMjL1ShEFA3DtktfMAmEXpiTEEH4uB7Tmv9tEtRwnAbvzMCq17IaEN8UKSN0NQ4dEFIa0hZd5t21A1Soj6BFSDU7wV9P8szdjBjDWyuLgi8M9o8VT7YeG"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 8948,
                'per_page' => 2323,
                'shop_id' => "fd16ce06-bffd-484c-8c73-ac538d177e4a",
                'customer_id' => "70f9e5e0-659c-401a-a850-897e566bb8a5",
                'customer_name' => "8z7me2C",
                'terminal_id' => "cc4e3672-284b-4d1a-8e30-232c8067c477",
                'transaction_id' => "Q",
                'organization_code' => "9-1xWMX---2xU992-3oEnof3L2204--r",
                'private_money_id' => "9cabf91a-684d-47ff-a9a4-7e9ea2a832b5",
                'is_modified' => TRUE,
                'types' => ["topup", "cashback", "payment", "expire"],
                'description' => "mIgNFCECSxWf1Iv1ltt3cpHSVjgBMKCDEhfd66hQLfTVgpcKsMZoaFQi4URvSWWQnUSReC4XkwfvoBhFTkmM9imyj0gKBtnDfJXjvvaPP2es4w"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2022-10-01T04:57:15.000000+09:00",
                'page' => 6376,
                'per_page' => 1302,
                'shop_id' => "93050397-b4ff-441d-9a29-39e007bac6de",
                'customer_id' => "a6c6b773-17cf-4076-9f62-51a1628dd287",
                'customer_name' => "vQkXFIWjMAytjXOg2qKTqEJJ5CXRXS7dw6YY2WGr2gFxmWOpzbg18R1kkdnuq1sUQjGwI889JncsS7hNlMFQUsrTmohmp2G85CfhVw9SATykLgiD1xZ2wtM3ehzzeTG5lMW6EkfNBMkWixMXAVlew5yfcEmbVvgPIadzCpcesu0VyJ33Y5kvTCtFSpewTjEfu6fdmo0bN28KW9",
                'terminal_id' => "81528cda-da91-4e24-9232-d3ca430eee52",
                'transaction_id' => "HKSpCM6AAw",
                'organization_code' => "U-PV-eC-D",
                'private_money_id' => "0fed9453-a51f-456a-be41-bd09f5a3a6d7",
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_inflow", "cashback"],
                'description' => "l3eJOI0gmaY2YH2qk0TJ1GWEd2mFR4pT6GjCL5B2x8g6SLHgnKaa9RIqhsbVNUfOyBXWBGJuR7IOi6EqgHykc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2020-12-15T14:44:32.000000+09:00",
                'to' => "2022-02-16T20:30:49.000000+09:00",
                'page' => 6467,
                'per_page' => 2553,
                'shop_id' => "4f95b4a3-afda-4e62-9fb7-0a6c8b729c3e",
                'customer_id' => "53dcbf1f-38f6-4466-babc-a5d204f8956e",
                'customer_name' => "NOtQECdSq2UB6CH8vlZuCoPNSroM5abuLY3kqF2ZUXGiQLRA8OYJ4IwxKVS3T7BOL04nxXUjNk5bsle3ZCHXokEmPdI9rsvRRktrPcA8pWFGNGIPXyNZ0w2njDxR86fnMoju2MNEe4sgT45gnk8EF5jK1rDW3DA8hVsHdzsPuE7zjJaCz9AMVtTF",
                'terminal_id' => "9f8605d7-16e7-4d93-895e-321e77c82c97",
                'transaction_id' => "493Lp",
                'organization_code' => "2--H7y-gx-o66KiV6--8--P2-08w",
                'private_money_id' => "20cc0ab9-7263-4b35-9a43-dfbe50a89010",
                'is_modified' => FALSE,
                'types' => ["topup", "payment", "exchange_inflow"],
                'description' => "imPj4hKnHHFFtuVrUgOD6FG6gNxXYBMkZzcmtMyk59DB2lb4FYjdCdQUYd5JX4zKdmGBESTFVvgfPIIcd0VDtUUvgjCu9Vav5rXUHzmDODlT1sPOSzyDyxXpdSehOn96y6mHS62wcTrWH1hKrAeNhVZ2Pt43g7c4KDgnvbhXgRx"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
