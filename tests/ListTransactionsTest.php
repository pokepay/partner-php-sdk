<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "w0p35zoMfVcMiHySsmEvqOXL7QRSKR0w2CCHgv9zgIMFmS1aFdoYgD4pGvNKrG3QK4DdZDGtlxt77guCn"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["cashback", "exchange_outflow"],
                'description' => "FOncxB7BM1YjadVETqcIhl5krj4fUOq1CfGNWOmY9BNDa4lsA9nksuOxf5H67glsfyGprIcledj6Q4HlSPmG2dYTF6G2v4m0xIBXPBFhUZBKzgLGc1XvcFwiG3mV5fMSQGlO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["expire", "payment", "topup", "exchange_inflow"],
                'description' => "D1DwxfMIJh9PMyfiAiomxyfLxf6P0yt3LJN3iuqW8IkBGnI2XGSI3ME3dlOUM5zmN4DfUpXy1vsnxoPK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "b0b02cb6-bc8c-4ab9-893c-1adf8bf0e073",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "cashback", "topup"],
                'description' => "BWGUgz7ABeOoF1KY5kpCb2JyoP4yBqxAiO7ueazhP37wsqrFmJCeeWgWxqmHNZgeaKsfcVAKqJfwFGOm52fSuxrDhSlDeNy2nivho"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "3--n---f0k",
                'private_money_id' => "fae8f3e3-da2d-4d12-97f1-c481dc0da7e3",
                'is_modified' => TRUE,
                'types' => ["payment", "cashback", "topup", "exchange_inflow"],
                'description' => "Sb0rMXqrJXLnOyOeK8L5EUKWT2iLaoSdw2VurlXSDOuQp0lYPeII6EwfFijJFVA3ab9C6ctEe"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "ipLfKzp97A",
                'organization_code' => "-",
                'private_money_id' => "f007c3c5-f514-4553-a0ce-499cd87d27f8",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_inflow", "expire", "cashback"],
                'description' => "gCXbn3NwATBR1MaBuOQVi6XMiRuZ8oB0IDGCHwWGj8gE6UYTOWaT0isvx3X6LXb6IAZgRKaEwKpLvw7pA1p8PIGB8Xw2QDtjrwTOzsXGLRtNlkFbOOpxTB83XJbwaKtSCRS7RLF6xVw7lfVwBVTXP6qZLs6GTPh5NmeBq8lyAKr6wMvo14AhOeNi6OzsriWDLxf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "ef48da4e-5f7e-4753-aa55-105026f4396d",
                'transaction_id' => "kx",
                'organization_code' => "1zho-kY--",
                'private_money_id' => "9b7e8abc-287c-4414-be3d-e5155b2d17d8",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "exchange_inflow", "cashback"],
                'description' => "rB9rVCG2SpxPxBbgSux4dxfWUtsoweZt7WfphbE0UIgKJ9Z3NiWsTP9RrAbwE6mhdPQ6lsSaBHTfAsntm3Ri0odG5Im30O2NXXaSnE4qY7Eo7iN1znRTfKBwBWhe5fSdTd39SVyWyaTYUWgIqJazsARut1kZkwK0apLdjSjx"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "mJgqGT2TnQcLSftuxW5t04YuaGP2D0rpTQfrQPMcMZdFyjLON8Ocqreu3inBQDKisoiFpc3binQQ1fNRYDMtwKPKMI794p3eAFhGKrX15HVfX9LnP92WocVDB4oYvpIk5AVZAm3Z1d39P",
                'terminal_id' => "aa9d76d9-43a7-4fb4-b62d-643a92c920e6",
                'transaction_id' => "nE",
                'organization_code' => "7-z---TnH-4n49tyx-3aLiVP0r7UVaz",
                'private_money_id' => "d8a92d03-a0da-4a6d-b0b5-a406b2caeac9",
                'is_modified' => TRUE,
                'types' => ["payment", "cashback", "exchange_inflow", "expire"],
                'description' => "raQsMGASBzErfhKFgiKCbJ0YrISDLYpJeaO3MdKw9Ca0fDKU8lcojMPtQNq5kZD383MeRE4ocaDU88k4WxdaR7vLeaXnPLM3pRnDfbootEVlmDVKJd6QA1pTyhDf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "dec6a9e7-c3c1-408f-90be-4c8b43796ec4",
                'customer_name' => "C7ES4Lk4KPIz9kPFuJQbdgh4YEoOV3HEsv5fCv6SCH96YNCEdstCfraFvFoFH234Ho0fPGACUwgOCcSeRjPc5YesYOsFUMeDpISXfpzHKm66qyjENphsgfVxNeZkSCYfA97fxv2iWfVqD2o2MP4GWIMni2L9UtViIKIv0gzzpGWl1CkyZxbY8aX2uVXR3Xf7kRglo7yoUZBUovBHGbqkKF0XMAYYDDJKXICYQUfntTLNIuYDkdtucxJ",
                'terminal_id' => "c61395d5-1fa7-4201-bc8d-d64882f26988",
                'transaction_id' => "YM",
                'organization_code' => "---21--78F",
                'private_money_id' => "c832ac01-0cc7-46d7-81d1-a2e39ee19047",
                'is_modified' => TRUE,
                'types' => ["cashback", "exchange_outflow", "expire", "payment", "exchange_inflow", "topup"],
                'description' => "FMowmLbUwlTUtUapOx0nG6zXz7zWgBpLPrivxNe5UHjhqkjP9IgJsCUxtyh9KLEADMxLGFcmLLAgFwowMfd5Hgcy4PIfgEOPJiuSAI3wdGhoR4YLd9PGseZNLOSXxzZjsgYqlv4lS7JmDio8YYexI6lAj7RwUkuKKzTBzLC9N3S3s3ZTNWTohRFFh4bR3dyN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "08d33155-7a32-4bfe-ab5d-2a7eb463d948",
                'customer_id' => "3de0daa4-290c-40ea-a55b-1db14ffc6831",
                'customer_name' => "X28ple28x2ieTa5qfwK1MGnTi36SIaSUJUyfLWB92vcGy3USlCvaOpM4ijVhlVZJOPlH7MdwvXQvHKr6YD2UzCXZj4yIHE67mSnCRlAzKmvF67uY58W9tBgUg25dAuMaeoiZYeTMxvhI4pGm",
                'terminal_id' => "ccdf7f05-4867-4144-bad0-d867fc1dd1e7",
                'transaction_id' => "eOPxPj",
                'organization_code' => "659-m5-15TM2zx66-Z71Q-c7--",
                'private_money_id' => "81cd014b-ff0a-4574-a4ee-753864ce1052",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "topup", "exchange_inflow", "cashback", "expire", "payment"],
                'description' => "oz5yZ8yOBaLxcTyNGPrgCblDLImKl7QnpsFc1E7AmGI44whtyX7VBRsLsh1iFtR2phVDgRwWD93Bo3y7vSGRVdxYVodLVDBIZxd0kN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 7142,
                'shop_id' => "e448c09a-d367-4de6-81a4-a906d8912db4",
                'customer_id' => "186bbe7b-245d-4201-bc18-b2f9c7e535b0",
                'customer_name' => "vc2kxjehOZ7QTdc",
                'terminal_id' => "6864d156-d00d-446e-88ec-1c2177df16bf",
                'transaction_id' => "u3wcHyr",
                'organization_code' => "7Ie4k-X-H-t3S22-J740a---",
                'private_money_id' => "ec26ea1b-7289-4913-a414-e35078dbb38e",
                'is_modified' => FALSE,
                'types' => ["expire", "payment", "cashback", "exchange_outflow"],
                'description' => "9qf2Qg7i7IMfNnmJUsFxgEnDvnExlfE8MsY4qJbvsaPA9g2chez5Y3vpKGvWACliUptsHof4Hacdp1EARmEYJnq9DPXcKETuHcyoL32aIqEosb06"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 9513,
                'per_page' => 3035,
                'shop_id' => "a3af5952-a511-4b7a-adaa-4dd6d6264d74",
                'customer_id' => "dc6e0dfc-84ab-4619-a9a4-78f722fc43d2",
                'customer_name' => "oXy2FudOTALq4f4YiBFgRTrSGmChaoyuMguwEB",
                'terminal_id' => "58f84990-4380-4b66-bd0c-342627c4ca42",
                'transaction_id' => "16Vz",
                'organization_code' => "832OxAqz-pwU--GPu-1-W-PW",
                'private_money_id' => "7fdf949f-744f-4ccc-b74f-f1f6f20c67aa",
                'is_modified' => FALSE,
                'types' => ["payment"],
                'description' => "gebhZHJkF4xH31nee5b8OOFiSoeDh0oK4JT7KJi9n9j"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2021-10-19T22:54:04.000000+09:00",
                'page' => 9973,
                'per_page' => 1563,
                'shop_id' => "73a5647c-61eb-4cd6-aa4f-d61669a45593",
                'customer_id' => "8fa2ec7a-0a81-4f0b-a71c-e5440b82b85f",
                'customer_name' => "zEL3Q2v4lDhI6XWroCdC7PtaTU41ujAQTMJIkUCZusnQQAHANCpyswdoWVyO",
                'terminal_id' => "83427249-325e-498a-85a4-7c6664c6fcfc",
                'transaction_id' => "zoTRAI",
                'organization_code' => "o-j6o2cq-4i-7",
                'private_money_id' => "e08d5ca1-65a1-45b8-a475-6b6394533ea8",
                'is_modified' => FALSE,
                'types' => ["payment", "topup", "expire"],
                'description' => "Y1ArZi6RFqNDYPNlG4iItUJ6C2zSbYPqxRj0Ao8j4Amekn8onXmTGCQBgRcedCZAbcmnAdAa0lIO4d2IQHSXHjAMvLhItSCWRc50oEv2qYoyDYTIlNur7Dz7TMYBS424Yuz9IwJXtPMpt4b0onVbgGH4ZaPPyK0XVKCjzTDMs1UsupK0ZNAS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2020-12-20T14:08:24.000000+09:00",
                'to' => "2023-12-31T23:59:13.000000+09:00",
                'page' => 3864,
                'per_page' => 4839,
                'shop_id' => "ba270203-004c-4006-aba1-8d68d60c230a",
                'customer_id' => "841395da-5317-4cf7-b4ae-45c7559e33b2",
                'customer_name' => "ZGlyrk7gz6uMqIpXqKHgCuFNr8oMmJr0sFDG8NKc8ekMF4wawlWsQdLnHXEfvUidILV0lqfnjE6h",
                'terminal_id' => "0d4194e0-b613-4e8b-983c-1ba8bc02b642",
                'transaction_id' => "eWcz",
                'organization_code' => "6GX",
                'private_money_id' => "131d9fe9-bb79-44ee-b4e6-6630adc10c45",
                'is_modified' => FALSE,
                'types' => ["topup", "payment", "cashback", "exchange_outflow", "expire", "exchange_inflow"],
                'description' => "FVSYP5kt5KXiiPYr8RiLbELjjHrwFYMUzrGFk8dyc1Htil0ZD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
