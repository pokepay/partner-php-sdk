<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "UAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["topup", "exchange_outflow", "payment", "exchange_inflow", "expire"],
                'description' => "bzQDuaFv4VsaDUMga8HPHL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_inflow", "exchange_outflow", "cashback"],
                'description' => "VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi32RsgmtpDzruBR2bpCJbW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "f5b06197-7d43-4573-80c6-1a31a63d5958",
                'is_modified' => FALSE,
                'types' => ["expire", "exchange_inflow", "topup", "payment"],
                'description' => "Ri8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "K3a-",
                'private_money_id' => "23c0b173-6202-478c-a6a4-dd2460d39e95",
                'is_modified' => FALSE,
                'types' => ["payment", "expire"],
                'description' => "cXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "ac4Bt",
                'organization_code' => "R3l7",
                'private_money_id' => "8ab8ecb2-094c-4af2-9b90-8e355fa064dd",
                'is_modified' => TRUE,
                'types' => ["expire", "topup", "exchange_inflow", "payment", "exchange_outflow"],
                'description' => "iRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "1878075e-5a9f-450e-a926-fc11f5458084",
                'transaction_id' => "V",
                'organization_code' => "08--6-v5DcI--N-s1a-jgB--MYcX6--V",
                'private_money_id' => "d32dcc20-e896-4555-ae85-dd4222dae1d6",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "exchange_inflow", "topup", "cashback", "payment"],
                'description' => "8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixLpvflY8MFYZJvlfPZ9XRs2DjUex"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "8FZcru468uiy2IBQ",
                'terminal_id' => "2a2a8973-53cb-4c4e-a27e-a5c5507b9ea4",
                'transaction_id' => "Uony",
                'organization_code' => "-0U-K-v-y24",
                'private_money_id' => "df3b885f-bc20-4481-9f37-44a99bf51ee5",
                'is_modified' => TRUE,
                'types' => ["payment", "cashback", "exchange_inflow", "exchange_outflow"],
                'description' => "Hz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPa"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "456064c7-cec8-4abd-9b40-413ac92f4ed6",
                'customer_name' => "kyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xl",
                'terminal_id' => "4f57728f-a26e-4378-b631-80dc19de3382",
                'transaction_id' => "QEXBdwXQXB",
                'organization_code' => "-3L",
                'private_money_id' => "c4aacc8f-fcb9-4253-98a9-0250533eedb9",
                'is_modified' => FALSE,
                'types' => ["expire", "topup", "exchange_inflow", "cashback"],
                'description' => "oagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3PolsdbrxUTbpTkQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "c1f6e167-8024-4f1d-8116-b661d60726b2",
                'customer_id' => "679dd8fb-affc-44ed-a384-1b5e70f0e58c",
                'customer_name' => "76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgK",
                'terminal_id' => "77648c26-1a05-4a4f-8739-bfd2b207581f",
                'transaction_id' => "gq",
                'organization_code' => "3---6OyU-RB2",
                'private_money_id' => "9efde369-9fa1-4fc3-bccb-aae15092e7a6",
                'is_modified' => TRUE,
                'types' => ["payment", "cashback", "expire"],
                'description' => "TmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 3881,
                'shop_id' => "e4dbf5d1-6ed6-4b7e-bc5a-769c499ffaf7",
                'customer_id' => "1ad7ba7a-64f3-4974-ba31-b3a2e4621601",
                'customer_name' => "XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6",
                'terminal_id' => "165b8151-f0c5-485e-9e13-9376e3e3056d",
                'transaction_id' => "tQTqfI",
                'organization_code' => "--5K--1YJs-9-52-Kz4h14i-eY-9",
                'private_money_id' => "96bad78d-ad2c-4b0f-9caa-03294ae5cc2a",
                'is_modified' => TRUE,
                'types' => ["topup", "payment", "exchange_inflow", "expire", "exchange_outflow", "cashback"],
                'description' => "EVrOM4dkj0diMGxwkBMFBNKhTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 3078,
                'per_page' => 4255,
                'shop_id' => "c9081efd-44ea-4a62-9e06-67b96c0dbd55",
                'customer_id' => "cde26dc3-e262-4d94-a4d0-1c7fbf93baaf",
                'customer_name' => "cYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8",
                'terminal_id' => "e0fb7e55-d959-4e87-9d5e-2b03fa444761",
                'transaction_id' => "g",
                'organization_code' => "nU8hA8-gW8Qx-gnL0-Y0z--",
                'private_money_id' => "168946bc-2354-46ed-b145-f1e17b934e40",
                'is_modified' => FALSE,
                'types' => ["cashback"],
                'description' => "runisLVA8D7RtvLwR"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2021-12-11T20:57:53.000000Z",
                'page' => 275,
                'per_page' => 4193,
                'shop_id' => "7b3af2d8-e293-4ee9-aa48-68c93e1bfdf9",
                'customer_id' => "e774df22-344d-4f85-8783-087892896cf2",
                'customer_name' => "gTxrmP2c2b7AqdqrRaU4",
                'terminal_id' => "6a440174-13f3-474e-be7d-822f3e8273a7",
                'transaction_id' => "OU",
                'organization_code' => "---Y3-u-72-t-Sq9--7yFH3l-",
                'private_money_id' => "1ceb0960-738e-457d-9d9a-4ad6b6932b1c",
                'is_modified' => FALSE,
                'types' => ["payment", "topup"],
                'description' => "2WPHw1UTjf1quigD2l2JnK33Y2PKk"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2021-07-16T21:26:05.000000Z",
                'to' => "2024-04-27T15:51:58.000000Z",
                'page' => 8809,
                'per_page' => 6147,
                'shop_id' => "063ffe5f-98e7-46e4-a5ea-ef954fb3438f",
                'customer_id' => "6a403931-2b94-4152-a2f7-9a23cbcca228",
                'customer_name' => "dGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFiv",
                'terminal_id' => "adf88ac9-4c20-41a0-a56a-06c199beca22",
                'transaction_id' => "JEHCCuK",
                'organization_code' => "Kzcd7W-i-MgUl-7-e-2lbp4",
                'private_money_id' => "f2538a72-d81e-4e67-9198-2d9d4a0aa3e8",
                'is_modified' => FALSE,
                'types' => ["cashback", "payment", "expire"],
                'description' => "slDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
