<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "fjVRdS9gBCpAqBoL12vEE0dA6lsxQMqOK5DPujy1GMTL0RybLTKrBxDQVk3s8nju98kKyzn9sk1HoZJMrUcfNWqVKyw"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["exchange_inflow", "payment", "exchange_outflow", "cashback", "topup", "expire"],
                'description' => "uz1XkfnbNbhATQ0YURVJ3NkO8ndtAfXIdHe4GkrBK23lHQmpt5sC6JuwcCMW1c5w8YfK0OEiHF9Le08eC356J9SWWKWkN2XLZgbsYmXSCFEYcRo8JhBrOukpfcLm1e5jcJyH4hoG4Li8AjhMw1n0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => FALSE,
                'types' => ["expire", "payment", "cashback", "exchange_inflow", "exchange_outflow"],
                'description' => "iRdUFBJHehptCd0mk9XrSChjtvUdpk2C7ePnLO88vrCwCyugYeyDoZ8G8YHp0v373R47MDEwJYNQIViz94GQEbKqf0ScH3M11raIYruO30PxlYHbDbCZDAJ6JO1K8A03gAASblQfSF6azi4qtg3KKLYHiZ1fI18J8ELzbisJY08Gb8tZ2w8eWOQ2Ym"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "5ac45c87-49be-402b-8c9e-1c067b67ed0b",
                'is_modified' => TRUE,
                'types' => ["cashback", "expire", "payment", "topup"],
                'description' => "0ntmJwlneX4FN5I0hz7P04dqyowydtdNgGlCrsXv7BuxlECcOOCwwOtjVgLJX9YN74pSAdgRJZzNQDymI1R8w9Vo5BT6tfcY5yQ7SYdY9b1Sclm6jmZV4HytmpQDvUhTcYVX4nUkubqlx6G0Fh2eTEn4RU64FpPosY5x1bfMiYtro7puhLQM10wNSZeq79qTX2Ln8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "5GM-",
                'private_money_id' => "c5277d6e-6415-491c-bde6-5d175ed85c25",
                'is_modified' => FALSE,
                'types' => ["topup"],
                'description' => "n9uaoz5S21qqzbXsA0WawgF0zFv03UZm6Za3qhOoklx3cVgvI4i6xn32vEmmp9snQc1Pl7ePNk1aKxfINMvS46ORYf5YCXj5A0eiC0EYflnmO2qpPZl36ZW8JkmZ2oIr0URsRclLYpXvTyh6o3KfuyPvL8cnnLSJNLJ9uOYDxJjmKya2FgWstDj3ew"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "NAu",
                'organization_code' => "3Fp--u-7h84GXnO7",
                'private_money_id' => "3d851363-f0d0-4d67-b7b8-bed8ac6dcf7e",
                'is_modified' => TRUE,
                'types' => ["expire", "payment", "exchange_outflow"],
                'description' => "Xe38RCg65NnWOoEGxDjVpOjgk3QmpDxJQJsM3wNfQZETSUeFK0r7Wf8s4Ss3zqOSxdhbR4TAdjkAuF7atQas6ltZ9FKTdpEwZe94xPZw1kgn7NxqTMZVX4R61vft"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "f0dba155-1e98-4ad6-a7ec-e4d2c6a6791e",
                'transaction_id' => "WCUzk0C",
                'organization_code' => "-f3I-dRx",
                'private_money_id' => "3431ec4c-c19d-4bbe-b7f3-869c3139739b",
                'is_modified' => FALSE,
                'types' => ["cashback"],
                'description' => "SVcd8eG9jfmm4eex2XmqjsQFLln4wuAkUg9PMmkAtLQXvHYWYbcaC9WGO1wpYCLrAqhdtIDEBsU48290ZitrQDEAmO36kaNO6hYYBr3DyDYGhVskFF4Lm8vFGGVIwAqNSIBhxtXa64ct19wJnd7I0EABOBz2XgiZLmTgnZH28v3jqUB2UUTioGBkeoRElP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "uHCsTnJO2jl91hiTGijrySPjxxpKAz6tt6BZm93gDoRAM1mzOzZl5pgp4hMeAayTp5u9tYvq5kD6ViAoldswpzfuceMX7PBBQvtL6LqpaOv4Lkc0vgQyW6n437xvwe3fv2DWbbFX2Yj8YGI32V1rQ6878GBk1vuIUvPZkNfx3NsPE8D524J4Mi22",
                'terminal_id' => "3f26bd39-0a76-42c8-9886-05e46821f715",
                'transaction_id' => "rGCl7L",
                'organization_code' => "-MoqR2M6qj6-oVo",
                'private_money_id' => "8bc39109-a33d-4c64-987c-9982023e5625",
                'is_modified' => FALSE,
                'types' => ["expire", "exchange_outflow", "cashback", "payment", "topup"],
                'description' => "0cP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "d07ace82-1fad-4790-ba7b-d6184811b2c2",
                'customer_name' => "NhhXVos8qcb09u75ZJVSny3Un4lDL9lteYd8JWTOIFbHeFkELbUhJ9WQgk",
                'terminal_id' => "ebcac21a-6359-44ef-8feb-dc16f89a6969",
                'transaction_id' => "0Gel83A",
                'organization_code' => "6Wdt-7-5-Csa-f-fH-gM",
                'private_money_id' => "390b64f6-4f01-40f0-9646-577310c4c90b",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "payment", "topup"],
                'description' => "5ljtdBROZkhbOoDaP3Lp4QCiHtM0hH7spGn3mj8GSZLwI5Rj6Su4X54W00TsKIZ8yDvHFyrTSOsgUkknbOloE34szvTolSLZN3JT3jtECQfM6ZdeIO8S3v66On4vnxYdWc9Dwg7aB6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "7ad99d2a-0a03-4eb8-9e9f-c80e8419cc6a",
                'customer_id' => "6a20005a-5d68-4da1-8966-b15f1af2f540",
                'customer_name' => "r4OHiueUMWUuz5UYOlEk0b37PUMJoJayUGPnWmKMVjbUh93RMeRQsDy4nfoyj1Riyi0ZmMhgR4WozZeWMziN2AJGuqCOR6HWxLZzta6weV9JKG1fWMieO67PZx7Ggd71Vm7eT3z4T1pk3u55APUpIuRkLvi7oweic5zqPyuBB9rU1FiLpvIYkW45RjmHmUR3zOifpIn8EvCfFRX4VJyvhfx095TDBXfrWhRVsepjOwqONZ6sCy5P",
                'terminal_id' => "82e36343-f59d-49d7-970a-312a9693c91a",
                'transaction_id' => "r",
                'organization_code' => "",
                'private_money_id' => "c44f85da-dfe0-44b2-9e15-f6f4dd0b4126",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "payment"],
                'description' => "rcZ2HSuKRudOfwoAWPRGmdnhB5f7yPEtbQNYv6jQZO2J2eyqG"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 1522,
                'shop_id' => "999ac74b-cee5-4b4f-90e2-dc42037eb77c",
                'customer_id' => "66844b1d-956d-4c73-a1ed-e25bc5874316",
                'customer_name' => "YdVol0PGZL0m4g2tfdx8ht9IkvIXgdNCKosxJvyNLZuhwWKtsVwLdb8ypb2lA8ya5yldg",
                'terminal_id' => "2626631c-7260-4575-a25e-97fe79712b06",
                'transaction_id' => "B3Nos5",
                'organization_code' => "-",
                'private_money_id' => "aae026c1-b8ac-47c2-8d29-3883f20405da",
                'is_modified' => FALSE,
                'types' => ["expire", "exchange_inflow", "exchange_outflow"],
                'description' => "kZbMiHloH16yhgFcb1O3l557cVNR1GwFGRduuD37czvROTmcl0n5N99kEmUOy3VSGsbeykrHo7ylvKcpOCZ6C2G5PqPuvctu6GsGYWDrSG4HzE6Bm7M13QBLZmjsu8IkFXrN2Mbh1p5i365S5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 8219,
                'per_page' => 255,
                'shop_id' => "627b0707-12f1-4f74-af60-712af6a0b070",
                'customer_id' => "424baf57-bbd4-450f-b103-597208799ad6",
                'customer_name' => "E5FTiwEDNsGiMuhD7r2dGBb9e8jz7eGTBjCD3Jce7iZskuoy",
                'terminal_id' => "0e1da252-9d23-44a7-8dec-164a515dc52e",
                'transaction_id' => "gqa",
                'organization_code' => "-Ca-w--aBQ-u-",
                'private_money_id' => "15c01dc2-a9a4-48db-b1bd-f0f50f596fc3",
                'is_modified' => TRUE,
                'types' => ["payment", "expire", "cashback", "topup", "exchange_inflow"],
                'description' => "OpncSCSK262KpXY3YpJ0DHLI4TnoKHv9CEsi6Rm42gWtm7b3vJiRM5t9gnylWrxK2mdWmUakDQad8xmwP0fnHqzctHd2VCI3Ivr53TAHhZMrDoXDo9rYwMwxV3MgfxvEbYhlmWyEKqVXMD92isljtVVDtPapqHseowlUZ8I14IqK6UnBnHZl2ytWlnmiRXKxQR0oxGy"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2021-09-29T09:39:14.000000+09:00",
                'page' => 2662,
                'per_page' => 817,
                'shop_id' => "2635cd7f-3a82-4965-94c6-e437def4e80d",
                'customer_id' => "040c4a00-5205-42f8-a9d4-03e1601d2490",
                'customer_name' => "mgSl85VTCG7J9PllLLZBrY6TLMJG8TPTExHo18IE9DDvj2A16ja9lwoQURRUKy0cipr8HUMRGpP7XjfsjUJtKeT2TP5dzOVmHrkgvnAn5ZFFvKScfJcVSCMAqQjcsWoOUTteJTWDc7hPT1lXjyNAEYK4oLXcwOB4oOAclIKwEYUKJMt191RHhW2oUzwqDdP1v57HLwg43cwma",
                'terminal_id' => "15983c1a-8193-4e53-b85c-eca7b75cc42b",
                'transaction_id' => "Ckty9zyD2",
                'organization_code' => "",
                'private_money_id' => "e5a6baf4-b690-4f3a-bff7-ca0aba79f63b",
                'is_modified' => TRUE,
                'types' => ["payment", "topup", "expire"],
                'description' => "pwORVYW4HoHC6W4PUuccPzetmlDWML4Ix3waMmbiMmQheuX3wvQm9TSJUXhiUmb9kmaxC2q3gi5vSWAI5Z3J0rk52dPppqxPe7frMvHP0TRavxal7LptoXYLUEXbWrxDKCmlHaXf9kDZho1q"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2022-07-09T06:24:56.000000+09:00",
                'to' => "2022-06-16T08:38:53.000000+09:00",
                'page' => 6918,
                'per_page' => 6089,
                'shop_id' => "d3d402e7-6c98-4bd1-8587-1e9eb7cfc0e8",
                'customer_id' => "3fbfb1c1-ad68-4e81-b971-9ce2467b1561",
                'customer_name' => "vkJ35Hb4ffP2H7RBxF4z3r7i43UUr",
                'terminal_id' => "a13164ac-1fa3-4f82-a112-2ab7876761ab",
                'transaction_id' => "PpOt",
                'organization_code' => "s-1xY9N---4x2",
                'private_money_id' => "17393496-38e5-421c-a480-81fb1cb5d6ac",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow"],
                'description' => "NSxOrLgbgTOtZUYlvYY17it8SNX9wVzFqH3HehHfb58M0Az1s4E9PmFSFX"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
