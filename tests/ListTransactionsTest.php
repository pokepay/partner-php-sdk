<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "dg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi32R"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["exchange_outflow", "cashback", "expire", "payment", "exchange_inflow", "topup"],
                'description' => "DzruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "payment"],
                'description' => "UmABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgskw6yfFQP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "aa193c82-9a0d-4a02-9ee3-7b584ba8d1c8",
                'is_modified' => FALSE,
                'types' => ["payment"],
                'description' => "CcSXK5Zlq5PBZ9vRV0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqEvtHSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "88",
                'private_money_id' => "20b27c25-c3b9-4d4b-8880-685677f487f5",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "payment", "cashback"],
                'description' => "Kt4lw9lRVMCAhIxw"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "eHf4mhVFw",
                'organization_code' => "X-ht--D-8v77zAmT71--GS-Sh23-x-",
                'private_money_id' => "2e41e3ce-0b8e-45dc-975e-5a9f80c6650e",
                'is_modified' => FALSE,
                'types' => ["payment", "expire", "exchange_outflow", "exchange_inflow", "cashback", "topup"],
                'description' => "mOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "abe82fa3-1058-4b4e-acb3-8cafc35ed927",
                'transaction_id' => "fMMea",
                'organization_code' => "6KS-3R--VY6Id6z7n97",
                'private_money_id' => "d35dcc20-07f6-4e6c-bde6-90d087e77b5a",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_inflow", "expire", "cashback"],
                'description' => "Rs2DjUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPaGHVkyMSdme",
                'terminal_id' => "430728ed-f65a-4efe-ae25-13a668e4d098",
                'transaction_id' => "covbEUc9",
                'organization_code' => "m--8-6yqH--v6f-2-N8a",
                'private_money_id' => "abaaad6e-6afb-495f-a252-64e190197b0a",
                'is_modified' => TRUE,
                'types' => ["cashback", "expire"],
                'description' => "KHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFw"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "0bb110d6-754c-4e8f-895a-361c6368ab20",
                'customer_name' => "nC6rD",
                'terminal_id' => "0c68d1f9-0059-4ef5-95f5-4d47e49c0fa8",
                'transaction_id' => "Xn",
                'organization_code' => "-2-2vc3u-SL-UVy-1J-4",
                'private_money_id' => "96962c2b-a843-425b-b078-4b4e72e0c1ac",
                'is_modified' => TRUE,
                'types' => ["cashback", "topup"],
                'description' => "usYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp7HiQaj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "1f208b29-29aa-4618-b05e-d06c2b0d15b0",
                'customer_id' => "31d3b385-1539-4e26-95a7-0464e92e41b6",
                'customer_name' => "IiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfMVYN8tFORiCKaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr",
                'terminal_id' => "debfe830-8f46-4855-b3c4-d9eea2df1a57",
                'transaction_id' => "KqsDEee",
                'organization_code' => "-iW73r1Y-bvxv",
                'private_money_id' => "2c87a899-7567-45b2-b6a0-45c2556c6174",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_outflow", "expire", "payment"],
                'description' => "lEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 7693,
                'shop_id' => "fbd6a0e0-3372-4d23-ab95-b071eef4d2bb",
                'customer_id' => "e9ff71e6-bb4e-4dbe-a7a4-8cffa2826d0d",
                'customer_name' => "GAkbzmAIScfq8JbwsUjFhr3NwoEyag2SfuJiolnAr0O5Bazm",
                'terminal_id' => "dcc9becb-ce3e-47f1-897d-62a08961c648",
                'transaction_id' => "UlvI3TLRDU",
                'organization_code' => "1T54RprF9e",
                'private_money_id' => "9921668a-1c8c-4b66-a8c6-1f5b26c71db0",
                'is_modified' => TRUE,
                'types' => ["payment", "exchange_outflow", "cashback", "topup", "expire", "exchange_inflow"],
                'description' => "Rg4eijui0x4AzukqXii06wz9NdLnaFp0d8NnYZXWwwPUfmYGEVrOM4dkj0diMGxwkBMFBNKhTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn1Ii4QyB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 5957,
                'per_page' => 1458,
                'shop_id' => "25a1b673-3f5f-40a3-914a-98fc7e5cba0a",
                'customer_id' => "e3566da9-311c-4e37-916b-d3b6fa03dae4",
                'customer_name' => "P6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFr",
                'terminal_id' => "8b340176-3230-4a84-86f0-96b569f2b4d6",
                'transaction_id' => "2XFS",
                'organization_code' => "80-tv9Fy1",
                'private_money_id' => "ffac6395-94ec-438f-9b99-6ee786500033",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_inflow"],
                'description' => "jzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUt"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2022-02-07T22:47:04.000000Z",
                'page' => 812,
                'per_page' => 771,
                'shop_id' => "8e5fd89b-2b53-49bb-b81f-9d5341ae038f",
                'customer_id' => "63f4bd61-127c-44de-b53e-1571a8764f09",
                'customer_name' => "YfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua",
                'terminal_id' => "8e1a411c-2bbb-45e0-855b-273288fccdd7",
                'transaction_id' => "PHw1U",
                'organization_code' => "99q-L-I7f5-U2--fa-Lleb-7e-5-",
                'private_money_id' => "de760078-73fb-4ab5-8577-64070047582e",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "exchange_outflow", "payment", "expire", "cashback"],
                'description' => "5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiX"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2020-01-17T01:48:18.000000Z",
                'to' => "2024-01-29T13:43:49.000000Z",
                'page' => 6653,
                'per_page' => 2394,
                'shop_id' => "e5765496-b9f4-4a3c-b6ae-7ccf355db2df",
                'customer_id' => "d439ed9d-2f6e-4e2d-a774-9fb0d215028b",
                'customer_name' => "eqhymEV4KDx3FmD9kbbl",
                'terminal_id' => "edd0a327-471e-43fb-9169-b228050f1eab",
                'transaction_id' => "vO",
                'organization_code' => "6O6xGulu",
                'private_money_id' => "99b44e59-1a40-4b5a-b846-48c4944eec87",
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_inflow"],
                'description' => "QjYlB42oGAhylpmFOwCdKPABZdrgh98RslD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
