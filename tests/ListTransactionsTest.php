<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "gPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => [],
                'description' => "R9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7s"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["topup", "payment"],
                'description' => "5S2r82nr4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "889e4085-0dae-4c43-a83e-3e2dcfa49e8d",
                'is_modified' => TRUE,
                'types' => ["payment", "exchange_inflow", "expire", "cashback"],
                'description' => "C6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNk"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "fTKPUe1w6KO-cq3kHfugs-gv0j-5-",
                'private_money_id' => "9c616828-afa0-48b1-9e9f-37c8022ec883",
                'is_modified' => TRUE,
                'types' => ["payment"],
                'description' => "wM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdse"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "51TT",
                'organization_code' => "-iLW-Q-",
                'private_money_id' => "2214ddc3-4de3-41c8-accd-75e1f5fddc40",
                'is_modified' => TRUE,
                'types' => [],
                'description' => "OIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMPlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRMPV8lVcOO1w2GShMQxP1XNaA4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "ff130851-0143-4076-8919-72817621a07b",
                'transaction_id' => "LohtP7Y",
                'organization_code' => "K--lYK5fg-EsaGa-K21r-d--",
                'private_money_id' => "2aa3cb3e-3402-46a1-a5d4-d2acf092321a",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "topup", "expire", "exchange_outflow", "cashback", "payment"],
                'description' => "EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0e"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "LyZpFNZ79b",
                'terminal_id' => "ef4dd3df-08f5-413c-b380-c9dbf36f898b",
                'transaction_id' => "5",
                'organization_code' => "----Q3I6AC--de064H-xR-ip39p",
                'private_money_id' => "a8f139c5-42da-42af-8d7f-e5250fb628c6",
                'is_modified' => FALSE,
                'types' => ["topup", "expire"],
                'description' => "16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "52845131-cd8d-44da-95fc-9793404d60e1",
                'customer_name' => "Wwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi32RsgmtpDzruBR2bpCJbWCsF",
                'terminal_id' => "eb701a31-5958-444f-86cd-02f7c81c4c1e",
                'transaction_id' => "bCbRi8M",
                'organization_code' => "4T-9Hu-9WU487tN-3",
                'private_money_id' => "a3e101fb-a33d-40fe-b494-31d6ffea551c",
                'is_modified' => FALSE,
                'types' => ["expire", "cashback", "payment"],
                'description' => "2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "da583a28-d396-41fa-89c8-e914fc2c9aae",
                'customer_id' => "3167022e-94d3-45bb-b581-a4cbe2becbab",
                'customer_name' => "84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Yd9TYL0bkCAVqSRIdac4BtBwC2bbOKrqEvtHSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCA",
                'terminal_id' => "aff597e8-7349-4c16-b8f7-1d08a8caabe5",
                'transaction_id' => "f4mhVFw56",
                'organization_code' => "X-ht--D-8v77zAmT71--GS-Sh23-x-",
                'private_money_id' => "2e41e3ce-0b8e-45dc-975e-5a9f80c6650e",
                'is_modified' => FALSE,
                'types' => ["payment", "expire", "exchange_outflow", "exchange_inflow", "cashback", "topup"],
                'description' => "mOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 9833,
                'shop_id' => "893ca648-9656-4126-85ea-7bf53a455b12",
                'customer_id' => "b4242a8f-eb46-468b-b305-a61104f9a6eb",
                'customer_name' => "UixLpvflY8MFYZJvlfPZ9XRs2DjUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUSx2",
                'terminal_id' => "d1f39f2a-b092-4002-a45f-bc20449d9481",
                'transaction_id' => "eVHz2wOx",
                'organization_code' => "2mo7-c--6k-6HA3IhSPF--Ue-xT-4af",
                'private_money_id' => "89d58316-8711-4ff4-9ad8-f03910cfe9b7",
                'is_modified' => FALSE,
                'types' => ["payment", "topup", "exchange_outflow", "expire"],
                'description' => "SO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPaGHVkyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 5431,
                'per_page' => 7439,
                'shop_id' => "41381a92-6ba6-4e14-abed-0c0585582ec9",
                'customer_id' => "8e3cadd6-2be6-4bc3-84ec-a97fc9a648df",
                'customer_name' => "8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv",
                'terminal_id' => "2e906136-e590-46be-8f30-c81a4f25116e",
                'transaction_id' => "aLFwVLI",
                'organization_code' => "-d4---1DT-q-j3E-2-2vc3u-SL",
                'private_money_id' => "fb6afb43-dcc1-4434-a535-d87cfb9da6b8",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_outflow", "expire"],
                'description' => "0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2020-11-17T13:21:59.000000+09:00",
                'page' => 1829,
                'per_page' => 1879,
                'shop_id' => "9a784064-d673-47ae-88c4-6c21bce9089c",
                'customer_id' => "42a65923-5789-4806-99b1-ce48e372a261",
                'customer_name' => "rFGRZ0Q28L",
                'terminal_id' => "ed1c8790-2e79-4ef7-9a8d-b3d6c7e79e47",
                'transaction_id' => "z2sIRx",
                'organization_code' => "B0za8tu8TiZH341O",
                'private_money_id' => "65771283-7b8b-4f8d-a2e0-bcd0b6d3fb16",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "expire"],
                'description' => "irLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2019-01-09T04:25:26.000000+09:00",
                'to' => "2025-07-22T16:47:29.000000+09:00",
                'page' => 7288,
                'per_page' => 959,
                'shop_id' => "3334017d-b35f-4586-a3c5-137d95302a29",
                'customer_id' => "da76d485-3f0d-4766-9094-9a11464fb66d",
                'customer_name' => "yakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfMVYN8tFORiCKaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A",
                'terminal_id' => "777f1cb8-c588-4fa3-8b86-315ef58efeae",
                'transaction_id' => "FHDE0",
                'organization_code' => "FmL9wT--116J-i9-wg-z-3",
                'private_money_id' => "c3f6c7db-749b-4fbc-a543-b1dc3b764f28",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_inflow", "exchange_outflow", "expire"],
                'description' => "19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8J"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
