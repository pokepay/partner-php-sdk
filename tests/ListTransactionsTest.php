<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "pU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSqVBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["exchange_inflow", "expire", "topup", "exchange_outflow", "payment"],
                'description' => "JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "topup"],
                'description' => "nk17KWAio"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "40911c0e-5329-44e9-86c9-5e8e34fa8a47",
                'is_modified' => TRUE,
                'types' => [],
                'description' => "xz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5mAFAIeN7EOzX"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "e5",
                'private_money_id' => "d5982ee3-3830-4fea-9333-055c8b2e27b9",
                'is_modified' => FALSE,
                'types' => ["topup", "payment", "expire", "cashback"],
                'description' => "FwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "c8",
                'organization_code' => "e83m-6eBI05",
                'private_money_id' => "78897277-c349-4394-bc27-f4d051efd7e2",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_outflow", "exchange_inflow"],
                'description' => "hYlMMXruKsOetb8P3w3wpAlq46MRF"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "268c45e8-9d42-4885-981d-e9611bdd582f",
                'transaction_id' => "1KSFCI",
                'organization_code' => "bhtDRbU7-a--Qv4rj-2-18EjuPj-iLW",
                'private_money_id' => "09d64e1b-74f5-4130-b3c3-4de35c3e21c8",
                'is_modified' => TRUE,
                'types' => ["expire", "exchange_outflow", "payment", "exchange_inflow"],
                'description' => "EOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "xaXPio5o0q9x0iUyrfJOMPlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRMPV8lVcOO1w2GShMQxP1XNaA4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRa",
                'terminal_id' => "120cd1dc-82f1-40db-b4e3-d8738f704eaf",
                'transaction_id' => "eT3",
                'organization_code' => "---28o8K-q",
                'private_money_id' => "4ad45008-de6b-4238-9a2d-df1db7d01334",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_inflow", "exchange_outflow"],
                'description' => "B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "d4e25038-9eb4-4e13-9453-2a922f7b431d",
                'customer_name' => "GwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGh",
                'terminal_id' => "806a9e14-6918-466b-a718-96a1c4514fba",
                'transaction_id' => "16I7iXig",
                'organization_code' => "YnUAHI1a",
                'private_money_id' => "290b4c1b-411e-4d83-bd73-9d13437e2202",
                'is_modified' => TRUE,
                'types' => ["topup", "payment"],
                'description' => "ahWwt0KCw4FDQO05qLTqGD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "24873215-c062-4581-ba1f-47d11e7f6e04",
                'customer_id' => "d08b52c4-0875-4061-86f6-d63426154156",
                'customer_name' => "aDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi32RsgmtpDzruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWyAe43BT",
                'terminal_id' => "d4f41d2f-41ea-4cd9-a9d6-ed9543f0b474",
                'transaction_id' => "GDmgs",
                'organization_code' => "8-sG---7KiosX3L-FY--",
                'private_money_id' => "c32ad231-9f8e-443a-a830-60e1b89f3de3",
                'is_modified' => FALSE,
                'types' => ["payment", "cashback", "expire", "exchange_inflow"],
                'description' => "mABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgs"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 8707,
                'shop_id' => "3881c78c-c226-4da4-a495-0aebaa5f348f",
                'customer_id' => "adc5fef7-75b6-4179-9ce6-c485fd90fe1e",
                'customer_name' => "QPcXHRn98CcSXK5Zlq5PBZ9vRV0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwa",
                'terminal_id' => "7088258d-f319-4dda-b5f8-d4e6f5129f7a",
                'transaction_id' => "mz05DA",
                'organization_code' => "Lu-4s9aY825YEG",
                'private_money_id' => "13405826-69aa-49d4-82d9-1bcc96880c1b",
                'is_modified' => TRUE,
                'types' => ["cashback", "exchange_inflow", "expire"],
                'description' => "AVqSRIdac4BtBwC2bbOKrqEvtHSmLf6gZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfw"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 3283,
                'per_page' => 7330,
                'shop_id' => "cb55afef-5ceb-4d51-a669-569201701a4f",
                'customer_id' => "bb7fefbd-e432-4694-a7ca-7f82507a0cbe",
                'customer_name' => "LOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1mC260SZIP",
                'terminal_id' => "ee283a66-481d-4701-b7a7-cf8d3c03556c",
                'transaction_id' => "xpBEwO",
                'organization_code' => "HLH",
                'private_money_id' => "3ed91754-72ea-4528-88a1-73dcd2996c68",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow"],
                'description' => "IG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixLpvflY8MFYZJvlfPZ9XRs2DjUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2018-12-06T06:44:40.000000+09:00",
                'page' => 4402,
                'per_page' => 1197,
                'shop_id' => "d856d797-347f-4ab3-a294-d2232a2494d6",
                'customer_id' => "bf985d7f-4435-4ad1-84f9-7ef787621213",
                'customer_name' => "2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPaGHVkyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS6mIVfCl8O",
                'terminal_id' => "d6078836-9e1c-42d8-949b-b8f003f460a5",
                'transaction_id' => "UPEJOaNn",
                'organization_code' => "sWNR-R41m-81cRE-a-4Y7rs8D6-O-5t",
                'private_money_id' => "493788d6-7cde-417e-87a2-a3f53eaa32a6",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_outflow", "exchange_inflow", "expire", "payment"],
                'description' => "xLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc3Po"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2022-06-09T09:40:04.000000+09:00",
                'to' => "2024-01-21T10:13:05.000000+09:00",
                'page' => 7796,
                'per_page' => 2661,
                'shop_id' => "32d4c003-a3e2-487b-b217-018aecfa7812",
                'customer_id' => "1b984778-0255-4354-a2fe-f113e9606a70",
                'customer_name' => "kQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotV",
                'terminal_id' => "9a784064-d673-47ae-88c4-6c21bce9089c",
                'transaction_id' => "1Har",
                'organization_code' => "IaQ-xN80f0DTB0za8tu8TiZH341O--Cq",
                'private_money_id' => "b6d3fb16-c1d1-45fa-8cdc-25dbdcfb20d0",
                'is_modified' => FALSE,
                'types' => [],
                'description' => "mp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
