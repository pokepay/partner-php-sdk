<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "oB1fsENUPzhVDEB6EEfSweIa1ZqQnjFUX9BViP8DXLMO4ZdLLarg6cp1K0qTKRckrxShH0AQD9d"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["cashback", "topup"],
                'description' => "QO6g7pt0bHdeN7fbOxRUa2tAhLnONRQ9yeUtTYtgEpEGXrWQLw4OcdFkj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => FALSE,
                'types' => ["cashback", "topup", "payment"],
                'description' => "QAS6ffLEdkBHlgvgy2aA403GnFkRIgjvpTElyJQlB5ERQrfCUXp7b1YHgiF4TQUL8fCe16nw8roTLQfc9DOEmqhDnePSrOthWCGD047iqDBDdmFoSr5gkXGkTu"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "8615dd1f-393e-4575-be43-edc2f1b71eb4",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_outflow", "exchange_inflow"],
                'description' => "CwEUc8h4uhd3Zg8e3hmrG4ECIuStInREDa7rmp5mdDfTJCvfWan8UDZDalfxn8VGtYzUjn8avLBOZkCMKgNdcbEYKutq2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "vIOVrP4",
                'private_money_id' => "8119d3d6-7446-43a5-ac0e-fc251fb97afe",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "cashback", "payment"],
                'description' => "uWfHbmO5h10xNuA7dCHe7SgQEBa7MQfMf8TJqj3hoele3okJgoxUf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "crrezOEe",
                'organization_code' => "MsH-i8--o--3IH-18b6ej29r0f--",
                'private_money_id' => "65f27af0-cd18-40cd-820f-16e5198c349d",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_inflow", "cashback"],
                'description' => "0zvWtZ09UPcxMD7OSZ64Tzg9gFKz9PooHi0Ev9J86PONFrTU9PaOi69J"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "0c253489-d78a-4af5-b0c3-20ae1e8b43b9",
                'transaction_id' => "gBylUq",
                'organization_code' => "S0-7CIvw-rAE8-7b-",
                'private_money_id' => "9e1e96f6-4aa1-483c-9b67-f13a216d5ee5",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "payment", "expire", "topup", "cashback", "exchange_inflow"],
                'description' => "pitmAzGgbpwerPwlyKxQfGIXPD3AngUoevm9Mda"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "l2b8MQV8h7TlQxBH0CIeigdw7blnOg7PXTR2nhlxFFUNxWHAQAmYVcKAugaYMhav7HX",
                'terminal_id' => "d61569a6-f2ae-4d57-95d5-612b071309d9",
                'transaction_id' => "3",
                'organization_code' => "Lkvk3P-He-K-2",
                'private_money_id' => "40749eb2-e904-4bd9-bf54-77b9ead7cb6b",
                'is_modified' => TRUE,
                'types' => ["topup", "payment", "exchange_outflow", "expire"],
                'description' => "UHwwvoJcA6JmRvS0ZXd8XaMalmkaZi9emVYT524RAT"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "ab2fd5f0-7a87-4f2e-a163-48f2122aa768",
                'customer_name' => "95rO4DdEAD98av2pAEOn9JOhppKbyg7U71t0kmdTx0ejtpH7BYJHz",
                'terminal_id' => "4ea385d0-a0b4-49b7-a948-58b9790d03c5",
                'transaction_id' => "I4t3V5uxN",
                'organization_code' => "OMo-ev---Sc-3kO8NL9xsjlJC5",
                'private_money_id' => "65abc925-4975-4f94-b7f5-6cb95fc38d13",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "exchange_outflow", "expire", "cashback", "topup"],
                'description' => "stNWhfe7qRmIUOCSAiG54kNcCJe6ShXqMFofs9WuqlKfO94OBu0LD3DGlJ261ZjmdAWQlA9fgcywcJJx99v0eG"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "2d2a1fa2-a7f3-470f-8561-87da73676624",
                'customer_id' => "d75c129c-8135-40e8-b0b8-566f01f597fa",
                'customer_name' => "9gXfYSPF2GNaVo25KDBtLEmIcjtI7O4kdDSXdqyYR96tMM0G4gPpBafd6rmmruQWBWseMvVm72Yq9G6e7di3SgXVIFlQS6W2XsQYFcEBCnhe2Jp2Ajwyo1ebnH9JPPAHYLsYeYrQwpQYP3",
                'terminal_id' => "2982e91b-a050-4447-a097-af07616b85b9",
                'transaction_id' => "1",
                'organization_code' => "Hw-1y-1PCm-1-zEu-N3O0sEEc",
                'private_money_id' => "bf8bd939-e4c8-49a4-9acf-f5604d814eb9",
                'is_modified' => TRUE,
                'types' => ["cashback"],
                'description' => "EubBlYR3tpVoGUs6BbQ62VpmYhlFn6Oe280L8NDtaM0A9HGEVw0D8cYCaBYZvEOFL4nqQiRj9bERC5h6j22zcgbWlWRrz"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 3745,
                'shop_id' => "78475cbd-99de-4e7e-ab0f-58ecf5828521",
                'customer_id' => "580434ea-229e-4d42-b175-93e951003f89",
                'customer_name' => "9dGFxyRRHEqiUoMlyWDp9I6CQElfkkET5EltKNpBBzyHSDvHBxXcVTYKrA9HIDvpdfh1PjTG165ip1PFNP46aswfkSID2OBE4hn8DwQRQdBpDZHOCcYawSnHhAvwZPMGHNtaNndBe9WuE73r9CvsxGav9Ap9iuz",
                'terminal_id' => "46cc7cd3-cd72-4e94-abac-fbec68a01f6f",
                'transaction_id' => "A9",
                'organization_code' => "-Nv0FR6FpvrVK-Uy",
                'private_money_id' => "58a22307-b4c1-4b7e-9594-36f5ff06d362",
                'is_modified' => FALSE,
                'types' => ["expire", "exchange_outflow", "topup"],
                'description' => "Yj7LWlfWY9qOT5uNHYvH6mZyWdqEcTZt9pgfho6OoXLvoaRC7cZefXJ2GptHCmiada2ou7a7akgpMkmElicUa6Q6MOu8p7b5lEBoWAuhccQxUreofT2Vku6y6u57PEaJpAZo6R4Xx"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 279,
                'per_page' => 3815,
                'shop_id' => "1fbb3747-2e23-4d06-b6d9-f20bc6f94eb2",
                'customer_id' => "07e54e28-b158-4316-a7f5-632c87507076",
                'customer_name' => "p6b1Aya7RW0f5D1QhJn2X9QZo2e1giDJbXvbnBHkIN8iaK1NlhSQEAixPBH60kQPqrQeZr9WgV3VDcGIjnLfetwsO6ROv5bV8AtnzCuE3z0Tu8OGgAeiChbPYEcatwuWyn1qeXtByKaN0ZojkNTLMNGXzY9Q3oasI0oraUYMsf3IjIM8o8OUs19jwBuVPNpqUBGKA0pmOCB6wXPRqEbHxWJ3wn2H1Fj",
                'terminal_id' => "37cc2ad3-8efa-4c31-b272-3c6671fdea0c",
                'transaction_id' => "tSi6Z94",
                'organization_code' => "-I--y-XKQ-B1V5-0",
                'private_money_id' => "cc877083-f2fd-4029-9fbd-45eaab292f9d",
                'is_modified' => TRUE,
                'types' => ["payment", "exchange_inflow", "topup", "expire"],
                'description' => "75szRxs5Lc7Igu5ECuf4FIlOlbVRqSPX0Pi4hN7H4kgdnxn7Elgf5YfVJDYPITWntjPKsw1FLjeBWpuLOCEW2qMG83Z7742KEo0xZcIacFUP9aAwJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2021-05-02T13:00:44.000000+09:00",
                'page' => 972,
                'per_page' => 3552,
                'shop_id' => "68a4a4ee-3382-4154-af63-199bd8d23d25",
                'customer_id' => "5f5adf0d-fbbf-46cb-8f28-9379997957d6",
                'customer_name' => "rIBU42LDMkoK2X4rBI0JB5LXUZkzBpwo2ug8s1ceMiqQQskUext4D3wQIg4zJca7lmqSaN1oXehMBjxhp9WelJdGdqdd41phjj9Wke",
                'terminal_id' => "b4cc784b-d266-4c88-a37c-347b4cac534d",
                'transaction_id' => "N5",
                'organization_code' => "-QGu4O71-c-iT-D-b-3XPua6L3d",
                'private_money_id' => "68f52db6-27f3-4b2f-ac6c-b2af358a3e4d",
                'is_modified' => FALSE,
                'types' => ["expire", "topup", "cashback", "exchange_inflow", "exchange_outflow", "payment"],
                'description' => "RGbtF8KhdwBIuAgYkZ6YwdoFOzboX71sD2CObn6zixEZQ8E69jdwLf90tzC6nhIUv2YEGaBt65QXauCdqlX1IIe6sxsu7XP1e6C3FGtTjIeHVbFKXPd21yNCpiyyBSU1nkeLow5QAo6AAX2SkL849ohBOBT02CVelFiEYZaAbtnZEeJvW1sOl0fBQeVZZ8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2021-01-21T22:12:25.000000+09:00",
                'to' => "2020-05-03T14:04:43.000000+09:00",
                'page' => 572,
                'per_page' => 5545,
                'shop_id' => "76be597b-bd6a-41ae-be4d-c24e8511bba3",
                'customer_id' => "13f3848e-ec98-4e28-a67b-13428dc2b9ac",
                'customer_name' => "ZiBbLPz0K4Mdn59drD2HiLaUrztbZ4TeC7y90BudNWbgEF18wOtmcO2tIdzhOyKfwAgrGOEhw7m0C215sWUOAJ4P3lOsr31jFdDLteaRuayCfv6cJEd8dhEHmcSfzAbjixFUvETnql1Y0hSMVl6mD031kSCFOTKfVBXXi1XymcE8poZaeptXaxzD9zysuV883ojdSGdXwCzubMpMlVMous3XIcRe5tfFka0Ul90nHFWapti",
                'terminal_id' => "09956408-192a-47ff-87f6-6ee4adbf4913",
                'transaction_id' => "HvC1iZ78Z",
                'organization_code' => "3E--i--a-fdQdnjvlCM-2I-YKw-t-",
                'private_money_id' => "521aa157-dbfd-4f39-96ba-1ab86227c2ae",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow"],
                'description' => "1M8ml3nEAwBwlr8U1XOUBWLW1wYUb4NZP56fQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
