<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "ipPvqWoVqNcgErVLXtDHqH5CrkOCjDF2sZu5wwcALNVYnmtcZE8Q2MdsXAHas2OnjE7A9rRyrRg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["expire"],
                'description' => "yW6jJmtyvZy7eBikaPZhoxiiAn8O851prpuaPAoAnKLG7WjzdQwzLXZeYVp3CA7YJpOK5joOxrlKkA2nf1NL4697qsDFEJLeRuoTlLh4c2TqR4JdajypEwbRg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => FALSE,
                'types' => ["exchange_outflow"],
                'description' => "e3PLOwYiwRKSRHAWiH84mJmXUfYrJa"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "2ae2b513-cb20-478e-b9f4-2c3c45e60bf5",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_inflow", "expire", "payment"],
                'description' => "8a26nL5Ljky2fVLpfb5krJ3FbH6C1DXcvFN6K9qRhLR6f0u1Ih9efWISwQjMZIloesmdbWWYkb4lwdSd9ra2IL33QAp9pGBIB76FFLCtmRsT9rmoM4YKL0CGHF8rURbO35aHGndFzzJkeNLxOyz0vpaLA8gquw"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "mNPkU060G-VcYQ5csQF8xgS",
                'private_money_id' => "a54e7f8a-066a-4cf1-9de8-749a1b1513cd",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "payment", "exchange_outflow", "topup"],
                'description' => "drtdWS9Kvo7nRthenw1Pk4kj5szTvUIWdecXZnVFtZioKbAIA1JPKyhpuqQYA0nZpxAHUT0IQDUjbM2HRm9uMMJxIC8yeoGKUTLiL71m07twqzpu6XWjNyyifSJVcgYMIwVsaTF8UlUt3Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "KMvStmepf",
                'organization_code' => "--4-y-2z-O4p126aBM336jQc-398d-vz",
                'private_money_id' => "54b6e6df-549f-42ad-8d99-5c3d51218c6a",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "topup", "exchange_inflow"],
                'description' => "BzE6GGk9GtzoxVkA2jR2TYw8XigIn8C4jwsDADnAn9VFFPYGJX"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "268336c8-60d1-4023-8e6f-4a47037d783a",
                'transaction_id' => "37D8X",
                'organization_code' => "3sJA-I-iv-V--R9ug-fWpd6-",
                'private_money_id' => "a341305e-c5b4-4071-a09f-671834a9284b",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_inflow", "expire", "topup", "payment", "exchange_outflow"],
                'description' => "vHOiYBD5NkSEOx9A8dXdES5TmID4fejtYzy3AymUdVfmbD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "4Jbcs3RjJk1jFsMw1aKGIg2bcPYU4tuZrMnZ2U83H0qRGlREF6OPariHHWyZoPcpxA7EkMiJBK",
                'terminal_id' => "cefe68ae-5b46-4136-8626-fb607343dc02",
                'transaction_id' => "cW4K1r",
                'organization_code' => "D-DfuX-S",
                'private_money_id' => "54943765-0243-47ca-981e-4d2e05e62eda",
                'is_modified' => TRUE,
                'types' => ["payment", "cashback", "exchange_outflow", "exchange_inflow", "topup", "expire"],
                'description' => "Y0buyhVWvfZVW5rqcplA5UBCyczItXba23SmN9W9Fb0XpVR8sYccklrmkFIHOyd79OXpkAc31OYhvEKSo72XnwQLuSewEW4FjD5aDRw6RNlXuu8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "673b9d93-6a9b-48ef-94c0-863abbbd013d",
                'customer_name' => "GdLJHYhRM6jXfKnEqVbRpl273NNICiOdkyAWZIeOkadxgnWQgfsRF5ajaNC55j74JKthXWq85dHIvcFaXBHFxvS6VQpB9fsbkvhkl5PLRIL5vRoVPhHj4oExsAZ7753CQQj0Ep9GKPO7y1EAOXq3S8iqqKbjyw5HkghWgjJz9MH3XtBh2VLcCYSbqbkOqPtoNOUFRff7k3wNX0XmZVVUQ33L95JvXBbbf2S0snAGFkqsvUHPKUXc1",
                'terminal_id' => "d6ccd265-9cec-45b9-91ba-332e9af1aff4",
                'transaction_id' => "Z",
                'organization_code' => "--Y97-B--289fAXU1s-Gam5v",
                'private_money_id' => "9e641c31-b8dc-4f29-afc2-b5d70112663d",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_inflow", "payment", "topup", "expire"],
                'description' => "CtqeBr69kokWlmQDuwg9CDxzE3o11AOtmI8vaM2Us"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "e0cb4c79-69b2-4eca-a97d-a38ab10f13f7",
                'customer_id' => "73dee1a1-f445-4ecc-8940-7b6a0c2ce793",
                'customer_name' => "UjCBFli5xv5dHY9kP8aDPS3i15RRqKCM5IwIVGXazicevRUKwK0F30eZQBYK932lFJ1krRxbr1Mwa3PFlRBqJHJ3dgvp4",
                'terminal_id' => "64d8d269-81da-4cb9-8a8c-4e563521c75c",
                'transaction_id' => "ZbodDft",
                'organization_code' => "---8XBi-0--0Q4eu-TGP",
                'private_money_id' => "b30d8a86-5966-40e4-9991-92e7f216e88e",
                'is_modified' => TRUE,
                'types' => ["cashback", "payment", "exchange_outflow", "expire"],
                'description' => "Gx0YTQY20jwzeTlJbg3yxsbC4bBturorAElIEMa85sTN5KpfglCVcfzPe2HUfWIxsWH8Ui9duccR"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 7320,
                'shop_id' => "900ed892-dd4f-4db0-9867-c26fadedd552",
                'customer_id' => "34ad839b-ab0f-4cff-a9c4-c027d6793807",
                'customer_name' => "U6im1qQYAucl3UFOmvNnv3z9vFOlY7zz4uoUgvaebQ7mI6okJJ1jIzfatxlBWolhdvkVuf5RjQ0rpVhq8A1dHS4Q5FmsvJw3lzeiNOMV8MZcb5uV9r7EP2qJ1XtvYcIU",
                'terminal_id' => "13b3cf68-b6fd-46cf-a763-2e6781da9008",
                'transaction_id' => "WtV",
                'organization_code' => "-4-L6ZKY1V4G-U--j-W-3Iaf-G-sbE3x",
                'private_money_id' => "144ef859-00a3-4677-8dd0-b7de06d63f7a",
                'is_modified' => FALSE,
                'types' => ["cashback"],
                'description' => "V4QulztBHJE1NkNzxos5AvqeikwGsZJFdDJTF9h7mvTz969KtcitKv51Oa"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 885,
                'per_page' => 2261,
                'shop_id' => "dbe2ecbc-c5c0-4cd6-b8c1-4b726ed9775f",
                'customer_id' => "f6416677-5287-4d8b-a8bb-33f15e0f492f",
                'customer_name' => "12bz4iZKbcMZqnw1W04AlyZ17NxYGuQZTPNMFKKRPhTCIP4splir7okSovs8FDQ",
                'terminal_id' => "c6bd53ab-0dce-4609-96f0-cc2f97ff47ae",
                'transaction_id' => "Byp",
                'organization_code' => "S346Y3fN---7Em",
                'private_money_id' => "92bb9c0f-41c6-46be-b56f-a51aeb86559f",
                'is_modified' => TRUE,
                'types' => ["cashback", "exchange_inflow", "topup"],
                'description' => "s03Enkhxpz5saKO8qZo99OCAro3dMbaqpFIMdIDtf9Ls60DmNQV0E6PTGWsnXyj5iIQVvoN8WqSHql"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2022-05-02T15:01:08.000000+09:00",
                'page' => 6741,
                'per_page' => 6849,
                'shop_id' => "415e4da9-d0b3-4826-865f-7ecfa79e8bee",
                'customer_id' => "ffe3bcc7-286d-441b-aa7f-adb1e43c87ad",
                'customer_name' => "mxkI7HZAjwQzPqC0FtN9EtxX0VO1brAvN351b1L3xayL5j8y3508Epb6qUOrE05MlsLtowFEpnyq7OFIA6aMNdqvWYUaFLSI56PZo38ytD34LRuPkcE7OVq7R1vOOsxl6qx7dq9X4eCiyRbyJDqIe0GZyawtpUe31T9NwbfUiKrcn5AktOw3FwHl9vLj0WVQg3IWvYsrCGquMnSCt0MlgTfMJURBR989WWcr24HQlkbYNiMUhlYrDkBu7xmr",
                'terminal_id' => "5b674821-7a1d-4293-9d6e-9c521e642c87",
                'transaction_id' => "hfziO4Sa",
                'organization_code' => "G-hHTM2to--Ef1",
                'private_money_id' => "0f91884c-14eb-4da1-aa78-76f4f899cac9",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_outflow", "cashback", "topup", "expire", "exchange_inflow"],
                'description' => "pDG8JgeIHcfdHVzVtCkKpmqOrbix7gV8V5c"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2022-03-08T20:36:34.000000+09:00",
                'to' => "2023-04-27T18:30:27.000000+09:00",
                'page' => 8007,
                'per_page' => 2065,
                'shop_id' => "d68fab84-555c-4f87-8d3c-ed6e037bc9f1",
                'customer_id' => "92010d2c-c502-4d1b-b63f-08f4f831fed6",
                'customer_name' => "vbszeuxXizzGRxhtPHznbqNMFppM1pvl2v9yQuSJGc3sbhGI9xjRxbRCPhuBMudAtUALsdbxr1aK8MrKnpwN7HQs56ca28sJtTBO4N0m18HzDzzmBAl9l721hxTrTowO2Nf6dnuecHYmAHrWc16R5Pi13OFzq9wmY",
                'terminal_id' => "ec18d3ab-d389-4b53-b289-ac34486ff7d8",
                'transaction_id' => "Q",
                'organization_code' => "-6---9Yy---1yXd7lEk6883N-sBh-Vr1",
                'private_money_id' => "8c291aaa-6774-4498-b3a7-864eb0f0c833",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "cashback", "expire"],
                'description' => "vXUxZv6xWNeQMY18UuEnCNXjMiGVBycK6BuU2VnqscxRLLIEv7zYVhuyLKoDNJmmJnsPE7W"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
