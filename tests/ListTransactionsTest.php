<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'description' => "68L6sAd9b7cVmTQR8eg6SxojCTh0lwDbqsJQ59k74ojAFLxA3Yoeyq6f0bfQC9KlgVIx5bkm6BrREJaH4DcIkBYL45bDLbuf1gOegcqTwYO82kGPQQr2MO5KCC4HxuDHtlw9XgI7tgcBNDr8Jq904qs3Jhmh1uan3I0UucsmEO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => ["expire", "cashback", "exchange_inflow"],
                'description' => "mxT0m67rIzuN9tcgEpMBK76fvM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["expire", "topup"],
                'description' => "cf2iX3AwrgRsK2JGpnBdnuespMtDCVQrS6v1di8SPYB0k9hbbMxBar53HcoJKT8h6NNtCpjhCG656zCwGPJ3qle6Np6rNpH5UlA66bAQLZwcFoeDqSO8No0ggR7lhzEIylGSzzqFet7Px0tIVgUdo0aPSYwh7UynnXcOyfVA4THGbyJtEZUGT"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "daa9b73c-9d6c-4600-8e7a-272b838785f1",
                'is_modified' => TRUE,
                'types' => ["payment", "expire", "cashback", "exchange_inflow", "topup"],
                'description' => "B8L7GXU7fxaI97gg5NPCIz0Tx2U5mJFduUB68TTiqwMruivuRfXV447Lle6hV4FFCfZlIs4WfCVLTGKjVtYv"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "c-9H-0-w-T4-F-V-9ICYH-3u-50----",
                'private_money_id' => "6113ed5f-0843-4434-a60c-3864baa90bd2",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "payment", "cashback", "topup", "expire"],
                'description' => "dLvWonzXPLVbgY5fuX144c5kqO8cai037TCA3KwgLXHNwNjQ8v2WxuXpP6imEka6urEvaKjJuG1UgxpmR"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "rAvG6eR",
                'organization_code' => "k-sB-59x8--p-xHtCKl8",
                'private_money_id' => "89e5e59b-b4f3-4a7b-a53d-3bf068795601",
                'is_modified' => FALSE,
                'types' => ["cashback", "topup", "expire", "exchange_outflow", "exchange_inflow"],
                'description' => "UOJgcoalrIKJjNskxAVIfeDGg19jlDOXHGEaaahUFtzotU3fY3fI5FjYl8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "1cafc533-9117-4b74-9a47-251d6fdb64cd",
                'transaction_id' => "iS5EMJPov",
                'organization_code' => "--ub9SM--Bzh3-3fxZVZ-9--HZ",
                'private_money_id' => "1a15d452-a549-499e-835d-2ba1af65bacb",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "payment", "exchange_outflow", "cashback"],
                'description' => "0J9jnlqYMrPMTRSR5F5edzEcOruRKRMON1ggStAXtUcx54GBWwAYqfrxiFvEMDGHSYPPZQ0KG3zOWgY5WKMYaF9XRxW5C9C"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "iWw8qyzgK2RvQT7jbDzZJ9LdWlnhOm85RRz1bpcDSO2ZwohWo6RmhF8oFQCvWVhjEc72RON5f9B7AjFZnq1bVxKoRp4FR8tjzVyIQZMP1y1yGA1gv1rzdQal6",
                'terminal_id' => "ccefefa0-82af-4631-bd36-fd2ed5a08dff",
                'transaction_id' => "l80p",
                'organization_code' => "D-kbcbDQ87NUzu-yk6AeHD6KH",
                'private_money_id' => "100260cb-96f7-485b-90d0-54f420cab6aa",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow"],
                'description' => "zWCh6Xn2BeXoxJ1Bg8VLnWhE35cKJmQzjVZFQ2ao2sR8lJjI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "0c307ef0-f5ea-4981-92cc-ed7473e5ab50",
                'customer_name' => "Jhhl2kK5kxc2L4scr1beS7hIBgPq0F9q4yjo8OKCWhpBmEXQwolZkKykkq2MdHgVyyjwSzVWKaA0wLXe6zmr5rtjU4szWfBk0Qto20UljV492EawAvlzo1Wk",
                'terminal_id' => "a68d21e0-8d5b-4d3b-b321-07d469296e62",
                'transaction_id' => "4PVDV8tE",
                'organization_code' => "d-BY038RkAU-K--M-Ra-X",
                'private_money_id' => "b7bf12e1-24c0-4fc9-85bd-9234e45eefd6",
                'is_modified' => TRUE,
                'types' => ["cashback", "exchange_outflow", "topup"],
                'description' => "IdOxXzMoRx1dXRlMFGClLguNwt1ZwJyeVHOV36wicTwEQlKYQVakvQQh1N5eUJ0yWxizlfki5v3rHj1lH2vUZKJ8AexuTcEPfOifnGX6OLvpHCZxzP8B6mJRRK7jQF0GIia8vNSfBRk8zpN2Q6BCx5RG95VFzo5RcVnbRMWIpL1sMJgwFo6JuG2Kl"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "dd0174d5-552d-4646-90e6-c7c01de92a7b",
                'customer_id' => "9c4dde60-7987-4d8b-bbb2-1a095b4e88dd",
                'customer_name' => "uMBxxV9vWJQiPegGWmfCpfkERA48SRaeguTf2SYnpi2",
                'terminal_id' => "87d155bd-72d6-4368-95e8-71774e65758c",
                'transaction_id' => "L6MsYsur",
                'organization_code' => "UQ-49U5",
                'private_money_id' => "954e3fab-0dc3-45d9-bba8-abb04168bf8d",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_outflow", "exchange_inflow", "expire", "payment"],
                'description' => "fHC2CjMkqWotYe9SnBLGbTLC1fylvd9AnlGLBnCWm61EbH3ZBgT6UHaaHiuCiH1HWNi5bqbXSQO5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 2089,
                'shop_id' => "508dc08b-de5d-4e49-8950-8697ac621dc6",
                'customer_id' => "0fd0ded3-052d-4b0d-a026-e0390741de80",
                'customer_name' => "Meu3Jp3GDacgZ1lXJB5zCk8o2uqUoOzjOSEhOmjppyXlWkYQlEmIjR7VRwCdOj40HDMuknCiSMXipFvzhIIP7kOnMQpptRL2dUvmtmFptObuhzwauubncFVqAYuUKtls0Z6tn0TF2VfQYfLD6",
                'terminal_id' => "daaa6744-2ab0-44d5-8914-151d1449904c",
                'transaction_id' => "U",
                'organization_code' => "-v7Xh-H-w4kgn--n-0w3Dy9-pI-",
                'private_money_id' => "f327dfe8-c533-4ccd-9234-22579144166d",
                'is_modified' => FALSE,
                'types' => ["cashback", "expire", "exchange_outflow", "exchange_inflow"],
                'description' => "TcvEQ9vhuSsamWijOIpWibs9XYURaiZ6Dx1gkaszgVEEHnum5aFPXgx3kjAc57nzExGDntlJkUANTJHEkERSWWBgjFGtDJBZR5AbvMswDWQTQd9U6U5RZIThgLFWNEePxuQPgIbihBAkBGxm0Yha0L6Ht1ybMRhQ5hUobfDIyAlssQDpaoQKe0Hle2A3c8fjn"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 5934,
                'per_page' => 7712,
                'shop_id' => "35af8f5c-daf3-4811-b9bf-2bd53428d5df",
                'customer_id' => "5a5c33b4-b622-45c6-a548-d58bdf1a7377",
                'customer_name' => "oyq0ZZ3LqXWxjbEnEoSIQFT8gVsfPuQVaowDYu3d5Sm9zyIcRdxyPhvN5IwiETAQgPekgAKwMH1",
                'terminal_id' => "de55d3b7-a934-4e72-a7e2-1966c9026844",
                'transaction_id' => "iH42QTS",
                'organization_code' => "Lxe1Bis-YR29o0KU-Ij-j-8Qg-",
                'private_money_id' => "6d4a8515-2918-4fa4-895b-5c0f4f807925",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_outflow", "exchange_inflow", "expire"],
                'description' => "cp41v"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2021-06-17T14:22:42.000000+09:00",
                'page' => 2887,
                'per_page' => 2026,
                'shop_id' => "2979e912-a689-4ece-b0c7-1ec4214da058",
                'customer_id' => "32d35154-a5fa-4509-a259-2bd6d8258a2c",
                'customer_name' => "5gUB2ncbInL1kdPtX34JCRuH9seuaIH49bzPpyDdManbnSE1pz",
                'terminal_id' => "f00c9a07-32d5-4af5-8c1e-da46211983a6",
                'transaction_id' => "C2Y",
                'organization_code' => "D-pUPr8u8s0NPv",
                'private_money_id' => "c973d230-e135-4bc0-8a2f-a4fe964aaac1",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "exchange_outflow", "topup"],
                'description' => "5ouzK8aqMU7zGD122Aj56qUCV9VG"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2024-01-28T08:21:15.000000+09:00",
                'to' => "2021-03-19T18:06:32.000000+09:00",
                'page' => 4521,
                'per_page' => 5708,
                'shop_id' => "9c3a0de3-40b4-4ca0-b358-06b730057a4a",
                'customer_id' => "302f10cb-7f72-4425-a574-cc1ebbbc57a2",
                'customer_name' => "IUCcgwokeLuTHz6NCcviY6xe6LHkTuVpPamsVnk7glHM1Flzv8oSwAI8Snh56MllDgmospIl0Doyz44FHfPsl5i1gbErX1kMJKtFXM1RYY4pjdoWw5b96EWEwNqZJdf9FIZ2GbAJNHYdnpF6I7N5OVFdlqLks3vK4gyDw63j57hluiANfQMUDbLQGQ3AH5PfXPROBLS6BFHGi2R3NUuFka5Q2GIeyen5asc",
                'terminal_id' => "781b9dfc-3dde-45b9-9233-be9cc72646a3",
                'transaction_id' => "iVCpg4Gia",
                'organization_code' => "9-MorYN-k--INb1xv-6h--Pjj4t4A0",
                'private_money_id' => "c30e3aec-3c27-4721-a9db-c4173c51f1db",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_outflow", "payment"],
                'description' => "rDJuTbuZfYO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
