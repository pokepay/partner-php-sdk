<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactions extends TestCase
{
    public function testListTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "exchange_inflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'private_money_id' => "b3749756-8106-4174-9c3a-2ba298e8ca11",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "topup", "payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'organization_code' => "I2-2-G9--1",
                'private_money_id' => "615f8196-f5f3-4ff6-b715-547504f77f22",
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_inflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'transaction_id' => "1b5c03a7-3b86-4aa3-a278-768e9bdfec3f",
                'organization_code' => "-7d-g-b6iS32WX-gqLu-M-4A-JG--",
                'private_money_id' => "b6dcb618-b35a-48b9-8ffa-214edef7544c",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "topup"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'terminal_id' => "85fc10ef-c6c1-42a0-9c8c-d48f10a8d575",
                'transaction_id' => "c452fd84-b760-46d0-932c-136b1bc38fab",
                'organization_code' => "F6rD68Aq",
                'private_money_id' => "c2ebb542-b325-4685-b332-deff24cc0e4c",
                'is_modified' => FALSE,
                'types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_name' => "YYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrt",
                'terminal_id' => "ef6d2f8e-61e7-47bf-9777-3a52a35dd4cc",
                'transaction_id' => "6df9733d-2e0f-4769-8a78-ba65098fedac",
                'organization_code' => "0S9s-b-zSFjOgue-Z",
                'private_money_id' => "77f6420b-37e6-4631-8f98-d6a364679511",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "topup", "payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'customer_id' => "97241719-7d86-4463-b3ef-c4477a3a86a8",
                'customer_name' => "3F55uy5",
                'terminal_id' => "131ba2dd-bf36-4e66-96cd-83ffed3701ec",
                'transaction_id' => "fbbd6597-ee5c-4d26-92b4-94ef052f8776",
                'organization_code' => "6K2LE-uqNcy",
                'private_money_id' => "e56727b6-f9a2-4dd9-9097-34a697d8e187",
                'is_modified' => FALSE,
                'types' => ["topup", "payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'shop_id' => "f1dc9af6-286d-48c4-a022-9add0ad0fc3e",
                'customer_id' => "22aa7df1-0e50-47c1-8762-edfd409bf19d",
                'customer_name' => "tHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN",
                'terminal_id' => "664d6dbc-f235-4f75-95d6-7b484ba0a6fe",
                'transaction_id' => "0f45fd4b-0a49-4e16-b79f-5d04dd825aed",
                'organization_code' => "t16640PHYa--3",
                'private_money_id' => "337159e9-673d-4cea-98b4-717f44b4f160",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'per_page' => 6619,
                'shop_id' => "a60a02ea-20c8-473d-8df7-9c6818b08862",
                'customer_id' => "857192ad-1239-4a6c-9ad6-ab8a1aa9e839",
                'customer_name' => "sTjb",
                'terminal_id' => "6abace12-a20e-44df-9271-9ba6f099d98e",
                'transaction_id' => "b3954460-8538-4284-976f-197fc1b8e2dd",
                'organization_code' => "DE---XMxvFoMK8-V6ok2U8mU-vl-",
                'private_money_id' => "1944eeef-a05d-4999-bc09-a9bc6ab38f59",
                'is_modified' => FALSE,
                'types' => ["payment", "topup", "exchange_outflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'page' => 7183,
                'per_page' => 1101,
                'shop_id' => "92828a74-28bb-44ca-bf79-6a3d730d9f1a",
                'customer_id' => "0b558669-a50d-48d7-9862-604411210ad6",
                'customer_name' => "6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVo",
                'terminal_id' => "d3085e22-2090-4a65-b7cc-d7ef61ad46e1",
                'transaction_id' => "76ba0a1e-5a4a-4184-a767-6dc9536c8ccd",
                'organization_code' => "5--66---0",
                'private_money_id' => "286b2aff-1133-49bc-b8e7-3fd658419da3",
                'is_modified' => TRUE,
                'types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'to' => "2024-02-07T00:18:51.000000+09:00",
                'page' => 1836,
                'per_page' => 8878,
                'shop_id' => "0fd3be87-5a46-41cc-850b-5ced1949a5f5",
                'customer_id' => "fc9860b9-1785-4e2d-927c-ff565354c9b4",
                'customer_name' => "TQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF",
                'terminal_id' => "c125b0ac-8437-4935-8d5e-ac409e6006a4",
                'transaction_id' => "8d65d325-aa46-4b1e-9b68-605ca0b25be2",
                'organization_code' => "KvUQCe9g1-pc3n9--z---qEPH-",
                'private_money_id' => "19c2ba7f-219f-4a06-b5e3-66342fae0485",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "exchange_inflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactions(
            [
                'from' => "2019-11-19T13:18:57.000000+09:00",
                'to' => "2023-08-17T15:58:28.000000+09:00",
                'page' => 7192,
                'per_page' => 3376,
                'shop_id' => "e40db014-b033-483d-8441-9fee5e06359b",
                'customer_id' => "38b979eb-23dc-407e-b6c2-9fd4b9a70ad4",
                'customer_name' => "gxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH",
                'terminal_id' => "a80df4b1-7b47-471e-9fc8-b659302db327",
                'transaction_id' => "e4d8e6a0-634f-4487-80a6-e4234e8c8b8f",
                'organization_code' => "v4-u-fJf-2CG7-0",
                'private_money_id' => "257b84cc-1ba7-4b5b-a101-6fd8033c3a63",
                'is_modified' => TRUE,
                'types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
