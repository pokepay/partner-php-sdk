<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCpmTransaction extends TestCase
{
    public function testCreateCpmTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCpmTransaction(
            "NIoqmlJpzKOYIsRtFF9xx8",
            "8c663c47-7b5f-4240-831a-4911647fa5c8",
            6572.0
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCpmTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCpmTransaction(
            "NIoqmlJpzKOYIsRtFF9xx8",
            "8c663c47-7b5f-4240-831a-4911647fa5c8",
            6572.0,
            [
                'strategy' => "point-preferred"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCpmTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCpmTransaction(
            "NIoqmlJpzKOYIsRtFF9xx8",
            "8c663c47-7b5f-4240-831a-4911647fa5c8",
            6572.0,
            [
                'request_id' => "58cddd02-e7da-463c-9820-860b7b86da9c",
                'strategy' => "point-preferred"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCpmTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCpmTransaction(
            "NIoqmlJpzKOYIsRtFF9xx8",
            "8c663c47-7b5f-4240-831a-4911647fa5c8",
            6572.0,
            [
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "87fff033-2658-49e1-a8b7-34a588303b30",
                'strategy' => "point-preferred"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCpmTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCpmTransaction(
            "NIoqmlJpzKOYIsRtFF9xx8",
            "8c663c47-7b5f-4240-831a-4911647fa5c8",
            6572.0,
            [
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "7fc65c90-b7ee-46a2-8f16-d4bce6538980",
                'strategy' => "point-preferred"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCpmTransaction5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCpmTransaction(
            "NIoqmlJpzKOYIsRtFF9xx8",
            "8c663c47-7b5f-4240-831a-4911647fa5c8",
            6572.0,
            [
                'description' => "XURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7Xmp",
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "b4161722-b471-4ee6-831b-b05064a2e986",
                'strategy' => "money-only"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
