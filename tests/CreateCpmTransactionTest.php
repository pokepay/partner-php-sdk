<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCpmTransaction extends TestCase
{
    public function testCreateCpmTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCpmTransaction(
            "AF2iLhkB08mWoSEw4Yfnz5",
            "bd45e765-53e0-4b33-a23e-bdea58df0881",
            3032.0
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCpmTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCpmTransaction(
            "AF2iLhkB08mWoSEw4Yfnz5",
            "bd45e765-53e0-4b33-a23e-bdea58df0881",
            3032.0,
            [
                'strategy' => "money-only"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCpmTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCpmTransaction(
            "AF2iLhkB08mWoSEw4Yfnz5",
            "bd45e765-53e0-4b33-a23e-bdea58df0881",
            3032.0,
            [
                'request_id' => "eff09dcb-e0ec-463c-a4c1-4ba98e9f29ce",
                'strategy' => "money-only"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCpmTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCpmTransaction(
            "AF2iLhkB08mWoSEw4Yfnz5",
            "bd45e765-53e0-4b33-a23e-bdea58df0881",
            3032.0,
            [
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "af2fa697-79da-43e5-b439-c5976caea37d",
                'strategy' => "point-preferred"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCpmTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCpmTransaction(
            "AF2iLhkB08mWoSEw4Yfnz5",
            "bd45e765-53e0-4b33-a23e-bdea58df0881",
            3032.0,
            [
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "1ba10cf1-6e8e-4e8c-8b3b-0e567bdbf29a",
                'strategy' => "money-only"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCpmTransaction5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCpmTransaction(
            "AF2iLhkB08mWoSEw4Yfnz5",
            "bd45e765-53e0-4b33-a23e-bdea58df0881",
            3032.0,
            [
                'description' => "1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3H",
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "c2a3ffe8-959c-4505-aef9-60cec3c2985a",
                'strategy' => "money-only"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
