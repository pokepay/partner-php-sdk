<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "A",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "c5b1946f-7a21-458c-81b9-8857508431ea",
                'description' => "z3xW",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2020-12-27T13:13:04.000000+09:00",
                'issuer_shop_id' => "693b59b4-023e-4866-bb4a-9756aa798106",
                'description' => "nG3Av",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2024-06-11T11:43:29.000000+09:00",
                'created_to' => "2025-05-07T04:27:39.000000+09:00",
                'issuer_shop_id' => "3812b232-1930-4f3c-9d27-7b12b4ad108b",
                'description' => "Igud6F1",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2025-03-23T15:42:54.000000+09:00",
                'created_from' => "2021-03-16T04:27:51.000000+09:00",
                'created_to' => "2022-11-20T03:26:05.000000+09:00",
                'issuer_shop_id' => "abed8dc8-797e-46fe-a207-5ca627cc4fad",
                'description' => "IRf",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2022-05-09T01:54:52.000000+09:00",
                'expires_to' => "2025-09-01T21:37:21.000000+09:00",
                'created_from' => "2020-09-23T14:58:30.000000+09:00",
                'created_to' => "2021-02-19T15:19:15.000000+09:00",
                'issuer_shop_id' => "65858ff6-2377-4815-b522-a20093dc497c",
                'description' => "Zxk0nQm",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "vg0FcWUrBHOSV7",
                'expires_from' => "2023-03-16T09:48:49.000000+09:00",
                'expires_to' => "2024-11-22T08:03:44.000000+09:00",
                'created_from' => "2022-09-04T04:14:51.000000+09:00",
                'created_to' => "2022-09-20T14:39:46.000000+09:00",
                'issuer_shop_id' => "424d345b-5b97-457c-a3fb-2f1460830fa6",
                'description' => "46hf",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "ccc06c7e-4efb-45d2-ad96-9c1138db5b17",
                'organization_code' => "F0YKxTClCMK7WZ9OzNLNkjfoAuPS",
                'expires_from' => "2021-01-12T22:43:56.000000+09:00",
                'expires_to' => "2022-12-23T06:09:51.000000+09:00",
                'created_from' => "2023-07-13T04:20:17.000000+09:00",
                'created_to' => "2021-11-26T09:23:29.000000+09:00",
                'issuer_shop_id' => "fe2451de-70bc-4555-b5e5-f566b8eeece0",
                'description' => "Am0yTlB",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 6746,
                'private_money_id' => "28c9a2df-9a7d-4b90-96b7-aa0eb5b5a82e",
                'organization_code' => "jnhE6v0ICVfZpB32LWZFMYYNQ77",
                'expires_from' => "2022-04-15T16:00:08.000000+09:00",
                'expires_to' => "2024-02-06T08:44:16.000000+09:00",
                'created_from' => "2024-07-07T15:42:32.000000+09:00",
                'created_to' => "2024-03-30T23:34:58.000000+09:00",
                'issuer_shop_id' => "e862d29e-ef8f-44ce-8d21-066ec8f30644",
                'description' => "eQkP6BrH",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 1357,
                'per_page' => 4645,
                'private_money_id' => "d2814c8e-1591-4cad-9732-0ed42ae9696a",
                'organization_code' => "gwJkClYsxYjLV",
                'expires_from' => "2025-04-28T14:46:14.000000+09:00",
                'expires_to' => "2022-06-10T13:58:36.000000+09:00",
                'created_from' => "2023-05-16T16:23:09.000000+09:00",
                'created_to' => "2020-02-11T23:51:30.000000+09:00",
                'issuer_shop_id' => "a17fd04e-4f05-4101-a36b-6ced377aa058",
                'description' => "b6cDTOBE",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
