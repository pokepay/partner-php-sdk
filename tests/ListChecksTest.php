<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "ExHaCM6j",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "3e25af0b-8e5d-4add-b9d5-cf317417a974",
                'description' => "NUZdo",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2021-06-08T23:43:55.000000+09:00",
                'issuer_shop_id' => "fa9effa9-294f-4911-8654-fdfb05bd538b",
                'description' => "BhusxDPf",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2022-07-16T17:53:10.000000+09:00",
                'created_to' => "2020-06-16T07:57:27.000000+09:00",
                'issuer_shop_id' => "619eef7e-cea8-44b0-ba9e-918a2906ee09",
                'description' => "nW0J8J",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2020-04-20T14:38:15.000000+09:00",
                'created_from' => "2023-03-07T06:02:28.000000+09:00",
                'created_to' => "2020-10-06T20:47:37.000000+09:00",
                'issuer_shop_id' => "fcd3fcb3-0366-4ab5-8dfe-03f483cb4f5b",
                'description' => "dJavXwju",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2023-05-02T21:53:27.000000+09:00",
                'expires_to' => "2022-12-12T06:02:52.000000+09:00",
                'created_from' => "2023-10-10T10:08:06.000000+09:00",
                'created_to' => "2022-08-20T02:16:13.000000+09:00",
                'issuer_shop_id' => "13cd9fb6-575c-4214-9b59-e22cea6b43a6",
                'description' => "QAzv",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "m9pDKENfjkyVlmyq4o32H0hadNJ9Hyp5",
                'expires_from' => "2022-10-26T02:37:18.000000+09:00",
                'expires_to' => "2021-10-04T23:30:23.000000+09:00",
                'created_from' => "2022-09-27T08:01:15.000000+09:00",
                'created_to' => "2020-05-02T19:38:51.000000+09:00",
                'issuer_shop_id' => "7a646651-20a3-4c00-9a0d-4bf43a40021e",
                'description' => "rmb8",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "2520e77e-8f0a-42b6-893a-9ea106d7cbd8",
                'organization_code' => "U3HZih9432JlUpYwQVqKMSTqZ",
                'expires_from' => "2020-04-30T23:50:26.000000+09:00",
                'expires_to' => "2021-03-30T09:57:45.000000+09:00",
                'created_from' => "2020-03-23T15:08:15.000000+09:00",
                'created_to' => "2024-01-13T23:42:33.000000+09:00",
                'issuer_shop_id' => "49de497e-aa60-44ab-b63d-c6ab65de023e",
                'description' => "2XK",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 4360,
                'private_money_id' => "ea85ee54-8d0b-4f14-abf5-89a7ea935f26",
                'organization_code' => "rGTXLrX1tYu",
                'expires_from' => "2020-07-22T23:36:35.000000+09:00",
                'expires_to' => "2022-01-01T05:56:05.000000+09:00",
                'created_from' => "2023-06-19T13:44:34.000000+09:00",
                'created_to' => "2023-06-21T13:14:41.000000+09:00",
                'issuer_shop_id' => "966a5e93-b1c9-4a7c-b1b4-6846a3e67554",
                'description' => "V0Z",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 7614,
                'per_page' => 7072,
                'private_money_id' => "24de2003-0f2c-4b92-a8b9-a60e2cb6b156",
                'organization_code' => "j5KL",
                'expires_from' => "2023-12-04T03:18:25.000000+09:00",
                'expires_to' => "2022-09-20T01:23:45.000000+09:00",
                'created_from' => "2021-01-09T15:48:44.000000+09:00",
                'created_to' => "2021-10-29T14:58:06.000000+09:00",
                'issuer_shop_id' => "07573a1f-6f1d-43a4-ad0f-057aad59587d",
                'description' => "H",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
