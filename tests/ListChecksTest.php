<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "p4uCN",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "20a1aaae-c59c-405a-bc61-8e88941d74dc",
                'description' => "gRp11i",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2021-09-27T23:36:37.000000Z",
                'issuer_shop_id' => "82f70ddc-46a4-478d-a3f2-6f6617a74dbb",
                'description' => "LoN8ZP7287",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2021-10-17T11:29:16.000000Z",
                'created_to' => "2023-06-06T17:55:10.000000Z",
                'issuer_shop_id' => "a1c57406-4bca-40aa-a11a-8bef6d450e59",
                'description' => "b",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2020-04-22T20:45:39.000000Z",
                'created_from' => "2020-04-25T15:49:04.000000Z",
                'created_to' => "2020-11-12T10:09:58.000000Z",
                'issuer_shop_id' => "bb634523-69e0-4331-9746-7c6380cd7193",
                'description' => "Yx",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2023-01-15T12:33:00.000000Z",
                'expires_to' => "2021-04-29T11:14:49.000000Z",
                'created_from' => "2021-02-14T00:09:23.000000Z",
                'created_to' => "2021-10-07T05:07:51.000000Z",
                'issuer_shop_id' => "e26b7637-6992-459e-8b81-5cb2e501e9c2",
                'description' => "oQEom",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "dvzxKVxdoit0nsRdkY",
                'expires_from' => "2020-01-23T06:56:05.000000Z",
                'expires_to' => "2023-03-30T03:17:10.000000Z",
                'created_from' => "2020-12-30T16:38:46.000000Z",
                'created_to' => "2023-11-13T00:58:08.000000Z",
                'issuer_shop_id' => "5d298ea4-fd3c-4309-89d2-8379ec4de414",
                'description' => "9",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "d8cb2007-6135-47c0-be75-0fcb07e82708",
                'organization_code' => "Yj6aDVb3qDkr4zF",
                'expires_from' => "2021-12-19T15:34:12.000000Z",
                'expires_to' => "2020-04-20T07:38:28.000000Z",
                'created_from' => "2021-09-27T13:41:10.000000Z",
                'created_to' => "2021-04-27T06:58:11.000000Z",
                'issuer_shop_id' => "3d3dada0-1cdd-4e37-95f4-09b46e4e81ce",
                'description' => "9wkd",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 6158,
                'private_money_id' => "d288eccf-ea05-46db-98f7-1ee90733c2fe",
                'organization_code' => "DpfXuzoNbRpuKefj",
                'expires_from' => "2020-07-05T02:08:05.000000Z",
                'expires_to' => "2021-12-01T17:11:21.000000Z",
                'created_from' => "2024-02-14T04:50:02.000000Z",
                'created_to' => "2021-07-17T00:24:56.000000Z",
                'issuer_shop_id' => "1e198140-f7b2-4c58-a0ef-216e0e65db05",
                'description' => "zQcO5QE",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 750,
                'per_page' => 8968,
                'private_money_id' => "d783198e-8b81-42d5-9e6d-abfe2754f0ad",
                'organization_code' => "3I2kFchNQksZB6ByT3lVRQ7O",
                'expires_from' => "2021-04-08T07:08:50.000000Z",
                'expires_to' => "2023-04-27T07:09:39.000000Z",
                'created_from' => "2020-07-02T07:20:55.000000Z",
                'created_to' => "2022-03-16T05:43:50.000000Z",
                'issuer_shop_id' => "31ef2546-9fba-4c8e-a515-f5a485b79c21",
                'description' => "X",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
