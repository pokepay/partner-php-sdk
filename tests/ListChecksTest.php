<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "zjhGZdfRkV",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "b102c905-e435-4310-9ff7-d26b8865477e",
                'description' => "WzlxKrI8nj",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2021-04-30T21:46:43.000000+09:00",
                'issuer_shop_id' => "b73de250-b178-4d76-a494-2f851218ecf0",
                'description' => "IjPoddpH56",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2021-11-15T18:59:26.000000+09:00",
                'created_to' => "2023-03-31T01:10:17.000000+09:00",
                'issuer_shop_id' => "6fc1c3e4-ae66-49a0-a34a-1c00faf29e1a",
                'description' => "tYkY7",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2020-09-29T13:34:42.000000+09:00",
                'created_from' => "2020-04-07T14:53:19.000000+09:00",
                'created_to' => "2021-09-05T18:49:43.000000+09:00",
                'issuer_shop_id' => "d949f7ca-1c75-4604-b00e-a2e3a3373d08",
                'description' => "0IZBS",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2020-06-30T23:43:26.000000+09:00",
                'expires_to' => "2020-06-25T13:58:28.000000+09:00",
                'created_from' => "2020-03-01T02:24:56.000000+09:00",
                'created_to' => "2021-02-14T13:57:03.000000+09:00",
                'issuer_shop_id' => "547a83af-4867-44ad-8824-79dadc5807a2",
                'description' => "1AwI56",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "hQfS61G30fOhi",
                'expires_from' => "2021-05-12T06:20:28.000000+09:00",
                'expires_to' => "2022-03-23T07:19:40.000000+09:00",
                'created_from' => "2021-09-23T05:18:06.000000+09:00",
                'created_to' => "2020-12-22T23:29:11.000000+09:00",
                'issuer_shop_id' => "c853b36d-39ae-4a55-91cb-1c113089bae8",
                'description' => "k8rE02yV",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "37a12d35-c380-4c93-995c-8db2f2fc74da",
                'organization_code' => "vyhghCdmzJtJ74sr02ys",
                'expires_from' => "2020-06-29T14:55:13.000000+09:00",
                'expires_to' => "2022-11-29T00:30:27.000000+09:00",
                'created_from' => "2021-09-10T20:26:54.000000+09:00",
                'created_to' => "2020-03-23T17:40:12.000000+09:00",
                'issuer_shop_id' => "c56c8bc4-6bbb-445d-ba7b-46e260853f6d",
                'description' => "MYcxda3n",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 6586,
                'private_money_id' => "7cd93c0d-1a9f-4514-b6ce-2ad691e64de2",
                'organization_code' => "AAxigCK9UZen6Y",
                'expires_from' => "2022-07-29T13:16:12.000000+09:00",
                'expires_to' => "2022-11-16T08:24:14.000000+09:00",
                'created_from' => "2023-06-04T23:39:45.000000+09:00",
                'created_to' => "2022-07-18T23:24:45.000000+09:00",
                'issuer_shop_id' => "dfc7b4a9-ac32-4509-bf30-cbbcb0b5ea35",
                'description' => "uuvZ",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 2422,
                'per_page' => 6015,
                'private_money_id' => "3621cdc2-52b1-49c2-a92c-6a1d703812a6",
                'organization_code' => "ULXYo1JgaecTKu",
                'expires_from' => "2020-03-11T14:18:43.000000+09:00",
                'expires_to' => "2023-06-25T16:22:08.000000+09:00",
                'created_from' => "2022-03-10T21:59:21.000000+09:00",
                'created_to' => "2021-10-10T03:22:26.000000+09:00",
                'issuer_shop_id' => "3a15478b-a805-46ae-a3a4-5b7a5452e6de",
                'description' => "Ihq2Dy",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
