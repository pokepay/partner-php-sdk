<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "wzKIFQc",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "e8ce85f0-a247-42ad-9aab-675a8dda7294",
                'description' => "lRU03Fa",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2021-02-24T05:24:54.000000+09:00",
                'issuer_shop_id' => "227c18a6-2236-4a24-9650-7255a7309d3c",
                'description' => "pGrOCijX",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2022-07-02T23:18:56.000000+09:00",
                'created_to' => "2020-10-01T20:54:59.000000+09:00",
                'issuer_shop_id' => "9f5866af-ae0d-4f85-9d56-25d1baaf7e3e",
                'description' => "whb9lV9sT",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2020-12-17T07:39:42.000000+09:00",
                'created_from' => "2023-09-23T05:10:52.000000+09:00",
                'created_to' => "2021-11-13T08:16:42.000000+09:00",
                'issuer_shop_id' => "3477c087-d77f-4f62-920e-c4df4a1f4812",
                'description' => "8W",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2020-11-30T10:05:17.000000+09:00",
                'expires_to' => "2023-06-22T15:48:44.000000+09:00",
                'created_from' => "2021-06-22T19:31:37.000000+09:00",
                'created_to' => "2022-05-11T01:03:57.000000+09:00",
                'issuer_shop_id' => "483545b2-2699-4e32-9593-66d5f68ffa08",
                'description' => "1er3T1gBtf",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "20CiDsCwyLdW5AzEeQb",
                'expires_from' => "2021-07-17T06:13:44.000000+09:00",
                'expires_to' => "2023-03-10T20:07:51.000000+09:00",
                'created_from' => "2022-07-13T06:14:29.000000+09:00",
                'created_to' => "2021-08-08T01:30:29.000000+09:00",
                'issuer_shop_id' => "56522b92-8456-4468-8e78-520a3d027a96",
                'description' => "tNh",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "9d27192c-7381-45b4-97cc-c675f5c1a848",
                'organization_code' => "WoYQpDLtJyiW",
                'expires_from' => "2020-06-08T11:42:16.000000+09:00",
                'expires_to' => "2023-12-18T17:12:02.000000+09:00",
                'created_from' => "2023-03-13T15:29:08.000000+09:00",
                'created_to' => "2020-08-07T05:51:18.000000+09:00",
                'issuer_shop_id' => "0776bd79-8183-4ab6-8053-610db8132173",
                'description' => "attO0KDv",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 6579,
                'private_money_id' => "f2903050-acf5-4f6f-8746-23cb9789b255",
                'organization_code' => "3PYYZTEIyRndmm72c26C",
                'expires_from' => "2021-09-29T18:35:16.000000+09:00",
                'expires_to' => "2023-08-03T01:25:48.000000+09:00",
                'created_from' => "2023-05-04T14:17:43.000000+09:00",
                'created_to' => "2023-06-01T08:22:14.000000+09:00",
                'issuer_shop_id' => "e8a06342-fc33-469b-8f42-b18d993d3a37",
                'description' => "wghU",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 9489,
                'per_page' => 1388,
                'private_money_id' => "da8267f1-7d55-49cf-99ac-cab2d7733b5f",
                'organization_code' => "AI87h7tC8",
                'expires_from' => "2023-02-17T14:52:00.000000+09:00",
                'expires_to' => "2021-11-18T02:57:08.000000+09:00",
                'created_from' => "2021-02-27T19:42:15.000000+09:00",
                'created_to' => "2021-11-13T13:48:17.000000+09:00",
                'issuer_shop_id' => "3b750c29-9b3b-4505-9e8a-4ef6dc1c5a4d",
                'description' => "zjNmF",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
