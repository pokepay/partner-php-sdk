<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "vzxKV",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "640b29df-4bdd-4fdd-8f8b-c2f8a00ad6e4",
                'description' => "oit",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2021-01-09T20:47:56.000000Z",
                'issuer_shop_id' => "3c1ae76e-dbfe-46a3-b306-105227017b64",
                'description' => "0a6T9IRy95",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2022-10-04T10:31:17.000000Z",
                'created_to' => "2023-05-18T09:32:59.000000Z",
                'issuer_shop_id' => "07e82708-a76e-4759-a9ea-893a81c8ee36",
                'description' => "DV",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2023-08-06T09:38:39.000000Z",
                'created_from' => "2020-01-23T21:13:39.000000Z",
                'created_to' => "2023-01-13T06:28:01.000000Z",
                'issuer_shop_id' => "c093002d-f240-4c8e-846b-e9f230ddafb4",
                'description' => "WttvA7t",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2023-05-11T16:13:02.000000Z",
                'expires_to' => "2024-06-05T09:36:57.000000Z",
                'created_from' => "2023-04-12T02:44:55.000000Z",
                'created_to' => "2020-10-24T22:11:52.000000Z",
                'issuer_shop_id' => "e6b00f2d-1677-43eb-aa1e-e70d55bc4e64",
                'description' => "XwioDp",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "uzoNbRpuKefj9znX2XonFzQcO",
                'expires_from' => "2020-08-27T12:04:05.000000Z",
                'expires_to' => "2024-05-30T01:20:05.000000Z",
                'created_from' => "2020-07-31T16:26:05.000000Z",
                'created_to' => "2024-06-27T02:13:35.000000Z",
                'issuer_shop_id' => "8ecfc2ed-7764-470d-96e7-6307d783198e",
                'description' => "Um",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "085f3bb7-203f-4e33-8980-0fb2ab4c0b6b",
                'organization_code' => "FchNQksZB6ByT3lVRQ7O823WFeXC",
                'expires_from' => "2020-02-20T03:38:17.000000Z",
                'expires_to' => "2020-10-27T05:06:59.000000Z",
                'created_from' => "2024-04-20T03:42:57.000000Z",
                'created_to' => "2022-04-13T01:13:40.000000Z",
                'issuer_shop_id' => "ae173a93-d406-41aa-9c66-65f61a58df2a",
                'description' => "Wv5Set",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 1613,
                'private_money_id' => "a084768c-99a9-4e2a-80f5-615d7e7003a3",
                'organization_code' => "ZcB6tdcwibyPvTHbjOWbqqVGNOP2f7",
                'expires_from' => "2024-02-20T03:43:02.000000Z",
                'expires_to' => "2025-09-17T11:51:03.000000Z",
                'created_from' => "2020-12-11T19:05:46.000000Z",
                'created_to' => "2020-12-14T12:17:49.000000Z",
                'issuer_shop_id' => "a26c5e0b-75c0-4ee3-8da3-03ae2606f57c",
                'description' => "6XSXXM3",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 7862,
                'per_page' => 7933,
                'private_money_id' => "e8ede37f-8c5f-4950-83f8-69fd26ca8dee",
                'organization_code' => "FhfkfYgvABx",
                'expires_from' => "2022-09-20T22:16:50.000000Z",
                'expires_to' => "2024-04-13T23:55:07.000000Z",
                'created_from' => "2023-04-18T23:12:42.000000Z",
                'created_to' => "2021-11-07T03:45:26.000000Z",
                'issuer_shop_id' => "adfabd04-26ab-46b7-b285-ea2f770a7ba9",
                'description' => "Xm6F6onht",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
