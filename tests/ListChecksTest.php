<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "Gh0iISyDRn",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "43abae10-bda9-4524-bfc1-fbaf98aaa096",
                'description' => "x",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2020-07-22T20:21:37.000000+09:00",
                'issuer_shop_id' => "a011e34f-0ebf-414e-bbd2-b988f473e531",
                'description' => "kRK",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2022-01-28T15:06:20.000000+09:00",
                'created_to' => "2023-10-23T19:10:42.000000+09:00",
                'issuer_shop_id' => "6099b17a-f3f2-456f-9f4e-bbb46043a72c",
                'description' => "5W",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2020-09-13T00:46:02.000000+09:00",
                'created_from' => "2020-03-20T03:14:51.000000+09:00",
                'created_to' => "2023-12-15T17:07:49.000000+09:00",
                'issuer_shop_id' => "cfdec33a-d188-466e-a8a7-61c46af68e02",
                'description' => "Pc7u",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2021-10-09T01:04:09.000000+09:00",
                'expires_to' => "2020-02-06T15:51:13.000000+09:00",
                'created_from' => "2020-04-18T23:16:29.000000+09:00",
                'created_to' => "2022-09-01T05:29:26.000000+09:00",
                'issuer_shop_id' => "35475e81-1043-4155-a7fa-8bbf9f61e1cd",
                'description' => "711sS2",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "KkNbTGV",
                'expires_from' => "2022-12-17T16:26:26.000000+09:00",
                'expires_to' => "2022-06-24T06:50:18.000000+09:00",
                'created_from' => "2020-10-06T09:31:08.000000+09:00",
                'created_to' => "2023-08-22T08:08:15.000000+09:00",
                'issuer_shop_id' => "92a84242-076f-48d6-8682-6156bc225ee1",
                'description' => "oQSDx",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "e24a3e7f-4ff4-41aa-b333-c8bb3006a9dc",
                'organization_code' => "zgkEDXB9HiEuBLm4tSNRrUgif3j",
                'expires_from' => "2023-11-21T19:11:59.000000+09:00",
                'expires_to' => "2021-04-06T05:26:58.000000+09:00",
                'created_from' => "2023-11-10T23:14:24.000000+09:00",
                'created_to' => "2021-05-15T04:16:31.000000+09:00",
                'issuer_shop_id' => "c568172c-399a-4157-9242-878dc30c2b59",
                'description' => "wzwGWWtLE",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 7327,
                'private_money_id' => "3dc3a4a5-a5c4-422c-9a3d-71624d55cbb1",
                'organization_code' => "GSKTZF",
                'expires_from' => "2020-03-06T13:50:53.000000+09:00",
                'expires_to' => "2021-12-15T17:43:15.000000+09:00",
                'created_from' => "2022-04-01T11:08:35.000000+09:00",
                'created_to' => "2022-04-10T02:10:59.000000+09:00",
                'issuer_shop_id' => "88b3d36c-bc1e-4583-82fc-e82df8736634",
                'description' => "QFrlay1",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 9026,
                'per_page' => 1284,
                'private_money_id' => "9c2369e5-f844-464e-b17a-8080c948821d",
                'organization_code' => "Ws9AzJdtGies0IWF6sRmLoUlR2j8lT1k",
                'expires_from' => "2020-09-20T23:19:34.000000+09:00",
                'expires_to' => "2022-08-07T17:33:18.000000+09:00",
                'created_from' => "2022-06-14T13:22:16.000000+09:00",
                'created_to' => "2020-04-29T16:43:14.000000+09:00",
                'issuer_shop_id' => "fea028b3-a315-4c15-b4a7-2cdf0f54c052",
                'description' => "m",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
