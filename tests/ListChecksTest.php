<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "YD5uDMHgB",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "7d1454b9-069e-4101-9afa-c69dd06d4678",
                'description' => "aarDEu91",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2022-03-12T15:00:19.000000+09:00",
                'issuer_shop_id' => "bb796c11-7e4b-4564-b510-86aae816c437",
                'description' => "z2eAqGU",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2021-08-19T22:18:33.000000+09:00",
                'created_to' => "2023-10-27T19:39:05.000000+09:00",
                'issuer_shop_id' => "a0167772-9347-4f91-8141-9473e367573f",
                'description' => "oMj",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2021-10-15T17:11:59.000000+09:00",
                'created_from' => "2021-09-18T06:31:34.000000+09:00",
                'created_to' => "2024-01-17T10:41:38.000000+09:00",
                'issuer_shop_id' => "226b3436-ed64-4a6e-a89d-1528c86bb385",
                'description' => "7Cd5i3sI",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2021-07-05T16:18:11.000000+09:00",
                'expires_to' => "2023-06-05T17:56:18.000000+09:00",
                'created_from' => "2021-08-17T09:50:22.000000+09:00",
                'created_to' => "2022-10-30T07:13:05.000000+09:00",
                'issuer_shop_id' => "39c1d5d3-0aed-4954-b144-1604c336398d",
                'description' => "jMHXBd",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "SWMx",
                'expires_from' => "2023-01-21T19:12:22.000000+09:00",
                'expires_to' => "2022-03-16T16:43:31.000000+09:00",
                'created_from' => "2022-12-03T14:35:08.000000+09:00",
                'created_to' => "2020-01-08T05:27:33.000000+09:00",
                'issuer_shop_id' => "603fa9c6-007e-494d-a708-afa91f144aaf",
                'description' => "2",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "e614520f-3e38-4ee3-af0f-02499387d79a",
                'organization_code' => "HkazMdC9m3JAEplbv1rIXSB27LJ",
                'expires_from' => "2021-11-30T16:46:16.000000+09:00",
                'expires_to' => "2023-01-19T13:54:23.000000+09:00",
                'created_from' => "2020-06-27T19:05:40.000000+09:00",
                'created_to' => "2022-06-18T01:29:46.000000+09:00",
                'issuer_shop_id' => "4bd0536f-2c9c-4f0b-b69a-9cac37f87842",
                'description' => "Ev",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 8127,
                'private_money_id' => "0abf35aa-604e-420a-b019-88b567958031",
                'organization_code' => "dyvIkYWRE9VP5rwfxTyIG4",
                'expires_from' => "2021-02-11T21:09:42.000000+09:00",
                'expires_to' => "2021-01-27T17:05:18.000000+09:00",
                'created_from' => "2021-11-19T13:35:25.000000+09:00",
                'created_to' => "2023-10-24T21:19:35.000000+09:00",
                'issuer_shop_id' => "02906446-2d14-4a1e-a66e-7e47d1600731",
                'description' => "c",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 2023,
                'per_page' => 4174,
                'private_money_id' => "6db9f059-8881-4779-99c9-41b9eba77e2f",
                'organization_code' => "aAgmf9qqt4IuqcPbuDZn4MmFqQPW",
                'expires_from' => "2022-09-12T22:26:39.000000+09:00",
                'expires_to' => "2023-11-06T15:32:40.000000+09:00",
                'created_from' => "2023-04-10T14:01:20.000000+09:00",
                'created_to' => "2022-10-13T00:20:20.000000+09:00",
                'issuer_shop_id' => "e3fcd6b7-0407-45b0-9267-ab4f98bf74dd",
                'description' => "ac4zFMl",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
