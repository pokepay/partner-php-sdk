<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "oQxnfGh",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "3bffba49-76f5-4f4e-925f-6a532b01b6f7",
                'description' => "Gs2LC",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2022-11-20T15:20:29.000000+09:00",
                'issuer_shop_id' => "0117645d-71ae-4532-bbc0-ccb248086163",
                'description' => "VX",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2021-07-31T19:56:37.000000+09:00",
                'created_to' => "2021-04-15T02:33:48.000000+09:00",
                'issuer_shop_id' => "a8ddccf5-5484-47eb-9ece-1ba009ab39a5",
                'description' => "DTWGX",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2024-01-11T08:56:40.000000+09:00",
                'created_from' => "2023-06-01T13:23:24.000000+09:00",
                'created_to' => "2020-02-26T06:19:49.000000+09:00",
                'issuer_shop_id' => "04ad68e1-0bf8-4ddb-96da-f46571dcc2d8",
                'description' => "Gz1E4R",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2020-12-27T19:46:10.000000+09:00",
                'expires_to' => "2020-08-27T16:29:09.000000+09:00",
                'created_from' => "2023-04-02T19:26:09.000000+09:00",
                'created_to' => "2020-07-30T20:03:29.000000+09:00",
                'issuer_shop_id' => "4be27b3c-03fa-4a0e-b94d-75d034be6eb4",
                'description' => "aPGf6b",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "mAbsmG1qLQVsMVSzu",
                'expires_from' => "2022-03-09T18:19:21.000000+09:00",
                'expires_to' => "2022-01-29T09:21:25.000000+09:00",
                'created_from' => "2020-06-13T05:08:40.000000+09:00",
                'created_to' => "2020-01-17T06:48:06.000000+09:00",
                'issuer_shop_id' => "5b918347-803e-44ca-b12f-df14bbde0e50",
                'description' => "M",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "213d5270-6618-4c9d-928b-5b3b26a74479",
                'organization_code' => "6ADmA0N7ZxF3Z4wwprsU4TcXx",
                'expires_from' => "2023-01-16T05:07:45.000000+09:00",
                'expires_to' => "2020-03-30T22:54:59.000000+09:00",
                'created_from' => "2023-04-22T10:41:16.000000+09:00",
                'created_to' => "2022-12-16T04:34:13.000000+09:00",
                'issuer_shop_id' => "919073b0-b7b5-4179-a562-4b266fd8c599",
                'description' => "X2Nei",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 6057,
                'private_money_id' => "fce42f5d-85ea-4506-baad-454eb287afa3",
                'organization_code' => "FpRwTYhLz1l4S5",
                'expires_from' => "2023-05-31T20:16:07.000000+09:00",
                'expires_to' => "2022-12-02T18:54:45.000000+09:00",
                'created_from' => "2023-06-14T14:18:30.000000+09:00",
                'created_to' => "2023-08-03T15:34:49.000000+09:00",
                'issuer_shop_id' => "eb8aef67-22fc-4b34-a330-13189a22411e",
                'description' => "ESSh",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 4679,
                'per_page' => 3583,
                'private_money_id' => "7dfe254a-6edb-4f5f-b43f-a3e39ebe8200",
                'organization_code' => "5NsP37iz",
                'expires_from' => "2023-03-16T18:07:25.000000+09:00",
                'expires_to' => "2021-04-26T10:27:13.000000+09:00",
                'created_from' => "2020-02-22T02:35:09.000000+09:00",
                'created_to' => "2020-11-19T03:46:45.000000+09:00",
                'issuer_shop_id' => "e82d86b1-5047-44d0-944c-c0e1544a29f5",
                'description' => "bVdHyx",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
