<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "rfIL",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "eda02500-664e-4e38-97fb-26bf47759f9c",
                'description' => "7",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2023-04-23T01:28:23.000000Z",
                'issuer_shop_id' => "dd29802a-5d83-413f-8cfe-74066b7b4bca",
                'description' => "oY",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2021-11-04T11:35:54.000000Z",
                'created_to' => "2022-11-08T06:35:09.000000Z",
                'issuer_shop_id' => "9f6b96c0-dfe2-4138-89f3-a10a20987af0",
                'description' => "1FcaYx8",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2021-04-29T11:14:49.000000Z",
                'created_from' => "2024-09-17T11:10:47.000000Z",
                'created_to' => "2021-02-14T00:09:23.000000Z",
                'issuer_shop_id' => "43529fa7-7637-4992-9e4b-7d816ca05cb2",
                'description' => "oQE",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2023-08-18T13:32:31.000000Z",
                'expires_to' => "2020-07-10T20:09:28.000000Z",
                'created_from' => "2024-08-30T22:02:55.000000Z",
                'created_to' => "2020-10-04T10:56:49.000000Z",
                'issuer_shop_id' => "04c2c0e4-ee76-4c1c-aefa-23874afee603",
                'description' => "KVxdoit0n",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "RdkY0a6T9IRy95uKnYj6",
                'expires_from' => "2021-07-21T06:51:59.000000Z",
                'expires_to' => "2022-01-15T21:12:06.000000Z",
                'created_from' => "2021-09-02T02:43:46.000000Z",
                'created_to' => "2023-08-06T09:38:39.000000Z",
                'issuer_shop_id' => "201e2b83-18f1-402d-808e-1dc4c80bd16b",
                'description' => "4zF",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "c0917074-e8f6-46c1-83a0-1cdd2f6c1e37",
                'organization_code' => "t4NS9wkdOXwioDpfXuzoNb",
                'expires_from' => "2022-05-14T21:29:54.000000Z",
                'expires_to' => "2023-01-21T02:32:01.000000Z",
                'created_from' => "2023-09-02T13:45:51.000000Z",
                'created_to' => "2021-06-27T19:24:57.000000Z",
                'issuer_shop_id' => "72a8e55d-15aa-4b75-8b65-52a1880d0eaf",
                'description' => "j9znX2X",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 8559,
                'private_money_id' => "0e65db05-3dc6-4ba5-baac-be51bada5be3",
                'organization_code' => "5QEOmdgUm73I2kFc",
                'expires_from' => "2020-01-21T19:39:55.000000Z",
                'expires_to' => "2022-05-24T22:27:26.000000Z",
                'created_from' => "2020-09-17T20:59:41.000000Z",
                'created_to' => "2021-02-09T18:52:01.000000Z",
                'issuer_shop_id' => "77b23aeb-57f3-4a5a-821d-947f9d2f56b6",
                'description' => "yT3",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 9600,
                'per_page' => 87,
                'private_money_id' => "a8b8f410-d352-4951-843e-6a37884d22cf",
                'organization_code' => "823WFeXCsADfv",
                'expires_from' => "2023-05-11T13:54:21.000000Z",
                'expires_to' => "2020-01-13T01:26:13.000000Z",
                'created_from' => "2022-07-02T00:06:35.000000Z",
                'created_to' => "2020-01-07T02:30:24.000000Z",
                'issuer_shop_id' => "01f62a9d-2753-4b1a-a5ac-4cf43f2ce74a",
                'description' => "Lu",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
