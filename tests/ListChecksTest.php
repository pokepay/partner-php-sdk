<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "MFu",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "6d9c9d8c-24ed-43b2-9001-703ddd0eae48",
                'description' => "Y5rxBRsFTy",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2020-03-16T19:15:17.000000Z",
                'issuer_shop_id' => "f502dcf6-9aee-4325-a5af-1c77ca1cba62",
                'description' => "d4rNZJsCq7",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2020-01-22T06:25:49.000000Z",
                'created_to' => "2020-10-06T06:24:16.000000Z",
                'issuer_shop_id' => "ba8a1508-dfb7-4061-83a0-f9726dfada77",
                'description' => "2NKYH12xH",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2022-02-19T08:35:27.000000Z",
                'created_from' => "2021-08-15T09:13:42.000000Z",
                'created_to' => "2023-10-19T16:42:25.000000Z",
                'issuer_shop_id' => "6f3fc2c9-4477-4213-942c-62c057d20078",
                'description' => "vxk",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2022-04-09T10:57:33.000000Z",
                'expires_to' => "2021-01-21T20:17:59.000000Z",
                'created_from' => "2024-01-21T15:48:46.000000Z",
                'created_to' => "2024-04-20T18:52:46.000000Z",
                'issuer_shop_id' => "f9181e5e-2656-4459-827d-e74423676fd1",
                'description' => "RCyVTR3czN",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "wQ9Lz",
                'expires_from' => "2020-02-07T16:32:25.000000Z",
                'expires_to' => "2022-06-26T01:11:01.000000Z",
                'created_from' => "2021-04-18T09:06:18.000000Z",
                'created_to' => "2022-11-18T04:47:25.000000Z",
                'issuer_shop_id' => "222b6aa4-cf69-42f1-89fe-b1eade570316",
                'description' => "MdQ1lZ",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "cd3ebd81-3ef9-41fb-81d2-6807661adf80",
                'organization_code' => "VB9A32ESqVUKE1GN9JqLEvyRd",
                'expires_from' => "2023-09-18T23:48:05.000000Z",
                'expires_to' => "2022-04-16T16:53:58.000000Z",
                'created_from' => "2020-11-06T19:35:06.000000Z",
                'created_to' => "2022-08-28T13:01:50.000000Z",
                'issuer_shop_id' => "e2ea8d27-37fb-4bb2-b0bc-2ff7a80f97f3",
                'description' => "4Z1pnjZ8xW",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 8780,
                'private_money_id' => "5265e465-8214-4829-8e33-028d144602d7",
                'organization_code' => "KGyHXCKDfS0S9olx",
                'expires_from' => "2021-03-28T04:10:43.000000Z",
                'expires_to' => "2021-11-01T23:20:39.000000Z",
                'created_from' => "2024-09-05T15:06:36.000000Z",
                'created_to' => "2022-10-30T14:27:04.000000Z",
                'issuer_shop_id' => "8eeca673-4186-48fe-9333-44b42ab264e5",
                'description' => "yHhIbte",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 5520,
                'per_page' => 8734,
                'private_money_id' => "4fd37eaf-b531-4997-b451-22060099ed84",
                'organization_code' => "OMttUhD0OiwEvovxL7L6kZ3KaNub1zw",
                'expires_from' => "2022-08-13T01:49:14.000000Z",
                'expires_to' => "2021-01-30T07:38:07.000000Z",
                'created_from' => "2023-02-13T17:21:02.000000Z",
                'created_to' => "2020-02-27T20:09:08.000000Z",
                'issuer_shop_id' => "93aafadb-a387-45c8-af29-a3a817fe188d",
                'description' => "j8ik3dms",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
