<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "Gi2R3NUuF",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "e3517ceb-8940-4361-b5a1-23d1ce8805fd",
                'description' => "GIe",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2022-02-15T11:54:13.000000+09:00",
                'issuer_shop_id' => "6c1ddf18-bb3b-4cee-880c-b0026e0fbe35",
                'description' => "sc",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2020-05-16T17:45:29.000000+09:00",
                'created_to' => "2021-08-12T07:49:38.000000+09:00",
                'issuer_shop_id' => "7e6ad333-be9c-46a3-9ad8-c52cd3d956e9",
                'description' => "Cpg4Gia",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2021-02-26T14:36:01.000000+09:00",
                'created_from' => "2022-12-29T15:25:48.000000+09:00",
                'created_to' => "2023-06-26T08:38:19.000000+09:00",
                'issuer_shop_id' => "a0212c61-7984-45b6-9d78-73f4cb480f96",
                'description' => "NsGPc2gy",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2021-09-30T23:41:58.000000+09:00",
                'expires_to' => "2020-09-28T15:08:02.000000+09:00",
                'created_from' => "2022-03-20T13:05:40.000000+09:00",
                'created_to' => "2023-01-28T12:50:54.000000+09:00",
                'issuer_shop_id' => "1fd08235-f77c-42df-b24a-c3f0f8b655a4",
                'description' => "yll",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "XmgJ7aLaawHuJGI4D6",
                'expires_from' => "2022-01-12T02:11:41.000000+09:00",
                'expires_to' => "2023-11-05T03:19:16.000000+09:00",
                'created_from' => "2023-03-02T01:49:37.000000+09:00",
                'created_to' => "2020-10-13T18:06:24.000000+09:00",
                'issuer_shop_id' => "c30e3aec-3c27-4721-a9db-c4173c51f1db",
                'description' => "yTgcBrDJuT",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "8b9cd775-7a03-423a-8cdb-a3da9cdf9266",
                'organization_code' => "O5Uo94s56IwfyDurWVkkLRThSI",
                'expires_from' => "2022-12-21T08:52:06.000000+09:00",
                'expires_to' => "2020-09-02T21:38:32.000000+09:00",
                'created_from' => "2022-05-21T11:31:41.000000+09:00",
                'created_to' => "2021-12-13T18:11:14.000000+09:00",
                'issuer_shop_id' => "b38c7739-5d83-4136-8892-92409f99e4d3",
                'description' => "eHLp",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 9402,
                'private_money_id' => "21f3b9eb-ee16-4ef5-bd8c-20426eb4a69b",
                'organization_code' => "tm4",
                'expires_from' => "2022-11-20T08:43:24.000000+09:00",
                'expires_to' => "2023-01-24T03:29:03.000000+09:00",
                'created_from' => "2022-06-23T23:49:53.000000+09:00",
                'created_to' => "2021-01-18T20:09:36.000000+09:00",
                'issuer_shop_id' => "dea85e9a-f3a1-437f-968f-b15d4b37e67d",
                'description' => "x9",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 658,
                'per_page' => 9200,
                'private_money_id' => "70c2b107-6305-43ad-a3fd-10af27d86692",
                'organization_code' => "GZ",
                'expires_from' => "2020-08-16T05:25:52.000000+09:00",
                'expires_to' => "2022-11-15T16:01:35.000000+09:00",
                'created_from' => "2021-07-03T07:05:48.000000+09:00",
                'created_to' => "2020-04-07T09:04:49.000000+09:00",
                'issuer_shop_id' => "6bec9331-0e6c-48b4-a2ef-57484366df18",
                'description' => "7C2HKos6U",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
