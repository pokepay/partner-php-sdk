<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "6SfrLsE",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "ba4dc3e7-3962-4d77-89fd-e94461fedff2",
                'description' => "afzykU",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2021-01-29T22:51:55.000000Z",
                'issuer_shop_id' => "9478d451-18bf-4c29-9ea3-091a8cdc7857",
                'description' => "w",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2021-10-09T06:04:28.000000Z",
                'created_to' => "2023-12-14T06:14:52.000000Z",
                'issuer_shop_id' => "13cfd584-aa52-47c2-a8de-489b654c7eb7",
                'description' => "Q2",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2021-12-12T05:27:32.000000Z",
                'created_from' => "2020-07-20T08:54:28.000000Z",
                'created_to' => "2021-11-22T16:25:22.000000Z",
                'issuer_shop_id' => "f2e116b8-88e5-4536-9da6-d22ccddfb251",
                'description' => "8fK7SBx",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2020-05-03T21:16:19.000000Z",
                'expires_to' => "2021-12-07T01:40:49.000000Z",
                'created_from' => "2020-02-26T04:54:20.000000Z",
                'created_to' => "2022-11-09T12:34:48.000000Z",
                'issuer_shop_id' => "fa5c5b43-1775-4f1f-bac3-410ea49f033e",
                'description' => "4dB",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "WzD3a",
                'expires_from' => "2024-03-07T03:20:07.000000Z",
                'expires_to' => "2021-04-28T05:09:39.000000Z",
                'created_from' => "2020-11-14T02:15:23.000000Z",
                'created_to' => "2023-12-11T22:57:24.000000Z",
                'issuer_shop_id' => "e4041ec1-3ff6-4cda-b41a-d00c53918013",
                'description' => "Cmt",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "d411d285-e776-4869-884c-4c48c483cdcf",
                'organization_code' => "BHoLHZ5",
                'expires_from' => "2020-12-26T04:12:56.000000Z",
                'expires_to' => "2023-09-06T23:32:39.000000Z",
                'created_from' => "2023-08-27T03:43:53.000000Z",
                'created_to' => "2020-01-21T20:06:56.000000Z",
                'issuer_shop_id' => "084d1b6f-3fb5-42f5-8816-1eb95712113a",
                'description' => "sjia9h3ovw",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 5873,
                'private_money_id' => "cd0bc731-91d1-480e-b17b-b6cf208b19d9",
                'organization_code' => "JfTJv94bn",
                'expires_from' => "2021-09-26T02:05:59.000000Z",
                'expires_to' => "2023-02-09T10:23:34.000000Z",
                'created_from' => "2021-11-24T12:34:12.000000Z",
                'created_to' => "2024-01-29T17:17:32.000000Z",
                'issuer_shop_id' => "212cb8a8-9367-4f37-aa3f-bb9f26487466",
                'description' => "TRBDusrb",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 5354,
                'per_page' => 3837,
                'private_money_id' => "40dbb2ed-f712-4465-99ba-1b610651864e",
                'organization_code' => "035TYhQYVT6897JBIT98Ea3vOiHnJ",
                'expires_from' => "2023-03-12T02:45:23.000000Z",
                'expires_to' => "2020-01-05T07:35:46.000000Z",
                'created_from' => "2020-07-22T04:43:43.000000Z",
                'created_to' => "2023-10-23T03:36:28.000000Z",
                'issuer_shop_id' => "693929ae-6dfa-4919-b84d-be73baa0ea98",
                'description' => "YTRQVbbD",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
