<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "HfvN",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "824f4845-0e42-4ee5-b93b-6f9aed921e8d",
                'description' => "muQoNy",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2021-05-30T15:09:00.000000Z",
                'issuer_shop_id' => "45590978-e47c-4182-a468-fd2461ad88d4",
                'description' => "5YfaNVM",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2022-03-26T12:35:04.000000Z",
                'created_to' => "2023-09-09T15:08:33.000000Z",
                'issuer_shop_id' => "2ee6131f-9e6c-47aa-90f8-8892daa7e996",
                'description' => "y8RqwFWTQ",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2023-06-22T16:39:13.000000Z",
                'created_from' => "2020-08-30T19:09:28.000000Z",
                'created_to' => "2023-01-14T06:34:30.000000Z",
                'issuer_shop_id' => "4c653398-31ff-4598-96a9-78175aebfe2c",
                'description' => "t9bN2zIxN",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2022-04-04T02:54:52.000000Z",
                'expires_to' => "2023-10-18T14:58:00.000000Z",
                'created_from' => "2024-02-29T06:11:35.000000Z",
                'created_to' => "2024-05-26T09:48:55.000000Z",
                'issuer_shop_id' => "84674665-ee96-4345-b9ba-b3ba7be1e6ed",
                'description' => "H",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "jq6XCvYjxbcuNA5AO",
                'expires_from' => "2023-05-03T18:02:21.000000Z",
                'expires_to' => "2024-03-03T17:28:40.000000Z",
                'created_from' => "2022-06-07T10:15:26.000000Z",
                'created_to' => "2022-07-03T06:10:02.000000Z",
                'issuer_shop_id' => "d8f57297-5792-4f72-aff5-92b64a827d67",
                'description' => "AXoc",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "eb671e34-e1d5-411d-ab70-1e4f44a63190",
                'organization_code' => "UbFxl1xg8SX1voG8Gydqo4fQ7D47J36",
                'expires_from' => "2022-07-01T22:20:09.000000Z",
                'expires_to' => "2021-11-13T23:47:35.000000Z",
                'created_from' => "2021-06-27T17:30:00.000000Z",
                'created_to' => "2021-02-18T06:13:17.000000Z",
                'issuer_shop_id' => "2f3b7966-53b2-4af0-8c02-f16ec0e9bd5c",
                'description' => "ur",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 7561,
                'private_money_id' => "e01cd7fd-8233-46b6-9459-4ed006d08b01",
                'organization_code' => "xIzfeirg",
                'expires_from' => "2020-07-24T05:07:03.000000Z",
                'expires_to' => "2022-10-21T19:02:47.000000Z",
                'created_from' => "2022-07-02T11:07:26.000000Z",
                'created_to' => "2024-06-27T17:05:35.000000Z",
                'issuer_shop_id' => "40afd3ca-3598-434b-b567-47cd99546433",
                'description' => "Qh2JH",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 8480,
                'per_page' => 2915,
                'private_money_id' => "ab81ec2c-067e-481a-80e9-df9fce761c29",
                'organization_code' => "M0oFGn",
                'expires_from' => "2022-04-01T19:33:19.000000Z",
                'expires_to' => "2020-07-14T00:47:02.000000Z",
                'created_from' => "2021-05-14T03:58:46.000000Z",
                'created_to' => "2023-09-13T07:54:17.000000Z",
                'issuer_shop_id' => "d6fcc3c0-3d94-4c18-9cab-0f981ec74d09",
                'description' => "X9mW4mL",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
