<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "HR",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "c09173a9-38c4-47ae-a6cd-1dbf767be412",
                'description' => "3LCAS",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2020-11-29T18:13:57.000000Z",
                'issuer_shop_id' => "a95626e0-cc96-42e5-98b9-08e292a990d9",
                'description' => "sHOG",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2021-09-30T14:14:20.000000Z",
                'created_to' => "2023-01-10T03:03:49.000000Z",
                'issuer_shop_id' => "3ff659a5-a0b3-4a2a-8d85-c516ed220bfc",
                'description' => "i4",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2023-04-26T10:51:35.000000Z",
                'created_from' => "2023-09-27T03:56:30.000000Z",
                'created_to' => "2022-05-30T20:39:11.000000Z",
                'issuer_shop_id' => "a83d2837-4b37-41aa-8abd-0b9bf6620f26",
                'description' => "RN8AasC",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2020-07-04T15:44:08.000000Z",
                'expires_to' => "2023-04-23T18:30:13.000000Z",
                'created_from' => "2020-12-04T19:50:30.000000Z",
                'created_to' => "2022-06-14T21:14:35.000000Z",
                'issuer_shop_id' => "c09b2bad-6cb6-49e7-addd-0a6e4351aa9f",
                'description' => "uHFpFsNPJm",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "uH1GHYOOmiUvKwy",
                'expires_from' => "2023-09-04T23:43:12.000000Z",
                'expires_to' => "2022-06-02T14:38:33.000000Z",
                'created_from' => "2023-01-01T15:46:03.000000Z",
                'created_to' => "2020-06-18T01:18:09.000000Z",
                'issuer_shop_id' => "6f04fcd9-d253-4bac-9253-25ef4e15462b",
                'description' => "K",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "055fb6ce-ce08-4e0a-b55a-3c9826318e47",
                'organization_code' => "mU0unMptspEioBBqGcJ",
                'expires_from' => "2023-12-14T08:42:56.000000Z",
                'expires_to' => "2022-11-30T14:16:44.000000Z",
                'created_from' => "2021-08-24T14:05:27.000000Z",
                'created_to' => "2021-03-13T03:07:07.000000Z",
                'issuer_shop_id' => "0f38b0e1-af01-4fd8-a3e0-a8928df81f84",
                'description' => "pDTPRH",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 3853,
                'private_money_id' => "899befc5-fe6c-4be0-ac9b-ccde0397b840",
                'organization_code' => "NQrvWUnk17KWA",
                'expires_from' => "2022-08-12T19:43:37.000000Z",
                'expires_to' => "2021-07-13T02:37:35.000000Z",
                'created_from' => "2020-04-20T01:38:22.000000Z",
                'created_to' => "2021-07-31T11:29:45.000000Z",
                'issuer_shop_id' => "f33264e9-eec6-4bc9-8e47-e2e01c125c48",
                'description' => "shpxz5S2",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 2202,
                'per_page' => 4497,
                'private_money_id' => "03afc5f2-3a5d-44a1-b485-0daea0b50c43",
                'organization_code' => "ar2DsC6IO",
                'expires_from' => "2022-05-13T22:07:21.000000Z",
                'expires_to' => "2021-11-23T07:06:20.000000Z",
                'created_from' => "2023-05-22T07:06:37.000000Z",
                'created_to' => "2021-05-19T00:39:45.000000Z",
                'issuer_shop_id' => "deb706e0-5aaf-4db3-98da-7543ffb37461",
                'description' => "lZmMT5mAF",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
