<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "j0wrmx",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "1e7fd2e6-9f6a-41fc-b2fd-0972564e3c64",
                'description' => "ISuo",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2020-12-27T10:45:34.000000+09:00",
                'issuer_shop_id' => "ff1a1ab1-44c0-4390-96f5-971ccb0a764d",
                'description' => "MFts",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2020-06-20T15:31:24.000000+09:00",
                'created_to' => "2021-04-02T15:35:50.000000+09:00",
                'issuer_shop_id' => "c3f3bdcd-3078-4b5b-a649-db1676c592ed",
                'description' => "Fhk",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2020-12-03T00:11:28.000000+09:00",
                'created_from' => "2023-11-28T18:21:28.000000+09:00",
                'created_to' => "2020-06-15T17:42:34.000000+09:00",
                'issuer_shop_id' => "fbe55584-1c50-4ebc-80f1-cbe857c73c78",
                'description' => "dIyu",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2021-01-06T14:18:32.000000+09:00",
                'expires_to' => "2021-07-11T14:13:55.000000+09:00",
                'created_from' => "2020-08-23T10:18:43.000000+09:00",
                'created_to' => "2021-12-09T17:17:00.000000+09:00",
                'issuer_shop_id' => "b609008a-b15c-436a-810a-b116b20438d3",
                'description' => "mrAf4",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "B",
                'expires_from' => "2022-09-30T14:46:17.000000+09:00",
                'expires_to' => "2022-07-01T00:03:34.000000+09:00",
                'created_from' => "2022-02-26T08:59:43.000000+09:00",
                'created_to' => "2020-09-02T16:58:03.000000+09:00",
                'issuer_shop_id' => "2f31fe7f-9641-43bb-9be3-2907b7df09a9",
                'description' => "la",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "e68c716b-0f23-495d-ae02-a7177602809f",
                'organization_code' => "Gf0p6qD",
                'expires_from' => "2021-04-01T20:29:17.000000+09:00",
                'expires_to' => "2021-08-07T06:34:45.000000+09:00",
                'created_from' => "2023-09-08T08:32:18.000000+09:00",
                'created_to' => "2022-03-04T03:11:42.000000+09:00",
                'issuer_shop_id' => "e3c86b9c-6c29-4c5f-9ffc-d9cc399b38a4",
                'description' => "AS",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 1557,
                'private_money_id' => "d6363e1c-c95b-4587-aa16-62b831449fe8",
                'organization_code' => "au6DVIltAtKm3dZiVdZF0NtBiS93g0hs",
                'expires_from' => "2021-11-18T12:51:15.000000+09:00",
                'expires_to' => "2020-03-09T13:49:52.000000+09:00",
                'created_from' => "2022-08-30T20:19:31.000000+09:00",
                'created_to' => "2023-09-01T03:39:05.000000+09:00",
                'issuer_shop_id' => "2e42c28c-009d-42ed-b3c3-757df7ab4ccc",
                'description' => "QqumzTYU",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 8213,
                'per_page' => 9108,
                'private_money_id' => "dd60f623-6e41-4277-a125-66928904a752",
                'organization_code' => "xRGqbP",
                'expires_from' => "2023-04-06T15:39:59.000000+09:00",
                'expires_to' => "2021-06-07T05:24:36.000000+09:00",
                'created_from' => "2023-06-04T21:21:16.000000+09:00",
                'created_to' => "2020-05-28T09:47:57.000000+09:00",
                'issuer_shop_id' => "1b1cebfb-2290-40b5-9db2-e070863be26e",
                'description' => "qe2N24Gk",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
