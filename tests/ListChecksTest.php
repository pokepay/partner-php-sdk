<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListChecks extends TestCase
{
    public function testListChecks0()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks1()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks2()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks3()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'description' => "zptS",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks4()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'issuer_shop_id' => "73fd36a0-6e22-454d-8edb-c771b4069811",
                'description' => "2p16eKvq",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks5()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_to' => "2021-07-05T05:40:17.000000+09:00",
                'issuer_shop_id' => "ac4c34ed-8c58-45c9-95ea-4bfd875ac4cc",
                'description' => "VenGvVcC",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks6()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'created_from' => "2023-07-04T03:06:52.000000+09:00",
                'created_to' => "2021-08-23T05:57:13.000000+09:00",
                'issuer_shop_id' => "3dd85e7d-563d-45ee-84fa-7da3a97c1fec",
                'description' => "IJ4h4hI",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks7()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_to' => "2021-07-26T20:40:58.000000+09:00",
                'created_from' => "2022-09-05T21:10:40.000000+09:00",
                'created_to' => "2023-11-09T06:44:31.000000+09:00",
                'issuer_shop_id' => "d100eaeb-8507-4005-b3a3-81611042d872",
                'description' => "7i",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks8()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'expires_from' => "2023-04-03T19:04:25.000000+09:00",
                'expires_to' => "2021-08-31T18:02:05.000000+09:00",
                'created_from' => "2020-01-20T12:55:29.000000+09:00",
                'created_to' => "2020-11-13T03:11:32.000000+09:00",
                'issuer_shop_id' => "e8c9da8f-b43a-48eb-9822-f5122d1fc478",
                'description' => "KeMzssertb",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks9()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'organization_code' => "5aW4UYGoxsVG2DHmCISqzrBCwZBrmo",
                'expires_from' => "2020-11-26T03:23:12.000000+09:00",
                'expires_to' => "2020-09-13T03:16:34.000000+09:00",
                'created_from' => "2021-07-24T09:13:32.000000+09:00",
                'created_to' => "2020-10-07T11:28:33.000000+09:00",
                'issuer_shop_id' => "a10abd6f-4de4-4868-9cef-f9a64878aa19",
                'description' => "nKn0",
                'is_onetime' => FALSE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks10()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'private_money_id' => "1f57dd1a-c652-4cb4-8880-26ed42206492",
                'organization_code' => "eW1p8DAY2KCH3q001iqcZNRI",
                'expires_from' => "2023-11-06T03:23:42.000000+09:00",
                'expires_to' => "2021-08-27T13:47:06.000000+09:00",
                'created_from' => "2022-03-21T23:32:01.000000+09:00",
                'created_to' => "2023-04-13T01:10:07.000000+09:00",
                'issuer_shop_id' => "1bb1c2e0-29c2-4be0-94db-45d5f0147db3",
                'description' => "5IXhw4",
                'is_onetime' => TRUE,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks11()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'per_page' => 5032,
                'private_money_id' => "1b61547c-a853-4b63-8ccc-96ac62482f7d",
                'organization_code' => "lN5Ut56QyW4S",
                'expires_from' => "2022-04-15T12:59:20.000000+09:00",
                'expires_to' => "2021-05-05T21:03:46.000000+09:00",
                'created_from' => "2022-09-22T19:26:50.000000+09:00",
                'created_to' => "2020-08-09T18:03:33.000000+09:00",
                'issuer_shop_id' => "d2aa12ef-ccaf-4faf-8678-2d032a067ac0",
                'description' => "FKYZTzhu",
                'is_onetime' => TRUE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListChecks12()
    {
        $client = $this->newClient();
        $request = new Request\ListChecks(
            [
                'page' => 7579,
                'per_page' => 4638,
                'private_money_id' => "1f3e8ba5-fdaf-4f8e-a6dc-2b0d08907f68",
                'organization_code' => "9hufnXDw1b5HyyuM",
                'expires_from' => "2021-08-14T11:15:10.000000+09:00",
                'expires_to' => "2023-12-09T17:02:01.000000+09:00",
                'created_from' => "2020-10-25T15:41:22.000000+09:00",
                'created_to' => "2020-12-19T10:28:57.000000+09:00",
                'issuer_shop_id' => "a55f291d-6349-41a7-9408-026fd4f15281",
                'description' => "UagBdelp0Q",
                'is_onetime' => FALSE,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
