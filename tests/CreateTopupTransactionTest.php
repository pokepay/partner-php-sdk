<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTopupTransaction extends TestCase
{
    public function testCreateTopupTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "cc9e9659-8c0d-4454-b1c2-31d77e1a3d58",
            "9bd748ba-a6ef-4378-8c5e-e4a26a3e3c49",
            "a8fe0202-dea3-4993-a588-ffacf9edbb68"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "cc9e9659-8c0d-4454-b1c2-31d77e1a3d58",
            "9bd748ba-a6ef-4378-8c5e-e4a26a3e3c49",
            "a8fe0202-dea3-4993-a588-ffacf9edbb68",
            [
                'request_id' => "425da30b-7a8f-44d9-9940-1c391a34e73d"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "cc9e9659-8c0d-4454-b1c2-31d77e1a3d58",
            "9bd748ba-a6ef-4378-8c5e-e4a26a3e3c49",
            "a8fe0202-dea3-4993-a588-ffacf9edbb68",
            [
                'metadata' => "{\"key\":\"value\"}",
                'request_id' => "5f987871-137f-4b1e-8fc5-5ca7db3062bd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "cc9e9659-8c0d-4454-b1c2-31d77e1a3d58",
            "9bd748ba-a6ef-4378-8c5e-e4a26a3e3c49",
            "a8fe0202-dea3-4993-a588-ffacf9edbb68",
            [
                'description' => "oKtRzg",
                'metadata' => "{\"key\":\"value\"}",
                'request_id' => "d37c8e06-9b5c-4a16-8ead-5e764b2dbd5b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "cc9e9659-8c0d-4454-b1c2-31d77e1a3d58",
            "9bd748ba-a6ef-4378-8c5e-e4a26a3e3c49",
            "a8fe0202-dea3-4993-a588-ffacf9edbb68",
            [
                'point_expires_at' => "2020-01-22T07:19:16.000000+09:00",
                'description' => "xjvUMXH1RbLzHMMff1Qh0Nd4t",
                'metadata' => "{\"key\":\"value\"}",
                'request_id' => "f5163370-259b-4e9f-8b12-05051ff36515"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction5()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "cc9e9659-8c0d-4454-b1c2-31d77e1a3d58",
            "9bd748ba-a6ef-4378-8c5e-e4a26a3e3c49",
            "a8fe0202-dea3-4993-a588-ffacf9edbb68",
            [
                'point_amount' => 2218,
                'point_expires_at' => "2022-08-01T00:12:10.000000+09:00",
                'description' => "TzXPUHzteBEOs9zv7fQzOf12f5uH",
                'metadata' => "{\"key\":\"value\"}",
                'request_id' => "e0ce626f-aea1-4fb7-bd93-9329600f6063"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction6()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "cc9e9659-8c0d-4454-b1c2-31d77e1a3d58",
            "9bd748ba-a6ef-4378-8c5e-e4a26a3e3c49",
            "a8fe0202-dea3-4993-a588-ffacf9edbb68",
            [
                'money_amount' => 104,
                'point_amount' => 7788,
                'point_expires_at' => "2020-05-05T10:06:04.000000+09:00",
                'description' => "KGlAgdiHn4F6NQuoIW4Q9az9wCKXeBKD04SvhnCOS7R8Bi09RNZrPPULSVM5OPFygpPeaAkAjhrQxxITjKvFYeeLxQ",
                'metadata' => "{\"key\":\"value\"}",
                'request_id' => "3aac8198-2240-4f62-9530-b919ea738007"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction7()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "cc9e9659-8c0d-4454-b1c2-31d77e1a3d58",
            "9bd748ba-a6ef-4378-8c5e-e4a26a3e3c49",
            "a8fe0202-dea3-4993-a588-ffacf9edbb68",
            [
                'bear_point_shop_id' => "c08bc101-d66f-43c7-a5cf-9f91f6fb5866",
                'money_amount' => 1150,
                'point_amount' => 5910,
                'point_expires_at' => "2023-07-01T17:26:08.000000+09:00",
                'description' => "Lv1Ru",
                'metadata' => "{\"key\":\"value\"}",
                'request_id' => "635a912c-6e91-4ce3-ab0c-8eab11a031b5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
