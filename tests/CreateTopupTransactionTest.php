<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTopupTransaction extends TestCase
{
    public function testCreateTopupTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "f0eb446d-6ed2-46bd-b49f-351f80d6e398",
            "65f3237b-389e-4f60-83f6-b3ab61494c63",
            "84b1be46-1796-48e2-8f92-feda0b98c960"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "f0eb446d-6ed2-46bd-b49f-351f80d6e398",
            "65f3237b-389e-4f60-83f6-b3ab61494c63",
            "84b1be46-1796-48e2-8f92-feda0b98c960",
            [
                'request_id' => "583d27d9-b1d0-4dc7-b98e-1e9909daebf2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "f0eb446d-6ed2-46bd-b49f-351f80d6e398",
            "65f3237b-389e-4f60-83f6-b3ab61494c63",
            "84b1be46-1796-48e2-8f92-feda0b98c960",
            [
                'metadata' => "{\"key\":\"value\"}",
                'request_id' => "4c84fb9b-6e73-4ca5-8791-58fb4cfd3ec0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "f0eb446d-6ed2-46bd-b49f-351f80d6e398",
            "65f3237b-389e-4f60-83f6-b3ab61494c63",
            "84b1be46-1796-48e2-8f92-feda0b98c960",
            [
                'description' => "LqJFlRMGfDCisIe5qHDsMdG7wbTKEpXzySqqc4sXPad6xuwUqi64YRTYtsOeEN9XbwlgwBy5OkIYkbdAf4PBqh2Y5zV0C85Vn4l2htJKp8EeWwIbRZU73CECtq6YH4jkVjZI7iaSuegvmESb5ZkkQma0HXRKUqv4l",
                'metadata' => "{\"key\":\"value\"}",
                'request_id' => "69ef371f-6e5e-45ff-ba6b-28f76372fe2c"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "f0eb446d-6ed2-46bd-b49f-351f80d6e398",
            "65f3237b-389e-4f60-83f6-b3ab61494c63",
            "84b1be46-1796-48e2-8f92-feda0b98c960",
            [
                'point_expires_at' => "2015-12-24T00:34:12.000000+09:00",
                'description' => "FtSWx4aRECgS2Rzs2ylIq5ZtrGXVCQUhbREfojZVoiIjURbvF5cuoyvA3tbiunsY6SNRraYwc8QDfAEfV4F8XUQw7FO",
                'metadata' => "{\"key\":\"value\"}",
                'request_id' => "ba650c43-783a-4add-bc7f-96850dcc76ff"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction5()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "f0eb446d-6ed2-46bd-b49f-351f80d6e398",
            "65f3237b-389e-4f60-83f6-b3ab61494c63",
            "84b1be46-1796-48e2-8f92-feda0b98c960",
            [
                'point_amount' => 758,
                'point_expires_at' => "2024-05-25T09:38:20.000000+09:00",
                'description' => "HUkEBp2LxsthHBe9EWUoT5QLe9Yg2CBY3rucfBues6uHoyn0kY9tu08AkjC0WPKbQvYow9FaOH3zD7SQmRuyNCMpGLgUAKK4AYXStTHGYGCT6FSvry2ciGzpWdg5yn15",
                'metadata' => "{\"key\":\"value\"}",
                'request_id' => "dc1d2738-1606-4a92-8e97-9f8bcd8b4035"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction6()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "f0eb446d-6ed2-46bd-b49f-351f80d6e398",
            "65f3237b-389e-4f60-83f6-b3ab61494c63",
            "84b1be46-1796-48e2-8f92-feda0b98c960",
            [
                'money_amount' => 1666,
                'point_amount' => 1546,
                'point_expires_at' => "2019-08-11T22:21:30.000000+09:00",
                'description' => "aT1YQUtPEMBFK5RCvbOFISTK",
                'metadata' => "{\"key\":\"value\"}",
                'request_id' => "72f5c150-e442-4249-a26e-304203c7c234"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTopupTransaction7()
    {
        $client = $this->newClient();
        $request = new Request\CreateTopupTransaction(
            "f0eb446d-6ed2-46bd-b49f-351f80d6e398",
            "65f3237b-389e-4f60-83f6-b3ab61494c63",
            "84b1be46-1796-48e2-8f92-feda0b98c960",
            [
                'bear_point_shop_id' => "5e3d9eaf-a849-4a6c-93d6-c57bcfd71666",
                'money_amount' => 1322,
                'point_amount' => 3962,
                'point_expires_at' => "2015-10-10T18:37:01.000000+09:00",
                'description' => "Ztwqv4AGYkQ5YWzuO0mrMzlLTVYxU13omHKmdh2ng7xlmB0D7qlClsr3peE1RPsdDZEoaT5osfv5Au45ikmQzjXEIrL5tEVsPccciqGzpCuGxgjotbAnDFm6nBFTBcp5MgKi6djde9q9Gx06zspIhW3gmaN6JcrvmX5G7cBGoNqTURH3hLLIVR7YcRrTeQOsLd",
                'metadata' => "{\"key\":\"value\"}",
                'request_id' => "aee49c76-ea4b-4409-b2d0-c655929226f9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
