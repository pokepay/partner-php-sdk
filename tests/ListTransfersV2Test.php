<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2020-05-25T13:07:36.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2020-08-20T09:25:35.000000+09:00",
                'to' => "2021-11-11T23:48:59.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4sIXfB3ep9eHnNy54z",
                'from' => "2021-01-13T16:41:29.000000+09:00",
                'to' => "2024-03-04T19:11:23.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["expire", "exchange", "campaign"],
                'description' => "Y1WGlubcf8poH65gFI1eD4xOb3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9",
                'from' => "2021-06-03T11:42:59.000000+09:00",
                'to' => "2023-12-09T10:34:57.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 830,
                'transfer_types' => ["expire", "transfer"],
                'description' => "T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z",
                'from' => "2020-06-26T14:29:17.000000+09:00",
                'to' => "2022-06-25T21:03:49.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "6cd09658-5492-47cd-8ba5-ba9480cb492e",
                'per_page' => 371,
                'transfer_types' => ["campaign", "cashback"],
                'description' => "bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc",
                'from' => "2020-01-31T02:17:35.000000+09:00",
                'to' => "2022-05-01T21:46:29.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "2e577d6b-f2d2-4d26-8c70-078b62ffddbf",
                'prev_page_cursor_id' => "f11539b3-6a89-45ff-971e-93a7fa84a39d",
                'per_page' => 525,
                'transfer_types' => ["cashback"],
                'description' => "23XKfAMBShU6I6qbRRo",
                'from' => "2020-07-02T18:27:35.000000+09:00",
                'to' => "2022-09-02T19:49:04.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["transfer", "cashback", "expire"],
                'next_page_cursor_id' => "bfc1e1ae-1762-4e2d-bc49-dd469907fdf0",
                'prev_page_cursor_id' => "b072e0ac-63a5-491d-8460-2ccc415e2e5f",
                'per_page' => 161,
                'transfer_types' => ["payment", "transfer", "expire", "cashback", "topup"],
                'description' => "9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5v",
                'from' => "2022-12-31T06:28:41.000000+09:00",
                'to' => "2022-05-02T14:33:54.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "exchange", "transfer", "expire", "topup"],
                'next_page_cursor_id' => "632475d6-87a9-4958-92b8-1129fc135fc0",
                'prev_page_cursor_id' => "be9f4428-3cc8-42d3-9f7f-e034eb37be4a",
                'per_page' => 798,
                'transfer_types' => ["coupon"],
                'description' => "BXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK",
                'from' => "2023-06-03T13:40:03.000000+09:00",
                'to' => "2020-07-30T14:16:30.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "fb2542f3-b02c-486c-bb51-03a1f63e2e08",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "topup", "exchange", "cashback"],
                'next_page_cursor_id' => "115842e3-11e1-430b-801e-adf794c7ff31",
                'prev_page_cursor_id' => "cc929af0-d47a-4682-b976-cd894bc7c084",
                'per_page' => 985,
                'transfer_types' => ["exchange", "payment", "transfer", "campaign", "coupon", "topup", "cashback", "expire"],
                'description' => "D9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2R",
                'from' => "2022-08-17T12:19:08.000000+09:00",
                'to' => "2021-11-04T10:28:49.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "f3d53414-b9b1-4642-8d45-e672258d5f36",
                'private_money_id' => "89cf97a2-7ee0-47a6-bdb2-5ba0b7f396e7",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "topup", "transfer", "expire", "payment", "exchange"],
                'next_page_cursor_id' => "d4585e6f-2679-40fe-a7e6-991639689ef0",
                'prev_page_cursor_id' => "a69cf241-e45c-4b20-81be-e7ce02f06c18",
                'per_page' => 955,
                'transfer_types' => ["coupon", "topup", "expire", "cashback", "exchange", "transfer", "campaign"],
                'description' => "9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlL",
                'from' => "2023-08-28T20:01:40.000000+09:00",
                'to' => "2021-08-23T12:21:28.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "NlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCSh",
                'transaction_id' => "9599ed6f-f38f-40c5-b81c-107b104d7b23",
                'private_money_id' => "276d3601-5af8-4a20-9844-9fbaa3f8468c",
                'is_modified' => TRUE,
                'transaction_types' => ["expire"],
                'next_page_cursor_id' => "a266bd40-9d8a-454e-941e-c5ed9ad76cf4",
                'prev_page_cursor_id' => "3c24753d-b578-4372-a06f-62cbe1ec8109",
                'per_page' => 87,
                'transfer_types' => ["coupon", "campaign", "expire", "cashback", "transfer", "topup", "payment", "exchange"],
                'description' => "Du4lw8ZxL5ooBCUmbexHlOYPdRDRXfcFEKebPAHiatKRmL7K8IMJIBW1vB1RC8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULft",
                'from' => "2024-01-12T07:15:23.000000+09:00",
                'to' => "2020-02-05T16:57:10.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "2d61edb3-954b-4e7f-8c94-6ee9b8a48e27",
                'customer_name' => "Om0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz",
                'transaction_id' => "52f64232-8892-41ec-98b0-23a7038f90fd",
                'private_money_id' => "7de0cad7-35ac-4ffd-8694-c3120c82b9e7",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "topup"],
                'next_page_cursor_id' => "405ad648-ea88-468d-9f7c-40a88fe6f848",
                'prev_page_cursor_id' => "de508515-6614-47ad-8f3e-7e2a67ed0d9c",
                'per_page' => 279,
                'transfer_types' => ["cashback", "transfer", "topup"],
                'description' => "nglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ34GFY2SrpQfm9Le0rSP",
                'from' => "2022-11-18T14:54:20.000000+09:00",
                'to' => "2023-06-04T07:27:19.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "lrPa8fbLwdjVaS9Jydp",
                'customer_id' => "365c05c8-8127-4b71-9892-49eae16f7b3d",
                'customer_name' => "qW7D3uCGC",
                'transaction_id' => "70c3f409-cd64-43a0-9ac5-ea24d274b711",
                'private_money_id' => "8bbbee1c-a898-4233-a9a9-975aeea3b537",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "cashback", "transfer", "expire", "topup"],
                'next_page_cursor_id' => "046a3fd3-a284-4a3f-b5a9-cf7f19813612",
                'prev_page_cursor_id' => "2c2ea664-75d0-436c-b44a-cf845e697a49",
                'per_page' => 829,
                'transfer_types' => ["exchange", "topup", "expire", "transfer", "cashback", "campaign", "payment"],
                'description' => "JxcGB9NLriuIsMTY",
                'from' => "2020-04-10T18:21:16.000000+09:00",
                'to' => "2023-10-12T09:50:49.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "847ba643-e955-4f6f-8720-9fcf405b9eac",
                'shop_name' => "Ea9YZaUN",
                'customer_id' => "8b441dd0-d204-4f00-944d-d2e1992bcf8b",
                'customer_name' => "gDSPeHLGCGYvgqbqCIdoPTyGfj",
                'transaction_id' => "3e32e683-d6c1-40ec-8f89-63f6fdc03025",
                'private_money_id' => "d7c87185-31e2-46dc-9000-92a7b4114e60",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "exchange"],
                'next_page_cursor_id' => "dc46aacc-9db3-476d-9d7b-efd41f87438f",
                'prev_page_cursor_id' => "f6f8bd66-27ca-4e68-94fb-d06a09c9e744",
                'per_page' => 884,
                'transfer_types' => ["cashback", "exchange", "transfer", "topup", "coupon", "payment", "campaign", "expire"],
                'description' => "UGvnht1UycVdhwjq",
                'from' => "2022-09-09T16:00:30.000000+09:00",
                'to' => "2020-12-15T07:42:56.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
