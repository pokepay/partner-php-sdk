<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2023-04-12T01:58:18.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2022-07-18T23:07:52.000000Z",
                'to' => "2023-10-07T07:36:48.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "eA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0",
                'from' => "2023-05-09T16:33:20.000000Z",
                'to' => "2021-04-01T02:13:52.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["payment", "exchange", "campaign", "cashback", "coupon", "expire", "transfer", "topup"],
                'description' => "rbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUT",
                'from' => "2020-02-28T11:13:14.000000Z",
                'to' => "2022-03-13T13:27:53.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 28,
                'transfer_types' => ["payment", "topup", "exchange", "expire", "coupon"],
                'description' => "Or63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ34GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7gIcL",
                'from' => "2022-05-07T07:33:39.000000Z",
                'to' => "2021-02-26T05:13:40.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "3a590a3f-d6f5-44a9-bf12-a664b78e75d0",
                'per_page' => 877,
                'transfer_types' => ["coupon", "transfer", "cashback", "topup", "payment", "expire"],
                'description' => "LFWJxcGB9NLriuIsMTYyCUoOE",
                'from' => "2020-05-07T20:15:29.000000Z",
                'to' => "2022-01-31T01:04:59.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "d211eb39-53d9-4d1a-9a7e-fa618e2e6419",
                'prev_page_cursor_id' => "146e3655-c9ce-4dd0-8400-3154d7f0124d",
                'per_page' => 738,
                'transfer_types' => ["transfer", "exchange"],
                'description' => "LGCGYvgqbqCIdoPTyGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1UycVdhwjqe7",
                'from' => "2024-03-10T23:40:38.000000Z",
                'to' => "2021-10-29T09:29:09.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["payment", "transfer", "exchange", "cashback", "topup", "expire"],
                'next_page_cursor_id' => "ab17dbd5-e20a-4761-aba4-ffad460a923d",
                'prev_page_cursor_id' => "f64a8a33-bd5f-4493-ba6d-928e749b768f",
                'per_page' => 284,
                'transfer_types' => ["exchange", "expire", "campaign", "payment"],
                'description' => "ktMbdZ0Ff5nebRZC0vDYNEW",
                'from' => "2023-11-27T09:54:21.000000Z",
                'to' => "2021-11-04T11:52:44.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "topup", "payment", "cashback", "expire", "exchange"],
                'next_page_cursor_id' => "357f2e58-8a53-4c56-8448-44a53fe6783f",
                'prev_page_cursor_id' => "1980b352-cbd9-47b4-991a-235a9d366222",
                'per_page' => 913,
                'transfer_types' => ["expire", "campaign", "payment", "transfer"],
                'description' => "klf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTx",
                'from' => "2020-08-21T10:38:18.000000Z",
                'to' => "2023-06-27T11:48:03.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "c15c0ce1-ef3d-433d-bc8d-dc53abe3e373",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "topup", "cashback", "payment"],
                'next_page_cursor_id' => "ba286b8d-ed96-40b0-a543-52ccbc8bdf9f",
                'prev_page_cursor_id' => "8352cae3-5c66-4d97-bf1c-cbefca275121",
                'per_page' => 608,
                'transfer_types' => ["campaign", "expire", "payment", "topup", "exchange"],
                'description' => "EJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3jVYhbh4RW4SjcPHu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9o0TcGJkIJgRMahTjY4B83KCbssdn",
                'from' => "2021-02-11T09:30:51.000000Z",
                'to' => "2020-04-27T13:54:01.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "6093d98f-6ccb-48d5-82a4-97792239cbfd",
                'private_money_id' => "87b097c2-9870-4a8c-be94-d4875faa30e1",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "exchange", "transfer", "expire"],
                'next_page_cursor_id' => "5014853a-b446-4ac8-ae4c-fe7beae7e7f9",
                'prev_page_cursor_id' => "4abb2ad0-6268-403d-af43-d7f1b47c852a",
                'per_page' => 192,
                'transfer_types' => ["expire", "coupon", "payment", "campaign"],
                'description' => "DrThI9ndCARX9iZhUIwUrsQ8Uijo55dyiBxXbKWYhqIQcADAJhWFwASll2hGkEzja1NmQHCUATGGz590dtBhucZ4e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uv",
                'from' => "2021-06-10T05:36:33.000000Z",
                'to' => "2023-05-03T19:18:45.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "bw12Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYmrCrWwA7IkDmk9acr8tX9JQSHyiFoseHqYyK8GIOW0PGU45uzPdd0dJeNNvUC0bqs",
                'transaction_id' => "ce1a5931-a668-4996-bf98-8c94de3713f6",
                'private_money_id' => "d1a722df-dc92-4019-ad7e-af64d85e0989",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "transfer", "payment", "cashback", "exchange"],
                'next_page_cursor_id' => "98a158e5-4b76-489f-938f-0062afe90381",
                'prev_page_cursor_id' => "baa72672-74c1-4ed1-be8c-562c753c0347",
                'per_page' => 241,
                'transfer_types' => ["cashback", "exchange", "expire", "campaign"],
                'description' => "E2cpD4cThkIOO2LW0e3G1sTmjjH",
                'from' => "2022-06-11T04:08:32.000000Z",
                'to' => "2022-03-27T10:41:18.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "846fa98f-32b5-48b7-87da-80e278439d0b",
                'customer_name' => "AikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL",
                'transaction_id' => "79249bad-dffb-44b9-8b3c-04891141ee9e",
                'private_money_id' => "0d3b28f8-fcbc-45b0-aa91-8ad989bc2e6b",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "topup"],
                'next_page_cursor_id' => "99603510-8d7b-4ce3-9fcf-2bbe1c61fdd4",
                'prev_page_cursor_id' => "ad293d7b-72bd-4500-a75f-22b2d4302c88",
                'per_page' => 436,
                'transfer_types' => ["expire"],
                'description' => "rX6ozTzm0HG0TosxKz4jitwH",
                'from' => "2023-11-19T03:37:24.000000Z",
                'to' => "2023-08-22T13:24:50.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "ujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQNubIdHetIBPUrvpeN86f46tWg",
                'customer_id' => "e89056f9-5e4d-42b4-b3a8-a2892af986c1",
                'customer_name' => "JZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K8plKuk4zON6lsKCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRWCYsw6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWpRk",
                'transaction_id' => "0877d370-91db-41e8-ba6e-2474073e6d71",
                'private_money_id' => "7f093e62-5cd4-40f2-b276-88826421c0c8",
                'is_modified' => FALSE,
                'transaction_types' => ["payment"],
                'next_page_cursor_id' => "1618b85f-2346-4922-81ab-d0db1963d52a",
                'prev_page_cursor_id' => "177298a3-3b1d-4d0f-9d30-4fd9fea41ab7",
                'per_page' => 299,
                'transfer_types' => ["coupon"],
                'description' => "iTzwkLtzBfAa7kaQm6vULSy1FKdTtu83N0tnRGbdpbMjOs6NsjUaiDroY6Q3IK7BQ6AmswdAM3IJrwVbs9pMxfMCthiv1a2EEHFmQw4OmJsXraAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRUR",
                'from' => "2023-07-12T01:12:07.000000Z",
                'to' => "2023-05-24T04:58:43.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "00f485d5-c2fd-4bfd-8ecd-d5e6b61b3030",
                'shop_name' => "5ozHDn0iOeoWIRRMyR0nQkh8Zz7eaFGoiOPKR0rUW9UTcnGDBsZuPfABdiNvfS9Anufij6THnocikBJOkD3FvwnaI0WeOGlWmmegc1KGhe3TxnuKac7CS1DK4Gnrr3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u7tOxquneNatGolCf6SjeF7SeZXyMS6WkNJ2GvS",
                'customer_id' => "0db3a518-e8f7-4b3f-9690-7c12d5a83205",
                'customer_name' => "QUcruYP4H5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0tecRrYBgXoYNaRDH3xa5ZXl3L94kmDiQZVmfdCV9wGJUROgp1VTNstKsbk2w",
                'transaction_id' => "9fd5c376-468c-433d-9a63-1e1e64b2387c",
                'private_money_id' => "5166647d-ef5a-436d-a5ca-131c18f7768c",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "expire", "cashback", "payment"],
                'next_page_cursor_id' => "ac848a80-6f5a-4377-b51c-2f7d54772124",
                'prev_page_cursor_id' => "5850f865-a85c-4de5-8a34-a477e25b1303",
                'per_page' => 285,
                'transfer_types' => ["payment", "transfer", "campaign", "coupon", "cashback", "expire", "exchange"],
                'description' => "9C19xRl1IlJpGXqlhd5uwOg53j3Qic0iyKLnZxaZi9iCa2kj9IDD4FLU53H4cTCafuN856J50SdiADG37eydGENMPuSUGCPNHip0Y3dB",
                'from' => "2022-04-03T13:05:47.000000Z",
                'to' => "2024-04-05T13:30:11.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
