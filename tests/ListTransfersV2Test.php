<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2020-06-09T11:52:00.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2022-08-03T03:48:30.000000+09:00",
                'to' => "2020-01-12T12:46:29.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "fTMC7oTtNKzAvuEStHRS7eAjghSUALxzuCf8n6z82o0Ln4NQDH7tQgc5znmUYKDkyezoy1h6kvEIPQtJC8SXddn8Ve5ppnLrnEP7ZnDp7v2c3oEV3siN4WIraExC",
                'from' => "2022-10-21T11:19:52.000000+09:00",
                'to' => "2020-06-23T10:17:19.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["expire", "exchange", "payment"],
                'description' => "gcIxjJPnmaoeZw5lTUkSEpIner2dxLh61SrAPfZkZ7JXMDVKLh2mXHslGjTI53XZjbncwyhYuN366LQXELHDERng2OWkmEY6w5GwhQE8AJl2D6ASD53Z8xUNiUAu3X2SBizIiT1dCFh6CcXcGeAFUCYh",
                'from' => "2023-07-25T09:11:37.000000+09:00",
                'to' => "2022-11-16T08:33:19.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 424,
                'transfer_types' => ["payment", "expire", "transfer"],
                'description' => "vpRLXLeVEtL2mW9lxZplYUwqsu4PQQya8LT7OmgMN0Iaptdx6x2XC8vmBfU0oGMG5D7zXfml5fwbocslLsBNEiQkfbjtL0w1ttSwUxmxGvLMXAeBTdfgN0QVID6X37WKsHDVHOPHZw",
                'from' => "2020-02-24T18:17:29.000000+09:00",
                'to' => "2022-08-27T02:59:54.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "aec61eb6-db0b-4955-96bf-72ccd1f72c7e",
                'per_page' => 345,
                'transfer_types' => ["exchange", "cashback", "payment", "topup"],
                'description' => "t5a74oeBqq2JlVJghH7H27WXjcsWUzBapzW2D4nqn9H7Fac4662kK6cyZEdKSvUJ3mWfdaOvtxUUl6nkCaCIrGkbRmOGg151vaGvzZxRs5UYcTY3kCpXvN5AlNCuOWNXqgKSc7D22ZBSrh7eKmgarb8WGYgiLyqNY3eGMoTS2CcDVYPB6eRgWyX0VBzviR24bvM",
                'from' => "2021-05-29T04:52:23.000000+09:00",
                'to' => "2020-10-03T10:52:47.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "1e8dbf22-0f38-4194-ac49-85e55dd9b05e",
                'prev_page_cursor_id' => "af174e9e-a541-4166-a75f-73c29c5a8c94",
                'per_page' => 577,
                'transfer_types' => ["cashback", "topup", "expire"],
                'description' => "13YPx2kbhORCQVdgHFCpolMywaGBznK7y4vcy8adEe9Ew3eYNgVE9Idrs2yUEdsHBM3iHlaXArk0x5k878ozcGPKnCj6lSkpZLuQH8zOmF",
                'from' => "2020-07-23T20:30:28.000000+09:00",
                'to' => "2020-06-14T13:46:12.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["cashback", "topup", "payment", "exchange"],
                'next_page_cursor_id' => "83f39ad1-50d6-4f93-a30f-4e7da2d5f46f",
                'prev_page_cursor_id' => "0c4f5e2c-e957-45c1-acc1-f093355e3fd9",
                'per_page' => 748,
                'transfer_types' => ["payment"],
                'description' => "ygoXYUiDwyubYzXuG7Swt00s91DxYTXftnH1slICp4fF2t57EwuPmUPKbu1MX3U8JB5z1GuxxOHZMz4Z93zsKHalwAa9APi31AMV2PQdB60GrwmGZB0xoWMEFZi2hH7m0yLm2zkp5E285ju7xNIXLw7uQwhpMZhzIfVvug2uDbLgtvWCx5xIPV1iRGTLSkPro88bCR1",
                'from' => "2022-01-12T06:40:33.000000+09:00",
                'to' => "2020-06-26T01:19:16.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["payment", "topup", "expire", "cashback", "exchange", "transfer"],
                'next_page_cursor_id' => "e15bfd55-01ba-4fd0-998c-e7c09678ce23",
                'prev_page_cursor_id' => "3a635267-6ce6-442b-8d9a-82000493b7b7",
                'per_page' => 905,
                'transfer_types' => ["campaign", "transfer", "exchange", "cashback", "expire", "payment", "topup"],
                'description' => "zMr0ZWkyiE5YM2IJYNTAbPeXuUPubjT3lueLBmMzTw2qjJEVuJa0Jr0SRVSSc7lJvRkkfDJOznkkM69lv2didYXDUeEp",
                'from' => "2020-07-03T23:30:41.000000+09:00",
                'to' => "2021-10-16T08:41:32.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "5a87d47f-7e94-4a18-aa0a-f2a3ba54eb98",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "topup", "expire"],
                'next_page_cursor_id' => "a7cb7baf-5820-4d63-84fa-ac151a554d8d",
                'prev_page_cursor_id' => "94ee6cbe-1bb9-4d82-9d96-ac7f9d1dbbcc",
                'per_page' => 157,
                'transfer_types' => ["campaign", "payment", "cashback", "transfer", "coupon", "topup", "expire"],
                'description' => "OAT2ZYzNt6NnVRe97tlBEzS5RQUb5vk8prjfLkTIVU9Cnh61kJtoDmiKwoDhwdqwdNPHBaNUecaaZuQKKWPfyj",
                'from' => "2022-02-20T00:18:30.000000+09:00",
                'to' => "2023-09-08T00:45:08.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "019e0ae8-8ad3-427a-b421-177f4ee70b5d",
                'private_money_id' => "db325bb9-cdfa-4e81-9e76-0419e459b41e",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer"],
                'next_page_cursor_id' => "dd1933de-5228-44d4-89c0-0ca5e047f193",
                'prev_page_cursor_id' => "94d08104-ce2c-47d8-b9ea-a7a2a7de797d",
                'per_page' => 25,
                'transfer_types' => ["expire", "cashback", "exchange", "transfer"],
                'description' => "zmmwooxBxcbDjrWQAZyPLbjH4Zv8HryaD57h85U7w7ybxskOgo3MxNKSoOawC4OggWCfYYnH2Lp1QVIgTXOaUwQ4t2t1JnZVS9DLwTmMPzaFkC5vzMPGua1yI0RKHvjs7EBqa8iJoyi8J0w4h12OV5n4mSfERnr0X1cv9ts3ApM5KoTEJ4u6bHd0",
                'from' => "2023-11-17T10:48:25.000000+09:00",
                'to' => "2021-02-16T04:21:56.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "Y9xvv437CdTaB7CbeBM66ymyjWAGBS1oxkq50MGFpxuCgZclLVDfefsoDeBB3iUIrzuh7kK6DlSFzSF1xht4WO0tmbrm7KuR4LHyy8QhET2",
                'transaction_id' => "0b3c3dae-24d7-4f59-9c87-8548ecf13a10",
                'private_money_id' => "16cca908-116e-4ee6-9b64-d7b39bba8b69",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback"],
                'next_page_cursor_id' => "94f13082-732d-48c1-894b-d331490d83d9",
                'prev_page_cursor_id' => "99b9c75d-3d88-43d6-8df8-b6a61daf407e",
                'per_page' => 137,
                'transfer_types' => ["campaign", "coupon", "payment", "cashback", "topup", "exchange"],
                'description' => "LX8KEXvlw9od8v4C20WMQdwLUrFlMLjpyx4XsynsVmEiDFhauvuRAlMDDmdvDVdh7Oc0UOKux0azHydGHFtQiIBC",
                'from' => "2024-01-04T05:29:58.000000+09:00",
                'to' => "2020-10-20T06:53:14.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "02ee86b6-a8f2-41b8-94d9-c3c480c0a39a",
                'customer_name' => "qn1W8bQjMOUofInmDW2q",
                'transaction_id' => "a6348064-95e0-4d8b-aade-71c24230e240",
                'private_money_id' => "386ac14c-a546-49e9-bd92-d1d940fc5e9f",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "topup", "transfer", "payment"],
                'next_page_cursor_id' => "d2dfa700-ddb1-4903-b3ac-0ade584f9a15",
                'prev_page_cursor_id' => "4f153b74-47b7-4e49-bc57-122be6d8f335",
                'per_page' => 694,
                'transfer_types' => ["coupon", "exchange", "payment", "topup", "transfer", "expire", "campaign", "cashback"],
                'description' => "QUaLqE158IIShQjeT2Y3IdNLlSdOGtsoeNg3wic8g0pPEGmwEAMsGfq02al7HkLvSOg7r3r20lBJepZHveK7SsbMYHw3VEpwvULIo9KwpbWNYfaCIJOMPBRMeV74Gxu37Qo",
                'from' => "2022-05-07T12:45:15.000000+09:00",
                'to' => "2022-07-16T21:50:16.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "C6xgrJ5w8x5",
                'customer_id' => "5a28d6a2-80e3-478b-8a14-7510c36b0c63",
                'customer_name' => "ErBViQXpRlCHyIP1xM0M8dBmdUDK2LnNSTYujzJGFCWRgKTfPEilBxPRvp6TixWUZT5KWlbwMSrs9mgLfjLQZhoh98Yc8KZkcG3yXxDqxOiL7m4HsCUeRmHSnK6nKT6z6jBHD1b16Qn6pqPPonHAJeZJcO3YZsM3b65dDaKXuF3c3csaeov6m3Ixm7TKRun4vi",
                'transaction_id' => "e39312f7-27ed-41be-a813-6e90a852b91b",
                'private_money_id' => "523afaf4-63ba-46ba-8457-1c6fa2adbca3",
                'is_modified' => TRUE,
                'transaction_types' => ["topup"],
                'next_page_cursor_id' => "38797c37-4b52-40e3-8f92-e59006c65f3b",
                'prev_page_cursor_id' => "9383051e-e2c3-4151-9ae5-85a345a8db59",
                'per_page' => 731,
                'transfer_types' => ["payment", "campaign", "cashback", "coupon", "topup"],
                'description' => "agXr06El13nZIkD7U87E6wKOGoUJoYOw1mYcotcXeOB6hHWdRTtdA21yvNuElKjHoToTEe0mepNkPcY5kMkjJLIz2rBf",
                'from' => "2023-06-02T10:28:10.000000+09:00",
                'to' => "2020-08-07T19:41:02.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "dba04e5a-1af8-4a7e-b637-e2a0b7f7084c",
                'shop_name' => "PZufT4lXHKfYxFFvmQfwFtDH0EXBnaxdgqkew8FWbSk22ovSf2MSnmmsoBtyxINYEHwaENw1enzOe0il6QjuydJUhNT6",
                'customer_id' => "702d6265-0355-45f3-8ddb-b03e34f91bb4",
                'customer_name' => "Gj",
                'transaction_id' => "e000dc4a-8087-4ddf-8fad-04677a4d4999",
                'private_money_id' => "4e6d7db3-b8a7-4dcf-8b0a-9293fa54c7ac",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "topup", "transfer"],
                'next_page_cursor_id' => "9fb0f22a-2a87-47db-99fe-a05b3c447ad2",
                'prev_page_cursor_id' => "0b22611d-67df-45ee-b9a2-c076aecc9aa9",
                'per_page' => 96,
                'transfer_types' => ["payment", "topup", "coupon", "cashback", "exchange"],
                'description' => "V8MskBGmkXE8j2cDEYsokZDTy",
                'from' => "2021-07-20T00:44:28.000000+09:00",
                'to' => "2022-11-25T01:23:53.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
