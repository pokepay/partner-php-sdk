<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2020-08-09T02:01:43.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2020-08-23T11:50:19.000000+09:00",
                'to' => "2022-02-20T00:05:46.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "zcHWI",
                'from' => "2021-05-03T19:50:22.000000+09:00",
                'to' => "2023-06-23T05:01:33.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["transfer", "expire", "campaign", "payment", "coupon"],
                'description' => "u66q3Da5SVhGGYIv4Q9Iz9bHaUfRFE7ZuGllQ07DYQcJZ9jPkF6ifI639rFpk9",
                'from' => "2023-12-29T04:18:49.000000+09:00",
                'to' => "2023-08-17T16:02:02.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 83,
                'transfer_types' => ["campaign"],
                'description' => "JTp5fDkrupmM",
                'from' => "2022-01-03T13:19:15.000000+09:00",
                'to' => "2021-12-09T05:03:09.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "3e9ec910-82f7-44ab-bb45-2b66cd40678e",
                'per_page' => 912,
                'transfer_types' => ["campaign", "coupon", "cashback", "topup", "payment", "exchange"],
                'description' => "powiYSyoXAXXsLl2IeXhM988Z46HqUOxfDKEal2AIw2hD4knOCyunIJkcOgqILFGCAaYU6qh8hBg72AY61E96fjZk01mBZemL52lSH4bkjI57kh7yNMj3lqeGCYJmbsM9N2Ke1HOFRLkhNXbLo0fCayJIZBBhp",
                'from' => "2021-08-18T23:06:03.000000+09:00",
                'to' => "2023-10-09T02:06:26.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "fbfc5c4e-11b5-49d2-8ff8-deb27744bee3",
                'prev_page_cursor_id' => "7618679d-a76d-40c4-8e3f-f9ca0711ecfb",
                'per_page' => 70,
                'transfer_types' => ["exchange", "cashback", "campaign", "expire", "topup", "payment", "transfer"],
                'description' => "iUTZA8C2DEgQBrT6P8JLxQ2lIvRnhVnwiOCgFZJKsEaafdKCia0sBswVjSVSN9bNQyJwUQDBcEsPobMAcQXZAacxuFddCvOVEKgYKh8j7H3ASLsnOREhDMz9rWipnuXhJWOmajzYahMkG1ZXZfLyRMe9qcOBF",
                'from' => "2021-08-28T17:23:33.000000+09:00",
                'to' => "2020-06-16T08:32:26.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["transfer", "topup", "cashback", "payment", "expire"],
                'next_page_cursor_id' => "3713c7ac-c905-4626-b88e-15e2ebf39bc1",
                'prev_page_cursor_id' => "02208619-1e0f-4d8d-aeec-8bd282bfb10a",
                'per_page' => 822,
                'transfer_types' => ["exchange", "coupon", "campaign", "cashback", "payment"],
                'description' => "w0eKHVa7oqfMBaHVPqmUzVRy04s2CRZ0Ii4FmAiqmfcNNg1WlTCnTXljR3hnjKpBKSvVTLA92yCpbVmM761Tmml2uTOdvCQPZlRBxsO0fjNZ1fbrnCGetXjRVwT3RQ",
                'from' => "2023-02-17T06:35:29.000000+09:00",
                'to' => "2023-04-02T05:42:47.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "transfer", "topup"],
                'next_page_cursor_id' => "b9a2a42f-823b-44e6-b174-4bbf1d760f91",
                'prev_page_cursor_id' => "5fcbdde3-9ccc-4138-a5c2-319badfc54bd",
                'per_page' => 471,
                'transfer_types' => ["coupon", "exchange", "topup"],
                'description' => "4Saj8TVfJS04FtcOqec1Sml76Xl9xWcf1h4xkdXFsZYOOmt0RbhWk3qdYOiOl1aHmTFra40CCtszXHhHPFtfLm6zYrpzO5Hk5f5F0F5vObD9gIHsgK7Bgfd0b603Te9T1vEw1",
                'from' => "2022-02-22T06:45:03.000000+09:00",
                'to' => "2021-10-01T19:11:23.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "e5a088ab-ed13-445b-8fdb-150cde2d4339",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "payment", "topup", "cashback"],
                'next_page_cursor_id' => "702882cb-80f2-4adb-a6c1-d32b10dab030",
                'prev_page_cursor_id' => "77a8a5f9-5635-4622-ae20-568d472925c4",
                'per_page' => 892,
                'transfer_types' => ["transfer", "topup", "exchange", "cashback", "campaign", "payment", "coupon", "expire"],
                'description' => "IssuWsbV8QoL8LmQrLNHPSV8r63uHc5vnOP1OL5n4UmS9Py1G5lqhVV3lFaFyA40PFUDPsYOrv5B4lz54NM75VL7sObUQ5XD2V363nDdrDp7dmnqgvcBBtXapCOmMhozNuPkeRqYxyZzKWipp92PQuRw8C8fMCqEYfxuOxPT",
                'from' => "2023-12-24T18:28:17.000000+09:00",
                'to' => "2021-01-15T02:32:54.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "78c162fa-b968-453e-a145-b9f6f66c4f8c",
                'private_money_id' => "e11cdadd-54a0-471a-9651-fa04437b0868",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "transfer", "expire", "cashback", "payment"],
                'next_page_cursor_id' => "8f0dc5a7-b87a-423b-9485-48f1ddcee765",
                'prev_page_cursor_id' => "dee1caf1-c8da-410d-83d9-31c1b6204db7",
                'per_page' => 798,
                'transfer_types' => ["payment", "coupon", "campaign", "expire", "exchange"],
                'description' => "vc",
                'from' => "2023-05-22T17:48:23.000000+09:00",
                'to' => "2023-11-01T03:15:52.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "fJn9TyBUfw1P9LXeXREVQMmloc2LvARuN0KiRagyShS1JlHvkRTC1q",
                'transaction_id' => "2e6adf41-20c1-4ee6-a51c-0a719247ad5b",
                'private_money_id' => "db40cd73-aae9-45c2-a008-c343795fbdfb",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "exchange", "payment", "transfer"],
                'next_page_cursor_id' => "82453048-6685-4229-8dd9-a871fd691372",
                'prev_page_cursor_id' => "c4334e9d-0f2b-4559-b1c4-ab980089eccd",
                'per_page' => 608,
                'transfer_types' => ["coupon", "cashback", "payment", "campaign", "expire", "topup"],
                'description' => "P5oLUCDFaBw1RDgANnMMFXaEGvni3RU7oL5nVFZohQCrKof592syyrhIIffXYbvzka4aaFnswVC1yfQtjC0YBBIyOWYKM9Tk4MYOj9gcptnKGoUBm6h08JKqAk2mOjOGqGOCcWql8Trv75fnFQLR986s0ZkEVQ",
                'from' => "2023-05-10T23:25:43.000000+09:00",
                'to' => "2021-04-04T01:03:40.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "843c26a6-fe2e-4ae1-89cf-643bd269b21b",
                'customer_name' => "zHhcYYgvNYPX5QZPI5Si",
                'transaction_id' => "f2693631-5628-4a3e-914b-7a64cd326fa4",
                'private_money_id' => "f2eb3582-a034-4f13-b752-d9ae463bcc7a",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "payment", "exchange", "expire", "cashback"],
                'next_page_cursor_id' => "a6db6e6f-2d38-4a9e-ad1c-e7ec10cd6ed9",
                'prev_page_cursor_id' => "2a6ebc27-69fb-4ea2-b52b-3e1d557c1321",
                'per_page' => 452,
                'transfer_types' => ["topup", "expire", "payment", "coupon", "transfer", "campaign", "exchange", "cashback"],
                'description' => "z2pq3rOU2oQpz6kAAqFpdIwALL9ojK7RDJrpRWYIlcsiEprsBJwVK0XJKgRCAiJJdrwAPIyBxumxax0AQT3h0miyKm8X8fX389EW1BXtCyt7tvOYMGqovhQd0cFiYNC",
                'from' => "2021-12-11T06:58:42.000000+09:00",
                'to' => "2021-12-14T16:53:39.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "vstR0296NdLqEeMv32tfZR2LwDjny6uXekuRFKMTkhtqHKMGQkgQOOuJW3kNdKWsVON60QwmuxJPjsR1X",
                'customer_id' => "df662038-fa8e-4ab6-9c8a-b32b50ca1079",
                'customer_name' => "k7ro0KPGTGN8ykDmA3JuHSPI7W7yEaRQxQnmk3ZAixE6vHf42Cs47yWoEseXtz5HQxgmSjZ1PFlbXnYyA8ltOC9LQ77s2smStrskQiLDPwFaeR4O0OTR9OsxLiLq7zzcGMTbrKly9YkcDdVtgFRzxSRz8BRtmcQelCAWxG8wvRjYchaz2q6viVbbqVL5q5E2ZJ8Nx0Q3FOpMCDGBkQgvRYBlZIqbnn",
                'transaction_id' => "91c9b97e-3a6c-4aae-a8a3-57cf3c7572c0",
                'private_money_id' => "aed30f3a-18ff-4d50-9816-0a9ef47238f3",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "payment", "expire", "exchange"],
                'next_page_cursor_id' => "e42168d3-cc2d-4345-a426-b12c562182ce",
                'prev_page_cursor_id' => "bf953891-c1ef-4400-bd17-357d5469d8c7",
                'per_page' => 520,
                'transfer_types' => ["campaign", "expire", "topup", "payment"],
                'description' => "bXihydPtJCH3p9eRBb6uSeKMvibgy53vAl9s6aygsPFBABDjMbtEalPtBsugYAKl5sB4lOvJ2dnl5IhhKsItvDFu4AJR5Kjc7qCJV7XGtsP9szGCfDY1DkibsjSLWVwXRYfvpPW28mOZ",
                'from' => "2020-11-08T19:18:36.000000+09:00",
                'to' => "2021-07-16T08:41:56.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "263159dc-8ae8-4bdc-9664-3cf68422d407",
                'shop_name' => "Ka00YuFCcXYSMtVMeYVUE8IMSuhwCNWbv9DewH7",
                'customer_id' => "4f232e16-f129-4230-9785-b91fc7930345",
                'customer_name' => "kOTDdi7c9wMdsUdGCqRMAq9M7Em9HCinBv66sjMKSAcHoyqeeDQehdPr7cxCdX2xsghdhziTDbMPF0HSNc1eVS1GdXYhah4mRwLayVgwS9FJFpJrzELWncXOof2PfqOLKARbjpzR92UrMetvgt5lWj9Js7GxXdEFZjrv7kG8lYHoKFce9H18ugX7vbJ",
                'transaction_id' => "66cf6542-91f6-4096-9408-cdf119a1cb7e",
                'private_money_id' => "5a421e00-d4e0-469c-9420-8d29b5693294",
                'is_modified' => TRUE,
                'transaction_types' => ["payment", "expire"],
                'next_page_cursor_id' => "aef5b7b4-9bf2-4f8a-bcf3-cc45cb9d0fb6",
                'prev_page_cursor_id' => "49cf6440-faa2-4ab5-8092-e21fc7c4f52e",
                'per_page' => 974,
                'transfer_types' => ["cashback"],
                'description' => "aW1fME4S0bvJAO6wrnf7uJGZur7jgmT",
                'from' => "2023-02-02T14:30:59.000000+09:00",
                'to' => "2021-03-09T17:44:15.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
