<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2023-06-13T00:21:35.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2023-05-30T02:46:55.000000+09:00",
                'to' => "2021-09-03T04:17:16.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "LHaU5cwIWr0wwdEu7EEbQaGSQU4G3kHmiDZSqMv285R9HAT9I98r1oJubSaBrQn7ukGtokc0jvmUuZYdX1YFKWfWC6inceJP9tekYoLkr2wRCbGQv4fVPWOJGf1vwmVdHPRebCR1jn6OGeMn3WUapfthA0FhccCCMwG1sS2surmCZiVOfKR33EgSWZ8m4dY",
                'from' => "2020-06-12T21:20:04.000000+09:00",
                'to' => "2021-08-21T22:09:38.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["exchange", "campaign"],
                'description' => "l18am1VQbrurfKdo5s1vzLDHThSUyexyelotZTv1t9hEoZuYht7z4Gn5Y",
                'from' => "2023-10-15T00:05:15.000000+09:00",
                'to' => "2021-04-14T18:59:55.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 912,
                'transfer_types' => ["exchange", "campaign", "cashback", "transfer", "expire", "payment", "topup"],
                'description' => "CUYKE5cmOioDkrBWJFSb65pnVQ",
                'from' => "2022-06-25T15:04:13.000000+09:00",
                'to' => "2020-11-09T20:58:42.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "90360cec-f4da-4840-a7c2-4942fe34edea",
                'per_page' => 302,
                'transfer_types' => ["campaign", "coupon", "topup", "cashback", "transfer", "exchange"],
                'description' => "PKIH4x4CqZ7qDR9yBAaE5QctF9ak4DVXFfYLcEC9BRPdjeupq0GeO36gs8CtqNwTX03qX7NBZlYFKDJaffDPVodX8Gdt8nRE2FE4sHduaLoTQQGOVcYMIzRpsyTzeZziKQ3HjnefXMBorwotiEOofl",
                'from' => "2021-02-16T20:27:28.000000+09:00",
                'to' => "2023-11-05T18:48:36.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "6ce30201-837d-40f4-881e-c75dc638316b",
                'prev_page_cursor_id' => "0e464f74-7585-4746-a21f-3dd419d0711e",
                'per_page' => 970,
                'transfer_types' => ["topup", "transfer", "campaign", "expire", "cashback", "coupon"],
                'description' => "c7O1OxEW0oq8zPtoMKUJ9dai9MHCcmQeRgskykByCIFZy8AqHmM7UEuccYgAWZyeDUh",
                'from' => "2022-08-19T23:37:19.000000+09:00",
                'to' => "2022-04-23T14:43:23.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["expire", "transfer", "exchange"],
                'next_page_cursor_id' => "da963773-d82b-4bfe-a23c-80b4eb1114b3",
                'prev_page_cursor_id' => "9f3a553f-b2da-4cd6-8029-95c84cc9d814",
                'per_page' => 125,
                'transfer_types' => ["cashback", "transfer", "expire"],
                'description' => "FZtTNQW0EfrpOKao0S2VJOhbZr6QVHA6Ct6sJsWDGlBqKyZd6cMUoRCg7",
                'from' => "2023-08-22T13:12:29.000000+09:00",
                'to' => "2021-08-17T09:20:28.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "expire", "transfer", "topup", "exchange"],
                'next_page_cursor_id' => "59bfc984-68ac-4421-935b-470957ffa741",
                'prev_page_cursor_id' => "c969b17c-af38-48f5-945e-5cfd76adf07c",
                'per_page' => 250,
                'transfer_types' => ["topup", "transfer", "expire", "payment", "campaign", "exchange", "coupon", "cashback"],
                'description' => "zkQJBAmgUD45HNLiQaDxbUn2ZG38LOq8zQmTBaXObJvn9cAfFpb7zyeA7sLtJ7Y2MBeo5mRQKmmjdauUqMvuwSbWS8Hbnu2SPnashTQTU54TK5JlKs7CkxK1TsprZGC5qx3uedkSI7ruIGoYDLNbhPbMkUk",
                'from' => "2022-04-01T09:20:13.000000+09:00",
                'to' => "2023-03-07T19:37:53.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "2a1fbe17-58b2-4bd9-98b0-78a6a3867d4d",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "expire", "topup"],
                'next_page_cursor_id' => "994f0660-9a8c-4d87-9483-398d14a45dad",
                'prev_page_cursor_id' => "0cc95be5-b137-40a3-8d9c-4568e94b1f7f",
                'per_page' => 124,
                'transfer_types' => ["campaign", "cashback", "expire", "exchange", "coupon", "transfer"],
                'description' => "FiynIMHjoJAoEFZ2waEXrNNldCi9d8s1KOnhTM5U4vbxNh6epVirdxR1AadsPc711NDiNAZkJdkLGCww5tPkzd0nZ8zIqvVpH56quRzlPxRQhBcB0S2Qzg3fVZMYLErtvs7fqTHxsjZa3e7g62guxzKL8IZxmvjce",
                'from' => "2024-01-12T03:34:56.000000+09:00",
                'to' => "2023-04-22T07:32:58.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "80cdcd4a-7abb-496b-bd48-0b2df4e1d52e",
                'private_money_id' => "68c4b52f-90a9-465a-af77-d1e41a83a3c6",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "cashback", "topup", "transfer", "exchange", "payment"],
                'next_page_cursor_id' => "2f0c010e-fcec-4767-9124-40e0e051933a",
                'prev_page_cursor_id' => "cc808988-c60b-4ac2-ab3e-70cb565457ed",
                'per_page' => 416,
                'transfer_types' => ["cashback", "exchange", "transfer", "payment", "expire", "coupon", "campaign", "topup"],
                'description' => "qUCus8BhxVQqvefXyQxeufGNFGwsr6dAKiodhSXqmZAeNXIBokF5uz1UcpPX7qH9Fk5tLuniqdezx5CNHewu5OmslBpXYrhp4ZOw9qSXS7RZxkjq8I7vAIwzKfhVdmKZkPap1YiCTfLri8XTg0MDQcFitliw6e2MJ",
                'from' => "2022-08-30T21:09:09.000000+09:00",
                'to' => "2020-10-29T13:19:11.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "8bZrAqhvYQ3jtyQJLbhcjixhxAYwAn111q5idzRpF1H0tT8ERADSDVho7cph0r3fmRzGqNe7syMRUuVugvM9RjUbtyn4kPwgzgGLImYVo10qjVnwfBH007QY1CHmxBui",
                'transaction_id' => "32a92853-363e-4d93-9d4a-487ec13e060c",
                'private_money_id' => "3b3cdb39-d3c0-4c97-985d-e67393643742",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "transfer", "exchange"],
                'next_page_cursor_id' => "577df2e1-fd50-4b80-91c8-ca2b7bf15afc",
                'prev_page_cursor_id' => "fe6b6be5-17fb-4c72-9c00-a9f5009ec994",
                'per_page' => 360,
                'transfer_types' => ["campaign", "exchange", "payment", "coupon", "expire"],
                'description' => "nq0RT9F23IHwcAeuTfwMXvxX5EC9jQxdfctWldHq0IroP1waTvKHRfj5YlL4VixNP4De8fD",
                'from' => "2022-08-05T19:33:15.000000+09:00",
                'to' => "2022-10-23T00:31:48.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "af6557cd-6a37-4d4c-a408-d1551d121be4",
                'customer_name' => "neZ3B5Ycfp7I5U0OdysO5vJmB8umh1vV7unwvP1vEoDqchhZyrtWptUtQ8PfvEDStVJr9hmIz8gzfD04zbjZGy3nKY7Ra9A4AgR7ipCMc9mstiZBdUywVTpPacTNcxfZceyHt33Mu8khQaHFRSWPp7nMNrmmspGypMi6LssAfxtm2pVNy31g06U53spuEe8tTCyEJFVcFqOrK1jhe0ZNyFcisih7eUgb",
                'transaction_id' => "2feebec2-ad8b-4285-9f21-3e5e0db71ced",
                'private_money_id' => "042a149d-7dcc-41d4-990b-b5aba7df3c02",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer"],
                'next_page_cursor_id' => "18cc12d3-4ee3-409d-88f1-7d3faba87f7d",
                'prev_page_cursor_id' => "9c155278-54cf-4485-b95e-be4f7e6eb3a3",
                'per_page' => 407,
                'transfer_types' => ["coupon", "topup", "payment", "exchange"],
                'description' => "NORnwrlfeQSCH2lfAClkqhkBlw3l4uSC9B1nF3VXYATaQ84vgsuYqtb6peBEFK4GswGY9vGpaTY8hbUFYAr296HesyITsIB98Z4PmaY8ehaO7MlTRrrnhRjkXK7l5vl6LOU53jPVcLtJTT",
                'from' => "2020-08-22T10:53:35.000000+09:00",
                'to' => "2021-03-16T13:41:26.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "mWwpf5Vx7W5BXkdZkgPCnRc47uwxmsFiwlFZvbe1qcAzes9cFUOY3y9R8cpdtLbpOve1oCRwDzyf9BWUvI5ymH2qQAvUpxJbLUp27S2UwBOQpHVe5h6DORxwS8u8g8rvBRLlj2fP8XvpNi9Wgx",
                'customer_id' => "9f9f6b12-75f7-4b62-aa7e-6271bdd0cf0b",
                'customer_name' => "g80NPZWMqzAUumXUfuL22qZnhIy84bBzMabMZdQgFrbbpwuzIFvmwPShbmjYAY4cfgmUUSbtFlOqcvVsOK34UxO4wY2gEDgiQVUZEjTBBCQFOgroba5Y1xPf62xd4GcUD1SHxb9CqVF9xT2aFPEzQNziDIa4TiLxue5o4fe7FwpfTjwiiJdxXztffmQRj9o2vmYSC1oNVacgzIHSR6Fd2rqUFQfXhmWDm1cZ6zMinx3TO1T82oWvlMwu4tJ",
                'transaction_id' => "74099095-2a32-4778-b045-820fd4b31457",
                'private_money_id' => "9b320b76-fe42-45bd-a46a-a2330c070508",
                'is_modified' => TRUE,
                'transaction_types' => ["expire"],
                'next_page_cursor_id' => "261d85e2-f65c-4777-9633-12f807760248",
                'prev_page_cursor_id' => "2bee8653-d88f-4a90-8f3c-6a915a887ac2",
                'per_page' => 278,
                'transfer_types' => ["topup", "transfer"],
                'description' => "07Wb0pop0xeTreCyj3aL90l7DLSLd4XOvYyO9vls0rIKmSYtO5HYcF1fAmNdKUKt3A3orUA1tGRyp3ANgJFEird6NeQxILDBo3K9NAzBh7otiqvGgDydPFSXP9TCPrv8XzSvGIidvRA8ZxdKLkmdRackT16O9dze1hxYs0mErH",
                'from' => "2022-06-20T05:29:22.000000+09:00",
                'to' => "2021-01-05T14:31:23.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "3c134535-1e13-40b4-b49f-1d6789c9beb2",
                'shop_name' => "pvEuCtWZOMM81D5CJOGNOlKFGC7v8GhZsNqhKWrmrY58i3mqwvXD7niOnDBroJuOclkzrTcP58CxfqJTCGPQ1YMPjm3YnDjSJqTYSakKqqKZtLnhuXo567JBjqL1bhTIiBft5irdA8xmV",
                'customer_id' => "0a079470-6fd4-472f-abbb-516761788423",
                'customer_name' => "zxYL3ShAoT312F82H3ZVixkbxjl4SsGKMz7glgr4GlnzbUVGKWAAW2mDoPhzdQPYUE0egOvlc6YD1YUKl47GEIpwHiTisllwrMxEaQKVJhjCp6EXcj7QGA0gnFLyoSZvsHl1J9RW56ldZQj9nO8dtesXnEpocrU2i1FSPqM7GpCjWlnnGAbENPykZVcceIddOFDnEjedCNj79nLFug9vpxBg9e8ZJNo",
                'transaction_id' => "e1a668fc-3a01-49c5-a3a8-f010c6ad3758",
                'private_money_id' => "efeb6ae4-c03e-46b0-84c3-822a893e54de",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "exchange"],
                'next_page_cursor_id' => "449ced39-0a73-4b9c-b10c-1463588f8593",
                'prev_page_cursor_id' => "40858b3f-01d7-4427-bde9-4e4f48afc4d2",
                'per_page' => 933,
                'transfer_types' => ["campaign", "cashback"],
                'description' => "JBAqTlQru9zQu2eKfzseFkCPUkkilTzBzChEiZKOfOy4N3Qbu8dVew8VJ7UStcc6WeIdhdljx5QfRKhFDA6GWIsItnkbf1PhFm5yyYyTxk7PDLI0HdUZwpJGUGhGoYG8C1oTfvOwXacjxuFIKDDH0LzsSt9f0xZq",
                'from' => "2023-01-15T20:12:15.000000+09:00",
                'to' => "2022-08-04T11:47:30.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
