<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2021-07-04T14:35:01.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2021-11-23T08:55:41.000000+09:00",
                'to' => "2020-03-22T23:24:09.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "D72YAQpJKw0zUL1kCJkFomQnW8Lt2BOxxCzThwP2PpTQJjY6O4rY35l9K6ScCnNoUSnOwTNKoVBhIsHMCUj5IxbqIEJNvxM3TKQOntUgGKa83W0WKOrcplTUPDTKnxRv6VqGZwdp5XS",
                'from' => "2020-12-10T01:30:15.000000+09:00",
                'to' => "2023-11-24T13:09:41.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["topup", "payment", "cashback", "expire", "campaign", "transfer", "coupon"],
                'description' => "R80rMuQNZh9EI4lWq2hiTh9C10Wjpw2uArBnhL3Q8UWWJfDBFxO4zgBOyYYkYOx27zQHrsVF0PdGwZ8cum2F",
                'from' => "2021-01-25T11:28:26.000000+09:00",
                'to' => "2020-07-18T01:27:59.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 830,
                'transfer_types' => ["campaign", "expire", "exchange", "payment", "topup", "cashback"],
                'description' => "27YL5AdpUfkWiEJxgfosXTBjeUNofsGwG8PquSNSBvo6FPH0ea8as8T09f3PnpGUzMiOTAdLILJ03b1dEDvpsa6eM1fDzuaWDq6",
                'from' => "2022-08-28T02:25:30.000000+09:00",
                'to' => "2023-12-04T22:59:15.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "31734690-2544-412e-954a-4690a640b8e2",
                'per_page' => 144,
                'transfer_types' => ["topup"],
                'description' => "Rjx4951jjKLwYvMwr0S5Jr3yDuxsvHHEoDlV7FPtPBhf9kRlqFOI2IBZisiEaziaUZdydZtCTswGzC8pvuw5w7ymiMHtcpRbAJ3hVSM9MCmg3jMRB1M4O8AWwBrV",
                'from' => "2020-06-05T14:30:03.000000+09:00",
                'to' => "2023-09-01T23:53:56.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "257a4f54-22bc-4d4d-a2cc-5a10aef21c64",
                'prev_page_cursor_id' => "45f80dc5-ad7a-4ba5-b033-2ef37507bff4",
                'per_page' => 613,
                'transfer_types' => ["coupon", "topup"],
                'description' => "dXBrUBgYV1UX4llbZp9oWiKRtqOWpUIQAdjQwcc7FWA1GHgku",
                'from' => "2021-11-29T17:21:34.000000+09:00",
                'to' => "2021-01-20T17:57:36.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["topup", "payment", "exchange", "cashback", "transfer"],
                'next_page_cursor_id' => "2d4c0cee-6785-43ce-88ad-0a5287ed606e",
                'prev_page_cursor_id' => "0f64ea70-004f-4863-b49d-9da80d0412b9",
                'per_page' => 766,
                'transfer_types' => ["expire", "payment", "transfer", "campaign", "coupon", "topup", "cashback", "exchange"],
                'description' => "sDxqewOXoOpqoD1lWdrxNFU9SzZ7B1lcQRVR4CejZtsnJBeEmmVQgWGTllgDphzNWO7PEnKjZrZpkKaqsAT631BW6XzNebL8iTDAVtlxMJfdtc4ak9DyayjQRWtSWr3lwLrfE4VzD4kjwSgdTqp3D4pLcngrwVXMunVzPDOMCrePNr6nC5FCo6cvkFAFJqSrS5or",
                'from' => "2021-05-25T20:07:17.000000+09:00",
                'to' => "2023-07-02T06:57:08.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "topup", "payment", "expire", "cashback"],
                'next_page_cursor_id' => "379fc8e0-198b-4c66-a757-c77a15d8f5ef",
                'prev_page_cursor_id' => "a201e155-2a13-4d88-a679-9733c74e72d6",
                'per_page' => 437,
                'transfer_types' => ["coupon", "cashback"],
                'description' => "JId7EdnAfiXTt8Y3LCeDh7O4kghBSzoVuVvNsvXsqbpMPt71DnUIiClwFJT79jbsw2A9hNsU3KtPMFKQoc2f21NbSRBcVyTPSThfJsE8CD0Tl6zZFxIN2ZEw5B81cEfuV6Uj4Hm3b6DADVT9zWnNDM",
                'from' => "2022-06-09T14:37:33.000000+09:00",
                'to' => "2023-02-14T17:41:52.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "ea1e6362-6aae-45e7-967c-52c265fac2ca",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "exchange", "transfer", "cashback", "expire"],
                'next_page_cursor_id' => "0e7d1a31-51ca-4e60-ad83-d7ba9eb8b77d",
                'prev_page_cursor_id' => "323f5fba-7564-4880-86d1-5b2b058290de",
                'per_page' => 337,
                'transfer_types' => ["cashback", "transfer", "payment", "topup", "coupon", "exchange", "campaign"],
                'description' => "P4djvdmVzGpPUqhrEXZrUk8KulCnSixhTNidjoa9LrFOkF92wJTXEkWB",
                'from' => "2022-10-08T23:30:07.000000+09:00",
                'to' => "2023-02-15T16:54:41.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "1d65c61c-2171-41a5-bfb8-b44a37ea5294",
                'private_money_id' => "877e3cbe-2997-4ade-88ac-cab1394491e2",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "cashback", "transfer", "payment", "expire", "exchange"],
                'next_page_cursor_id' => "6876de2b-6ed6-472a-a7f1-a83a55487d78",
                'prev_page_cursor_id' => "825a2f37-1982-46a5-907e-c86f0c206a68",
                'per_page' => 57,
                'transfer_types' => ["topup", "expire", "payment", "coupon", "transfer", "campaign", "exchange"],
                'description' => "GjggiUrwQrqGbmuoZFimhI199MJZIXl8JlKYTAplbJhLfHG0gwXcUtWV0rMGyzgdZEWWt8M1jijrxPI9neXoIE03KamtoeThshbrWt5D0FSdQHzC3V2oVwROyiqwgLwvded0o1xVSrIivnDMwZB3W98qZtdfRybH",
                'from' => "2021-03-01T07:46:56.000000+09:00",
                'to' => "2022-11-11T18:41:49.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "BZJCwgCtfK5a8WrQXIliZIdREMFsMROkCRk8ddkQvKQc7LYKlNIoRslqvCDErhbbwDeUUJ8xv7yWHBGykFCcSXMYmtxcFjtWeSaTyxpuIKf5a9xKgjgWEiyaCe8DAsIwwECgrsFCzflWcFZIGaL6GTHKfQALRPPaDP9EQCPYQGXaoO9axZRisPqhYNQM3YmoTVsEFQOZTofzMl5x",
                'transaction_id' => "2e07b07e-c1d6-47b4-bbc7-00c2bb01ab83",
                'private_money_id' => "9467e929-7e27-4b97-b983-a01b4b8c6a82",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "topup", "expire", "cashback", "exchange"],
                'next_page_cursor_id' => "1d8283f3-af8b-4986-b073-8d19bb671f3a",
                'prev_page_cursor_id' => "0c1c43f2-300f-4fe6-a996-14cb0ab1a6cb",
                'per_page' => 286,
                'transfer_types' => ["exchange", "campaign", "coupon", "payment"],
                'description' => "X0eZNdYn2aVZUS9BsUNXwww38xX9FVp7W2Dfh6t6BOA72dTia7pkEJ1h",
                'from' => "2021-11-23T16:13:05.000000+09:00",
                'to' => "2022-01-25T06:13:04.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "dfd5a682-0790-47cb-a380-0abcda66ed2c",
                'customer_name' => "bGrNlq3D4j3XEX6yYKNUONcoTZr5Ob4gEQqHhMipVC7B6h7LYBLuv95Vibbm8UkV67e69VJrcn6WYQOYGK6nEhANhe5dQfWgC9GKfeP640jaEKcf9PJeJFJS69TvTKIlXBZaAJUxe89IwxoCgwiGTiMhGvp3HXlUa6DLAgBACxYB5gF4kL2ftnYpO5FpGPuPe8tuo1zJdYRR4QA3MbD1TGsXejECn7IiPT",
                'transaction_id' => "657809ce-10ce-488b-9c36-e948126faf3d",
                'private_money_id' => "813e13d2-a5a9-43e8-b4b7-1ce47d24e368",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "topup", "cashback", "payment", "expire", "exchange"],
                'next_page_cursor_id' => "e313322c-10a9-4f2a-817b-35006ea06969",
                'prev_page_cursor_id' => "cbf7df2a-5aee-4cd2-a271-365bd4b65b73",
                'per_page' => 113,
                'transfer_types' => ["expire", "topup", "cashback", "payment", "exchange"],
                'description' => "bGy0szOjFieZD54lhxGa6YYMzVwAJ0HRTFpWJXZGmWqN77w0Q1Ot8EtJQluSf7GOadAFAbfMb41YJUViAlmbIfAK6M4PhxyauLpUKZDfQhEUVoIYHwy4q9O75KKe",
                'from' => "2020-08-22T03:58:20.000000+09:00",
                'to' => "2021-03-14T16:27:59.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "OBOmyxdEMHu9iAtgLaIpPc40U2dvd2R9afrCPLftHEKvGgnndOhBnlkThaDihNJdg5NqTQxcaeGcA04CqI2PLp7q1TzgcYsokbKAm2CuGOT0BR2Ob3MXwgFctxywjTXKBxvSpwGfLe7VPj",
                'customer_id' => "c8c0a6ea-62f5-4fa1-9669-21c53e273176",
                'customer_name' => "eDBzQ3bgqoZknhYoyz97k3QG3X3jWL7x4wq0lyGhAe5H2hSKaVR3jQi5IRX4Fyi3sbEEtdRClE1HgAAnKetmaIWCv9O0KPhB5nyQ19dG2Bix0ue1ZfmlVixsvWBbIpoePtm9DNzCqiqOfQehkGDa9Nc2o34cxCVjJ8boWsoGtw5P13yrUwed6ZiiLKYq509zRIsTShffdslMNqgOvE8",
                'transaction_id' => "45bc34d4-118b-4e78-889f-f8fcf14a686a",
                'private_money_id' => "762ccac6-eb4f-43b7-a8b1-8fbd076eec9e",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "expire", "exchange", "transfer", "topup"],
                'next_page_cursor_id' => "fa667a51-028c-442d-9e1b-5a2b92a4f5b4",
                'prev_page_cursor_id' => "1a02d2b9-5133-42b7-acd0-3c4672de6653",
                'per_page' => 388,
                'transfer_types' => ["topup", "exchange", "payment", "coupon", "cashback"],
                'description' => "AWn0ORWaheGPzCoeht5oPhPYLRPid3WGCN5jaucU79UcYhGhPGT8gUT0xhlhBKpW6d1YDflV5WRDxao8ypyckifraRkxk4fIPpUpvADXVFMrVUKAhD0WHYpXfgDGlYu",
                'from' => "2021-07-13T18:15:10.000000+09:00",
                'to' => "2020-07-21T21:28:32.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "01f3da5a-d552-4972-ab7c-98544b8ba2c4",
                'shop_name' => "5ax2bfGFITij9oMkkxsMsZJCkVeyULIbRDC5HI1T7yDfzkF3URNVtle6CSU",
                'customer_id' => "57f085de-8aed-467c-b0c7-fdf117340d7d",
                'customer_name' => "4wmfafZSVhTrNL08SkteC6i8PzV1bw2qsqh1Js4g2FlZFtNYwdi70hJKQCVwcvHayT047DDZNLgp4f76CgRvsTxERLzEgCaSiP1QwVSbziJMSe3JaPgYrSuDwhHzqMXCcpdTEIp6lZO1xQG6DSuGHaKcrY",
                'transaction_id' => "5baaa6df-acd7-4a24-811c-d297e3eee96a",
                'private_money_id' => "e4bab359-55e8-45e8-81ce-fa6e183d031c",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "cashback", "transfer", "topup", "exchange"],
                'next_page_cursor_id' => "714dc423-515b-46bc-aa07-6c27a0e4b3f6",
                'prev_page_cursor_id' => "53132bca-0167-4fdd-8b1b-80c2c391de8c",
                'per_page' => 18,
                'transfer_types' => ["exchange", "coupon", "transfer", "payment", "expire"],
                'description' => "mQ4Y17p4479rzeNaIyG13GSoA9mFKnrUWIuk56AL5DiD0yyPPExnNWvtSl6AeOE3aw46ZtOA7CEcnGML9Ty2kP8kWj5CEbxEZJ56gOvpnekQxfRigQ9CNJpset54c5ixnGU12iyHE3WkXFsbnowAZLzsuByhr3o",
                'from' => "2023-05-18T04:11:02.000000+09:00",
                'to' => "2021-02-02T09:29:43.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
