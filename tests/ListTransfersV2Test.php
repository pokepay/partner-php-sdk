<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2016-10-03T08:07:19.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2022-12-05T14:51:58.000000+09:00",
                'to' => "2020-03-26T15:06:29.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "qv6T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3Wn",
                'from' => "2017-10-28T14:08:35.000000+09:00",
                'to' => "2017-07-09T11:29:29.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["campaign", "transfer", "exchange", "topup", "payment", "expire", "coupon"],
                'description' => "3XKfAMBShU6I6qbRRo0KsKQjbIFpDLY",
                'from' => "2018-11-28T14:13:58.000000+09:00",
                'to' => "2022-11-30T19:36:35.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 590,
                'transfer_types' => ["cashback", "campaign", "exchange", "coupon"],
                'description' => "xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZ",
                'from' => "2020-01-11T00:57:50.000000+09:00",
                'to' => "2023-10-07T07:18:53.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "06cc153b-3c7d-4e80-a12d-40fddc3fef9f",
                'per_page' => 856,
                'transfer_types' => [],
                'description' => "nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtu",
                'from' => "2017-07-15T15:46:36.000000+09:00",
                'to' => "2016-11-08T07:11:52.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "07828c44-7742-48ef-9932-e5b85d2ed476",
                'prev_page_cursor_id' => "5ffd1b05-8244-4f73-96d9-239f7406e0ab",
                'per_page' => 243,
                'transfer_types' => ["exchange"],
                'description' => "KpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevnEoyfpAANnkoel9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRT",
                'from' => "2023-07-17T20:07:18.000000+09:00",
                'to' => "2021-11-03T11:28:36.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["transfer"],
                'next_page_cursor_id' => "e966d7a6-d2b0-4f58-8b6b-4e558c279580",
                'prev_page_cursor_id' => "55c97442-f20f-48b3-b42d-25f573b3522e",
                'per_page' => 370,
                'transfer_types' => ["transfer", "exchange", "payment", "campaign", "cashback", "coupon", "topup", "expire"],
                'description' => "0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7",
                'from' => "2017-11-03T13:20:56.000000+09:00",
                'to' => "2024-10-05T22:14:47.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => TRUE,
                'transaction_types' => [],
                'next_page_cursor_id' => "7e787005-2111-47c5-860b-5742c00a453f",
                'prev_page_cursor_id' => "08dc6eb6-5b84-4672-84e4-fce3f1920bef",
                'per_page' => 289,
                'transfer_types' => ["exchange", "topup"],
                'description' => "2RXyPUAe3PgOIxNaz33M",
                'from' => "2016-12-31T07:24:52.000000+09:00",
                'to' => "2017-12-06T20:54:52.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "70378c29-e199-4324-ad3f-33e071cefe34",
                'is_modified' => TRUE,
                'transaction_types' => ["expire"],
                'next_page_cursor_id' => "91553bb7-8424-49e0-836c-5e0723fda019",
                'prev_page_cursor_id' => "8eece49f-75d6-4850-9a5c-e0dfa88d3c02",
                'per_page' => 354,
                'transfer_types' => ["coupon", "exchange"],
                'description' => "1oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8ZxL5ooBCUmbexH",
                'from' => "2025-06-21T01:55:58.000000+09:00",
                'to' => "2019-07-14T05:23:05.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "bb943159-b4d0-457f-a41d-dea3a30e8052",
                'private_money_id' => "45fa4100-e15f-43c4-9258-2fe6a791b163",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "cashback", "exchange", "payment", "topup"],
                'next_page_cursor_id' => "126abb86-e420-4362-903e-26c1a79113c8",
                'prev_page_cursor_id' => "3b50847b-f1a3-4f2d-99e9-b79829459ebf",
                'per_page' => 994,
                'transfer_types' => ["topup", "transfer"],
                'description' => "7K8IMJIBW1vB1RC8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDC",
                'from' => "2019-03-22T01:12:01.000000+09:00",
                'to' => "2016-02-29T05:58:57.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "bbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJYHHOr63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOmjPQjCJIqduy",
                'transaction_id' => "c1841345-d1fa-4066-8634-376912a6d0e8",
                'private_money_id' => "0f76483d-b6a3-46a2-85cd-e9eef6e7bd71",
                'is_modified' => FALSE,
                'transaction_types' => [],
                'next_page_cursor_id' => "e167b99c-9a54-45b5-bb14-06edf2961327",
                'prev_page_cursor_id' => "d1274728-557b-4073-ba29-0a5491872e6d",
                'per_page' => 744,
                'transfer_types' => ["cashback", "exchange", "coupon", "transfer", "topup", "payment", "campaign", "expire"],
                'description' => "34GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7gIcLSudPl4JIrQmLFW",
                'from' => "2016-12-06T10:18:33.000000+09:00",
                'to' => "2023-09-12T05:01:25.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "7740ac1a-d0ba-48f8-a3c7-ed9a61e40bc2",
                'customer_name' => "9NLriuIsMTYyCUoOEa9YZaUNPTMagDSPeHLGCGYvgqbqCIdoPTyGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1UycVdhwj",
                'transaction_id' => "0c47a280-a200-4371-9e00-dce5b2e7f6b7",
                'private_money_id' => "afc53d98-2e52-43f6-a531-21b6231880dd",
                'is_modified' => FALSE,
                'transaction_types' => ["expire"],
                'next_page_cursor_id' => "e949b1ab-3fa4-4fad-bd33-bd5fc1e35493",
                'prev_page_cursor_id' => "b1bff3ba-896d-428e-8f1b-17f2b4854b1e",
                'per_page' => 788,
                'transfer_types' => ["expire", "campaign", "payment", "topup"],
                'description' => "bdZ0Ff5nebRZC0vDYNEWMfxXSVHRY4YZdsEswklf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE5",
                'from' => "2021-05-18T04:55:25.000000+09:00",
                'to' => "2018-03-15T04:33:36.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "9pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJM",
                'customer_id' => "b435cec7-a6fb-4099-a391-195c33b8eba9",
                'customer_name' => "8zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3jVYhbh4RW4SjcPHu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9o0TcGJkIJgRMahTjY4B83KCbssdnciBK2yKUyBpazsFHL",
                'transaction_id' => "1271fe7b-e7f9-4ad0-a83d-81efb8d4d243",
                'private_money_id' => "2a9fd7f1-852a-4cbf-9793-1657b5aaeaf2",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "transfer", "cashback", "exchange"],
                'next_page_cursor_id' => "48c654f2-9ea7-4b54-a3e8-ce9f49f0f37c",
                'prev_page_cursor_id' => "235188c9-0fa1-4039-ae64-da8bbb2edd09",
                'per_page' => 196,
                'transfer_types' => ["expire", "exchange", "coupon", "transfer", "topup", "cashback", "payment", "campaign"],
                'description' => "UIwUrsQ8Uijo55dyiBxXbKWYhqIQcADAJhWFwASll2hGkEzja1NmQHCUATGGz590dtBhucZ4e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2",
                'from' => "2024-03-26T09:56:49.000000+09:00",
                'to' => "2020-08-18T01:53:43.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "2eb4619b-4e7e-4914-8f02-d6daf04efe64",
                'shop_name' => "S1seolNILNbVpFGvZ3N4x3uvaLnbw12Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYmrCrWwA7IkDmk9acr8tX9JQSHyiFoseHqYyK8GIOW0PGU45uzPdd0dJeNNvUC0bqs1hvmd5I8evb",
                'customer_id' => "afe90381-2672-44c1-91fe-4a8cadc9562c",
                'customer_name' => "pnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQa",
                'transaction_id' => "8f5433f3-5ec3-4731-b99e-d0815a058620",
                'private_money_id' => "b3b75b62-a231-485e-8f44-bf9b8c38f699",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'next_page_cursor_id' => "3b47999e-4f55-43bd-92ad-31cc79249bad",
                'prev_page_cursor_id' => "eabedffb-84b9-48cb-bc89-ee9e0d3b28f8",
                'per_page' => 189,
                'transfer_types' => ["topup", "transfer"],
                'description' => "icOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhw",
                'from' => "2020-04-02T08:18:52.000000+09:00",
                'to' => "2020-07-15T06:18:17.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
