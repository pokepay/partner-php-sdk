<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2018-07-29T14:39:04.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2023-05-21T10:42:46.000000+09:00",
                'to' => "2022-03-29T02:09:03.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "ve16qe5BUa3mrtCxkktMbdZ0Ff5nebRZC0vDYNEWMfxXSVHRY4YZdsEswklf9tWgAr9KxjsUzeefEvU98BI",
                'from' => "2023-11-26T14:20:58.000000+09:00",
                'to' => "2024-12-29T15:09:59.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["cashback", "campaign", "transfer", "exchange", "coupon", "topup", "expire", "payment"],
                'description' => "6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3jV",
                'from' => "2023-02-26T09:19:44.000000+09:00",
                'to' => "2024-06-05T02:20:32.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 233,
                'transfer_types' => ["coupon", "transfer", "expire", "exchange"],
                'description' => "SjcPHu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9o0TcGJkIJgRMahTjY4B83KCbssdnciBK2yKUyBpazsFHLyPhoCqWWrzikH0DrThI9ndCARX9iZhUIwUrsQ8Uijo55dyiBxXbKWYhqIQcADAJhWFwASll2hGkEzja1NmQHCUATGG",
                'from' => "2016-03-04T20:09:00.000000+09:00",
                'to' => "2019-10-16T21:14:59.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "16adceb0-6164-439c-b4c2-8a245d38423f",
                'per_page' => 677,
                'transfer_types' => ["campaign", "coupon", "payment", "topup"],
                'description' => "e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uvaLnbw12Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYmrCrWwA7IkDmk9acr8tX9JQSHyiFos",
                'from' => "2019-07-26T02:46:25.000000+09:00",
                'to' => "2024-02-27T01:15:09.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "9acac45d-2bc8-4be0-b1fb-145948e8f195",
                'prev_page_cursor_id' => "74278779-3825-421f-8b15-54b8c7222cc7",
                'per_page' => 772,
                'transfer_types' => ["payment", "exchange"],
                'description' => "U45uzPdd0dJeNNvUC0bqs1hvmd5I8evbrAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQ",
                'from' => "2019-08-18T18:40:58.000000+09:00",
                'to' => "2016-03-11T03:29:42.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["cashback", "payment", "transfer", "topup"],
                'next_page_cursor_id' => "f4d7fcc9-e61e-4d42-908c-740cbfe4fb55",
                'prev_page_cursor_id' => "645d5f93-703f-4572-adf6-5cf084b5ae65",
                'per_page' => 267,
                'transfer_types' => ["cashback", "topup", "exchange", "campaign"],
                'description' => "46tWgyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K",
                'from' => "2018-09-06T02:46:48.000000+09:00",
                'to' => "2016-06-03T22:47:56.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "cashback", "expire", "transfer"],
                'next_page_cursor_id' => "9519f2fa-4206-464f-9ece-910374d25e36",
                'prev_page_cursor_id' => "9d37e5ec-9473-4da7-880e-0f5ba8d68ccb",
                'per_page' => 413,
                'transfer_types' => [],
                'description' => "k07Q9YuV27x2ZZwJNPJ0aXH1uRWCYsw6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWpRkphzntqbTr2vHF1iF0Y7dBxe8hiTzwkLtzBfAa7kaQm6vULSy1FKd",
                'from' => "2022-04-17T08:58:27.000000+09:00",
                'to' => "2024-07-31T20:57:39.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "5571078c-1b3d-460a-a4f5-c225c3963f38",
                'is_modified' => FALSE,
                'transaction_types' => [],
                'next_page_cursor_id' => "540724a1-9e21-446e-92c7-be62910d30c0",
                'prev_page_cursor_id' => "956e7ee4-5609-43f0-a200-74cd2cde8f04",
                'per_page' => 938,
                'transfer_types' => ["cashback", "transfer", "coupon"],
                'description' => "aiDroY6Q3IK7BQ6AmswdAM",
                'from' => "2021-05-29T14:16:16.000000+09:00",
                'to' => "2018-07-10T01:56:57.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "8d8c83c9-134a-42f2-af77-70d6ac0fd2e2",
                'private_money_id' => "d8fe9573-a8b9-4370-8df8-9ce6ad6d4501",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange"],
                'next_page_cursor_id' => "b3d7d3fd-6bf6-44bb-b124-78e1020de332",
                'prev_page_cursor_id' => "ed960745-0e16-4045-8846-d36d60840aae",
                'per_page' => 668,
                'transfer_types' => ["campaign", "exchange", "cashback", "topup", "expire", "transfer"],
                'description' => "aAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5ozHDn0iOeoWIRRMyR0nQkh8Zz7eaFGoiOPKR0rUW9",
                'from' => "2021-10-18T13:08:22.000000+09:00",
                'to' => "2015-12-03T10:57:05.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "TcnGDBsZuPfABdiNvfS9Anufij6THnocikBJOkD3FvwnaI0WeOGlWmmegc1",
                'transaction_id' => "e8c3744b-5799-44c7-a8e5-df2dd5fb0b2d",
                'private_money_id' => "679b8e8e-abfb-41a2-94fb-eab33ee51354",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "payment", "topup", "expire", "exchange"],
                'next_page_cursor_id' => "4490ba4b-8261-441b-bf08-d86359004cfe",
                'prev_page_cursor_id' => "02e39337-039b-457f-83d3-7b31e6c82a1a",
                'per_page' => 480,
                'transfer_types' => ["coupon", "topup"],
                'description' => "3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u7tOxquneNatGolCf6SjeF7SeZXyMS6WkNJ2GvSwQUcruYP4H5cCw5ExNqh41OXXFwVmaH",
                'from' => "2018-04-25T11:33:22.000000+09:00",
                'to' => "2024-03-09T19:10:21.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "17b3873f-3a77-4eb6-afc0-84203986c30d",
                'customer_name' => "EFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0tecRrYBgXoYNaRDH3xa5ZXl3L94kmDiQZVmfdCV9wGJUROgp1VTNstKsbk2wvZcZm",
                'transaction_id' => "a37db225-daca-431c-8c87-f008cd2af7bc",
                'private_money_id' => "f5323506-b1de-4fa9-8380-6f5a8e60c377",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "expire"],
                'next_page_cursor_id' => "9cebb134-a477-4303-9c39-82d201d1086b",
                'prev_page_cursor_id' => "498b2027-e919-4f2e-b6e1-d88e5203f467",
                'per_page' => 314,
                'transfer_types' => ["topup", "coupon"],
                'description' => "IlJpGXqlhd5uwOg53j3Qic0iyKLnZxaZi9iCa2kj9IDD4FLU53",
                'from' => "2017-02-12T17:02:56.000000+09:00",
                'to' => "2021-07-25T11:21:21.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "cTCafuN856J50SdiADG37eydGENMPuSUGCPNHip0Y3dBWcNdXe1sI",
                'customer_id' => "2a68b26a-cd4c-4780-bf53-7a565e9fecfa",
                'customer_name' => "CspdpKcDGU85LATApzQ2dQG1XtK0UfX1fzmKZw4jAX5TdVMZA3FsBWHTaR7q8iHovbTWoPNbCUX3WmvU0lnYW7MWulxJqejEoXiemEzy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv36YuE4jwp0IiR44I5KLiOrRKq3qxtTGifN6KrraD5uojwDmQd",
                'transaction_id' => "9755d74c-db4e-404f-8bad-b55c96ad063e",
                'private_money_id' => "2f0aeeab-ba9f-4f3d-881e-3bc98af349ec",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback"],
                'next_page_cursor_id' => "78f874bc-624f-4668-adbe-24878c43c7b7",
                'prev_page_cursor_id' => "a9a64dc0-6723-4238-9e5c-04d18430285c",
                'per_page' => 743,
                'transfer_types' => ["coupon", "payment", "exchange", "transfer"],
                'description' => "3YfGhlbqaOElvScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXnAdDrY96Gn0OAQ9xSN0zfKx7ivixiVqjgvBNcsQLQxAtJmVTcXWtKUzkNd35gyuBKlwozbM8BIp6WWFtoNM3mKK",
                'from' => "2025-03-05T13:52:26.000000+09:00",
                'to' => "2018-01-28T16:47:24.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "33424b02-016d-49a5-84fd-b341e1cdeb48",
                'shop_name' => "SYCV0EDw10SY48ZoA8oj9alrEKYDjBWPKCwbirzvScUvjsqVkcSInvOjFPIL9qlVMwg0ANEHCj5eM805Swt",
                'customer_id' => "2fbcc373-045c-4e67-9bb2-3d06d825f0ce",
                'customer_name' => "JBDvuxWoqdLq3QmHRbZpwbPRidVG7B6hajGJrCJBxTKH0YUW8iwJJuJPCjlaztijN3vebjT869RjYRPCqvnZ1YzdrhGH7XKNoGDpqqjYUa42",
                'transaction_id' => "a935ccce-0592-4d20-bbce-9598bb026337",
                'private_money_id' => "c02f2f1f-cbea-4ee0-bf10-38d7b41b802b",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "expire", "topup"],
                'next_page_cursor_id' => "bb05d5b8-baf3-4385-a88d-cdd4124977b9",
                'prev_page_cursor_id' => "58b9028c-33c3-48dc-aa22-de596aac285d",
                'per_page' => 772,
                'transfer_types' => ["coupon", "topup", "exchange", "payment"],
                'description' => "WhMAKSZHQ2Tjahc0hASAcEibjku1fdQetgL0O7DlAFrkXVihIdQWu7J4NYirXryPP6taqbm6hsnA9hELkacVB4dzDqQ1LbTyVIgVP7fIz1xemnrDx9P7HPwLX5lwWZKuWWf4n5wN",
                'from' => "2023-01-14T16:17:12.000000+09:00",
                'to' => "2022-07-01T09:59:21.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
