<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2021-08-19T09:40:54.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2021-06-29T12:37:03.000000Z",
                'to' => "2021-12-08T00:35:28.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "yGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1Uy",
                'from' => "2023-05-04T18:11:47.000000Z",
                'to' => "2021-03-13T04:02:07.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["exchange"],
                'description' => "e7Rve16qe5BUa3mrtCxkktMbdZ0Ff5nebRZC0vDYNEWMfxXSVHRY4YZdsEswklf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4",
                'from' => "2020-06-04T08:56:37.000000Z",
                'to' => "2020-09-02T23:21:56.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 297,
                'transfer_types' => ["payment", "topup", "transfer", "exchange"],
                'description' => "jBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSs",
                'from' => "2022-06-21T00:34:38.000000Z",
                'to' => "2023-01-26T05:28:13.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "65886f64-2c16-4b5e-99fb-6b8d8458ed96",
                'per_page' => 177,
                'transfer_types' => ["campaign", "coupon"],
                'description' => "UMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3",
                'from' => "2022-01-05T07:30:06.000000Z",
                'to' => "2022-09-20T11:11:38.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "672d3cd6-b0a8-4d1c-99e8-a6e2786c5ce8",
                'prev_page_cursor_id' => "d2e01834-8f52-4a8d-ac00-450c88ec6fd7",
                'per_page' => 677,
                'transfer_types' => ["coupon", "topup", "payment", "campaign"],
                'description' => "Hu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9o0TcGJkIJgRMahTjY4B83KCbssdnciBK2yKUyBp",
                'from' => "2021-12-11T01:14:52.000000Z",
                'to' => "2023-07-19T13:57:18.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["cashback", "transfer", "topup"],
                'next_page_cursor_id' => "71a10e9c-187a-4707-b33a-b446ff587ac8",
                'prev_page_cursor_id' => "627187ae-eb4c-4e7b-b9d0-62683691a03d",
                'per_page' => 496,
                'transfer_types' => ["transfer", "exchange", "coupon", "cashback", "expire", "payment"],
                'description' => "kH0DrThI9ndCARX9iZh",
                'from' => "2023-04-15T01:18:56.000000Z",
                'to' => "2020-06-27T04:09:49.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["payment"],
                'next_page_cursor_id' => "edffb40e-1a9b-43bb-9db8-cf55d7d5c222",
                'prev_page_cursor_id' => "c89b84e9-ec6a-4f1f-850f-3693c4fe4126",
                'per_page' => 351,
                'transfer_types' => ["expire", "cashback"],
                'description' => "iBxXbKWYhqIQcADAJhWFwASll2hGkEzja1NmQHCUA",
                'from' => "2022-06-10T13:23:32.000000Z",
                'to' => "2022-04-23T08:03:19.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "e56cdcc7-1bfc-447a-bb2c-7e9111b2eb35",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "expire", "transfer", "exchange", "cashback"],
                'next_page_cursor_id' => "5d38423f-2fe8-46a4-b5e3-6fa2e3178dbd",
                'prev_page_cursor_id' => "cc78835a-29a4-4328-a4b4-2aa7de9c2765",
                'per_page' => 957,
                'transfer_types' => ["topup", "expire"],
                'description' => "0f2MmxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uvaLnbw12Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYmrCrWwA7IkDmk9acr8tX9JQSHyiFoseHqYyK8GIOW0PGU45uzPdd0dJ",
                'from' => "2023-02-21T18:00:02.000000Z",
                'to' => "2020-05-02T07:51:01.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "9c7e72ce-9e99-46ce-8094-8676f95241d5",
                'private_money_id' => "7e366dc3-7d1e-4b30-a271-44099d6dc000",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange"],
                'next_page_cursor_id' => "16cc8c94-13f6-42df-9219-346dde3ce47e",
                'prev_page_cursor_id' => "0f6eaf64-0989-4e35-80c9-d304590cdca9",
                'per_page' => 185,
                'transfer_types' => ["coupon", "cashback"],
                'description' => "GpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwi",
                'from' => "2021-12-13T09:20:57.000000Z",
                'to' => "2022-07-11T16:53:15.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "v4vlRBRxfHZeKBVf4jVtecQNubIdHetIBPUrvpeN86f46tWgyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K8plKuk4zON6lsKCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRW",
                'transaction_id' => "bc1e782c-abc3-4059-ad73-53f73a4ea6df",
                'private_money_id' => "da553f85-d736-4a56-92c2-0f95e9bc6266",
                'is_modified' => TRUE,
                'transaction_types' => ["topup"],
                'next_page_cursor_id' => "28058465-86ae-48ef-a0d4-aca810e6a992",
                'prev_page_cursor_id' => "75d6bb30-4079-4e2f-ad0f-4bb6f0b251ae",
                'per_page' => 109,
                'transfer_types' => ["cashback", "topup", "payment", "expire", "exchange", "campaign"],
                'description' => "yMV89HUL5OwvTmfkSpdcLQvsJQRiuvWpRkphzntqbTr2vHF1iF0Y7dBxe8hiTzwkLtzBfAa7kaQm6vUL",
                'from' => "2020-04-15T05:25:39.000000Z",
                'to' => "2023-08-01T18:44:38.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "f9e3f1bf-b679-4331-8689-01cb37ded2e4",
                'customer_name' => "Ttu83N0tnRGbdpbMjOs6NsjUaiDroY6Q3IK7BQ6Amswd",
                'transaction_id' => "7c9090c0-2b41-4ecd-a81c-611f42162e33",
                'private_money_id' => "8d8c83c9-134a-42f2-af77-70d6ac0fd2e2",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "topup"],
                'next_page_cursor_id' => "886f57cd-b8c3-4574-bf68-1c8c6d131169",
                'prev_page_cursor_id' => "b3d7d3fd-6bf6-44bb-b124-78e1020de332",
                'per_page' => 838,
                'transfer_types' => ["cashback", "topup", "exchange", "payment", "campaign"],
                'description' => "mJsXraAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5o",
                'from' => "2023-02-06T21:30:34.000000Z",
                'to' => "2021-07-10T19:40:56.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "n0iOeoWIRRMyR0nQkh8Zz7eaFGoiOPKR0rUW9UTcnGDBsZuPfABdiNvfS9Anufij6THno",
                'customer_id' => "e39440a4-a963-49e9-baeb-a2423dd79910",
                'customer_name' => "JOk",
                'transaction_id' => "852fd018-fd23-481b-9cc4-a333ad15e046",
                'private_money_id' => "1589b225-610f-4e5b-b677-e4abeeaa079e",
                'is_modified' => TRUE,
                'transaction_types' => ["payment", "transfer", "topup", "cashback", "expire"],
                'next_page_cursor_id' => "39868594-5690-4157-a312-0714d16fcf5b",
                'prev_page_cursor_id' => "523ae08d-4892-443c-8a10-e7edffe29c6d",
                'per_page' => 681,
                'transfer_types' => ["coupon", "cashback"],
                'description' => "he3TxnuKac7CS1DK4Gnrr3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u7tOxquneNatGolCf6SjeF7SeZXyMS6WkNJ2GvSwQUcruYP4H5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0tecRrYBgXoYNa",
                'from' => "2021-09-22T02:26:26.000000Z",
                'to' => "2023-06-20T15:39:02.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "9e72d8c4-4848-4989-b378-16e1c362db35",
                'shop_name' => "ZXl3L94kmDiQZVmfdCV9wGJUROgp1VTNstKsbk2wvZcZmJCZwuee4w9Rkvag9C19xRl1IlJpGXqlhd5uwOg53j3Qic0iyK",
                'customer_id' => "03721c8e-3199-4ccc-9e08-7f5b43c17edf",
                'customer_name' => "nZxaZi9iCa2kj9IDD4FLU53H4cTCafuN856J50SdiADG37eydGENMPuSUGCPNHip0Y3dBWcNdXe1sIjLSVztCspdpKcDGU85LATApzQ2dQG1XtK0UfX1fzmKZw4jAX5TdVMZA3FsBWHTaR7q8iHovbTWoPNbCUX3WmvU",
                'transaction_id' => "1adae630-42ec-4a6e-8a93-fabd82af7659",
                'private_money_id' => "5b332c25-6f7f-43d7-b7db-2bcd67e65e57",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "topup"],
                'next_page_cursor_id' => "8b5b9e65-d196-4f6a-bc45-6407db70a31d",
                'prev_page_cursor_id' => "f7242d6f-92ad-43ac-98e9-548625533f65",
                'per_page' => 921,
                'transfer_types' => ["campaign", "cashback", "coupon"],
                'description' => "TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv36YuE4jwp0IiR44I5KLiOrRKq3qxtTGifN6K",
                'from' => "2023-04-01T18:42:52.000000Z",
                'to' => "2022-12-31T00:33:54.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
