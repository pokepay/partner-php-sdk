<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2025-02-28T01:08:36.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2023-05-21T16:25:44.000000Z",
                'to' => "2025-08-01T18:16:06.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "spW9b9NBdczTSynCfTiWLEN2pEbq7ZeB8PVJkE9NzaeTptZ5kX9rLpagdWQnEnTlLyubwibc5uG9Y4cn6ApRZ5NX6gFb5nuODlmm9rpn022H3wQmNFzbLFmfFSz1uperYHhU5vbLxW8Yq15XpRuu89q3NykiRPYO2oQiAYMcKkXBWEu4RSjxgCW3jFlgob",
                'from' => "2021-08-13T10:57:59.000000Z",
                'to' => "2021-08-02T03:38:13.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["payment", "expire", "transfer", "campaign"],
                'description' => "qFleVhpCebdmmx3jJLFYo72YjP5pod5QaLCZTmFLxumOnvrupx16EXCUXyPfCabjEtMliIf7wKoPmNQWU6zl3h0ZGoCe5IIfEbaRlpdhTTQpQoSRT6b0IY83jSy9CLjq8yjjxInoBnLVw5NxHP7CI9Yb5tOQ2qp6BlopujNmJIuVKWvjUjC0u3f2Lo9NqlV6u",
                'from' => "2024-01-11T23:49:58.000000Z",
                'to' => "2024-08-17T18:28:14.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 171,
                'transfer_types' => ["topup", "cashback", "payment", "coupon", "campaign"],
                'description' => "7lV6QKkz6REzoI7cZYW4c0GyNh6EpQVqX4KE4B5KRDxSSppVORQLy6PO73cHGKqjz0v27dHE8reh9b3v7zqeYS2n0EGs",
                'from' => "2020-02-22T01:07:11.000000Z",
                'to' => "2023-10-31T10:32:00.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "cd8be7d0-ced0-4462-8776-83a32b1cd3d1",
                'per_page' => 699,
                'transfer_types' => ["cashback", "coupon"],
                'description' => "BJ7wmgCWNKDP1enxAKZBD2FhNoFZKIbAgSoRCKxxDEWQZO9yz4Mc4BWxPS7UaVHpVi4pZYZOGKLSewvJu",
                'from' => "2021-10-23T19:49:53.000000Z",
                'to' => "2022-06-05T22:59:06.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "6241e537-c29b-494f-9be2-4bd59d675ca6",
                'prev_page_cursor_id' => "d08d374e-9d15-433b-915a-9f9af02b09b0",
                'per_page' => 706,
                'transfer_types' => ["topup", "payment", "expire", "campaign"],
                'description' => "Z2omGatDjCcJfOMaGd4kHySUJYrKI48UyLazcdaqg9M9b56VUQz",
                'from' => "2021-10-05T05:21:13.000000Z",
                'to' => "2022-04-26T03:16:54.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["transfer", "exchange", "cashback", "topup", "expire"],
                'next_page_cursor_id' => "f0d8b57d-10a9-4520-9f86-b982ce0c4df2",
                'prev_page_cursor_id' => "edd2359e-2edf-44b7-a6f3-e2426312baee",
                'per_page' => 936,
                'transfer_types' => ["topup", "expire", "payment", "cashback", "transfer", "coupon", "campaign"],
                'description' => "OVY8vi9Z9lrbTGfh4QbdPS2DfLew9jsvLcXjFRqAsdyU0EjzFGdoCEVoN09yrlyTlHcxkp2hdiJWs83eoAqvgg01zZW75gRDgWRTNwobRsB1baR1aePdc",
                'from' => "2020-05-30T21:00:56.000000Z",
                'to' => "2025-06-20T04:31:53.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "topup", "cashback", "exchange"],
                'next_page_cursor_id' => "35302418-5147-48c8-8c9f-f22ba9a0cee3",
                'prev_page_cursor_id' => "853e63f7-18f9-4d3c-94e5-413fff4bb52b",
                'per_page' => 163,
                'transfer_types' => ["payment", "expire", "cashback", "transfer", "topup", "exchange", "coupon", "campaign"],
                'description' => "5Jr7zEeO7nUDqxXj74j643AIOVakyq8QHWKNric3MBQYWsKtvnxoQJLloM94TQVFchkaVLnKXq1JcpZfZUH2UsKCxnRcuSoLNAly4QR5kzfucn7LZFZwhy5RIJGwbFSZ2qU3L9frpqlrETgz3O9wlyQ0TWfR4G",
                'from' => "2022-03-11T09:18:48.000000Z",
                'to' => "2024-11-03T01:17:38.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "b26c9bb1-cd1d-44db-ba1a-084df4297737",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange"],
                'next_page_cursor_id' => "81592673-63a6-4a08-bcca-1c847dd7b996",
                'prev_page_cursor_id' => "fd4b5813-f8f9-4813-815e-0c2516cbd953",
                'per_page' => 991,
                'transfer_types' => ["campaign"],
                'description' => "jtVj6RA58jW2j8noWbhryHKQAP2bBeZkmIh2UeN7Z047tEp9MnaMKkPTTOh4KlFXKgtixsqVTYrrSHZ1a0tz4EzkuhUCHWp",
                'from' => "2024-03-31T10:15:20.000000Z",
                'to' => "2020-09-10T03:14:26.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "f02842a4-ee1e-4735-b122-300ec40eba10",
                'private_money_id' => "c0f95adf-a8ba-4af9-8102-a699e1982cd9",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "cashback", "topup"],
                'next_page_cursor_id' => "3cb0bbd7-3673-49f4-b179-c1ad9c9d2e03",
                'prev_page_cursor_id' => "5a58a2c9-139c-456c-ab2a-71481450b1e0",
                'per_page' => 720,
                'transfer_types' => ["coupon", "payment"],
                'description' => "M6Qkur8Sb",
                'from' => "2020-10-30T03:47:48.000000Z",
                'to' => "2025-08-09T11:24:39.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "uCesxkTgeUlIAlQvL5t780R8L5VrLxzRQlVu0ZdkmHWdPUiVDqeHPcQVtlOjSB31Mxq8SXpxSHJRZi52y7KvoeklIR5ig74Fkbtbb0SlK2KbT8BQ8WxGHxi6f0cuW1ZhxLtCHCm7yUfJm7Fg98YgjSKRGLQpNx8ciNrKweGJtnGqdSp90ci6D0iGddOVzLT6tirwJLurByrAGwszVwlQAuTXTWtKg2YB5YxV",
                'transaction_id' => "a1343529-1396-48e0-8871-c975b8afee7c",
                'private_money_id' => "23f95c17-2392-4085-9614-66d9410122f3",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "expire"],
                'next_page_cursor_id' => "8be02cf3-4052-41e9-822a-a7f3cffa6509",
                'prev_page_cursor_id' => "3e2f8fd2-e512-46d1-b91b-b9e535ad433c",
                'per_page' => 100,
                'transfer_types' => ["coupon", "expire", "topup", "transfer", "campaign", "cashback", "payment", "exchange"],
                'description' => "4yKOsEPCrpQPvSjUDltH57ysDpO4lTbJ9dqwKn5NSHIJ7mbc5qbOnYCYxA4AjI47p6qtIsaCpt80GzH1FRWe6zLcwMHaeJGFXqwAY75stQD6SAh41fZii84vybd1Jsf0jR3rzbwtxyn2FAh1zUedGEpNztrZ",
                'from' => "2021-11-13T13:59:36.000000Z",
                'to' => "2025-03-10T14:09:56.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "4bad811c-d641-4b00-b9f4-25d442d84648",
                'customer_name' => "VvHVgjPvTnTRbAGxJFBzSBdN9rH7Ml90EeuZgaP20pyyEjfyZnRCBHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEgMmyi8jmBN0T80aLvrKoRyTXgPVT4Aze",
                'transaction_id' => "f6f2025c-51ef-445a-8517-633b4efb651b",
                'private_money_id' => "ee4d51fd-5a4f-4a59-be75-cef5577dd231",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "topup", "cashback"],
                'next_page_cursor_id' => "67fdee20-6471-4a2c-95ec-3ad7551a9c3e",
                'prev_page_cursor_id' => "0d772977-fefc-49f9-bca6-23859be502c3",
                'per_page' => 668,
                'transfer_types' => ["campaign", "expire", "payment", "topup", "transfer"],
                'description' => "CUN00F2Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0YorDHLBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQd",
                'from' => "2021-06-30T23:53:25.000000Z",
                'to' => "2020-10-11T11:52:02.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "QYDYt7CyctlhtAXqf6uerXtmVp3iPqRhb6DnnO4ty38IkhtTfaQWLq",
                'customer_id' => "b6a1db3b-5505-4716-bce8-b1a19551185c",
                'customer_name' => "bA6TsT4rGSzhCtzrrQIFeK35Z3EF7SWnLL5qkYPGTd8wILW6Ubji6nDVo6kwtt0eE996vZBp0zzwPN5DIhcy9tg03Xeu2UN5sKl9fYJxmaO84WKiqpzyFwc0O5qDH6cAdyVZn4o55A5DSTN7FZ8Y8t8MIK7GdyM50XmxAy3ATlXa99m3Ela8zcR94JgHtiXrfi45gdO",
                'transaction_id' => "66c776d2-c2ea-42b3-9dbd-c9fe8c36064a",
                'private_money_id' => "d50b2aac-ce6c-4880-ae61-e1b3625a3a50",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "exchange", "cashback", "expire", "payment"],
                'next_page_cursor_id' => "d69ebd7f-e328-47fb-ac38-334f6a1fa167",
                'prev_page_cursor_id' => "c61dce4e-e5e8-4507-a81a-f5713cac248c",
                'per_page' => 688,
                'transfer_types' => ["cashback", "campaign", "payment", "topup", "transfer", "coupon", "exchange", "expire"],
                'description' => "sClPPd45bUBovESo5O7DwwlNZPFf6xG0YeVkLQLhc7hbuv3B8S8pH3eqOx8cOR3TFR9a8hMUMtt7RdIKeKSciqw",
                'from' => "2024-07-17T08:51:49.000000Z",
                'to' => "2022-06-12T10:58:44.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "b989d36b-720e-4988-ac6b-219f01017e67",
                'shop_name' => "vqZQpEwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXml0I8A7sPYx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHDiw8sqMTw9CGM",
                'customer_id' => "450967ab-6a85-4407-8694-a0f2228d9570",
                'customer_name' => "upnZP3tXLGdI4BQeMKNjNC6v4LdJ9q",
                'transaction_id' => "5f01bdaf-66dd-4430-9cee-9ae9d822e189",
                'private_money_id' => "d8e13f66-ab89-4241-9523-3c7502f06147",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "exchange", "transfer", "payment"],
                'next_page_cursor_id' => "18ee3795-f50e-43f6-a389-923452289414",
                'prev_page_cursor_id' => "63fd5441-5fa9-4d35-88ec-c10c5e766643",
                'per_page' => 112,
                'transfer_types' => ["coupon", "transfer", "topup", "payment", "exchange", "cashback", "expire", "campaign"],
                'description' => "llUlO",
                'from' => "2023-09-21T11:49:23.000000Z",
                'to' => "2022-08-10T04:11:58.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
