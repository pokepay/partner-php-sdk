<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2022-09-06T09:55:43.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2023-09-12T11:49:46.000000+09:00",
                'to' => "2022-02-17T05:55:41.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "KZhSdQLqDlFERfuhK",
                'from' => "2022-04-02T00:57:43.000000+09:00",
                'to' => "2020-06-13T19:23:46.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["transfer", "expire", "payment", "campaign", "coupon", "exchange", "cashback", "topup"],
                'description' => "xfSnRNpEC0L4DdpDn87PSOkV4rF1M1pwIODrF2VgllbgWyli",
                'from' => "2020-11-20T00:28:47.000000+09:00",
                'to' => "2022-08-22T09:29:09.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 637,
                'transfer_types' => ["campaign"],
                'description' => "Z3SBzJLi4QDDKaO1h223fuHHzoNV96Oyen97S0bHAYy1uhebfbkjRMafGIRqEcflLe8zT2xpxO4dydP69BQyWJd",
                'from' => "2022-03-12T02:27:29.000000+09:00",
                'to' => "2023-08-27T01:13:49.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "997770b6-1460-4f5e-94ab-41ae5680d51f",
                'per_page' => 974,
                'transfer_types' => ["topup", "cashback", "transfer", "coupon", "exchange", "payment", "expire"],
                'description' => "bjc4wwybth7UYluYVyOqPV5BZjgSaKONJXpNa3k1k8qreC5MM1CwLlgOXs2WHUu83KbkSxCD4Z",
                'from' => "2023-07-05T07:06:04.000000+09:00",
                'to' => "2023-11-09T08:53:59.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "4069a344-368d-4c58-9388-89099f2be30f",
                'prev_page_cursor_id' => "5a0f5d26-5f01-4524-867e-6bfc4484f94c",
                'per_page' => 255,
                'transfer_types' => ["cashback", "coupon"],
                'description' => "22PLjf8smsOlxxTvdCoZ4gCGqmfmQ1WpjxW8brFKz1Yw4e6dVlpmXjRH6SsW9GQZIaK4YLgOrEX37bYZSXiW8GVr55HWct8HmyMbNv8fHjmNvhkjxM",
                'from' => "2022-11-25T16:31:37.000000+09:00",
                'to' => "2020-01-20T06:39:41.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["exchange", "topup", "expire", "transfer", "payment", "cashback"],
                'next_page_cursor_id' => "dc4a4374-692f-487a-910e-5aa92fa2dc7f",
                'prev_page_cursor_id' => "84475047-473b-439d-a570-b930c463c1c3",
                'per_page' => 641,
                'transfer_types' => ["campaign", "expire", "coupon", "payment", "cashback"],
                'description' => "s69oAX",
                'from' => "2021-09-23T12:43:53.000000+09:00",
                'to' => "2023-01-17T06:46:18.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "exchange", "cashback", "payment", "expire"],
                'next_page_cursor_id' => "a28c1376-10f0-48f3-89a9-aa34005d5242",
                'prev_page_cursor_id' => "b124061a-9363-42cc-8d37-e809ca26ce9f",
                'per_page' => 246,
                'transfer_types' => ["campaign", "coupon", "payment", "transfer", "topup"],
                'description' => "fVcuqNQ7cB5d1EuRdyOj61jcZlifZIn6lKjlz920rMk2PZb8I8l1M93WHIu1I1Ax94xw9Qp7vcyFNQbG2ZxUXbqOElRX5BKuUCeqJpTvZ45eW7QfDt2EUAY8vQdwmrVhv9zEhPyXzyLUFe25R3jbNfMDo7B9Ebn6gRdtNMW06EHXVQRCcZPKegsDc04dez",
                'from' => "2020-12-19T05:46:04.000000+09:00",
                'to' => "2020-10-31T17:36:37.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "101a04b3-a471-4125-a97f-0d9f31d98037",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "payment"],
                'next_page_cursor_id' => "6082889c-846a-4915-b049-140a0b84a604",
                'prev_page_cursor_id' => "88f98906-82cb-43ae-aaae-91fc6fea291b",
                'per_page' => 788,
                'transfer_types' => ["exchange", "payment", "expire", "coupon"],
                'description' => "a1qkCYOQWi6Ewh",
                'from' => "2021-10-13T18:28:22.000000+09:00",
                'to' => "2021-01-27T11:50:43.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "be42d8bd-c11b-415b-8f0c-70b3c1582d1c",
                'private_money_id' => "0e5ccda5-fe57-44ec-a9f2-34c844c3d78c",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "topup", "exchange", "payment", "transfer", "cashback"],
                'next_page_cursor_id' => "9dcb51a1-d59f-487e-a348-fff9722bae26",
                'prev_page_cursor_id' => "79543602-ae08-4b4b-9b76-05e6f3ed1e1c",
                'per_page' => 868,
                'transfer_types' => ["payment", "cashback"],
                'description' => "2hD3h94bKVTewMPsESYXgKd5zoVXrWeOgMGa7KDAPoVhAjY2zC0kbEubeOnFLUokTwOXVHiGnnPbSyLi33SvUj6KMG1QH3t1",
                'from' => "2020-11-16T23:41:13.000000+09:00",
                'to' => "2022-10-20T02:36:45.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "qVPy1y30m32USa6Su7RXBCDuCSms487I217OWRaCtekUCXXqt3pQHp5EoOIVXIPKogYkqpTlP6Dphzb43AIOtqMbery2iASmTR8hLEV7f4YtF9SVni6eGSzzJ6u83R34iF83yP36LQWDKzjl879pqGeMB9IepYAeKRjqv2TZyZ64Z9zGvGvrjjHwpU9aYynG9MRY1jR1IgkOZnd",
                'transaction_id' => "dc8efa97-0dac-41ab-a153-5f2221e95337",
                'private_money_id' => "d7aa53eb-9453-4980-9955-e3a264004fc6",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "payment", "exchange", "expire"],
                'next_page_cursor_id' => "33517d74-c999-499e-9c8e-42ccc685bdd5",
                'prev_page_cursor_id' => "736ac8ef-0b5d-45f7-9499-74b97291ba12",
                'per_page' => 1,
                'transfer_types' => ["campaign", "payment", "transfer", "expire", "topup", "coupon", "cashback", "exchange"],
                'description' => "4hJagNjp3CpubrFyA1VE0oHHad57NwHVKTMuR2GmHNM0YgyGo0dN9NGC4AKWxak52TNoymYt05",
                'from' => "2023-01-12T04:19:36.000000+09:00",
                'to' => "2020-11-13T09:07:24.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "563a8cb1-4def-41ff-89d2-c91142ddfce0",
                'customer_name' => "fPYDGE2qzF9TTq7xAzai7i8XDsON0BZ4jb4clBZpjhKum4O217xyMxFc0BsTtXrmmiwiunwAd9ddIC7yb3b3By9nKOEbTaF8a",
                'transaction_id' => "7dc76d72-64d6-4acd-be56-9d3500211617",
                'private_money_id' => "72d2af55-2c3d-4c85-b5d4-31bbd0a58e0f",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "transfer", "expire", "topup", "exchange", "cashback"],
                'next_page_cursor_id' => "ece4a84c-fe5f-4965-ac3c-6300d3bf1c6c",
                'prev_page_cursor_id' => "0f78609e-b0da-4338-8621-db7dfb905e3e",
                'per_page' => 807,
                'transfer_types' => ["campaign", "expire", "payment"],
                'description' => "ObBigdz1fYnB55lYKSP8QKqFwM3rTfXZ6Do18ZNlLlMedLiv0vZ2RbSUYjzI2qn8qiumdILPgPX0JV3DNscPl9pd2MOp5yGsSfWF1p9y3rkrF6g",
                'from' => "2023-10-26T19:09:12.000000+09:00",
                'to' => "2022-12-22T20:02:27.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "Q0Xbvzp3RmbWjBcDbaPuFliSTeQ0GtQX7AgmNu4RopnKTloRrWw7CB6HQlrNyUJ1thEAuAgDzd8syiP9KDx32fuqySgp5njfU43ikrt8eFp46uAQFcNOXdunK7l8QAV8gZJT8huCTu5D7O0SDqlBiC8I4dsx4fdpd86npOX2yMS0vE3t5pVI4opr6vJBUd0rULVBHHJIF",
                'customer_id' => "95cd471c-315a-4556-b698-03f765fd1e12",
                'customer_name' => "WbIaHd9Y3DoJOyqSbyZJnFC3q1DaPKuOx5t3tb6t1",
                'transaction_id' => "778c2ec2-a4cd-459d-a708-de14774ce9e2",
                'private_money_id' => "881a10e3-3689-453f-9950-1761895d72fd",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "expire"],
                'next_page_cursor_id' => "cda6c98e-5cb5-4b8f-a121-60f11ba8e3bc",
                'prev_page_cursor_id' => "54f623f3-97e7-40ab-bb73-e46f61f7fbb3",
                'per_page' => 659,
                'transfer_types' => ["exchange", "payment", "cashback", "transfer"],
                'description' => "kCmizcuU2Pi6K8mHr1qFcKHGyACMHHxtYMKWV5IxG8NETLgN9STvdNzsvV9ufDHDXgDWelJdryRCVBlY0wAiuEOO8TRBQnw6xd",
                'from' => "2020-12-25T00:26:41.000000+09:00",
                'to' => "2023-01-22T16:27:37.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "d0a60ff9-8ed1-4389-bc61-641eae16fffc",
                'shop_name' => "S6fLNUedXLNofeNs90umKxqvOVTzMqF66u4SZATLZUpRh66YLVDk3IeTrWDrcxOYmqW410kpA1licI3s5XQQOfTplOWR5PdIdO5y7X4",
                'customer_id' => "2e015e7c-1420-4b48-a814-34ec2d672cf5",
                'customer_name' => "nLhIHmkDKABtaGxolXvDyTtRyAjyfP4RojiTRfHsP8YpTZttxOZJ2pk5u9NgJ1lSI5We66RxTtFO1wiiUE",
                'transaction_id' => "2fc6a1b0-144f-415b-aac8-5536f5463bff",
                'private_money_id' => "340fc73e-45eb-43be-be6d-9cbc005af114",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "cashback", "payment", "transfer"],
                'next_page_cursor_id' => "90c95787-8066-4bc8-8f49-2f0a9b22d1ef",
                'prev_page_cursor_id' => "1c53fde8-7fc9-4f89-8bc2-87e08bc9933f",
                'per_page' => 584,
                'transfer_types' => ["exchange"],
                'description' => "qT6QAfx0BcSF8FeQU9oPWEFi0gvY1oR8QpzDDOyANI46LPITU1SjLq1fjRK7uZHNQmlRLSdleY00OH67vK57sF6T9Y1dygLqkw",
                'from' => "2023-09-13T01:33:08.000000+09:00",
                'to' => "2020-06-06T14:04:36.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
