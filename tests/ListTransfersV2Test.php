<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2023-11-25T12:21:57.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2020-12-11T11:55:18.000000+09:00",
                'to' => "2020-03-12T21:05:50.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "Ih2UeN7Z047tEp9MnaMKkPTTOh4KlFXKgtixsqVTYrrSHZ1a0tz4EzkuhUCHWp85qyAYWUJWst1yIlHOt0XiM6Qkur8SbZd3wcuCesxkTgeUlI",
                'from' => "2024-08-27T10:10:53.000000+09:00",
                'to' => "2020-06-11T22:57:05.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["payment", "topup", "cashback", "coupon", "campaign"],
                'description' => "5t780R8L5VrLxzRQlVu0ZdkmHWdPUiVDqeHPcQVtlOjSB31Mxq8SXpxSHJRZi52y7KvoeklIR5ig7",
                'from' => "2024-06-04T08:45:40.000000+09:00",
                'to' => "2020-10-28T22:30:46.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 455,
                'transfer_types' => ["transfer", "expire", "coupon"],
                'description' => "b0SlK2KbT8BQ8WxGHxi6f0cuW1ZhxLtCHCm7yUfJm7Fg98YgjSKRGLQpNx8ciN",
                'from' => "2025-05-16T20:22:10.000000+09:00",
                'to' => "2021-11-24T22:44:27.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "e3be0df7-2b65-4d15-87ca-097450e6366e",
                'per_page' => 456,
                'transfer_types' => ["payment", "expire", "campaign", "exchange", "cashback", "coupon", "topup", "transfer"],
                'description' => "Sp90ci6D0iGddOVzLT6tirwJLurByrAGwszVwlQAuTXTWtKg2YB5YxVquVYsbDyysRisRQ9ectqoj4yKOsEPCrpQPvSjUDltH57ys",
                'from' => "2021-01-19T21:43:56.000000+09:00",
                'to' => "2022-12-27T05:42:23.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "79319f24-9c70-42a5-a240-f49283054703",
                'prev_page_cursor_id' => "863b3222-64bf-48cf-800a-cb34752e306c",
                'per_page' => 341,
                'transfer_types' => ["exchange", "campaign", "coupon", "topup", "transfer", "payment", "cashback"],
                'description' => "qwKn5NSHIJ7mbc5qbOnYCYxA4AjI47p6qtIsaCpt80Gz",
                'from' => "2024-01-01T20:57:21.000000+09:00",
                'to' => "2022-03-05T03:51:34.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["transfer", "expire", "exchange"],
                'next_page_cursor_id' => "bc14edcc-6adf-4963-b7a8-fa85228891a6",
                'prev_page_cursor_id' => "15444cfe-1dcd-47a3-8861-e9c0628e58e5",
                'per_page' => 203,
                'transfer_types' => ["expire", "cashback", "campaign", "transfer", "exchange", "coupon", "payment"],
                'description' => "wAY75stQD6SAh41fZii84vybd1Jsf0jR3rzbwtxyn2FAh1zUedGEpNztrZH4AytTHxVvHVgjPvTnTRbAGxJFBzSBdN9r",
                'from' => "2022-01-04T18:09:12.000000+09:00",
                'to' => "2022-07-21T08:05:11.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "cashback", "exchange", "payment", "expire", "transfer"],
                'next_page_cursor_id' => "bc36ca95-452e-4791-aca7-389e19339839",
                'prev_page_cursor_id' => "cb350615-0830-4f45-8afd-2ee53a999d75",
                'per_page' => 987,
                'transfer_types' => ["exchange", "topup", "transfer", "payment", "campaign"],
                'description' => "pyyEjfyZnRCBHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEg",
                'from' => "2023-07-05T02:20:51.000000+09:00",
                'to' => "2020-11-07T16:26:53.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "c5903c3c-deaf-4ded-a9f9-18e98a55d3b8",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "exchange", "payment", "expire", "cashback", "topup"],
                'next_page_cursor_id' => "2a535560-fb24-4c5b-8eb0-5a00c22649d4",
                'prev_page_cursor_id' => "44261fff-8838-4882-b017-4fe1994ed83a",
                'per_page' => 717,
                'transfer_types' => ["coupon", "expire", "topup"],
                'description' => "TXgPVT4AzeoZEOYuu1RyqlWwyCNVezTDDCUN00F2Vhn3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0YorDHLBFs4pFpuxUcIrb43g0nK7tb",
                'from' => "2024-07-14T18:06:43.000000+09:00",
                'to' => "2020-11-30T03:17:54.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "4d778f01-d474-4548-9d16-e356bfbdc10f",
                'private_money_id' => "5e4e48c7-cc01-4de0-8a4a-e9d1a5de19e5",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "topup", "exchange", "expire"],
                'next_page_cursor_id' => "61577840-0273-47e4-8ed7-066619b918e9",
                'prev_page_cursor_id' => "f5667532-bfda-4632-9781-6e76cdecedfd",
                'per_page' => 750,
                'transfer_types' => ["transfer", "payment"],
                'description' => "wxwj8U4A4KZBQdvuQb5QYDYt7CyctlhtAXqf6uerXtmVp3iPqRhb6DnnO4ty38IkhtTfaQ",
                'from' => "2021-11-15T00:07:40.000000+09:00",
                'to' => "2022-12-15T12:37:35.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "qhFbA6TsT4rGSzhCtzrrQIFeK35Z3EF7SWnLL5qkYPGTd8wILW6Ubji6nDVo6kwtt0eE996vZBp0zzwPN5DIhcy9tg03Xeu2UN5sKl9fYJxmaO84WKiqpzyFwc0O5qDH6cAdyVZn4o55A5DSTN7FZ8Y8t8MIK7Gd",
                'transaction_id' => "d55fc5f9-f8dd-404d-b530-95582d2f90ed",
                'private_money_id' => "2a63b90d-af21-451c-b8c1-1cf9c3646714",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "cashback", "transfer", "exchange", "expire"],
                'next_page_cursor_id' => "1497d1bf-3793-40ab-98e0-e3e17f023db9",
                'prev_page_cursor_id' => "c95ff621-3f2d-46de-b980-f160ca762e6d",
                'per_page' => 692,
                'transfer_types' => ["campaign", "exchange"],
                'description' => "8zcR94JgHtiXrfi45gdORj3Jla3Pfb8OgNhhqnfBQjVsClPPd45bUBovESo5O7DwwlNZPFf6xG0YeVkLQLhc7hbuv3B8S8pH3eqOx8cOR3TFR9a8hMUMtt7RdIKeKSciqwd",
                'from' => "2025-01-26T04:04:59.000000+09:00",
                'to' => "2025-09-19T12:56:46.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "be2d5988-e32c-486b-9f67-f081c923720c",
                'customer_name' => "qZQpEwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXml0I8A7sPYx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHDiw8sqMTw9CGMrpupnZP3tXLGdI4BQeMKNjNC6v4LdJ9q0nifAUuGHUnCvc4A5HlCo2a7OllUlOCGYapVIyu0AtoOYT3d8xXDGe31wijgcuuWSuuP7qXIDVYzNjNiLWADYE",
                'transaction_id' => "ebe472d7-8d95-4684-bd2d-f9783625d786",
                'private_money_id' => "3d379ac4-a8d2-410c-9af0-1095d5d214ac",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange"],
                'next_page_cursor_id' => "bd592c3c-526f-4e1a-a037-e8f25a7acf45",
                'prev_page_cursor_id' => "002b0d4e-a4b4-46e5-8e2d-566904a5ed08",
                'per_page' => 965,
                'transfer_types' => ["exchange", "topup", "transfer", "campaign", "cashback", "coupon", "expire", "payment"],
                'description' => "UZOhJAbHwNLgu8Nky9WURMByjAKTzdQ2llGcXl5Cw9ahtSHvWHxDbu1GOKxoKM3BkiQ5JCNLUQPpDOoGNkBoKxTvABwe33UWeSzKCZwv4PwJOyIcULWzrNeMACItmOkY1pUONfZUthj8CTdPwk2g7DYhFuXWtax2gH7mosTYAgSjd1Lu4N1G4D",
                'from' => "2023-10-18T04:28:12.000000+09:00",
                'to' => "2024-03-27T18:57:21.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "llEfWLsx2f1PjIk5LFEcZYZR1K1ULgGU5oSrsDCn36n92LJoBnxVWA0Bmx0P3sSh52djDx2E8q2Tl06IVYw4zb7KKLj26g9D4jd9Fi73fT2ekfbMypSoZArmvOOmVq",
                'customer_id' => "ac5637c0-9979-4bb7-a0cc-6f3aa18f45a3",
                'customer_name' => "ITpCScM5po6zQrUB5yHtoGfycJYa2GIKQCGBFwcqnjKtXS5ctb0sUDamQiJFavfIlsQjs1Uxv98uoxa9cfqdBZBSSyuPsLgc14jRH1daAJWkWpeGVt7BTtK3VwbUSgXIGfDPEPwHED0KtmDzxLUbUeg7w8cIU7UKhxLe1FMHoh3041czvU7tiTGNYlDyRk3aGMps1HN2O",
                'transaction_id' => "470e12ac-6e3b-4686-9769-f9b8747f0a28",
                'private_money_id' => "e645c700-ceae-457b-8cc7-c39d0bae6d16",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "cashback", "expire", "exchange"],
                'next_page_cursor_id' => "9df6787e-cc17-4c14-9712-1ef23fad58e5",
                'prev_page_cursor_id' => "c4eb2ab6-bb26-4cf9-8993-bbdfd9346ac8",
                'per_page' => 964,
                'transfer_types' => ["exchange", "payment", "cashback", "topup"],
                'description' => "vTMWtvAOdqc6t46b4EgFIpDVk2sqQhlAUNF0Kr6ekdB7WSGlsT24mzzvf0uixfzgMS7DAxRVXjpo",
                'from' => "2024-07-17T04:49:19.000000+09:00",
                'to' => "2025-07-19T02:07:39.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "a06f8986-ad4c-4959-89e2-865d2bcb784a",
                'shop_name' => "46YGKDJVQANtfUdHVcsouxX3xI9CHdZGkENDSkRyfWKAxjQWjCB8nFcqmENfDor1zgwF9x3xZsR5bLJPhH3FEHzbfU4cD6smAeqngifjNikqDE3OudXpYhNwFWUAKOnWlhna0lYNQbEnbMVdbi9G5aE3q4gTN93gHJA1FfneXYRV1FBu9VqwmK2QWEkaIk3Nf304AeRoMBnYRr",
                'customer_id' => "1cf9de08-a196-49e0-bec3-dfa3926cd934",
                'customer_name' => "cXtKQ0a4OPrt2tro65RM4SYyWPQ4b5EvFhF0JaiWpi",
                'transaction_id' => "0f347df0-c068-4ed8-bb71-3282ba21c69e",
                'private_money_id' => "046001a4-80dc-4b4e-a7fa-c766817d9f35",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "expire", "cashback"],
                'next_page_cursor_id' => "b9de6946-2954-458e-9941-343d8c0efbc8",
                'prev_page_cursor_id' => "bfca02a7-fe4a-4b64-9ec6-81e513d45a0d",
                'per_page' => 456,
                'transfer_types' => ["exchange", "payment", "transfer", "topup"],
                'description' => "a9NTrkMeAKNU2qNMrw4Jay2YBOfulEIFK5T7Dc8oOst1MM9PmjRDk75J779k3qO5Tt2uQGKACR",
                'from' => "2020-08-01T12:41:18.000000+09:00",
                'to' => "2020-09-14T05:47:38.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
