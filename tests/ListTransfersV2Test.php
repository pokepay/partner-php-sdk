<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2023-02-11T09:12:44.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2023-12-12T20:22:41.000000+09:00",
                'to' => "2020-05-04T17:07:48.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "g6799FNaTUuVqVNtvvxMPy8uYVQrlAwBl",
                'from' => "2021-05-29T14:19:00.000000+09:00",
                'to' => "2020-06-08T10:29:23.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["topup", "campaign", "cashback"],
                'description' => "lYVoU0Lud9b5MHdM8UnuwQ7jNoaulXZjgrVDfW2ufNp0gAs9phyFh2aSmdruAKFNN9YCEWSULZdpylXeF6qvGwUl7ATMaf3NqLOcKmTPNREiEdfOxleMzyqb14",
                'from' => "2021-02-01T09:51:34.000000+09:00",
                'to' => "2022-11-22T22:35:25.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 985,
                'transfer_types' => ["cashback"],
                'description' => "K0gxDGSVD8anN0lX3R6Ngh2OAi1BcnwfTRLJa4uoIhpR40nORwuCknsFuOeDw3ETEoYbDEhr0AwKkiQOHCQCIIRD",
                'from' => "2022-03-03T21:33:12.000000+09:00",
                'to' => "2022-08-10T01:55:22.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "cccb5c69-444a-4435-85d7-e8d3c0fd6611",
                'per_page' => 282,
                'transfer_types' => ["topup", "expire"],
                'description' => "CcPm4CujuDviyaRPbQTt1c2CSzS35RxVGrM7sDhsRor5EZrBgBnWdBpXW3vXZAsIGmxl3OdV3odlFFoKvu4lobeulXI7",
                'from' => "2022-11-03T14:55:31.000000+09:00",
                'to' => "2023-01-02T19:19:15.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "7aed2b03-5d46-4e5d-b96e-3a813e45fcf9",
                'prev_page_cursor_id' => "a4e6d9f2-5d9a-406a-a06a-e8dce87a90d2",
                'per_page' => 490,
                'transfer_types' => ["payment", "topup", "exchange", "transfer", "cashback", "campaign", "expire", "coupon"],
                'description' => "4yWdLtrR0H47hbbDvB2dkQWYC4RWqJwsq2yT7AWpCDkyLBkYzAxemZaKowuUfekyaJIsuHhxZpopNYyv6dLAyty2EMgPVlahlWYdbE",
                'from' => "2022-06-01T08:39:02.000000+09:00",
                'to' => "2021-01-22T13:31:23.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["expire", "payment", "transfer", "exchange"],
                'next_page_cursor_id' => "ff42887a-6264-4492-9c7f-819c5f84bfa5",
                'prev_page_cursor_id' => "c022fe55-787b-4c60-869d-63c33905c2fd",
                'per_page' => 653,
                'transfer_types' => ["exchange", "cashback", "campaign", "expire", "topup"],
                'description' => "GOnpUXmwhMFkO9ufFPOzF9Lvv7JJIkMwpNGlwPY7w3AePumXzLvyF75pQlwzsKLA3j0RsOTGgnfI7tlICo",
                'from' => "2022-06-20T17:29:55.000000+09:00",
                'to' => "2021-04-19T17:01:05.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "expire"],
                'next_page_cursor_id' => "cf9413da-77df-4b8f-a959-3014d42ba953",
                'prev_page_cursor_id' => "8cd95bdb-a690-4d9c-96c9-e9c2cbc1c240",
                'per_page' => 5,
                'transfer_types' => ["topup", "payment", "coupon", "campaign"],
                'description' => "gk4gnk7sP6E17lkMgQrA88yuG2X4KRlpHewo2CgFQkdXPF4V9XHbL6zY6vqwgcI7YPEPHgGnEdzhGAMty3ev",
                'from' => "2022-10-04T04:41:44.000000+09:00",
                'to' => "2021-02-26T11:56:47.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "3edd103b-ebca-40f7-9f63-cd3df5d9e3dc",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "transfer", "payment"],
                'next_page_cursor_id' => "35ae22f8-7dcf-44b9-afb3-268f2ad44be3",
                'prev_page_cursor_id' => "718fff4e-2d8c-4bb0-ac91-65d653af087f",
                'per_page' => 463,
                'transfer_types' => ["coupon", "exchange", "payment", "transfer", "campaign"],
                'description' => "LR8ci2cIIE66fhj2n6iiZ64HpvFGkJr1uo4NLstnS7EAbDgQaYkUrDsQyk3kwOisNW9XsMHB",
                'from' => "2020-08-16T11:32:38.000000+09:00",
                'to' => "2023-06-04T23:09:16.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "8d9eceac-f51a-461b-a150-cc7308d72cf2",
                'private_money_id' => "578b92f3-ee3b-4803-9459-a7dbf4f69bc2",
                'is_modified' => FALSE,
                'transaction_types' => ["expire"],
                'next_page_cursor_id' => "492f852a-741d-40ac-be52-d35906fc2123",
                'prev_page_cursor_id' => "4e8c7189-fe7a-4ef5-9f0a-5e9d680ba6b4",
                'per_page' => 261,
                'transfer_types' => ["cashback"],
                'description' => "NWpdUvBBp2JsuVIINCRpxja7me48LNXqpqJtjZwJILsuUBm8J0tu2v6zDKp9iO7Ari3UHmo6XPE5Oqy1DljVh9nsq",
                'from' => "2023-06-01T08:36:14.000000+09:00",
                'to' => "2024-01-31T18:01:36.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "zongKg5SFSpcaiWqMVEyXiabD2fPkrS1NvYbmwucdTPjBOMyHVeFGY5vB7gjE0J3rzoZQgeuXW4rw3Ob3VUIWbzDljJ6klDtciJUcw1w",
                'transaction_id' => "cdca951c-3669-4627-8e0a-4a5fafe99e2c",
                'private_money_id' => "7a175a00-c689-4715-b298-f8b42a6df20f",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "transfer"],
                'next_page_cursor_id' => "c55329d6-661d-4d42-94df-fbce3d78b895",
                'prev_page_cursor_id' => "88b45f71-065b-4c95-8b20-8801d4ec032f",
                'per_page' => 784,
                'transfer_types' => ["campaign", "payment", "cashback"],
                'description' => "zGADkOfMAKTboQcaiYXr4rnNnjCoeQHM",
                'from' => "2022-11-11T07:19:17.000000+09:00",
                'to' => "2022-09-16T22:42:40.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "981c687c-557e-4e58-a903-43c7d8898cce",
                'customer_name' => "UysmU86lvAOTbcLzXO1sbMRuBNUlL6K0ReLv75kg6qcs3cEpI1m3wABqtL3bdaVTKdkTjUxGpAh3awQssfAXqJYYr4ARYbJcmLujs894lRg4qB30GRMkbzDn742v8m6fDAksXCcjSnMwkyUVD7CNlqSrG8bUcu2404OwW",
                'transaction_id' => "f01c618c-0b32-4c11-9903-b5adda5ab59a",
                'private_money_id' => "b71e770b-5eec-4426-8b6f-940bf3deec5b",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "expire", "transfer"],
                'next_page_cursor_id' => "d39ec00e-ef18-4f37-87dc-7fa9d4a9568c",
                'prev_page_cursor_id' => "b6f1743d-7a46-4403-8ca2-1c1b17d5fe39",
                'per_page' => 939,
                'transfer_types' => ["campaign", "exchange", "expire", "payment", "coupon", "cashback"],
                'description' => "e0c6WMBb0vMyrrNo2CtAij6",
                'from' => "2023-11-14T19:48:21.000000+09:00",
                'to' => "2021-06-03T01:35:25.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "FWlBc9nMouBhD3xaVyDbF9dQAdVbIjdKodnIqsg2hwfCC3ynrJLnPSb5d8avvWNGGZpHcQub7jyKGPEze4eDg0kaj205Q9Vfs0xgdWlEYjRqPOb8BVVabHLEG4agkq",
                'customer_id' => "38636f32-9cc7-4aa0-b8a5-9722d8d66849",
                'customer_name' => "GQBS0nchLLndRaY2NqmWOdlkOhTjC67yWAbgIrPt858HfVRa8DX5UPvkC2RO0Ka4lYXy6v8yeYaDtl3yxcl",
                'transaction_id' => "dcc9d9d7-9e92-45d3-a957-4aa2bcdc5d00",
                'private_money_id' => "e722ba7b-b041-48d6-b883-0f56681a0319",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "topup", "exchange"],
                'next_page_cursor_id' => "35bad034-7b66-48a9-9cb3-beeced4d832e",
                'prev_page_cursor_id' => "c906c3fd-2a95-45b3-8fe6-d9a3587305ae",
                'per_page' => 554,
                'transfer_types' => ["payment", "expire", "topup", "coupon", "campaign"],
                'description' => "uJKrDFgfnOa5xAhF",
                'from' => "2020-09-08T16:41:29.000000+09:00",
                'to' => "2023-12-11T04:44:25.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "4a3ad68d-5da1-49c6-bd17-053a387b93dd",
                'shop_name' => "sFDzTIAFGDPhpBgKNmzEARJ1rvmqI1bSsRkkjQVB7WPQBN4OQef6ic8PJreX4akuWpKD9afhWN8gpYbk1UQRVGeT6q9QlLL4St0RhV6KdSsO2fKUxMoBriyYb61zvPjBcIHUY8RekKTAhSuM7Lo0VuZ1eCkX9fHo",
                'customer_id' => "29dea1eb-91c9-4846-926c-2f7de2aa418c",
                'customer_name' => "VQAOj",
                'transaction_id' => "13b8e8bd-ee42-4122-b0fb-ba862fc6c2d8",
                'private_money_id' => "c0d59ed4-dfa5-4ac9-858c-f183d3f5aa8a",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "exchange", "cashback", "transfer", "expire"],
                'next_page_cursor_id' => "c0619aaa-9db0-4132-863f-f97fe35d1082",
                'prev_page_cursor_id' => "fa4219e7-8233-46a2-9c85-3e5b3781adce",
                'per_page' => 62,
                'transfer_types' => ["cashback", "expire", "exchange", "coupon", "campaign", "payment", "transfer", "topup"],
                'description' => "hOlSBfFEUcOQMXEYHzF8m9cIjwUyTMaVMoVAP5OP1CjryzsDN5Z0UkOPXKep1jFsPNeua1jB7iZEF7xhaxWIxTjjuPniB6yr4Okg2Udv9iXSqMQb8J3iQSJeJic2mGuJKmsKLeWViwh5Xh0Ohe1EHst26OluNAixs6BC1rh1D",
                'from' => "2024-02-04T06:15:06.000000+09:00",
                'to' => "2022-05-15T09:58:44.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
