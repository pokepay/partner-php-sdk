<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2021-06-26T02:33:13.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2025-06-25T03:10:21.000000+09:00",
                'to' => "2024-03-02T21:29:08.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "sb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ34GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3",
                'from' => "2023-07-01T05:10:09.000000+09:00",
                'to' => "2018-12-06T18:27:45.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["transfer", "campaign", "coupon", "expire", "topup"],
                'description' => "dPl4JIrQmLFWJxcGB9NLriuIsMTYyCUoOEa9YZaUNPTMagDSPeHLGCGYvgqbqCIdoPTyGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1UycVdhwjqe7Rve16qe5BUa3mrtCxkktMbdZ0Ff5nebRZC0vDYNEWMfxXSVHRY4YZds",
                'from' => "2020-09-30T15:19:44.000000+09:00",
                'to' => "2016-04-12T01:32:51.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 888,
                'transfer_types' => ["campaign", "expire"],
                'description' => "lf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO5",
                'from' => "2019-01-30T00:51:25.000000+09:00",
                'to' => "2016-12-17T05:26:15.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "5482be37-2c7e-47a1-8453-cabdea672c66",
                'per_page' => 390,
                'transfer_types' => ["payment", "coupon", "cashback", "campaign", "expire"],
                'description' => "2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3jVYhbh4RW4SjcPHu2gIp7HlCgxYlFZz",
                'from' => "2022-04-04T15:52:42.000000+09:00",
                'to' => "2022-10-16T22:52:28.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "2a1ae21e-88da-4509-b8f4-5a1e5e3dc17e",
                'prev_page_cursor_id' => "ee77b0ea-fcba-4373-a800-273ee0e69d36",
                'per_page' => 313,
                'transfer_types' => ["transfer", "coupon", "expire", "exchange", "cashback", "campaign", "payment"],
                'description' => "aAMErPcV9o0TcGJkIJgRMahTjY4B83KCbssdnciBK2yKUyBpazsF",
                'from' => "2021-12-29T06:07:50.000000+09:00",
                'to' => "2019-05-24T22:49:49.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["topup", "payment", "exchange"],
                'next_page_cursor_id' => "5c791657-eaf2-44fa-9de9-0912f0e284eb",
                'prev_page_cursor_id' => "b99e73c8-dbb0-4fbf-84f2-9ea7d33a6b54",
                'per_page' => 420,
                'transfer_types' => ["topup", "campaign", "transfer"],
                'description' => "RX9iZhUIwUrsQ8Uijo55dyiBxXbKWYhqIQcADAJhWFwASll2hGkEzja1NmQHCUATGG",
                'from' => "2016-03-04T20:09:00.000000+09:00",
                'to' => "2019-10-16T21:14:59.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => TRUE,
                'transaction_types' => [],
                'next_page_cursor_id' => "ae58e6a4-b375-47e3-a2bd-835a779d29a4",
                'prev_page_cursor_id' => "a8f39328-c324-4cb4-a765-43bc4dcb55b0",
                'per_page' => 927,
                'transfer_types' => [],
                'description' => "2MmxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uvaLnbw12Ii4C82SzJJG4lODNS",
                'from' => "2020-08-13T16:41:58.000000+09:00",
                'to' => "2021-01-10T03:58:27.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "66256eea-8326-4400-a1ab-1a378fac0e9c",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "exchange", "topup", "transfer"],
                'next_page_cursor_id' => "c8060e57-82e2-4fa1-966a-2ca8a315f509",
                'prev_page_cursor_id' => "b8e908d8-4fc7-4866-ba25-d643a0a2e7ed",
                'per_page' => 129,
                'transfer_types' => ["exchange", "cashback", "coupon", "expire", "transfer", "topup"],
                'description' => "rCrWwA7IkDmk9acr8tX9JQSHyiFoseHqYyK8GI",
                'from' => "2016-11-23T12:14:41.000000+09:00",
                'to' => "2018-12-04T12:29:01.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "911dc1b0-02d0-4c09-88bc-5d92f62e92c7",
                'private_money_id' => "323413ad-cfd5-4eb4-b59f-26247c28b0f5",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "payment"],
                'next_page_cursor_id' => "5301ba98-1230-42e4-830f-34cafde925a2",
                'prev_page_cursor_id' => "10a14565-72ce-4e99-8e80-3094f99e8676",
                'per_page' => 470,
                'transfer_types' => ["transfer", "expire", "exchange"],
                'description' => "hvmd5I8evbrAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57",
                'from' => "2024-01-26T06:49:51.000000+09:00",
                'to' => "2017-06-07T12:33:42.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "AikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL",
                'transaction_id' => "79249bad-dffb-44b9-8b3c-04891141ee9e",
                'private_money_id' => "0d3b28f8-fcbc-45b0-aa91-8ad989bc2e6b",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange"],
                'next_page_cursor_id' => "99603510-8d7b-4ce3-9fcf-2bbe1c61fdd4",
                'prev_page_cursor_id' => "ad293d7b-72bd-4500-a75f-22b2d4302c88",
                'per_page' => 436,
                'transfer_types' => ["expire", "coupon", "transfer", "topup", "campaign", "cashback", "exchange", "payment"],
                'description' => "rX6ozTzm0HG0TosxKz4jitwH",
                'from' => "2024-07-29T22:19:40.000000+09:00",
                'to' => "2020-06-30T12:00:14.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "924d87ea-e97f-410b-8b68-a63b60e8110b",
                'customer_name' => "wCFGwiyv4vlRBRxfHZeKBVf4jVt",
                'transaction_id' => "b844b3e5-6706-4763-bed1-d7ce53ef1575",
                'private_money_id' => "c87837e2-8f49-46e4-8804-97e5e55ff29d",
                'is_modified' => TRUE,
                'transaction_types' => ["payment", "exchange", "transfer", "topup", "cashback"],
                'next_page_cursor_id' => "645d5f93-703f-4572-adf6-5cf084b5ae65",
                'prev_page_cursor_id' => "6f9f190a-22ce-48fd-b836-0907df44af1a",
                'per_page' => 999,
                'transfer_types' => ["cashback", "expire", "topup", "payment"],
                'description' => "gyM43AJZ0KTwWOYBSX4EzfsIiIDCSxoowqwobMRj4K8plKuk4zON6lsKCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRWC",
                'from' => "2019-09-22T01:48:11.000000+09:00",
                'to' => "2017-11-01T01:12:49.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWpRkphzntqbTr2vHF1iF0Y7dBxe8hiTzwkLtzBfAa7kaQm6vULSy1FKdTtu83N0tnRGbdpbMjOs6NsjU",
                'customer_id' => "3e379615-3622-40e1-a9ab-5ac4da3f4b3a",
                'customer_name' => "roY6Q3IK7BQ6AmswdAM3IJrwVbs9pMxfMCthiv1a2EEHFmQw4OmJsXraAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5ozHDn0iOeoWIRRMyR0nQkh8Zz7ea",
                'transaction_id' => "45d69e46-5ec7-4a9f-9e6f-5d69c554f789",
                'private_money_id' => "57c2154f-35d0-4a13-a9cb-788bc6db59d2",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'next_page_cursor_id' => "c6fe6e39-fe3e-481a-8755-b73a1fa46d96",
                'prev_page_cursor_id' => "80ecd67b-a8bb-4d3a-be60-7dd48bbc81e0",
                'per_page' => 228,
                'transfer_types' => ["cashback", "coupon", "topup", "exchange"],
                'description' => "sZuPfABdiNvfS9Anufij6THnocikBJOkD3FvwnaI0WeOGlWmmegc1KGhe3TxnuKac7C",
                'from' => "2018-03-01T07:41:41.000000+09:00",
                'to' => "2017-02-01T20:47:42.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "62a0dac4-fdfb-407d-86e0-2ecb13727a13",
                'shop_name' => "Gnrr3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u7tO",
                'customer_id' => "3a0c4440-b178-405b-b1dd-3dfed24f3975",
                'customer_name' => "eNatGolCf6SjeF7SeZXyMS6WkNJ2GvSwQUcruYP4H5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0tecRrYBgXoYNaRDH3xa5ZXl3L94kmDiQZVmfdCV9wGJUROgp1VTNstKsbk2wvZcZmJCZwuee4w9Rkvag9C19xRl1IlJpGXqlhd5uwOg53j3Qic0iyKLnZxaZi9iCa2",
                'transaction_id' => "7b710a91-7d0c-4feb-aa93-efa8a9a2f239",
                'private_money_id' => "b8368dc9-3490-4e44-8490-6d93394d4095",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "expire", "topup", "cashback", "payment"],
                'next_page_cursor_id' => "26479cb5-77b3-4e48-8b9b-d5a98d88ae14",
                'prev_page_cursor_id' => "b47f9a34-63a2-4763-9404-1d25db9162c3",
                'per_page' => 354,
                'transfer_types' => ["cashback", "topup", "campaign", "transfer", "payment"],
                'description' => "6J50SdiADG37eydGENMPuSUGCPNHip0Y3dBWcNdXe1sIjLSVztCspd",
                'from' => "2015-10-21T15:08:57.000000+09:00",
                'to' => "2025-03-08T23:28:16.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
