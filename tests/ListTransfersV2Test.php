<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2022-11-03T09:43:12.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2022-05-31T19:18:04.000000Z",
                'to' => "2021-10-30T22:07:10.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "wB453YpOK96EoFGxVJNTeRlFM4Xw2YneFRtau24yc1kusN7qW2yhhPFbHNPhRgnqYnUlh4JbOrMj5jFwrA",
                'from' => "2024-04-23T14:57:40.000000Z",
                'to' => "2023-02-19T07:04:47.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["transfer", "payment", "coupon", "campaign", "exchange"],
                'description' => "Dr0Djt9M12BOno1AcjM96oftC7mHhiSDgXKvVy5paxKD2",
                'from' => "2022-03-27T15:40:08.000000Z",
                'to' => "2022-09-22T17:45:33.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 133,
                'transfer_types' => ["expire"],
                'description' => "6iqol80j1t4n3lpnoezOx6Ov6eGwjQCqxdtQnDY4S9N4HhJ5rCsXRcUZY47cpIh03BvqB7CzLjYHoO28zEE65UlKtMCe12MUV2dxrA2428zEWnFZLX87qtedPzV8NdiYCurcmVOPZzwMWHgQ0VESfspW9b9NBdczTSynCfTiWLEN2pEbq7Z",
                'from' => "2020-10-07T23:08:43.000000Z",
                'to' => "2022-10-24T02:41:06.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "d8a1bb02-12b8-43af-ac08-1c963bb3d3d0",
                'per_page' => 87,
                'transfer_types' => ["exchange", "transfer"],
                'description' => "zaeTptZ5kX9rLpagdWQnEnTlLyubwibc5uG9Y4cn6ApRZ5NX6gFb5nuODlmm9rpn022H3wQmNFzbLFm",
                'from' => "2020-11-15T12:41:10.000000Z",
                'to' => "2021-02-24T17:36:36.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "2942bf7f-422a-4fc6-937a-5eb1c26dba5b",
                'prev_page_cursor_id' => "2aaa21f5-ea70-48e5-acf2-9c1f8c386594",
                'per_page' => 218,
                'transfer_types' => ["topup", "payment", "expire"],
                'description' => "xW8Yq15XpRuu89q3NykiRPYO2oQiAYMcKkXBWEu4RSjxgCW3jFlgob7yobgqdqFleVhpCebdmmx3j",
                'from' => "2020-08-07T01:24:26.000000Z",
                'to' => "2024-07-26T09:24:28.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["payment"],
                'next_page_cursor_id' => "15a3ad35-950b-49be-9e07-43f0c2bb0b6f",
                'prev_page_cursor_id' => "45eb8eaa-2564-4135-88d1-0c2a7882bbe1",
                'per_page' => 391,
                'transfer_types' => ["coupon", "topup", "payment", "transfer", "exchange", "cashback", "expire"],
                'description' => "LxumOnvrupx16EXCUXyPfCabjEtMliIf7wKoPmNQWU6zl3h0ZGoCe5IIfEbaRlpdhTTQpQoSRT6b0IY83jSy9CLjq8yjjxInoBnLVw5NxHP7CI9Yb5tOQ2qp6BlopujNmJIuVKWvjUjC0u3f2Lo9NqlV6uXM4yE9kd7lV6Q",
                'from' => "2023-01-09T21:03:09.000000Z",
                'to' => "2024-03-04T04:26:05.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "expire", "cashback"],
                'next_page_cursor_id' => "0b38e436-5686-4ad2-bb9f-1b054eb4a1fb",
                'prev_page_cursor_id' => "b3a403c5-f387-4b7a-af80-15490e3dccb7",
                'per_page' => 32,
                'transfer_types' => ["transfer", "topup", "payment", "campaign", "expire", "exchange", "cashback", "coupon"],
                'description' => "c0GyNh6EpQVqX4KE4B5KRDxSSppVORQLy6PO73cHGKqjz0v27dHE8reh9b3v7zqeYS2n0EGsPPbvQvYkAPBJ7wmgCWNKDP1enxAKZBD2FhNoFZKIbAgSoRCKxxDEWQZO9yz4Mc4BWxPS7UaVHpVi4pZYZOGKLSewvJuaN97ObU",
                'from' => "2020-04-17T02:45:34.000000Z",
                'to' => "2021-03-18T16:47:55.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "f16da3d1-515a-4f9a-b0c1-06b0080aa508",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "cashback", "topup"],
                'next_page_cursor_id' => "bce4c95a-2c32-4d94-affd-3d89e778356d",
                'prev_page_cursor_id' => "90be4d47-c11f-4c2a-8ee1-d3f452bf0c83",
                'per_page' => 581,
                'transfer_types' => ["exchange", "topup", "coupon", "transfer", "payment", "campaign", "cashback"],
                'description' => "MaGd4kHySUJYrKI48UyLazcdaqg9M9b56VUQzIG7Yr7fsBnFuG56tOVY8vi9Z9lrbTGfh4QbdPS2DfLew9jsvLcXjFRqAsdyU0EjzFGdoCEVoN09yrlyTlHcxkp2hdiJWs83eoAqvgg01zZW75gRDgWRTNwobRsB1baR1aePdc9fGHLcwyelAg5Jr7zEeO7n",
                'from' => "2021-05-16T16:52:37.000000Z",
                'to' => "2020-12-25T08:15:26.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "e83f1b91-3b78-47a9-98ea-21b732ce3eb4",
                'private_money_id' => "a58e7b7e-4199-496a-bd36-ca20fc08f02e",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "transfer"],
                'next_page_cursor_id' => "184b7a0c-874f-4456-8594-19dc55495861",
                'prev_page_cursor_id' => "7f84988a-238a-49c0-826b-c78ac08439f9",
                'per_page' => 498,
                'transfer_types' => ["topup", "exchange", "coupon", "payment"],
                'description' => "Nric3MBQYWsKtvnxoQJLloM94TQVFchkaVLnKXq1JcpZfZUH2UsKCxnRcuSoLNAly4QR5kzfucn7LZFZwhy5RIJGwbFSZ2qU3L9frpqlrETgz3O9wlyQ0TWfR4Gx21zM7WIQGDsPsJyAShBlCJPjtVj6RA58jW2j8noWbh",
                'from' => "2020-03-17T13:52:06.000000Z",
                'to' => "2021-04-04T11:16:02.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "yHKQAP2bBeZkmIh2UeN7Z047tEp9MnaMKkPTTOh4KlFXKgtixsqVTYrrSHZ1a0tz4EzkuhUCHWp85qyAYWUJWst1yIlHOt0XiM6Qkur8SbZd3wcuCesxkTgeUlIAlQvL5t780R8L5VrLxzRQlVu0ZdkmHWdPUiVDqeHPcQVtlOjSB31Mxq8SXpxSHJRZi52y7KvoeklIR5ig74Fkbtbb0SlK2KbT8BQ8",
                'transaction_id' => "1e58cbfd-9857-4ca9-aa1f-be24214182f8",
                'private_money_id' => "31fd2e5c-31c7-483b-a02e-d2944f95005d",
                'is_modified' => TRUE,
                'transaction_types' => ["expire"],
                'next_page_cursor_id' => "4fd3235e-e760-49b0-93e3-f52f49986bac",
                'prev_page_cursor_id' => "b8004775-bc82-4c12-8857-77b1a5153eac",
                'per_page' => 731,
                'transfer_types' => ["expire", "payment", "exchange", "cashback"],
                'description' => "CHCm7yUfJm7Fg98YgjSKRGLQpNx8ciNrKweGJtnGqdSp90ci6D0iGddOVzLT6tirwJLurByrAGwszVwlQAuTXTWtKg2YB5YxVquVYsbDyysRisRQ9ectqoj4yKOsEPCrpQPvSjUDltH57",
                'from' => "2020-07-01T09:23:22.000000Z",
                'to' => "2022-04-28T20:39:21.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "7ed0a6f3-719c-4ac4-bf24-9c70124842a5",
                'customer_name' => "O4lTbJ9dqwKn5NSHIJ7mbc5qbOnYCYxA4Aj",
                'transaction_id' => "eedee249-b5fc-41b4-b7f0-77af7a2a55a8",
                'private_money_id' => "9af1aca7-46b6-4d93-b174-1149845a26a4",
                'is_modified' => FALSE,
                'transaction_types' => ["payment"],
                'next_page_cursor_id' => "99284f30-0515-4147-ada1-ccfa2de3f748",
                'prev_page_cursor_id' => "1c46990c-4631-4d46-9257-af2f4cec889d",
                'per_page' => 535,
                'transfer_types' => ["coupon", "cashback", "expire", "campaign", "topup", "transfer", "exchange"],
                'description' => "HaeJGFXqwAY75stQD6SAh41fZii84vybd1Jsf0jR3rzbwtxyn2FAh1zUedGEpNztrZH4AytTHxVvHVgjPvTnTRbAGxJFBzSBdN9rH7Ml90EeuZgaP20pyyEjfyZnRCBHpzVqBZqNRFUo9BhqQxq9FR8VF2gH7EAnlFEg",
                'from' => "2023-07-05T02:20:51.000000Z",
                'to' => "2020-11-07T16:26:53.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "myi8jmBN0T80aLvrKoRyTXgPVT4AzeoZEOYuu1RyqlWwyCNVezTDDCUN00F2V",
                'customer_id' => "585e6c88-d2de-4d11-afe8-42fd31b35ba8",
                'customer_name' => "3XqmCSMDzeEDKcNHBIUBy90lbfxByyLgJllatyS0exoVZwnX2Y3MjJVkSKFu78PD8Nsi0ghqRiHIikuwLQAi0YorDHLBFs4pFpuxUcIrb43g0nK7tb3btHVGJJQejQb3sdWfi2Z2Wvmx0ZqLEwxwj8U4A4KZBQdvuQb5QYDYt7CyctlhtAXqf6uerXtmVp3iPqRhb6DnnO4ty38IkhtTfaQWLqhFbA6TsT4rGSzhCtzrrQI",
                'transaction_id' => "59173785-910e-4ec6-ac06-602550aa0481",
                'private_money_id' => "158739a9-7065-48cb-981e-032489c19533",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "exchange", "cashback", "transfer"],
                'next_page_cursor_id' => "a96ba690-b9d7-4f07-aecc-721c9cd025cc",
                'prev_page_cursor_id' => "e7c1c735-08fe-4819-b16b-de591fb859a4",
                'per_page' => 849,
                'transfer_types' => ["expire", "exchange", "coupon", "campaign", "transfer"],
                'description' => "8wILW6Ubji",
                'from' => "2022-01-16T21:41:44.000000Z",
                'to' => "2023-04-03T19:00:06.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "1815f202-f891-4385-bdee-0b446dd55894",
                'shop_name' => "Vo6kwtt0eE996vZBp0zzwPN5DIhcy9tg03Xeu2UN5sKl9fYJxmaO84WKiqpzyFwc0O5qDH6cAdyVZn4o55A5DSTN7FZ8Y8t8MIK7GdyM50XmxAy3ATlXa99m3Ela8zcR94JgHtiXrfi45gdORj3Jla3Pfb8OgNhhqnfBQjVsClPPd45bUBovESo5O7DwwlNZPFf6xG0YeVkLQLhc7hbuv3B8S8pH3eqOx8cOR3TFR9a8hMUMtt7RdIKeKSciqwd",
                'customer_id' => "b989d36b-720e-4988-ac6b-219f01017e67",
                'customer_name' => "vqZQpEwqxxIpXTryBWY7YmTtJYjps5n0FjmTFvO6PZjVX87PLzR29oTCv16fPXjhVlLpKgtr0aXml0I8A7sPYx7KWs9GrfkcGFxlkTYjYgPlxnzpf9XcHDiw8sqMTw9CGM",
                'transaction_id' => "450967ab-6a85-4407-8694-a0f2228d9570",
                'private_money_id' => "372a711d-3775-4a70-be6e-295a189548a6",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "payment", "expire", "transfer"],
                'next_page_cursor_id' => "18996458-af4c-4ac7-8ca3-572d287b3d1f",
                'prev_page_cursor_id' => "ed2cd0e4-8820-4ac9-a0b4-0b42e1ca309e",
                'per_page' => 813,
                'transfer_types' => ["coupon", "exchange", "expire", "cashback", "transfer", "payment", "topup"],
                'description' => "C6v4LdJ9q0nifAUuGHUnCvc4A5HlCo2a7OllU",
                'from' => "2023-10-20T19:13:01.000000Z",
                'to' => "2020-05-14T09:04:27.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
