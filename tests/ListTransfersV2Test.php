<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2022-02-27T02:09:19.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2022-12-14T01:36:19.000000+09:00",
                'to' => "2023-08-23T16:33:24.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "O4e7etkFL2TyHzHqhJkVDX1CQG7ICJfkTHSpAfqXYKYjYQWAGJ3lDAc1g44CUyp3ZCkyul1F7u73krbRhUtbVll2a4idndztrDf2lwO1erUv",
                'from' => "2021-07-04T21:01:19.000000+09:00",
                'to' => "2022-01-08T03:47:02.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["payment", "transfer", "exchange"],
                'description' => "MedAZLiFRV3IlNtDoeMJo9Y0sQ092mOnzUsb4BK1tZqI8LkPZydnWDxi8EwNxUYg5S15gGH2G74XFxaKvE9toSyoqN5nciMSsEvWqWHGFNjxC6PRRIV17GWgaYcPmFSjCPWELzi886AVxQu4WnvxZd1hilRNW7a4Dfl4fZyHU5u",
                'from' => "2020-05-23T16:59:52.000000+09:00",
                'to' => "2023-05-15T05:47:55.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 472,
                'transfer_types' => ["topup", "transfer", "exchange", "coupon"],
                'description' => "cEbXgdJdn1JESA",
                'from' => "2023-12-17T06:22:49.000000+09:00",
                'to' => "2021-04-29T21:11:45.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "6c486b29-764b-46a0-a93d-78a57c9452aa",
                'per_page' => 784,
                'transfer_types' => ["expire", "transfer", "payment", "campaign", "exchange"],
                'description' => "H22K160ZHB6RH",
                'from' => "2023-03-15T00:16:56.000000+09:00",
                'to' => "2023-08-07T15:58:32.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "ce9a7de8-f326-464b-8dbc-e437e155a3fd",
                'prev_page_cursor_id' => "5d583a51-8083-4ed8-9eb1-529f89fed129",
                'per_page' => 940,
                'transfer_types' => ["cashback", "transfer", "topup", "campaign", "exchange", "expire", "coupon", "payment"],
                'description' => "RNMKwqNgfNgbviuCan989OVkPfuDdy9c3lpMlTQ7o7W2891N7VlgaSjmhziLv9gctR8D4xdA8OZqz471da3iEzsze5OYUMXhOercin5cbogmmeepFPo5qa5Y",
                'from' => "2022-04-26T06:35:33.000000+09:00",
                'to' => "2023-05-15T13:57:22.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["transfer", "topup"],
                'next_page_cursor_id' => "ac371909-69b8-44fd-ae8e-92bae1d2a930",
                'prev_page_cursor_id' => "9652e492-9a2b-4127-8a50-b9a73aadc0f0",
                'per_page' => 759,
                'transfer_types' => ["exchange", "expire", "payment", "coupon", "cashback", "topup", "campaign", "transfer"],
                'description' => "JNE30fTbFrvNLcFaT1EuNgFuQj1DmV1QWUI8iUz5oSC7XwTLEXBaJQCnrK0SrGj1x2VQMDNsa40Ziyheg3Qifod",
                'from' => "2020-03-28T05:35:29.000000+09:00",
                'to' => "2023-12-25T17:32:55.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "cashback", "topup", "transfer", "payment", "exchange"],
                'next_page_cursor_id' => "6ef39650-ced1-4be8-8324-a64a2ab1e3d0",
                'prev_page_cursor_id' => "788326e1-fa87-4aa8-a26a-e1638377b109",
                'per_page' => 832,
                'transfer_types' => ["payment"],
                'description' => "PwQCP7QggVxwk1aktGGhGr39uD3GoKly9tBB5RO0tBzfF8ng7RcRhV4Ltjkyo0xLvjYYfBgJRgyBNAvExwRDtDtscRvcverqW4lE3RQn9nJYR",
                'from' => "2020-09-07T21:43:29.000000+09:00",
                'to' => "2021-12-11T01:37:26.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "bf8d7f09-42cd-4290-8298-1933eb69f59a",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "cashback", "payment", "topup", "transfer"],
                'next_page_cursor_id' => "799c0afa-c661-498a-8bcf-a412a0d5cfdc",
                'prev_page_cursor_id' => "8ab029cc-8c82-4c72-a277-976a50876bfb",
                'per_page' => 153,
                'transfer_types' => ["transfer", "coupon", "topup", "cashback", "payment", "campaign", "expire", "exchange"],
                'description' => "iU0FGP60cjQ",
                'from' => "2022-02-21T13:22:56.000000+09:00",
                'to' => "2020-01-17T13:36:10.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "1d4bb568-decd-40d3-b3d1-44d82081b8f1",
                'private_money_id' => "b823594a-3c01-4a6c-b722-67efaed50d04",
                'is_modified' => TRUE,
                'transaction_types' => ["payment", "topup", "transfer", "exchange", "cashback", "expire"],
                'next_page_cursor_id' => "95691642-8a80-4626-a52c-281786c7ca3b",
                'prev_page_cursor_id' => "0b64389e-f769-4a19-a26b-688025933ed4",
                'per_page' => 276,
                'transfer_types' => ["cashback", "transfer", "topup", "expire"],
                'description' => "8JYlZs9X1wCHUrsSa1O7WBqCwgrftBYMpy1WF3AGlQJI8c5GZQxig4JCz1IVSwOxoSMnzgYYcYZCT6xFb0ZiZyDkjs1PmlEjZxkYA0oL0DnGt0RPhz0LwMo8DhJ",
                'from' => "2023-03-16T14:42:22.000000+09:00",
                'to' => "2022-06-12T20:21:19.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "5EZm8v8mdbTwzC6z31GnlOd2kgj7J2NwaYlq698zkCXlVzUTx9lm4wquyHWbWm3fJNDI1AkhQC5ixCL",
                'transaction_id' => "31d5b4cf-7831-434a-8a24-5442c18a8312",
                'private_money_id' => "88fc65bc-4350-4b15-bcfb-3c60d598406c",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "payment", "cashback", "topup"],
                'next_page_cursor_id' => "ed4ce025-775d-4479-9b9d-1f1d8958e51b",
                'prev_page_cursor_id' => "bf5d8dea-24ef-4d2b-9b7b-2a6a1d40285f",
                'per_page' => 1000,
                'transfer_types' => ["topup", "transfer"],
                'description' => "iXeSj83yWxWzdx8AmWa2b4kIFr6aW4a7KKNo1lodAsNZVqUmJDy92H1Q4zLhgpQsUE5aqj3e21U4BOgRhckTgyvEhJjlwdAdpxbloz5xyaSXncYjsODjBBk5wvnSnqkOdkxAgJCTVcczxrv6lF5J1Q4UPerVMNNTefXEMIFouHmdMBVROejfXThet70vpYW8E8Nu88",
                'from' => "2023-11-25T20:34:24.000000+09:00",
                'to' => "2021-11-21T02:52:32.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "4230134d-403e-4d2c-a86d-014fe7127cdd",
                'customer_name' => "Lglv04yuCesBFMo5xWeqxKkNHgfQZmhYF8JpJb1QQm2Wbh7cZio9VyoMI8AvM",
                'transaction_id' => "269591ac-61df-41d3-b889-227e4a3e2111",
                'private_money_id' => "1d7b742c-64b9-49ee-bb0d-b5ce8d65be93",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "topup", "payment", "expire", "transfer"],
                'next_page_cursor_id' => "1a1019d5-9e2e-4a54-a331-119cfc90c95a",
                'prev_page_cursor_id' => "a6962d25-a46f-4b67-96cf-e17c2d8c08eb",
                'per_page' => 136,
                'transfer_types' => ["expire", "cashback"],
                'description' => "1OK2jIlJxu8sDuyuhBK3AAb2TEV4SUkPgWnGyIDqOeaKUYRitrBu3USgM8JC8B1VTGrGM5dG6JmQbgdLBA5qdsqAztHIhphGWX2WlFk6HpghOiY6ih5BidS2xsi8OOcn8FXd1jydD8MlCgHSn8gtM91RFRuTYJ222hvIzSGRf03HzUF2AyZmspigAD6GlJrTdqAyO",
                'from' => "2022-11-29T19:25:55.000000+09:00",
                'to' => "2021-02-20T04:26:35.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "2diySEUzYMp7zdZ0L3FEG21qvmEPiHcJp8RhT8xH2U6hYaEKjULgyBWuDfy9qlOTeyi33a7PlMB7BW8jBvThO75K952XpO0YF3iSXkKtehbwkIOE3XZSFIav4gjcmQP4qTLMEasvsBAGCp2KMGwoBoPrVLWEkMzXVdXGmLbJsPa8rz4m8x5fvwECIAeLzMUFS0qRIJcewDDpVofbgXfgrX84hBxGYbBv2ZS64E",
                'customer_id' => "88d88e2d-365b-41c7-ba61-67a5ffa39c0f",
                'customer_name' => "wjewz38Sf5vEkZJTWt1u1FS1c9i8jYm4LdQRHtY143lfUQIkPMVg2IcpYx9z23SKlVjvQNPaoKLbPs78Uxxqwd6vb1xZw15E09xBpKjveFr0fKB3e9YhQQwtBLsElyqcMrH6afdhDCu0pnQO7Wn8otKfQNo",
                'transaction_id' => "6a174962-8eac-40f0-a94e-fce1524998fe",
                'private_money_id' => "137875b3-ae68-4848-87d4-470e035fb0ba",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "exchange", "payment", "cashback"],
                'next_page_cursor_id' => "18f6bad2-70aa-4424-886f-51f3c2dc9b9b",
                'prev_page_cursor_id' => "26374dce-60bc-422f-8986-7d97099f61b3",
                'per_page' => 498,
                'transfer_types' => ["cashback", "coupon", "transfer", "payment", "exchange"],
                'description' => "qis8WNaQM4UPGUoGtiLKwP2ppqoW5lAYbarBzpRhpv36GszBiqgWf5Fnk177gri60cxuCYgry4ItKQiqXyXUMvYBF37dm4A4euNxrOD6FKMkCw5v1WstnS22FF60fksUp6ng4yTqery2ReYQn6gLGiYMPyFAyApSOtb5DFbLJZgGcuZ5",
                'from' => "2023-02-21T15:18:46.000000+09:00",
                'to' => "2023-10-26T18:49:09.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "9bfbed7e-4fe0-4c72-b710-04986c2b1dbc",
                'shop_name' => "v8utTiIYmtKsDnKpyHRP7lnDWkqga95IBpekXtcsGBdJxyOlxOL3djCzP8GaBLqrjmUVo8LQEs6j3WAiGwpuW6U5HSTbzMDyFmD14uVOMd1bOaYmfdVyyu6uBGCE4oXLT132PPsQcFUleu4sKRa2gHnz1OMeR1xyBfQNa7R4tlZi8wrPeD",
                'customer_id' => "7fb229d1-19be-4279-af95-a6bda7376a88",
                'customer_name' => "5ngMaFMYSaF8Xn6KPvFW9CO5bmiFyyZOOOoGAPn2tp4pWoRoXYEdHj6ELvbxjHcJ2grAGIItXwNvL7v4vdwZofJrPasRlcrJPg8xz5UjSlCnjJfaLd2wxb6j9J3s5F2tz7jATvc8mBWWq3PgFOySQeBUDOJLn0uPLTlikfM",
                'transaction_id' => "3c399f1d-14a2-412b-b900-36ae0cd7dec8",
                'private_money_id' => "554ccd2b-3370-4477-9bca-ec3d8ad6d598",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "exchange", "cashback", "expire", "topup"],
                'next_page_cursor_id' => "b238fc9f-3d4c-436f-9418-cd570de06ed3",
                'prev_page_cursor_id' => "6fb5c210-d247-4c04-85c6-5294f318eaee",
                'per_page' => 329,
                'transfer_types' => ["transfer", "topup"],
                'description' => "iVTLAjopy1IMVzLYE7dPvfzEtS18ipmy15NcztEmNgQ85J0xkeJjeStgiA9wx73R0jFD2LjBJxmqIbMF3sIYVvyfP8hLBeRDucOh6POSzzXjaOAbGO0Jw9Ld5VU4VgceAjTmuUcz51ICJKus7qLAe06kuVzeYL3zUW3eJdom1HSic5JkYCu52p5GW3VXq6",
                'from' => "2020-11-24T03:28:22.000000+09:00",
                'to' => "2023-05-23T14:50:07.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
