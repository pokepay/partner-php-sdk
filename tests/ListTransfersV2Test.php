<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2021-07-26T14:14:42.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2022-03-10T03:23:14.000000+09:00",
                'to' => "2021-01-12T07:56:35.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "oOBsOJREV7Qc3tYooycAMgaVEnDpWFZZ2CuhGeLGst5IK8umZHlKGuauHyuSWKfZ7dNf7MrJ6dK6ahKwIBuGedPp9j5aUQjWRzXbTNPFf8wsWGSRwmw2ZVYGKsTtHIEvErthVl2irYSP28cOqITvrYwVfkf3L6RD770OinJocPm8e4mCAaJ",
                'from' => "2023-05-01T03:02:31.000000+09:00",
                'to' => "2020-03-01T17:39:40.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["exchange", "cashback", "transfer", "payment", "coupon", "topup", "campaign", "expire"],
                'description' => "7wiKzDVDD9duiD1VUZTyvqQY2ZGv3Tyl",
                'from' => "2022-10-10T15:10:27.000000+09:00",
                'to' => "2021-06-18T08:52:50.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 775,
                'transfer_types' => ["topup", "campaign", "cashback", "transfer", "exchange"],
                'description' => "RFOqeUqdma1DvoZf484PHB5nD83TukTKlVm9ioqN3kTQQ1ksEimjV",
                'from' => "2023-06-22T18:28:11.000000+09:00",
                'to' => "2022-05-10T22:44:54.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "34e60553-cfba-4710-8ce5-f799e7980853",
                'per_page' => 508,
                'transfer_types' => ["exchange", "payment", "topup", "campaign", "expire", "transfer", "coupon"],
                'description' => "95pByfcgP1qbRjRUCHRVPy5j3urMWzHvTF9V2U4VNcGeCdM81RAvyVL1VHWvM9YUmG4ClaqJyHP6GDkCrFVFGltasgcJY2t8twec8rU86LdQiScaxxF8zZ8uU7me5zM7lW1ZusqwCkyXnBPjeLqhPKoFxTgsSobRPgE6NfjNnHY4nd",
                'from' => "2023-11-20T10:36:31.000000+09:00",
                'to' => "2023-03-10T00:32:46.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "8222c58f-4dc6-44d6-af1d-56400d5bac29",
                'prev_page_cursor_id' => "aba09616-78de-4dff-bcca-d6218017e737",
                'per_page' => 706,
                'transfer_types' => ["campaign", "payment"],
                'description' => "PvnpQZj3ZQEn",
                'from' => "2020-02-18T06:31:54.000000+09:00",
                'to' => "2021-01-09T10:01:15.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["expire", "topup", "cashback", "transfer"],
                'next_page_cursor_id' => "b9489160-8311-4cc2-8833-08af7efcc622",
                'prev_page_cursor_id' => "1c112953-42f8-46ba-a383-e48935004394",
                'per_page' => 249,
                'transfer_types' => ["cashback"],
                'description' => "BtxO8L2aP",
                'from' => "2020-07-16T14:58:42.000000+09:00",
                'to' => "2021-01-21T02:59:20.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["topup"],
                'next_page_cursor_id' => "8ac142f1-633d-4620-8005-85e07eb1d9cb",
                'prev_page_cursor_id' => "e77ddbdf-bde2-42a3-a8eb-ffb9f514a621",
                'per_page' => 539,
                'transfer_types' => ["payment", "expire", "exchange", "coupon", "topup"],
                'description' => "XWlHtEjrOBuLNc5dgQAbBuR84EL8QuAUtaJFrlvl2JoOURhlqvIdPtKG2buZ2NPftNkqdcAYwC0hb433z1wtIBA3s3JNIZlmkCw9EelLbvnd9KtjtiEv5eWmTVeitRPDNVcGt78fXwfP",
                'from' => "2023-12-16T03:33:49.000000+09:00",
                'to' => "2021-09-18T00:24:10.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "9f7c2546-2449-4061-b92d-dca9dd0d4bbe",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "cashback"],
                'next_page_cursor_id' => "942a21bc-fed8-46fe-ad7d-ea8c888ae55f",
                'prev_page_cursor_id' => "61fb3220-149f-45d6-9206-dfb3cb360ddd",
                'per_page' => 175,
                'transfer_types' => ["topup", "expire", "cashback", "campaign", "exchange"],
                'description' => "Zhlj6Q3eAN314DGq8Z4FkMYdwBhB4oyvtmVPLLYVy9qM1tBeEXzjadYOBUJFok7h2WV3iJCs8R3uEOVGSNUspQEMXeHr7WHHWvSaO59RF1sDr3bNuQL2HTPQXepTJqMLYnvPHFUKCfapqGOSegyAlP4nVWguQ7qlPMowowiU0iUt3R4Sr0HlY4",
                'from' => "2022-02-08T00:08:22.000000+09:00",
                'to' => "2023-09-29T17:08:00.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "121d87ee-f6c0-4833-b9be-9cbf278176f7",
                'private_money_id' => "4c967bfd-be8d-4ec5-ab5c-5447f7431e32",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "expire", "exchange", "transfer", "payment", "topup"],
                'next_page_cursor_id' => "9bc0314c-a583-450a-bd1d-07dea735f62e",
                'prev_page_cursor_id' => "16efb3c7-fae1-44ca-8642-85a26539a0c2",
                'per_page' => 150,
                'transfer_types' => ["campaign", "topup", "transfer", "cashback", "exchange", "expire", "payment", "coupon"],
                'description' => "wT0auuAidGFymER8mzB7GrO5UrvLECYxa63iUfnT9CyESM90vk61n662WpkeIoN9mILuj8O7xym30eLHOrllOnvyHwAw4MFYZ1J8AKHMSu7t",
                'from' => "2021-04-29T22:45:33.000000+09:00",
                'to' => "2021-06-19T06:14:14.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "RRg6C5oYx79TJaAETwGCCDh4zgpz82gFj3JsXxFeujC2ewWnbu4F4PIwIhQ3kjlr7EoD0CSmN13OaRwXTnhTX0zJMazYl5jEgLeX3dV5crpAI04pY0fDJOr8yLCz5X4oO8OFa16J7QVHZJ7w3sPPB5q4KMO0NatryHrIuDU",
                'transaction_id' => "c099dc1c-d36e-422b-96ef-1c68f234b0cf",
                'private_money_id' => "48db2ca5-7476-4587-8a3b-d20cb7ca00c4",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer"],
                'next_page_cursor_id' => "681108b2-3e60-4585-b1aa-d1ea75a1195a",
                'prev_page_cursor_id' => "bd50155d-a086-4866-a7e9-1cfa85ec9e06",
                'per_page' => 315,
                'transfer_types' => ["topup"],
                'description' => "RwNAb2Ga3SoJwDKx0CtcZoGwbcwLnt057HY5AZb54zhj6E4mLp4whzDiC11WO52Dpp",
                'from' => "2023-10-03T22:20:46.000000+09:00",
                'to' => "2021-09-17T02:42:45.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "0025b15e-f5ce-4a3d-9849-bf156caa7795",
                'customer_name' => "uuk7wlGVSVqSoAuU9v0eXVFRIFJebAGtGitTK3QRDePs1BvACOhxcg1ci5EB29hCowaOjPhu5aMMCyLc6GIHHvBryDoy0F50yY4lbJmBOYcdCxRAkubthZMlGdCyfSSVlj",
                'transaction_id' => "8a0280c9-cd05-490a-aac6-902ffa133992",
                'private_money_id' => "336b01a2-5074-4cc5-8958-51fac9ee761d",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "transfer", "exchange", "payment", "topup"],
                'next_page_cursor_id' => "33c9ea38-fb32-4b0c-92e7-def0f3935bd5",
                'prev_page_cursor_id' => "4626c282-1caf-442b-a881-8953642ce6be",
                'per_page' => 397,
                'transfer_types' => ["payment"],
                'description' => "UkFAdWhYUNTKPHKfAv7CwlZCl6UezIKWw3804HG1BumNS4RSELE1QFpP8HCAZNf9rKY8PVpiqsqjtNVtIJ84h9RqnliBcEaKhvEWAooUw4js0twf0ExqqqrLzOtj6pcWEkV622Vs",
                'from' => "2020-06-16T11:57:04.000000+09:00",
                'to' => "2022-10-07T20:10:19.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "kOz9ayYxZde9ABT6gfq8JCor7vGcrSp2mpDj4GXg7o1hjQ2h15doP7AyzPdX63IhYlHiCVftLOvNNNV3Hcr3ae3YdDA0n71OzWU6qlzt8pZHbY4OdPDUHotMmDm",
                'customer_id' => "89e4d13a-43aa-44c8-b73c-71da34ff7ee0",
                'customer_name' => "x0yQJpgSYi6",
                'transaction_id' => "4a8c57d9-d028-463c-acb1-aaa57f8da4d6",
                'private_money_id' => "21f2a9e0-5e91-44f9-9ee3-80a888c89365",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer"],
                'next_page_cursor_id' => "ebfe96b6-446d-48f7-826f-31815b82a4a2",
                'prev_page_cursor_id' => "6ff9e317-bd73-4895-b01a-fa2e8ecfce81",
                'per_page' => 959,
                'transfer_types' => ["transfer", "expire", "cashback", "exchange"],
                'description' => "h7nNXLF8N0upFLhzYbra78poNVieB0UCL6kwjp87Z4a9petASGQxy1dn2Qt4zvKxOUlex5vUdrlYDWGqaFMmZiFv981JO2BT5lq97IUJYC5bgNjVt6YWRZbvDKPmUS3hJExTjWIW1HQqyaPA7d15dzr7ogU5QQF4Ea1gB5lSBrcGKBjWce4YbynjTYTkr3zWCfg",
                'from' => "2020-09-22T15:32:31.000000+09:00",
                'to' => "2020-01-05T15:18:32.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "e1d22efc-e3e1-44e3-ac69-f32d177e4dec",
                'shop_name' => "KubaUneeWIAsxxZZzcexCmjPS9AVCrKPUmMyPUhqmZ6VtaVB6CSh5h50awTEvEg0VhMegy3EiVvcq5RxsYT8K59jpaptKJoEaHUDi54OXUfVoAhZR4ZOXYYF0zw09x0gencqHUvoFAzdtRbDcMIHxhlpwRmXxZgzllMZOdw3Tmm6TKb",
                'customer_id' => "7119cfa9-d35f-4b03-b13d-a89f6e167447",
                'customer_name' => "SoDRZW3sXyxqAtfhYvwLU2nKjLoNyUD5TSy7nT11jcaPprojQQD7E4uwEDEsdAfQ1fagSZ5us3yunqu3r3lMmvamk5nXYwCmp2PZSM0DU8LS1YS80R9FKb3FyKaJr5v1VJOC0DJvUv",
                'transaction_id' => "b8e15270-7fdb-4f04-9708-9c14ba3addd2",
                'private_money_id' => "7e865db8-b7ef-4abd-9fc6-c125506033d1",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "payment", "cashback", "transfer"],
                'next_page_cursor_id' => "b7b7aa17-5ee3-4412-9fc2-8a8346e74fb0",
                'prev_page_cursor_id' => "2160b56e-3a48-4a9e-8f79-4b51134b16a5",
                'per_page' => 834,
                'transfer_types' => ["payment", "exchange", "campaign"],
                'description' => "9aXAGmbnZDl8EH9jH4ceWXsDd2Ag6rx2mAAM6edUYVHCOK1xPLFPixdeWsWma",
                'from' => "2022-07-08T10:27:05.000000+09:00",
                'to' => "2022-08-02T06:58:00.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
