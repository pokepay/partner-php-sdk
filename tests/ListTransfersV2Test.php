<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2020-11-04T18:10:09.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2023-01-03T04:36:35.000000+09:00",
                'to' => "2023-06-05T15:36:45.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "M1YYILKzNeTMSRB1pYUpRzdqtvjyjrrwFOHuoPbc9K2DcxqAaqgY0eUhMevoxLJ9pOEQZarEd2m3f8nPbqcf1Ul8e90ysvnyRtdk8y5fKTQfWh9RxNmoZ8jKOM2tzGaWRPtuXYb14U4kqSsWHzztTwHXacN0AsTms7apBwrdvKBIxJKCH9uqiLiF3rGNQItA",
                'from' => "2020-05-27T19:33:44.000000+09:00",
                'to' => "2020-07-15T02:29:06.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["coupon", "cashback", "expire", "exchange", "campaign", "topup"],
                'description' => "iaQo1uSMzAcOCRkxRjv",
                'from' => "2021-11-10T02:27:31.000000+09:00",
                'to' => "2020-03-07T22:12:44.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 474,
                'transfer_types' => ["campaign", "cashback", "expire", "exchange", "payment"],
                'description' => "kGk2wKaerDFHG9UO17M4t",
                'from' => "2021-02-06T01:13:22.000000+09:00",
                'to' => "2023-02-04T14:41:51.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "7d2e96fe-3330-415d-b946-e9497678f2c6",
                'per_page' => 909,
                'transfer_types' => ["cashback", "payment", "exchange", "coupon", "expire", "campaign", "transfer", "topup"],
                'description' => "CKT12jHe2sK22Xnb26jIVWZVQPtXjMDZsgr7bp1AqOe91ON0DxaC1eoVR3lnOUUiwgzWoElHsZHmlIDZWD7cRwP5xWpmINtEAAn3DJTHdAWUUlPjIeeiw5ZMmKDwBaINp7lEenC5dutjIuPx",
                'from' => "2022-11-15T12:25:21.000000+09:00",
                'to' => "2020-02-28T11:28:14.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "e0e5d76e-ba35-4159-a551-ec122af47e2c",
                'prev_page_cursor_id' => "aee8f585-ea65-40ed-adf5-4b1dd7278608",
                'per_page' => 27,
                'transfer_types' => ["topup", "exchange"],
                'description' => "Ijk0JLpZORivJNIPV5aBTQzp3MM50dOaqlX",
                'from' => "2021-06-05T18:44:52.000000+09:00",
                'to' => "2021-07-21T04:59:56.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["expire", "topup", "payment"],
                'next_page_cursor_id' => "b63a0b66-ac21-42f0-9abc-6f25fe67f1fa",
                'prev_page_cursor_id' => "f2be44da-2808-42d5-92a7-83d1cbf74f0a",
                'per_page' => 215,
                'transfer_types' => ["transfer", "cashback", "exchange", "expire", "campaign"],
                'description' => "iOnlo3wxMeC9E9tLJcZwOCa0EB57pXjboPySGMSw61OpR",
                'from' => "2021-11-19T00:04:35.000000+09:00",
                'to' => "2021-05-25T21:33:31.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["exchange"],
                'next_page_cursor_id' => "32e55a47-8eae-474c-9a84-203e2402851b",
                'prev_page_cursor_id' => "da0a8361-804f-42bd-b5fb-8b5eba0c29b0",
                'per_page' => 29,
                'transfer_types' => ["payment", "cashback", "topup", "exchange", "campaign", "transfer"],
                'description' => "hpGGLcybiCdMeiN005wqlG128Y80zuhjVDhd2pJkXzQ7VXA6uGY5FcfsVKOZztzme3qoevEJn8UjwZvGdgO887KnJGdxo7G6QfTYczDOmoIC9Spc",
                'from' => "2021-03-05T09:25:11.000000+09:00",
                'to' => "2021-01-31T16:16:05.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "76f4123c-04c4-42cc-b932-cf309c72d0ed",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "expire", "cashback", "payment"],
                'next_page_cursor_id' => "87b45322-4ad6-475c-aea2-f69680a21414",
                'prev_page_cursor_id' => "ae4c2cd9-a9d7-4c26-95b9-72eb8ba48826",
                'per_page' => 458,
                'transfer_types' => ["coupon", "exchange", "expire", "cashback"],
                'description' => "WsetordOXB4wJQAZZTjj5KT3oXUbDrCEMnUoMJbKoYHnpC8pXDq2l4za55PbUdAJ7zTPls8cByk8eiWG3FPUus2kjYE8NnOh6m",
                'from' => "2021-11-15T21:45:33.000000+09:00",
                'to' => "2020-09-26T08:41:13.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "84e2814f-82c5-4b96-bd76-52c273d21ce4",
                'private_money_id' => "5ae7a6ad-1fbe-4662-9bd4-32bdb767158f",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "exchange", "cashback", "expire"],
                'next_page_cursor_id' => "1df176b4-bad5-4cee-a8e8-f0cd599356c6",
                'prev_page_cursor_id' => "dc982170-bafd-4fbd-acb6-25d7cf0736fa",
                'per_page' => 893,
                'transfer_types' => ["expire", "coupon"],
                'description' => "hODswxTqcRZPAGQYJPvkXADjoZq2OE",
                'from' => "2023-09-01T02:05:51.000000+09:00",
                'to' => "2020-01-06T17:43:36.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "RyA1WWTemUlowCDWMa6F2j6Zcil8QpbXtv1e5zG3CZS3ASWKqrEQQn8FjSXDIZYyJBm1DfFiwJX6ARSiLhRBk4fCmHoAOVjumsEBNi5JQKbuzQbCTTzMyj3VdETXw8GPqeZUSOAzAYc1GQhu7PjTLvz8VboAr8rixMkUoSHtPFlXrEnwFXvZM2xCttr",
                'transaction_id' => "1672840f-9928-4150-87f7-2b05996bb5f8",
                'private_money_id' => "df4d24e4-a3e2-4b76-a6a6-3021de7dc8cf",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "exchange", "transfer", "cashback", "payment", "topup"],
                'next_page_cursor_id' => "9e40e526-c0bf-4285-b99d-e86ebb45ea78",
                'prev_page_cursor_id' => "b978b24c-0e5f-4533-80ac-8af90c99e412",
                'per_page' => 451,
                'transfer_types' => ["payment", "transfer", "coupon"],
                'description' => "nsKjaqExWyVJ5mYxstBjMBgKnWMXc4wrQrwbvxzytwspq9xDi6SNzh9KdnSmSp1cinkxbXiPKvpdsm3DNRTpiCNsEzoO8DMWWVQy4B4nlMNu",
                'from' => "2021-04-12T22:18:35.000000+09:00",
                'to' => "2021-01-09T02:25:08.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "da7bc904-3545-43d6-b8bb-fdc93c471066",
                'customer_name' => "6mBerPSdwWhY4cajhT2jq9YTlQ1skPr3cmAKq3ptp5rZIH92nhwbLrTnxMtSMfcKxuAqqWFfBwsZGPxkAtOJWKHTb7EnzFWwilLeYKSAYxRJxF4B6JMhplWA3Pmq44zvGv2plOsrxJWYVtYTO0QKw3CWISZBaQDwjACFBAPdDNzwZ3iRKfkr4GHkf8P4ISxp78senjKEbnJkM7Edi3AZRidKb",
                'transaction_id' => "f150ee49-0346-4a68-85dc-1ab73bc5f22f",
                'private_money_id' => "1cf4b78f-b81b-4d95-810d-8c78f32d73d6",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "payment", "transfer"],
                'next_page_cursor_id' => "0f634b02-2eeb-403b-a1bb-20ada3bbba91",
                'prev_page_cursor_id' => "93715456-9f1c-4510-b3bc-1f6f8c8cf4bd",
                'per_page' => 413,
                'transfer_types' => ["payment"],
                'description' => "eQPYgZJkYTgOy2Gq9WodqGV3kd8JZcGo1LiT3M5ZClr20QPZuuF31oqWJPSU4x6jm0Iqf6B2ihWJpm8x3mPFrigO3iee5QXXr36RBTK0on8OzngitsNvSkiBAFaBrx",
                'from' => "2021-02-12T14:03:18.000000+09:00",
                'to' => "2020-06-28T16:46:43.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "UwN2lg9smmZkieXvVR5mogtpP6nUudKUJzxAlZNfGRBxBcJbWYJWkp2KOVSDboQ0Sve8J7BrAb410zpFAFX15nXTfDGyqh99Vd36FOZDodqjNHAboTzyLshValeZMTLn16fmbIYEtucicJr2ZVXclELOrGESeyXGzrtkTwMCi7B2dugAFr6sIFDlRt2Mn9HhrZaF564Pvq8Eb173vdt9ajXPM",
                'customer_id' => "619dc607-de1c-47d6-aee4-1e2cdad45450",
                'customer_name' => "bp9qvFiyq1cuEBtOwx8FUfsNRln8ik8DcHFqjpc7gk6uknPKM",
                'transaction_id' => "c4107b41-796b-4a1c-9b09-3cf33adcf18e",
                'private_money_id' => "2de64cec-a13c-4ffa-a0b2-7c6547a0d2ad",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "transfer", "expire", "cashback"],
                'next_page_cursor_id' => "57fb074f-70cb-48cd-97db-664e773d1256",
                'prev_page_cursor_id' => "6aafb2f6-71b7-49e6-ac6f-805031c7ee10",
                'per_page' => 202,
                'transfer_types' => ["coupon"],
                'description' => "mazWbHRVX4JiF0VeOTTKiET7JiYcG3uS1LX0LOcyxVI9CRrtDtZ4edXGpSU78v5ffOUUQ7woLAOPXZByY8nQ3DlbXvy9OSXfGQ4Qave4uH",
                'from' => "2022-12-26T22:34:43.000000+09:00",
                'to' => "2021-12-01T01:56:59.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "933319f4-c92c-4bc5-b6cb-e7a068dc61ff",
                'shop_name' => "V420emWv3QqH4R6VDTDVfdiAXVdgN9DZ9v4kbQFysa19fDxnqybhHvy13qXVTMyALsFrmMA1AZB7QBygXX7nz4E01aRKAkyyc4RTN23dD71RAJszW9q153vudYi4m2syPgLfFKjEuU2w5croiWKi8dIDhi22xX20xTj7qtTESJJBCduLchuQgBaflsDDsUqSL5uLbrLD0SRvy6EASalP1b80euyUwMoKB7L3S5BjMd4wLhu7MAitjVnoy",
                'customer_id' => "325a3bcf-48bb-4808-8569-59f8b5e1ae33",
                'customer_name' => "WfnOEZQbs4Gf0yYu3n7SQZeQWnqCuOArG33l7qb3v1gqjx5Jc8zQJWsgKnVtexTE46ii4IP7mfAvOKSSiFS92zjZzvSj6OhelGPLFtiWMDbRt2N1YrwK0iyweLiRsKZdFFVAaURz3rUoC8J8IuMFil69AHfeE3db08d5cRU320Tga9q3Z0gvlMnVnKV3ZUqcmjqVa4wENv2C91WIJHPlGxkfOuHquqdTSKY4bsimcjNDeFLLMWBN8Gu1eV",
                'transaction_id' => "4ff805b1-eeb5-4322-94cd-b39193826780",
                'private_money_id' => "6ac967f6-3e9a-46c0-a0b3-f9a1de7028c4",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "exchange", "payment", "expire", "transfer", "topup"],
                'next_page_cursor_id' => "d07ab360-1de6-4900-8e5d-507a3104a297",
                'prev_page_cursor_id' => "f4d9479c-9f7f-40fd-a007-01a9849c1c02",
                'per_page' => 844,
                'transfer_types' => ["topup", "cashback", "coupon"],
                'description' => "ADHsquvTDdbgHj1l5Bka2sMh4KczQL477Zk0qGc80nbIWtVVVXfUuvfcMt4HohIX17ZubIQ",
                'from' => "2021-07-17T01:14:37.000000+09:00",
                'to' => "2022-05-21T17:14:58.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
