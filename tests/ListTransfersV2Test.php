<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfersV2 extends TestCase
{
    public function testListTransfersV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'to' => "2017-03-23T12:47:17.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'from' => "2024-06-20T02:27:27.000000+09:00",
                'to' => "2023-11-22T21:40:22.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'description' => "GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7gIcLSudPl4JIrQmLFWJxcGB9NLriuIsMTYyCUoOEa9YZaUNPTMagDSPeHLGCGYvgqbqCIdoPTyGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1UycVd",
                'from' => "2025-02-25T18:26:46.000000+09:00",
                'to' => "2020-07-08T04:02:17.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transfer_types' => ["exchange", "payment", "topup", "coupon", "cashback", "campaign", "expire"],
                'description' => "Rve16qe5BUa3mrtCxkktMbdZ0Ff5nebRZC0vDYNEWMfxXSVHRY4YZdsEswklf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29",
                'from' => "2024-06-27T04:56:51.000000+09:00",
                'to' => "2020-10-02T20:29:35.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'per_page' => 431,
                'transfer_types' => ["campaign", "expire", "exchange"],
                'description' => "wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3jVYhbh4RW4SjcPHu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9",
                'from' => "2020-02-10T15:36:02.000000+09:00",
                'to' => "2017-12-28T09:31:50.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'prev_page_cursor_id' => "02cd7763-d8c7-47a7-8a24-6b60b2a34526",
                'per_page' => 520,
                'transfer_types' => ["transfer", "exchange", "coupon"],
                'description' => "hTjY4B83KCbssdnciBK2yKUyBpazsFHLyP",
                'from' => "2018-11-02T08:56:00.000000+09:00",
                'to' => "2015-12-31T21:42:29.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'next_page_cursor_id' => "b47c852a-6cbf-4957-9357-eaf28be574fa",
                'prev_page_cursor_id' => "191c1f1d-e0e9-4912-abc8-dbb04cb6afbf",
                'per_page' => 325,
                'transfer_types' => ["exchange"],
                'description' => "ndCARX9iZhUIwUrsQ8Uijo55dyiBxXbKWYhqIQcADAJhWFwASll2hGkEzj",
                'from' => "2017-12-29T21:36:23.000000+09:00",
                'to' => "2016-06-06T12:11:39.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_types' => ["payment"],
                'next_page_cursor_id' => "c74b9c85-f127-42c8-ae7c-c8c375e7037b",
                'prev_page_cursor_id' => "6f9dcad5-c341-44d4-87c7-1bfcbc47747a",
                'per_page' => 636,
                'transfer_types' => ["coupon", "exchange", "expire", "topup"],
                'description' => "hucZ4e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uvaLnbw12Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYmrCrWwA7IkDmk9acr8tX9JQSHyiFoseHqYyK8GIOW0PGU45uzPdd",
                'from' => "2024-06-16T20:54:50.000000+09:00",
                'to' => "2020-02-14T22:04:53.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "topup", "cashback", "exchange", "payment", "expire"],
                'next_page_cursor_id' => "f95241d5-6dc3-4d1e-b062-11712cc24409",
                'prev_page_cursor_id' => "9d6dc000-5f8f-4973-b168-e99671a9fb3f",
                'per_page' => 665,
                'transfer_types' => ["coupon", "expire", "topup", "exchange", "campaign"],
                'description' => "I8evbrAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQNubIdHetIBPUrvpeN86f",
                'from' => "2025-08-15T10:55:34.000000+09:00",
                'to' => "2016-10-29T06:42:28.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'private_money_id' => "5f85c6b6-4c5d-4d74-973b-d8e7e89056f9",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "topup", "transfer", "payment", "expire", "exchange"],
                'next_page_cursor_id' => "d5359b4a-9528-49da-a230-bbcbd6e0f282",
                'prev_page_cursor_id' => "d601da2f-1f1b-49d4-9cf7-7fd7c4c7a34f",
                'per_page' => 90,
                'transfer_types' => ["expire", "transfer", "campaign", "coupon", "topup"],
                'description' => "zfsIiIDCSxoowqwobMRj4K8plKuk4zON6lsKCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRWCYsw6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWpRkphzntqbTr2vHF1iF0Y7dBxe8hiTzwkLtzBfAa7kaQm",
                'from' => "2016-08-27T04:52:09.000000+09:00",
                'to' => "2023-09-04T10:01:52.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'transaction_id' => "fecd111e-f1aa-4281-b65d-36d58a63a30a",
                'private_money_id' => "df0206cc-b9d3-4196-bf79-6331bf6f04c6",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "expire", "payment", "topup"],
                'next_page_cursor_id' => "5571078c-1b3d-460a-a4f5-c225c3963f38",
                'prev_page_cursor_id' => "1778befd-705f-4db3-8e05-e322c437c7b0",
                'per_page' => 577,
                'transfer_types' => ["coupon", "payment"],
                'description' => "dpbMjOs6NsjUaiDroY6Q3IK7BQ6AmswdAM3IJrwVbs9pMxfMCthiv1a2EEHFmQw4OmJsXraAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5ozHDn0iOeoWIRRMyR0nQkh8Zz7eaFGoiOPKR0rUW9UTcnGDBs",
                'from' => "2021-01-20T13:42:04.000000+09:00",
                'to' => "2017-12-10T23:20:14.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_name' => "fABdiNvfS9Anufij6THnocikBJOkD3FvwnaI0WeOGlWmmegc1KGhe3TxnuKac7CS1DK4Gnrr3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u7tOxquneNatGolCf6SjeF7SeZXyMS6WkNJ2GvSwQUcruYP4H5cCw5ExNqh41OXXFwVmaHYw6oEFbK8qER1LlAIi5qYT",
                'transaction_id' => "5b075671-e598-4d9a-a5c9-1dcebd21f698",
                'private_money_id' => "027c2a39-b2fd-436a-9a14-393ca85b7701",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "topup", "exchange"],
                'next_page_cursor_id' => "09b4c4eb-10a6-4b7f-9b93-b65a71056544",
                'prev_page_cursor_id' => "82332dcb-9f43-446e-9e51-8c69dc9bb2df",
                'per_page' => 616,
                'transfer_types' => ["payment", "transfer", "campaign"],
                'description' => "0tecRrYBgXoYNaRDH3xa5ZXl3L94kmDiQZVmfdCV9wGJUR",
                'from' => "2025-01-10T15:03:00.000000+09:00",
                'to' => "2018-02-08T19:41:11.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'customer_id' => "4b5f8622-44d6-46d4-8e0c-04f3ca63232a",
                'customer_name' => "Ksbk2wvZcZmJCZwuee4w9Rkvag9C19xRl1IlJpGXqlhd5uwOg53j3Qic0iyKLnZxaZi9iCa2kj9IDD4FLU53H4cTCafuN856J50SdiADG37eydGENMPuS",
                'transaction_id' => "230f5ad5-8ca2-46fd-8740-ffc398531b50",
                'private_money_id' => "dbc3bebf-c3ce-48df-955c-d7c80ef2a7e9",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "topup"],
                'next_page_cursor_id' => "545b702b-86b3-47df-a414-e85e9c134ac2",
                'prev_page_cursor_id' => "089e3457-baab-4b87-85e3-9cce340fb9e4",
                'per_page' => 402,
                'transfer_types' => [],
                'description' => "SVztCspdpKcDGU85LATApzQ2dQG1XtK0UfX1fzmKZw4jAX5TdVMZA3FsBWHTaR7q8iHovbTWoPNbCUX3WmvU0lnYW7MWulxJqejEoXiemEzy22TP2wtSY9IoDSrJUA2s",
                'from' => "2021-01-24T18:30:51.000000+09:00",
                'to' => "2022-06-24T15:09:18.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_name' => "sOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv36YuE4jwp0IiR44I5KLiOrRKq3qxtTGifN6KrraD5uojwDmQdLNOKHIlDiaOh78QfhNbZ3YfGhlbqaOElvScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glX",
                'customer_id' => "5736f021-0542-4892-8525-c07b3d6583c5",
                'customer_name' => "rIUB1p7aPMzXnAdDrY96Gn0OAQ9xSN0zfKx7ivixiVqjgvBNcsQLQxAtJmVTcXWtKUzkNd35gyuBKlwozbM8BIp6WWFtoNM3mKKWyblmmAHRSYCV0EDw10SY48ZoA8oj9alrEKYDjBWPKCwbirzvScUvjsqVkcSInvOjFPIL9qlVMwg0ANEHCj5eM805Swtsg",
                'transaction_id' => "e465405b-8eb2-4d06-8e6b-af876d40d9ca",
                'private_money_id' => "af6583c2-602b-4916-be84-17c452d5f1f6",
                'is_modified' => FALSE,
                'transaction_types' => ["topup"],
                'next_page_cursor_id' => "d6f8bee4-11cc-41bb-961c-fef10387c194",
                'prev_page_cursor_id' => "731c951d-4033-4b51-ba6d-5948f78d7b1e",
                'per_page' => 96,
                'transfer_types' => ["campaign", "transfer"],
                'description' => "idVG7B6hajGJrCJBxTKH0YUW8iwJJuJPCjlaztijN3vebjT869RjYRPCqvnZ1YzdrhGH7XKNoGDpqqjYUa4",
                'from' => "2020-10-11T23:58:50.000000+09:00",
                'to' => "2024-11-01T06:45:46.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfersV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfersV2(
            [
                'shop_id' => "2e02a13b-05ce-4598-b71f-cbea8095cee0",
                'shop_name' => "WbTA8sT9CjYdhYyR9ZtWhMAKSZHQ2Tjahc0hASAcEibjku1fdQetgL0O7DlAFrkX",
                'customer_id' => "696103aa-6556-4c1e-9de9-349de7bdaaac",
                'customer_name' => "IdQWu7J4NYirXryPP6taqbm6hsnA9hELkacVB4dzDqQ1LbTyVIgVP7fIz1xemnrDx9P7HPwLX5lwWZKuWWf4n5wNPq2rjN28QfQLnQ9Qr2gs4rAyEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dI",
                'transaction_id' => "bb11ba63-d4a8-4f51-81cb-c57461e55c1d",
                'private_money_id' => "68472ae7-c350-4bc5-adf0-84f4c4e1e50b",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "expire", "topup"],
                'next_page_cursor_id' => "3a599482-a775-4703-84a2-4bb07be4f416",
                'prev_page_cursor_id' => "bd2bb82f-1dcc-4849-b490-971c39efeb21",
                'per_page' => 597,
                'transfer_types' => ["expire", "cashback"],
                'description' => "453YpOK96E",
                'from' => "2025-02-14T23:59:51.000000+09:00",
                'to' => "2017-10-17T12:55:14.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
