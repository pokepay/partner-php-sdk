<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCoupon extends TestCase
{
    public function testCreateCoupon0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 9214
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 4218,
                'storage_id' => "56916a8a-f02a-4d76-87ed-31fd5d8db59f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 1510,
                'min_amount' => 1830,
                'storage_id' => "65375f34-3e8e-4b36-965a-bdff150e608f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 3505,
                'usage_limit' => 3621,
                'min_amount' => 7263,
                'storage_id' => "e6ca1967-5dd2-4efd-8f6f-9fb7804b5d7f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 6279,
                'code' => "DwwPoswLPr",
                'usage_limit' => 326,
                'min_amount' => 2796,
                'storage_id' => "3e5abddd-282f-4612-9b28-1bb05661efbe"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 4408,
                'is_public' => FALSE,
                'code' => "bqyd",
                'usage_limit' => 4173,
                'min_amount' => 574,
                'storage_id' => "4e0cbaa7-2dfb-431a-9ca0-6b5d2c3a76aa"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 7565,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "g7MmF",
                'usage_limit' => 6131,
                'min_amount' => 9540,
                'storage_id' => "c10bd9ac-8a32-4997-9aad-63e299ff0fc3"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 7589,
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "f9Kmzx2cS",
                'usage_limit' => 8950,
                'min_amount' => 6499,
                'storage_id' => "90b4fc12-fe73-45e7-a670-c332e2ada6b8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 78,
                'display_ends_at' => "2020-12-22T23:53:31.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => FALSE,
                'code' => "XqlqrR9",
                'usage_limit' => 1516,
                'min_amount' => 664,
                'storage_id' => "8b44c6f0-ea93-4df4-ad7a-b7b4a00569ee"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 8313,
                'display_starts_at' => "2023-12-03T02:07:18.000000Z",
                'display_ends_at' => "2022-12-23T23:56:31.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "S2rGP",
                'usage_limit' => 5577,
                'min_amount' => 6442,
                'storage_id' => "5763cf15-7600-4191-bc0e-37df36d5e838"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 2514,
                'discount_upper_limit' => 7024,
                'display_starts_at' => "2022-05-10T06:23:01.000000Z",
                'display_ends_at' => "2022-05-30T02:22:44.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "aYEeN8ncoL",
                'usage_limit' => 4962,
                'min_amount' => 4060,
                'storage_id' => "31e3f4ef-09d3-4a2b-9c42-d702404a9b87"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 6445,
                'description' => "erEtGhFgJdxHlskgg6LM7DHhWIQ2aljg7pW5tLDSL3EPYXvMXdIXxGA8eOtdD",
                'discount_upper_limit' => 2824,
                'display_starts_at' => "2020-06-10T12:00:45.000000Z",
                'display_ends_at' => "2020-04-27T12:59:41.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "vv3UzyZmk",
                'usage_limit' => 208,
                'min_amount' => 2611,
                'storage_id' => "da578ed1-f3df-4253-a2e5-4248e70d82a2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 7852,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["10bb385e-0b3d-4c0b-a0fa-2d4b7a84ce61", "d2d55b9c-dbec-45b8-954a-b32bfc8c4337"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 8557,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["7f91eaea-9b89-4554-86bb-275526cd5130", "f45f1077-6ad7-42fc-81cd-f505f29cce3f", "a57732f5-66a8-4db8-b90a-f96d1a404844", "fd800db0-acbf-4388-a854-baf08f22a10a", "754736bd-c6f8-4e5c-ae25-d3d7a05bbfa2", "24890703-26e3-4efa-a1d1-fc8037bffd55", "89e4ec93-9d79-4c98-9761-e25628052ae7"],
                'storage_id' => "e9df8bc2-980b-4061-8c57-3619ba1d9ecd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 4752,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["15b859f0-abde-4974-aae7-46bf2d14cb66", "daa4cdb0-43c6-4f69-9ada-2b0315cd9a44", "c2686193-0c60-4991-9b45-c90acfd535ae", "86f4f3ba-4596-4ac5-8fb2-58fc449050fb", "6f4b7050-26da-43ad-9cc1-a2a0667a6bb9", "b19468e2-e9e9-4289-af84-d2d1f9e21f2b", "94026e5f-d7cd-4b88-9047-9893616b1a31", "e92b9f2b-ac94-43c5-b8b1-eaae6f79606a"],
                'min_amount' => 3734,
                'storage_id' => "e9939a2c-918b-4ac3-81e0-9fd2c37e29fd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 7008,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["e1dcd6bc-92e2-416b-b74d-3952f0959724", "aaf070b1-527c-4ab7-bf97-27a0f9ae99c3", "47d77836-9552-45dc-af46-52b606b2394c", "df5ddf79-980c-4f4d-baf8-aaa740b65217", "606192c2-c841-470f-9aa6-fff8ece17406", "c7a869af-9010-442c-8e3b-1d83cdaea6f2", "992a2241-8d9e-49d3-846a-2ddbfd0255b9", "41531856-02c7-4d7b-b2b6-d9f28a0ac851", "4f216c15-1ebe-4ed7-852b-a766361f40ac"],
                'usage_limit' => 325,
                'min_amount' => 5627,
                'storage_id' => "3cc80401-eb37-4773-9796-e7b295c51566"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 7193,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["d0bb42b5-a5f2-440a-94a0-4534b31f2e0f", "bc847f67-998f-44ee-bb4a-5d5a8ea1b429", "7e1ae31a-6084-4d20-a73e-5c24d6587307", "e64dbe40-0888-4b0f-bd32-ca0dd7fbe33a", "f900c343-93fa-4d16-b8de-18baeaa5da8e", "5877a631-b4bb-4718-989d-c19b3cdc1e10", "f8c870ce-5f6f-4975-a379-30427b3a2822"],
                'code' => "bE",
                'usage_limit' => 3464,
                'min_amount' => 1264,
                'storage_id' => "cca9db8f-7f87-4ef8-905b-10831c3722c6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 5295,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["c60a500f-c0b7-412d-9008-18afc41ddd44", "0b482109-e1e7-4d98-ad67-8e721218eafa", "695c876e-23ce-4757-8ac2-085658460209", "7379a4b0-2f5d-4205-b00f-26b9cc760a8d"],
                'is_public' => TRUE,
                'code' => "BTT",
                'usage_limit' => 2544,
                'min_amount' => 4779,
                'storage_id' => "348c5d29-80b6-4f9c-81c7-84f09203a94d"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 4878,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["2b68eaa3-3ae0-428f-9d3e-09cfdad7109e", "950b447e-4e3d-4e81-b3e2-17745dfcd0c0", "9da3ff48-daad-4f59-a39c-a61729d6e947"],
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "4Qa",
                'usage_limit' => 1260,
                'min_amount' => 8194,
                'storage_id' => "d40a1b75-b1b6-4f03-9c00-85120c5d789e"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 611,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["e9372fba-ec3b-4ca2-8417-5bd6a5e268b2", "880e6120-18d0-45e3-9aea-5a0d3513c814", "5836580c-8bdc-4ca4-9e01-13b234b7ce63", "f53038ff-1bf4-4691-b6ed-835aba2d3afa", "9e18b688-f22f-49bd-967b-6c75247c5717", "a4ee250d-9f47-4035-b32d-55f125e5dedd", "7cee915a-53d7-4dd4-80d9-b37ffdb0ea02", "eb80c67a-c302-4210-a047-bb215c85b113"],
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "uuBX6LUUU",
                'usage_limit' => 4602,
                'min_amount' => 3410,
                'storage_id' => "47dfcaa6-c431-480a-b89c-37727d6788ce"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 6353,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["5e094841-f3bb-4bd2-b863-ddcbdbf3d75f", "e35ee889-08bf-4cd7-a324-92e28d64e208", "52639309-7c20-4a31-ae79-4fcc9b91fdcc", "84a859d6-fd88-40c9-ada7-a03bf7f6d0e6", "2e5f33a4-0a40-4837-90ca-d20f5bb0a39a"],
                'display_ends_at' => "2023-04-22T11:57:40.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "YRAl1UCuQy",
                'usage_limit' => 7639,
                'min_amount' => 2328,
                'storage_id' => "62c78646-2f6c-495b-91f2-bb94fbaad81e"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 1991,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["57bafadb-0cd2-4e8f-b17f-b22d56634856", "4811f464-3533-42c3-82fd-964958b8b996", "908b736c-65c5-48b3-a028-3be0790b76ab", "f2378be4-86a5-424f-acb8-c8c8e28b0e92", "3ffce2e4-dd7d-4ae9-81af-584082fbe82f"],
                'display_starts_at' => "2022-05-25T11:19:19.000000Z",
                'display_ends_at' => "2020-06-15T11:36:11.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => FALSE,
                'is_public' => FALSE,
                'code' => "JayB",
                'usage_limit' => 7892,
                'min_amount' => 2741,
                'storage_id' => "67c9ee3e-7fa9-4dc9-a71d-2d24774ad141"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 8609,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["8ec50762-a039-4a9b-ba68-309de3b7a6f9", "c7e9af20-637e-42ba-bc5a-9da940023c01", "795ea3aa-43e8-4f63-9a5f-d1e8a4d90487", "5ea13da1-6d38-4b4d-920a-1975a768db53", "aa4be814-456c-45d6-9291-82232c3854af", "7178a2a2-e23e-4416-9ccb-4b67d1282607"],
                'discount_upper_limit' => 2883,
                'display_starts_at' => "2022-03-17T14:25:52.000000Z",
                'display_ends_at' => "2022-06-23T09:14:55.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "YYuG",
                'usage_limit' => 462,
                'min_amount' => 3377,
                'storage_id' => "46b347b7-8a72-44e6-9439-f8280e0bd922"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_amount' => 7835,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["c12ab674-b3a9-4bfc-bd43-3fbb379cc402", "d03ecc13-6e5d-40e9-9880-44609bbfdef5", "b0ba8bbf-bb94-4ed3-b870-872d9a7b66b7", "bc7a7294-d969-4fa8-b1f2-f72ac66e9f1d", "77f4bce3-5861-44e3-927d-4fabdb95dc34", "eb1e167e-4e8c-4ec5-976d-e315a305a810"],
                'description' => "JRYE0v",
                'discount_upper_limit' => 2015,
                'display_starts_at' => "2022-02-20T14:18:52.000000Z",
                'display_ends_at' => "2023-07-19T15:05:01.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "n2Odxgxw",
                'usage_limit' => 4413,
                'min_amount' => 2098,
                'storage_id' => "56c56bb9-120a-43e5-9669-4c261a752f00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon24()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 4864.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon25()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 989.0,
                'storage_id' => "69c087f5-bc0e-46dc-b7cb-dd12da034aa6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon26()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 5236.0,
                'min_amount' => 9342,
                'storage_id' => "7b46026a-3df3-49a3-80a9-c2525359d56a"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon27()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 1658.0,
                'usage_limit' => 1188,
                'min_amount' => 4598,
                'storage_id' => "5d05abaa-c8e2-42bf-bf38-fa58c7b7ef28"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon28()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 1422.0,
                'code' => "neGNN0",
                'usage_limit' => 2407,
                'min_amount' => 4892,
                'storage_id' => "01fef6e3-c062-465e-8560-87ea746865c8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon29()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 9925.0,
                'is_public' => TRUE,
                'code' => "kOW2yVlHnd",
                'usage_limit' => 8219,
                'min_amount' => 5500,
                'storage_id' => "94b02527-620b-4ebf-8b20-7d1ba337e341"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon30()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 6500.0,
                'is_hidden' => FALSE,
                'is_public' => FALSE,
                'code' => "9HjNAOFWD0",
                'usage_limit' => 2534,
                'min_amount' => 7986,
                'storage_id' => "0ef05c22-1a38-4f23-868e-980cd02292a6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon31()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 8946.0,
                'is_disabled' => TRUE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "b",
                'usage_limit' => 9498,
                'min_amount' => 3514,
                'storage_id' => "39e8c38c-be2b-47d9-93e2-9e2df1feb570"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon32()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 9422.0,
                'display_ends_at' => "2023-10-08T08:17:01.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "ET9",
                'usage_limit' => 2640,
                'min_amount' => 320,
                'storage_id' => "edc13169-4c96-44ad-b043-0f863aa39c8f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon33()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 2312.0,
                'display_starts_at' => "2021-03-08T22:03:01.000000Z",
                'display_ends_at' => "2023-11-21T02:23:55.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "u",
                'usage_limit' => 3444,
                'min_amount' => 5359,
                'storage_id' => "b4e1096b-3dd8-42d0-8871-c330032a8631"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon34()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 4896.0,
                'discount_upper_limit' => 6838,
                'display_starts_at' => "2022-10-31T21:00:19.000000Z",
                'display_ends_at' => "2021-02-13T22:17:41.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => FALSE,
                'is_public' => FALSE,
                'code' => "qfiA",
                'usage_limit' => 1427,
                'min_amount' => 4736,
                'storage_id' => "d3f237a8-7713-455e-8ba9-1c29782607d5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon35()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 3590.0,
                'description' => "XxFRzN5EfouqVIJLmWFeGJqYbyf9xqeV9Lg6T4oo",
                'discount_upper_limit' => 9259,
                'display_starts_at' => "2024-02-29T04:27:08.000000Z",
                'display_ends_at' => "2020-01-15T06:15:52.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => FALSE,
                'is_public' => FALSE,
                'code' => "h8egFMYUCN",
                'usage_limit' => 1719,
                'min_amount' => 5652,
                'storage_id' => "cae1d03a-1bd1-4abc-85ca-fab08868d640"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon36()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 1617.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["810d0e07-49a1-4917-9c81-9dd79b0ae26c", "bf5c4401-1881-4e71-893f-8f77cf56edf4", "a6d12f3f-eec4-4acc-b838-dc612d772fcc", "f2def566-723f-48ab-9b67-4a2b21a39e29", "f26e6043-fd14-442e-a6e4-89b3f1eea2ac", "5a2bd702-bbed-49f3-a58c-b0cc50b56751", "5d9ff3fd-6d28-4342-ac24-a058b755c049", "d748e101-7a1e-46d5-a985-4bbfa40aed59"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon37()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 5872.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["a37ce39f-24d4-4d5b-8076-91a5efc9de4e", "02376599-3411-4a06-a7e6-78a04c1ec3e1", "1427f64b-c611-4e7c-bf14-51b3159480dc", "cedee150-616f-476f-9877-c1f094c16d4b", "ced650c1-95f8-4725-b38f-7a1febe8f56b", "953adf0f-8c24-4966-8741-a133d83313b1"],
                'storage_id' => "fc03b5f7-4c58-4964-b034-229a5bfdd7df"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon38()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 7335.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["a121ca53-0e59-4731-8721-f0cf7a3e50dc", "c7048138-ce5d-4d10-9e3d-44bfea40c280", "8951cfbb-c91a-4ce7-8c87-76c7b6182ebe", "2fe8fe12-cf8e-4bac-bb21-ed8ad93aecfb", "2ea1422d-77a0-45de-8f46-d31c615240b1", "b8b786eb-5352-4f5f-b2bd-a228fdbbf312", "b973a23b-e126-490a-b981-0f7d5c633165", "c4b5b9a2-aa36-4fb1-a675-57fa594b483f"],
                'min_amount' => 3053,
                'storage_id' => "317ddec2-9089-4f49-9f83-d500cd6b4c58"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon39()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 1124.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["4d0890ce-6446-4695-b329-bf8848a5cf33", "37bb352e-6624-4a8e-800d-67ea72c312a6", "4a3fd4c2-b1df-4d23-ac77-d15a96c96a89", "37ca0f81-6d60-4cf2-847f-5512de4de9b7", "de5bacb2-a9e0-4d7c-96a3-f0c4d50a86c2", "2b7d7f8d-2eb3-4e24-a037-0726ad66bb13"],
                'usage_limit' => 775,
                'min_amount' => 3723,
                'storage_id' => "d595fb52-6fbc-4b00-b4fb-f4b84163155e"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon40()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 1468.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["c7c6f3ff-771f-42e9-90fe-8f493522581a", "03b901f7-11c3-4abe-acc7-d11c3f55109a", "dd2f9c25-37da-4d31-8ba2-bdcf6d877ec7", "5cbea909-0ce7-43c5-b2dc-cef341f5346a", "1169a18e-87fd-460f-b73d-31db5b1a3dc8", "9d1e2475-b436-46d7-8b09-2da18d95eab5", "f91dfd0c-202c-47dc-8d03-ba82c56495a2", "7361eebc-b222-441f-8837-498551f3546e", "b3e17cdd-89a2-4d70-bb12-af8587969e5b"],
                'code' => "uch6s2J6",
                'usage_limit' => 1719,
                'min_amount' => 1665,
                'storage_id' => "ccd03250-f729-4bb8-a81c-256e4e391cbd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon41()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 215.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["eb499449-11e5-4085-8dd3-14865cd6f4a4", "b7447cbd-9b9f-48a2-aebd-b3042480af11", "c74f1123-9935-45b2-87b1-af97b0f90007", "be3bfc7f-d592-43a7-a28d-32fc42d4f3c0", "aad70bed-a26e-4bbb-ad85-81009b5d5688", "c8f30165-e609-4068-b581-c4d1e0d294c5", "794c54c2-b164-470a-9cc3-b75a59bc474a", "33ab4b3d-6f74-4420-ac72-0955e4d69461", "8daaa3b6-ccc6-45e7-b037-51a9383ca85c"],
                'is_public' => TRUE,
                'code' => "ym0hY",
                'usage_limit' => 6437,
                'min_amount' => 2305,
                'storage_id' => "49eb332d-2507-4755-81d7-3e4d2a60ea59"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon42()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 8479.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["a89ae957-bfbb-4626-a6bf-e3dc0509c92d", "c333cb03-83c7-422a-8b2b-384edf7c34c3", "cf57b028-c1a7-44bb-a785-e23060cfa50c", "166e4677-08ab-4202-ab86-95d60882c602", "ae717da0-3407-4fb3-8606-37a074fa1ee1", "e60c288d-6d88-4d42-86cf-7d58bccfb731", "e3318449-72a8-4820-a72d-b3fd44ef8838", "79ebe268-20bf-44d2-8f25-39db0ec70a98", "a39604c6-1442-4033-a52c-a3cd5ec3b1de"],
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "GXrpVSkSd",
                'usage_limit' => 45,
                'min_amount' => 2316,
                'storage_id' => "b364e451-7a89-40af-82a4-8140e2e4eeff"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon43()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 7042.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["262e0558-3948-4bdf-979f-6526c52b8443", "1b2b5deb-5538-4b38-9e8b-aa799f32623e"],
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "kNbUU",
                'usage_limit' => 2878,
                'min_amount' => 6655,
                'storage_id' => "bf487387-f66c-4313-980a-ea70cb1b91b2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon44()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 7725.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["cdd75d73-0cdf-4d03-aed4-50db361008b5", "a8dd4e85-3d9b-4ee0-a721-ab2a96f229ad", "69c81e91-805e-410f-94a3-ac384c3aed30", "1f6677bc-7b39-4fa2-811c-d9853a2cc61c", "ca853811-6c95-4a8c-a2fc-1aa582234b09", "47e95bad-e076-4d74-8ae1-f5ff2c077955", "8ee4d9f9-c2b0-4c20-8110-5b051faaf4cb"],
                'display_ends_at' => "2021-02-28T11:52:15.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "I2A",
                'usage_limit' => 8934,
                'min_amount' => 5037,
                'storage_id' => "e1e8f315-2f8f-432d-8c2b-1b7649011f99"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon45()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 4789.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["7846026e-3173-4a53-9bb8-32f0f808d654", "f739af0a-a38c-488b-b769-48f78329b84e", "413bf7ec-8589-4f9d-b998-9b438f1f38cb", "3af5f505-de4e-4980-b53f-5d00b934fcaf", "b9fc69f9-2018-4a40-a0a8-499faf737ec3", "cb7e04a0-aa73-4302-9444-39cdb8afc1be", "c2415f18-1075-4e94-9c5e-3975e63c1393", "b90c1e61-7ad7-4e67-829e-41b608b819f6"],
                'display_starts_at' => "2023-09-27T09:19:37.000000Z",
                'display_ends_at' => "2024-03-25T07:19:11.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "5quwxF",
                'usage_limit' => 5976,
                'min_amount' => 7022,
                'storage_id' => "290afe26-e7ba-4a4a-b545-6e9d9d4ea160"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon46()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 930.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["c9300a36-c197-46c7-a34e-6b5013fe81ae", "6a6efdc3-e820-4e12-9a45-b956cfaee0db", "bb4e75fb-800f-4250-bea4-a0f18f76d4b4", "ecb94336-bc40-45c7-a4c9-ff50eb9b5625"],
                'discount_upper_limit' => 1580,
                'display_starts_at' => "2023-10-07T12:37:55.000000Z",
                'display_ends_at' => "2020-01-24T04:44:40.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "Ybz4K3IA8",
                'usage_limit' => 7370,
                'min_amount' => 7744,
                'storage_id' => "f14cb959-bad5-44e0-89a7-46cc44f1e91e"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon47()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "3eff1332-3b9d-4c12-8bb6-625a4d8d93f4",
            "1zTkBm5QsUJIx79pUjuQLW3JQAlc0mxfIBEGWM",
            "2022-04-28T17:03:11.000000Z",
            "2023-10-01T02:38:03.000000Z",
            "4d6fe365-198b-4c71-a796-668701375f8c",
            [
                'discount_percentage' => 4087.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["f494a059-9420-4a08-8811-09d7b38f9671", "1ae547bc-2d39-4d07-a814-28b3c6c0f2be", "2aaa18e1-0e79-4410-9982-06f8cf8144a1"],
                'description' => "gOJ9lz7HMs7r8Mwpfor2g0yfZY1uTlDfXz0uDeov2GaxLjZM7ftEliKPQLWJArPq3tph1c8gKwadNnw",
                'discount_upper_limit' => 2485,
                'display_starts_at' => "2023-10-19T11:23:47.000000Z",
                'display_ends_at' => "2021-11-02T21:52:32.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "fZdks",
                'usage_limit' => 1727,
                'min_amount' => 1809,
                'storage_id' => "e4f6a2af-dc93-454f-822b-765c13d52d7a"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
