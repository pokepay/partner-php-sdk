<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCoupon extends TestCase
{
    public function testCreateCoupon0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 6407
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 3352,
                'storage_id' => "fb972ee9-25c2-4844-9412-6532f77d05e5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 5912,
                'min_amount' => 7284,
                'storage_id' => "b6dccb11-6e36-478c-8511-dad23193dd38"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 4921,
                'usage_limit' => 502,
                'min_amount' => 2514,
                'storage_id' => "0f91d282-4807-4481-a5e8-455933bc1e49"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 3418,
                'code' => "Mh6",
                'usage_limit' => 3877,
                'min_amount' => 9677,
                'storage_id' => "baafb710-262f-49e6-bfa5-2803664303bb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 6013,
                'is_public' => TRUE,
                'code' => "hA8D",
                'usage_limit' => 9652,
                'min_amount' => 6464,
                'storage_id' => "f7bde4e0-65c5-4cf6-b70f-1e1a035bbf21"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 4572,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "GT70L",
                'usage_limit' => 815,
                'min_amount' => 6848,
                'storage_id' => "7a54ee90-750a-4151-9db2-3614f10c6465"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 2800,
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "XvfJ",
                'usage_limit' => 4594,
                'min_amount' => 3039,
                'storage_id' => "02be5ffe-2394-4b71-bf01-93186575231f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 6412,
                'display_ends_at' => "2021-04-20T02:26:11.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => FALSE,
                'is_public' => FALSE,
                'code' => "zvGv5tXB",
                'usage_limit' => 2045,
                'min_amount' => 5057,
                'storage_id' => "8a5b38e4-47ab-441b-845d-a1d16ae6e1a1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 2844,
                'display_starts_at' => "2020-10-30T13:44:26.000000Z",
                'display_ends_at' => "2022-07-07T06:05:02.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "j",
                'usage_limit' => 9412,
                'min_amount' => 6608,
                'storage_id' => "56f6235e-f142-4510-8cc5-38a2a47ebee7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 785,
                'discount_upper_limit' => 4292,
                'display_starts_at' => "2022-03-23T09:01:12.000000Z",
                'display_ends_at' => "2022-09-14T15:29:12.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "fJ",
                'usage_limit' => 132,
                'min_amount' => 761,
                'storage_id' => "add52405-f93b-4130-ad1d-850d488705c0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 9028,
                'description' => "TnMPtA7T3E2nC8JZcqIcqZB2nkhw5Vunnh29qWQZz14xB891rPV7FcdDeB61vcOZ1uNBAdr6lfzbfqKlnsG40wZo0RT90mTv9imeNiY62Bc0n5yxxXvKDa0c2v5NvERR1ovUoSMxuw",
                'discount_upper_limit' => 4412,
                'display_starts_at' => "2021-01-07T10:53:19.000000Z",
                'display_ends_at' => "2024-02-03T11:47:59.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "hKOt",
                'usage_limit' => 4104,
                'min_amount' => 1857,
                'storage_id' => "81d87bef-283f-4629-8d58-ca88a86289a7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 2416,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["3b373df5-b261-44e5-a337-a86cedcfe79a", "6ecb2710-75cf-4a2e-b5ad-8e38607f33c1", "066efe3d-0222-4a7c-a5b6-e2a879e26a3b", "4c284a68-0554-4fee-a17d-55f28066d029", "382227c6-6bd3-436a-a2c2-d7fda50a91ba"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 5148,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["f161eeb1-362d-4a0e-a869-2b522d8c44ea", "487b2493-c518-4754-97ce-7cd32ffc5da7", "46c40c15-4095-4f28-9581-84b4312a05a8", "31fc71dc-eeb6-46c4-8bd0-3aa2ad677c07", "5a056d0f-5376-432d-b98b-57abd8d0e119", "79af150f-106b-46a1-b49b-d5cb889fa51d", "f9e3f481-1021-4f63-9918-fcba262743d7", "1b157b5d-77c3-4ff9-8107-0dbe6ad6f5fd"],
                'storage_id' => "7423d03f-7f7d-40cb-ad34-1df41a774247"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 5170,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["38657c7a-8ae5-4c03-aedf-76d7ec36fb58", "62325978-65d0-4b4e-b652-f2e9c81e0ecd", "44c21256-7668-4286-9aed-8a1fdd0d9482", "9086e990-4d6d-4f47-aa5e-313085f9d611", "08add354-8d8d-4d4d-910e-c5a34566b3ea", "ef1475d0-2e06-4f17-a692-b7ac3b07f1a8", "3e64c546-2fcc-4da7-8818-95cd02720b2b"],
                'min_amount' => 8880,
                'storage_id' => "d517d25c-168f-4abe-844c-a67c78c18a88"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 2039,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["90458d56-6fd8-4124-a231-25aa5adde624", "7c3e1c1f-923f-4de0-aebf-a8668130aa50", "981c845a-5b1e-4ef4-88fa-97474406f7f5", "2534116e-fcd6-4088-8aa8-2ce2d72df77c", "4c536a74-87c3-441f-83ee-d773d6f1429a", "09fdb62f-b5e0-47ff-bce4-390d8b71a125"],
                'usage_limit' => 4678,
                'min_amount' => 8724,
                'storage_id' => "415103d6-778f-4a2d-9f63-a88327a71bdc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 6890,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["4180cc2e-a720-4df0-a0eb-068bb7f421ae", "16d4350b-f32e-4e72-850f-915b21bd09b7", "ef7e3b6e-0c7f-4042-9be9-d7aadc9400ae", "a318536a-09e1-4161-b475-491a2d8ee771", "1f0d1fda-31bf-424b-ac62-3e70f5b65212", "a35f97c8-1a22-48d1-80d4-9234467568fe", "ef8a9b13-e8ed-4c8f-9a51-fe3b67d8d25e", "cf085b9e-fba7-4428-9b44-f53f8ac68025", "57f0d0c2-5d36-4075-b199-465c6f6b0514"],
                'code' => "M",
                'usage_limit' => 7626,
                'min_amount' => 8180,
                'storage_id' => "8828df58-a2cc-484d-8df7-e3dd65d054e0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 3177,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["f67037cd-d21f-4e69-b350-19a8573ccdd4", "0695de81-53d8-403b-b6fe-99ca5843f5b9", "013b0a99-f0c1-4450-bebc-59276a539257", "fb6937d6-44fd-4d2c-a6b0-16a592992ac0", "5991d5a1-f95c-4c8d-aeeb-5f4963c3c6b2", "eaf58ae3-5c70-45db-a9da-d2726b4fe55f", "f466ca77-d82f-4ce8-b4e0-198210a8cb90"],
                'is_public' => FALSE,
                'code' => "2",
                'usage_limit' => 996,
                'min_amount' => 4564,
                'storage_id' => "f42f6a9c-3382-4873-8990-bf189801a753"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 8187,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["83721b8f-6918-4ece-9fba-2dbd834be33e", "a9671ea2-27d8-4784-a742-fbf5683bdcc0", "c1d07f89-f5e8-404c-9b41-4ef8b1f5d403", "dc2586af-75d0-403b-b882-ed4c1191bfa6", "77b05288-f6bf-4592-a49b-90233bd1b791", "289903e7-7950-4a24-9e46-b00d0071c437", "d994eda7-a7ff-43d0-882d-1e399a84c1db", "b87cd8bc-126a-450f-b3fb-ae501b26b3bd", "09c2f4ff-72ef-432b-a9b3-b7f1872436d2"],
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "C06hH5q5N",
                'usage_limit' => 4662,
                'min_amount' => 9482,
                'storage_id' => "a197aeac-5e3d-42f2-a01f-231c2f08c253"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 5140,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["60df8aaf-23fd-4fec-90db-d611c05931e8", "fb148318-6fe3-47bc-81a7-c36c55ce455d", "ce18681e-5c83-427d-b862-0de280711893", "1e30219f-e0c9-4531-8c70-f28403b1a8bb", "26e5863c-165d-4a77-a318-8ecec84d7356", "2ca51a1f-127f-4f4e-ab58-19319b97c077", "29560594-8a62-457b-bca9-6974e0a2d548", "bb37ca0a-9c28-4971-8ba0-3f370398082d"],
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "h4XHkB",
                'usage_limit' => 4984,
                'min_amount' => 9150,
                'storage_id' => "9f0e28d2-2330-46d2-8c05-a76eda8cc10b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 76,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["f0e1b77b-f672-49c7-8a96-b6df5b20d02d", "110c9153-edb2-4698-bb1c-834e1a6e5bb5", "2ea4d217-ef5f-4cd3-b6dc-295dfaf45745", "450f857b-3f0d-4316-9bc0-4945c5e1b84f", "64659729-edbc-420a-b542-9b973fb793a2", "51c113f0-7eac-4ab0-9489-3461f7e72d3d", "c674afa1-8b8d-4599-a984-e71559e2848c", "d3c1fcbc-a291-4619-8272-7693c3babfed", "e2a9346e-e2bd-4d64-a982-e4c393ac070d", "d8e9d3be-844e-4f1d-b858-af58bc48d500"],
                'display_ends_at' => "2021-08-14T09:03:02.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "eT",
                'usage_limit' => 8878,
                'min_amount' => 1016,
                'storage_id' => "798c98a4-b8a6-47df-bd93-09e6c57304e5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 4636,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["fc21e989-5351-4993-839a-a8c8c59a3b7a"],
                'display_starts_at' => "2022-07-26T20:53:02.000000Z",
                'display_ends_at' => "2020-03-17T12:23:20.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "OG8zcq",
                'usage_limit' => 8527,
                'min_amount' => 5880,
                'storage_id' => "db415e49-8188-4647-a3bc-43d74dccfe7b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 8739,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["f87ddb5a-7c6a-40ea-8d36-70bdfb8c87ea", "5a016905-3533-449b-a507-0bae901ca15e", "4a9013ad-7082-4a3b-a493-f22cfe809c44", "acf091e3-799b-4270-9a75-85ff0a3de75d", "f14fea1d-27b9-49e9-8ee9-8b8f7d30d0c0"],
                'discount_upper_limit' => 837,
                'display_starts_at' => "2024-01-04T09:02:02.000000Z",
                'display_ends_at' => "2020-01-27T05:41:11.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => FALSE,
                'code' => "eQ36NR",
                'usage_limit' => 5042,
                'min_amount' => 1580,
                'storage_id' => "9624cc49-ace0-42ea-bce8-38795f1caabf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_amount' => 6788,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["d4a21acb-6610-43ac-893b-69d17f435fdd", "85bba8b7-bd3c-4622-9be3-87bcd18c1f47", "d9fa440b-aeec-4491-afb7-4610c0d8bffb", "42707753-67f2-4143-aae9-386d2662c4e4", "75a8357b-0eec-4767-adbf-0577ff67bc6e", "aa0af439-ba21-4bfd-9df1-aa763f98f8e1", "cecc09f5-150b-4515-9132-af865b8b156b"],
                'description' => "Dhj5HLJcSNTCm30yK3y8WItCe9VYgMydEalG76qE4T1vOrKA4IwgS5AgijWRyxneekV8cIDT0hnm8h8evW68NKpdkq0PMSo6iR11TAHpgNTXOxFwqhkpZVaDhpFPp5bfKVt9DPYJA",
                'discount_upper_limit' => 2085,
                'display_starts_at' => "2020-04-13T12:51:34.000000Z",
                'display_ends_at' => "2023-09-28T09:55:41.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "I6ywfpyKil",
                'usage_limit' => 5309,
                'min_amount' => 9194,
                'storage_id' => "3d16e328-5cb5-45bd-a0fa-a53e1991dc67"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon24()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 1976.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon25()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 5744.0,
                'storage_id' => "f24256e0-ab6e-46b5-b704-ee228a7a97eb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon26()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 6061.0,
                'min_amount' => 3654,
                'storage_id' => "b199c1b0-7316-407f-bfa8-62a8c15753c4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon27()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 5986.0,
                'usage_limit' => 4048,
                'min_amount' => 2764,
                'storage_id' => "5c6cc3d8-0e8c-456a-8175-69db8c276777"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon28()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 1778.0,
                'code' => "e",
                'usage_limit' => 5021,
                'min_amount' => 5538,
                'storage_id' => "f04889b0-5808-4241-a1be-99b913623b49"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon29()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 5209.0,
                'is_public' => TRUE,
                'code' => "4",
                'usage_limit' => 5537,
                'min_amount' => 6131,
                'storage_id' => "2f1438fb-8d11-4fc1-a9c6-90cebfe0d9a3"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon30()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 2935.0,
                'is_hidden' => FALSE,
                'is_public' => FALSE,
                'code' => "ac9r9GBqh0",
                'usage_limit' => 397,
                'min_amount' => 329,
                'storage_id' => "dbaa45ec-f13b-4e39-8d0e-77b1b9f7e97d"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon31()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 9087.0,
                'is_disabled' => TRUE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "v4",
                'usage_limit' => 9432,
                'min_amount' => 4543,
                'storage_id' => "ffccaeb1-8b72-4188-96cc-f59a1141e3e6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon32()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 9511.0,
                'display_ends_at' => "2020-01-20T17:58:12.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "BovHK",
                'usage_limit' => 2673,
                'min_amount' => 3691,
                'storage_id' => "f45d9eb7-9f12-4460-be29-31227b2d37c7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon33()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 3329.0,
                'display_starts_at' => "2023-05-17T04:25:38.000000Z",
                'display_ends_at' => "2022-12-18T18:44:19.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => FALSE,
                'code' => "G1DZKj2",
                'usage_limit' => 628,
                'min_amount' => 4231,
                'storage_id' => "f56fcec2-2752-48ac-86e5-99a0ab108388"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon34()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 9381.0,
                'discount_upper_limit' => 8214,
                'display_starts_at' => "2024-02-11T01:48:16.000000Z",
                'display_ends_at' => "2020-09-20T09:26:07.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "uL22",
                'usage_limit' => 871,
                'min_amount' => 4935,
                'storage_id' => "4d1524bc-2fa2-4de7-bee1-b237640b19f0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon35()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 2819.0,
                'description' => "F0nmLMfnIYTQdqHJZ8WnDHEVfpIBtEOMP2U7IkYygmkkDxd3MzpkzvPsPo2vcZvKaf470Dw5YI6SeAOBDBgRAgmjxZGGCqaBwJ9iXjXSEfbkdsvlfnd1NOUEcUOGTeYua5DveJsn8lhIUcgIkY0oNU4ZtZZObHmdr0N6vylnl",
                'discount_upper_limit' => 7774,
                'display_starts_at' => "2024-01-02T01:19:29.000000Z",
                'display_ends_at' => "2020-07-11T01:34:28.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "uj8A7eDOA",
                'usage_limit' => 6315,
                'min_amount' => 4099,
                'storage_id' => "c5759a98-b157-4cab-91e5-abaff2a27aef"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon36()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 21.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["47915465-a013-43c6-9fe0-fa0b9c291036"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon37()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 8694.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["400bb3f9-f67b-441b-a71c-a531770a4cce", "8fac1e39-7b91-4870-94ec-f0ff4cfd2c78", "1e70ca37-587c-4e2f-aa19-939c3a1b1b6a", "8db16cc8-46cb-47a0-b145-6696c79ea6fb"],
                'storage_id' => "4b422631-8750-4155-9169-460903175e2b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon38()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 4469.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["844a8264-bd0d-4254-8026-68169967945b", "cb04ac60-18a1-45b2-8690-31be9e408a59", "1efed1d6-2656-4c3b-8ea1-d667e1c0920b"],
                'min_amount' => 4456,
                'storage_id' => "7843dec7-5c5b-423e-897e-f8e9b28173cf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon39()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 4577.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["b768a76b-b5b8-4512-a423-3d2753f778c8", "8a472157-2557-4b9f-a2d8-0c4fd4b6461e", "43662892-5c4d-4e73-b91a-a4cd2a1f3e8c", "d8330cde-f2d6-4a90-9802-890beab432a3", "1a395a91-f0a8-451b-91cc-d1313ff0cb08", "6835311d-4489-4159-8f30-31a83c1d095f", "961a639b-2646-4f3e-9326-d989b143b97a"],
                'usage_limit' => 3754,
                'min_amount' => 7691,
                'storage_id' => "797f782f-6ed6-47c7-a004-1490dc60e31b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon40()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 3755.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["57e5156f-fe55-4833-9778-9d935bb384ca", "3202aace-3690-4b4b-a06d-a07588b24d7f", "ae2206e1-bf44-44f2-a2de-1234fd84cd3f", "8836d5e3-a313-4d80-aa3d-4f7e2900222c", "471f01a0-94cd-4153-ab41-87084862a400", "d7d95667-4dc8-42c4-9441-e340d86e586c", "ec7d39cc-316c-4792-8e50-ea36e24ba2cc"],
                'code' => "5y",
                'usage_limit' => 303,
                'min_amount' => 9347,
                'storage_id' => "2833a22a-f7b1-4d94-90f6-b2377e9d7988"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon41()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 2052.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["3ef65e3d-e46c-4a43-8d34-5ef996b2c940", "1a5a5186-589a-4812-b271-00bbeb417ab4", "1935336c-49c9-482b-b3ed-9848d67af92a", "617aa2af-e60f-4a79-bbf6-f8ae957a7566", "839fec41-d93e-4def-b10f-9dbcbc2c935a", "24c65b99-f16b-4277-ab18-606462089fa4", "c7ec92b2-3001-42c1-aa17-01447935ed8d"],
                'is_public' => FALSE,
                'code' => "yNq",
                'usage_limit' => 5170,
                'min_amount' => 1440,
                'storage_id' => "883470bc-cbd0-4ad7-9db9-41e51abfaed0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon42()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 6031.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["d0fc785f-885c-4eb1-96b1-6b3697ebdc98", "6e597f0c-2844-4ae0-ac63-8683bf3b1245", "18b4bf35-58db-4f87-ad9b-8d7b5d9ac772", "052f6809-e6b4-4098-9449-9aad7c1af77b", "dfe59db9-532d-4809-bef1-4c5dcd79e3c3", "e175cad0-74dd-45f1-bf86-e0317118449a", "72ac22eb-356c-4bfe-a58e-987dc5facb29", "e970cad0-7a1a-480f-86d9-e1c9a735bb85"],
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "gZzpFf9",
                'usage_limit' => 7065,
                'min_amount' => 3958,
                'storage_id' => "00a11f3b-745d-4c84-a0c3-5852ff3f331a"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon43()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 9260.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["442187c4-9fa5-4755-b8ca-3bb599d4b539", "babc919e-b84f-405b-9cf4-d4e3934101ef", "6d2ef45f-26eb-443c-867f-4e1dc8d81b2b", "cf6a2b3e-7aa8-45c5-9f84-f2161bf162a8", "28be3b4d-ea4d-48d6-9e9b-985d485cd389"],
                'is_disabled' => TRUE,
                'is_hidden' => FALSE,
                'is_public' => FALSE,
                'code' => "iBo",
                'usage_limit' => 8903,
                'min_amount' => 9557,
                'storage_id' => "631e55b1-50cf-4b8d-83f8-46df97625981"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon44()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 2645.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["94f79ea7-947d-4b6d-8b1d-89fe610fe149", "0357376c-163a-4406-81b7-6a094660d76a"],
                'display_ends_at' => "2023-02-05T18:31:30.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "rfEKMQ8FC",
                'usage_limit' => 9587,
                'min_amount' => 1968,
                'storage_id' => "b7c6cba8-518f-4736-b250-fd4c10e29b62"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon45()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 2101.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["4e81ad2d-b366-4ffa-ae69-e0f7a6286e1a", "36eda71a-7a38-412e-9a60-cdaeba336eaa", "aad0c8b7-4c54-4ff2-afea-68223e4557d7", "2b45d900-ed68-4b13-9eb0-fc91b0e17642", "9c1e0ae0-28d1-4c9d-a41f-ae72c991800c", "00af4272-72b7-4b98-a221-ee0c4e580d4f", "6c123220-67c3-4082-b024-39c152d1d955", "86034266-1a4a-4417-9bee-f97d70258996", "e8a6c2da-79ee-489b-936f-02677817e878", "5ef3af93-8665-4143-9e7e-a90e6f3e8357"],
                'display_starts_at' => "2020-12-07T20:20:30.000000Z",
                'display_ends_at' => "2020-06-04T10:50:10.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "l0P2Dqh3",
                'usage_limit' => 8188,
                'min_amount' => 7379,
                'storage_id' => "32916e0b-1acb-42ab-b2b3-19cda4e76683"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon46()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 4459.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["ff753a16-a384-46ed-b6c3-4bec66256dee", "e7d7009d-ee28-4030-ae8a-00e594b1e293", "721cb478-0578-4035-8dc3-8045a1dcf9f7", "fb7cdc35-e47e-4404-92b8-763347af603c", "cf9980ca-f332-42d7-9f45-1f429bcf2069", "0b220269-9bdc-4acf-96c6-327bb36e9c10", "f6ba39f5-2577-4d6e-803f-4187b87c561b", "309dc9ad-4f65-4e3b-9b08-979577b04e88", "3c9fd9d4-22af-4115-a657-d3c85ca2bbb1"],
                'discount_upper_limit' => 753,
                'display_starts_at' => "2023-02-14T15:47:15.000000Z",
                'display_ends_at' => "2022-01-15T17:16:14.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "FKkOnPRe3",
                'usage_limit' => 7560,
                'min_amount' => 767,
                'storage_id' => "267ce1b3-5c4f-41f1-9920-0fcdc42a667c"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon47()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "66e0c7d2-0187-4635-b204-bfdd62185cbd",
            "M",
            "2020-04-15T03:04:29.000000Z",
            "2022-01-03T18:07:35.000000Z",
            "28da9a96-0e08-4c85-b084-887cc7d458af",
            [
                'discount_percentage' => 7222.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["986c95a7-5137-491c-af02-c566bdd4ff1d", "4e75b52a-2bff-4110-896c-cbba71da506f", "86423770-caca-4070-9c4c-77302172ef03", "009ddd9f-beb6-4d84-b752-36cf79b5e7d1", "fa6d1496-7cbf-4a5a-ab33-a817024b4d8e", "d3e5be33-ede4-481c-938a-7a623a471235", "ec1a8831-8b9c-40c3-b251-cc3b7ffc57dc", "bcea0aac-e61e-455a-9694-21a7240f14af", "9d848b16-1fa1-4504-9cd6-5383f93afa01", "35ae4d6f-d18c-41f2-8db8-0fb0deee7a98"],
                'description' => "jAnbL9pF2AijYf8ydTws4HIQ4An",
                'discount_upper_limit' => 2153,
                'display_starts_at' => "2024-04-13T16:10:40.000000Z",
                'display_ends_at' => "2022-07-17T03:58:08.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "D9",
                'usage_limit' => 5936,
                'min_amount' => 687,
                'storage_id' => "8c61658d-d0de-493c-886f-f5cc155a950c"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
