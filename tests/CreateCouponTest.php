<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCoupon extends TestCase
{
    public function testCreateCoupon0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 1652
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 5260,
                'storage_id' => "7033b9a0-1891-4bb9-bbcd-c0ae3d8f5dba"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 5087,
                'min_amount' => 5576,
                'storage_id' => "60e30a97-574b-4b17-811b-a94b37f49ab4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 8386,
                'usage_limit' => 1711,
                'min_amount' => 2743,
                'storage_id' => "4be306f3-704a-4234-b2b4-37e0787a3040"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 8262,
                'code' => "7dkeP",
                'usage_limit' => 4539,
                'min_amount' => 4628,
                'storage_id' => "ad06a318-3398-4311-a207-cef05010cbf2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 2331,
                'is_public' => TRUE,
                'code' => "qXJLC9",
                'usage_limit' => 3524,
                'min_amount' => 9964,
                'storage_id' => "4bdfda0e-9e27-4d1e-8708-6fa123467822"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 9578,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "Yc",
                'usage_limit' => 1115,
                'min_amount' => 437,
                'storage_id' => "898a7733-e75b-425c-ab02-a901188a9c05"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 7028,
                'is_disabled' => TRUE,
                'is_hidden' => FALSE,
                'is_public' => FALSE,
                'code' => "D",
                'usage_limit' => 1150,
                'min_amount' => 482,
                'storage_id' => "5cf27213-7406-450f-be70-b906bc11e64e"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 1132,
                'display_ends_at' => "2023-09-22T17:22:23.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "IqFEpEzlkb",
                'usage_limit' => 6104,
                'min_amount' => 2850,
                'storage_id' => "ac034b73-d584-445e-a83e-30dcd0cf40c8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 4965,
                'display_starts_at' => "2025-01-14T01:00:59.000000Z",
                'display_ends_at' => "2020-12-06T13:27:21.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "R7zZjof",
                'usage_limit' => 7512,
                'min_amount' => 9518,
                'storage_id' => "e89fee8a-1bff-4d25-8770-bd3821dd4d71"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 7169,
                'discount_upper_limit' => 4290,
                'display_starts_at' => "2022-06-08T04:18:09.000000Z",
                'display_ends_at' => "2025-08-11T13:10:07.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "6Vch",
                'usage_limit' => 257,
                'min_amount' => 8481,
                'storage_id' => "b66aa2aa-2748-4918-bc77-584f51b8f33d"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 1965,
                'description' => "SBaSPaNKxM4bPYPan8UYIRAISeS032nbwP9uwXrTBWthKP8SFB1epaCsenfTVlWMFnuMgJI5wZ1cKhV863o3fLMEPLjDOHvTYhO06QE7ACXnugqJAsKtBEhfGR87GnzBbDtq5K3lfoJShMC6uD2oZ5QpD7GXwDffXUtXBf9of2MaByNhkorzLzXS7sax7iYOPlAj5UlMDxo6iDarlMDzJC7wMAkFYNemkzZpvDvog0lglLv2T90aOF7qLZJG",
                'discount_upper_limit' => 6999,
                'display_starts_at' => "2023-02-17T12:59:14.000000Z",
                'display_ends_at' => "2025-02-15T13:48:00.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "8mYG8iBp",
                'usage_limit' => 9003,
                'min_amount' => 519,
                'storage_id' => "a4c4c6af-5741-450a-b98e-4ef786cfcea6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 439,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["f444e5e5-6306-47f2-bf81-e3cbfaad056d", "56bb459c-03a6-434d-bd44-f428b55af8ca", "0f495d1f-d189-452f-844e-78b9a4672a3e", "a35fa222-862f-4204-beeb-f63d59435b6a", "fe28456e-a185-4f2a-9f04-23aa54f0369a", "5f4b473f-83c5-4d2b-8174-762f396b5957", "de7779eb-6d2c-440c-8ddb-7231b753c330"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 7545,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["09583827-43da-4293-8cc3-5cb38dcddded", "799adb74-119c-47bd-81ae-4b1608c888b5", "afc00aa5-424e-4ee2-83a2-2c663736bcae", "b9d4f3a3-d25d-4cea-8474-228afa3b30ae", "e9785497-c4f8-4346-9ffc-b4d8df5a02e8"],
                'storage_id' => "d3ae5c4a-c8db-4ca3-99a3-7f48f488f4f9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 4512,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["ecf16d17-21bc-4b65-b3bc-8f60c83f0284", "963b4390-0f60-47ad-ad38-7df9d5775e76", "54836e4d-95b1-4ed3-a37b-bcc5be4dcd63", "201adefa-5fcc-4366-8f1a-1eb32cdaf362", "4bc015a4-532c-4b8e-a725-b20fc3f371e3", "d6c31202-144d-44d3-a075-5acb4c302ebd", "1128e664-2df1-4b33-86f3-f609ade1300e", "61052515-5082-4f28-9eec-177d6ab7c647", "d8952262-d18a-47eb-8807-51264406a515"],
                'min_amount' => 958,
                'storage_id' => "a30796a3-3168-4178-a220-26e2f3f2071b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 3122,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["6963beab-ea6d-424f-9a98-51836523fc9f", "b1af9f29-3f86-4f52-966a-d91cd1d7e3b1", "83a71a5e-5d79-4599-84bc-5b66ffa7de07", "4eaf406b-26d0-4aaf-bdbe-027b6c03d2f1", "7f9bf865-0b75-4a92-8a8a-483759329423", "ee4b1e2a-173c-4e92-8ed6-70146075451f", "07492c97-4d98-4d1e-a647-11faf4f38207"],
                'usage_limit' => 9241,
                'min_amount' => 3048,
                'storage_id' => "38f7bc84-d71d-4243-b87a-3cc486803686"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 2400,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["5c41ada0-92c5-4250-a64a-f03e560c287f", "c545fd2a-ee73-405c-811d-79f2f6514e27", "d3d658c3-c13f-4b88-96b0-c89aa523c371", "f44896c5-f076-418a-828a-6f4ae04ca1ff", "30a4a404-bd28-4350-b0fc-920d0607d356", "5183c33b-e600-4cc0-af84-df5e892bc916", "b59a29a3-c33d-4c04-b11c-2097bab9ebb7", "8758db37-0896-4850-bcf5-ecd99f230aef"],
                'code' => "FV",
                'usage_limit' => 1565,
                'min_amount' => 2276,
                'storage_id' => "303b3d9a-1f29-42c4-8588-fefd89a07d38"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 8803,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["d4aca829-ba66-4b93-a93e-6309946576b3", "8eed0ee9-9296-46aa-b58b-6b7f163185de", "19a89ff1-1dc6-422a-87c2-d24327bf382a", "a1452348-b65d-4dd9-9870-3fcc9eb37fbe", "e89ea638-a6cf-42c4-8276-942bbf2dbff7"],
                'is_public' => TRUE,
                'code' => "aMAc0JPV",
                'usage_limit' => 8322,
                'min_amount' => 1978,
                'storage_id' => "2c0b1ea2-e02e-4c76-9018-585fa28aaee8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 876,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["bd693b97-7331-4cfd-9474-43eb50501383"],
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "QHQhhRs2PI",
                'usage_limit' => 7694,
                'min_amount' => 9569,
                'storage_id' => "1e2bbcfb-aea7-4816-aba8-c93d2ff7017f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 1378,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["892f69d1-7f31-4cdf-9707-31f9b7c70778", "781ff27e-20f8-4a0a-b6ac-576960942c50", "75e58658-0cb8-4524-9591-c477d08e584e", "91795556-e11f-4670-8320-ab4ea3c74555", "c4c4b379-a369-4645-85a6-04fa9433459d", "b3bdfe41-fe70-4ccb-9f4d-5a7c875ea41c", "53361dbb-3ab6-4836-9abd-1dde493f4840", "46aa28a1-eaeb-4ec5-8f86-fe4f72f5880c", "101fe03c-1874-486f-91a0-c501aab66db1"],
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "c",
                'usage_limit' => 889,
                'min_amount' => 1191,
                'storage_id' => "dc11ebad-29a0-4280-9cc4-7c5c46a8182c"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 4877,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["18de54cf-2627-45dd-89d7-d29e78bd9f7c", "f8f20a5e-0180-4256-b726-b02abe027def"],
                'display_ends_at' => "2025-04-30T11:06:46.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "YbDKlivy",
                'usage_limit' => 2499,
                'min_amount' => 9591,
                'storage_id' => "d80e34bf-1640-46d3-8ea4-7317c4e175f3"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 9604,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["010ac9f1-65d8-4943-9b9a-8c951ab36b43", "eaf71d65-afd4-44e2-b702-fcf0d9e1019a", "6d505039-956a-417a-8925-b3e0bc9a8041", "92ac7a6d-de6b-49d6-99e5-2419ae00197e", "2c6a791f-9501-4779-bc60-6e1611f579a3"],
                'display_starts_at' => "2020-08-28T10:01:06.000000Z",
                'display_ends_at' => "2020-05-28T10:34:08.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "1",
                'usage_limit' => 2588,
                'min_amount' => 4057,
                'storage_id' => "61a7a3f2-15fa-47f5-90f2-f16bdc11b00f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 2346,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["9b2ce793-bc9c-4387-bbc9-0f8ff14162bb", "5f3f9bc1-c7f7-4063-8a36-b35eacb61ab3"],
                'discount_upper_limit' => 5001,
                'display_starts_at' => "2024-03-28T16:27:24.000000Z",
                'display_ends_at' => "2021-01-03T22:30:03.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "rF",
                'usage_limit' => 5901,
                'min_amount' => 9491,
                'storage_id' => "7394ee64-0f6a-4a07-841e-6303ead7e18b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_amount' => 4312,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["bc19f443-26c5-44d4-a06c-9d1856d67637", "c50b9b36-66ad-4d83-a727-88b451592775", "385ea431-ee00-4d93-a245-897b0a43ec55", "5469767c-d80a-4a75-9b8f-ce2ecfa24cda", "7c4a2ea7-69f3-4721-a53c-59daced7402a", "8dd15ed8-eda4-4345-9b90-27e9ab588807", "8cece700-bbe7-47f3-9822-a0c8ff36fe16"],
                'description' => "q2ofRToY5BXgCjIyZIJEzXmOEMtSXxzZokGYkRiArikWZSvWA49o8HQUEwypAtZsgSDOAS6m",
                'discount_upper_limit' => 6042,
                'display_starts_at' => "2023-08-12T22:59:42.000000Z",
                'display_ends_at' => "2020-10-11T18:25:58.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "4",
                'usage_limit' => 3336,
                'min_amount' => 5789,
                'storage_id' => "e0a172e3-3f23-4945-8bbe-5981d0ab5c65"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon24()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 4040.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon25()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 5234.0,
                'storage_id' => "b318c1ae-11bb-4926-b436-eb3370e78305"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon26()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 8727.0,
                'min_amount' => 2203,
                'storage_id' => "00a728ec-e896-46d2-9cd8-e4dee993b89b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon27()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 6612.0,
                'usage_limit' => 7666,
                'min_amount' => 2847,
                'storage_id' => "68524588-a469-403f-8dd0-2902327b4cab"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon28()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 8048.0,
                'code' => "0j1CI",
                'usage_limit' => 9139,
                'min_amount' => 8812,
                'storage_id' => "f8686f3d-bdb6-4d9d-94ca-f214ca063810"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon29()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 6129.0,
                'is_public' => TRUE,
                'code' => "jXV2f",
                'usage_limit' => 8505,
                'min_amount' => 4187,
                'storage_id' => "4f3f253b-57b9-4024-ad7e-39d09cb349cf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon30()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 9638.0,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "1e",
                'usage_limit' => 5609,
                'min_amount' => 6570,
                'storage_id' => "d0b5abd7-7139-4840-98d2-e5ad3731253a"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon31()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 629.0,
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "XLsbYmrfH",
                'usage_limit' => 1408,
                'min_amount' => 933,
                'storage_id' => "beeaeb57-00b6-4fa3-9fc1-c51021177765"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon32()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 4635.0,
                'display_ends_at' => "2023-12-10T00:55:04.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "u9jSykyDM",
                'usage_limit' => 6165,
                'min_amount' => 5141,
                'storage_id' => "8e269f26-f402-4778-aadb-b7d1604dc668"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon33()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 9389.0,
                'display_starts_at' => "2024-04-12T00:32:28.000000Z",
                'display_ends_at' => "2025-08-03T16:34:08.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "qsNkUwp",
                'usage_limit' => 2564,
                'min_amount' => 8157,
                'storage_id' => "8a19749b-c16e-4fde-b84f-924ae4809762"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon34()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 1150.0,
                'discount_upper_limit' => 782,
                'display_starts_at' => "2022-11-06T13:22:02.000000Z",
                'display_ends_at' => "2021-02-16T08:52:36.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "5NaDqvIkEg",
                'usage_limit' => 6914,
                'min_amount' => 3797,
                'storage_id' => "298f0d91-6abf-4131-a947-894aa1e2916f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon35()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 420.0,
                'description' => "eu1nD62pEennAfXO8IbuWWi93UYOzWoEzm8A2AGl9yivXZBxfQ6TXMiAoASOIgsAFMRnA6RqJv3Yoi1HNQ6SUUxfHdkFZrSjoj4E906hjOODSKfXhRhf12fH18u3lWSr6bxBxhq8hzLJKGl7pegu99iLkGceRH09p3Djf3U",
                'discount_upper_limit' => 5565,
                'display_starts_at' => "2023-10-28T02:22:16.000000Z",
                'display_ends_at' => "2020-03-05T19:18:32.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "TuFX",
                'usage_limit' => 6751,
                'min_amount' => 9718,
                'storage_id' => "e8d9374a-c281-46d4-b2eb-1699428f08b8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon36()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 16.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["3b0ac878-46b5-4918-a3ab-95d6aebe6e4d", "6941497d-cf5f-4d5e-a3b8-b3f565f89da3", "90edb614-dfa8-4361-9c9f-246b71a3a69d", "fe255ee3-b545-4049-a579-b2f8b3915f51"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon37()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 7034.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["0be67d44-9891-457f-8b3b-bb85f652f834", "9565a101-3709-4336-a996-a29f337517bf", "5de5047d-c112-4bd3-a5c7-2094209fa416", "8e989502-5f90-4f8a-9f83-a0668a78dc45", "93581364-bd70-420b-8491-dfac6fd4cf30", "008e847d-13d5-45d2-9cd6-e70b636d3e6b", "6ab27a46-c996-4b4c-946d-9183c885476c", "7f58953e-4ef8-4d70-b827-3cdb4e15e5d3"],
                'storage_id' => "e2f48f3d-93c9-4ab9-9563-f6581cb1ba0c"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon38()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 7653.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["abca8ce3-67f2-4bed-931d-8312a5499d7d"],
                'min_amount' => 6946,
                'storage_id' => "fc3ec10d-8e5e-41ee-a3eb-ecf007648237"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon39()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 7441.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["749f1228-3ec7-42bf-acf9-7e48080914b3", "406886f4-7c15-4fbb-a50d-af090c29e932", "847a7848-d91d-4b80-acc2-e634db4cfda1", "85e4e6f7-0d2e-4fc8-86e2-72bd43016c43", "9c606947-5978-4011-b09e-a19d7f03d52e", "791ed6d8-b37a-4540-b1f8-733279a2e0f7", "27da9e13-adde-4d28-ad87-c874931531e1", "cf098bc0-3fcb-4197-b0f5-4631e0d7f63f", "50c856f1-b4e4-4308-ad8d-c5694ad22acb"],
                'usage_limit' => 731,
                'min_amount' => 3054,
                'storage_id' => "859c197e-e41e-4507-9db2-eb322146c00b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon40()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 8262.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["790476e3-570a-4d28-ad13-87f4790072a9", "a51aa449-c273-480d-a7f8-2badaf9be3bb", "61a99690-ce54-46d4-969e-f05d9a80e28b", "93f14e32-f4b4-4557-a32b-fab348d063e9"],
                'code' => "jgCa",
                'usage_limit' => 3124,
                'min_amount' => 2118,
                'storage_id' => "f84d4705-52dd-44b7-8d97-800f0e122529"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon41()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 3592.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["2a30dfe2-19a2-45fd-ac32-a2b4e7771215", "8fb89428-26d4-403f-b692-ad56f1ee34a5", "63c1b8d9-f679-4008-ba9d-0290d26cabc7", "7a74dc7e-3309-402d-a36f-f88fc9dc7d4e", "1226b183-21d9-4c4c-89af-8221b2be0958", "aa6a4786-91f8-4524-8df1-4cef3d731f60", "d9ebceee-c26b-4b1d-8dbe-4047c5bf1d7d", "2fc608f1-8e58-4aec-8a98-5f70aa0ec17b"],
                'is_public' => TRUE,
                'code' => "Qwp",
                'usage_limit' => 2617,
                'min_amount' => 4372,
                'storage_id' => "074bd6b9-0ba5-4b9f-a376-1830f8e26c18"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon42()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 4996.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["f4edbef5-8379-4eba-a7ed-b5c841041ea2", "2e158c90-3f4b-4df1-870f-3bee09d769ee", "66576a4f-5aa1-4aa7-81e5-89cd6dde4ef4"],
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "o3ZtB",
                'usage_limit' => 4429,
                'min_amount' => 5828,
                'storage_id' => "545f6b80-fa17-4944-a09b-673b175ddbb0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon43()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 7313.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["6be4a0ab-5929-4093-ac16-585b3e3e6e64", "3bc820d7-b47e-4d05-8645-e52327f9df25", "d58e3e94-bfb8-4c17-b55a-6a6abd902427", "4abb60e2-5755-49aa-bde1-d2ae26ab5320", "f2011f1e-1a54-49e0-85ac-b2ba6984e53a", "cbe6028b-884e-4f03-8e68-b9eda39236f8", "f108f2b5-d160-4a43-a80b-904c0b52b693", "2cc1dc71-2dc2-4e93-a7f6-db6656a313d7", "2d10076e-597b-4cdc-b285-aa673e6cbb36", "c6495edf-0d77-4bff-840b-51941a0285a8"],
                'is_disabled' => TRUE,
                'is_hidden' => FALSE,
                'is_public' => FALSE,
                'code' => "880",
                'usage_limit' => 1602,
                'min_amount' => 9533,
                'storage_id' => "6d0eb481-9344-4ac5-aa88-0a402854fade"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon44()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 2292.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["35447b1e-6e4f-4377-b522-a5d8d2ab9e34", "6fee5791-c844-48ed-ab58-811e467b0298", "5e4fa790-8073-4efb-84bd-6763a95020aa", "715d910c-dcbb-4550-8855-9aef3b35de65", "1189d112-5ed6-4e27-9b02-c6acd2099a31", "15ff8dd8-481d-4502-be5f-23c86e482eb7", "f9288591-2038-4de8-afdf-798a6de9eab5"],
                'display_ends_at' => "2021-11-10T17:20:07.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => TRUE,
                'code' => "wm",
                'usage_limit' => 5860,
                'min_amount' => 4606,
                'storage_id' => "54038678-f3af-4939-88a5-9330ab25d64f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon45()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 6352.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["f222d4db-080b-4dd8-b30e-0ea6862c8a03", "a6c690f9-c4ba-469f-9020-62b9fe243670", "fef113b5-550f-47de-b9b2-c9416469e195"],
                'display_starts_at' => "2023-02-28T16:49:59.000000Z",
                'display_ends_at' => "2024-02-25T16:17:18.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => TRUE,
                'is_public' => TRUE,
                'code' => "zXIFX",
                'usage_limit' => 8794,
                'min_amount' => 5390,
                'storage_id' => "6fefa024-e1e2-47ea-b369-4a6963ace58f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon46()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 974.0,
                'is_shop_specified' => FALSE,
                'available_shop_ids' => ["a9a50a8f-d598-4907-985a-c222afc2f930", "9744146c-0846-4427-9467-0487b52481bc", "9a0c30dc-ad93-4fb0-a78b-85a81baaa6db", "1f4268e2-54f5-44d1-96ab-02f7063ff491", "fe45f2c0-38cb-4365-a1a0-de9b87ac38d1", "c23a2934-2648-4957-a650-b206586cf015", "99de4af5-11c4-4bee-9f38-1edd6842b9f6", "215bbf74-574c-45ac-893b-ba9c1b2f362b", "31cf17c7-fed4-4310-96aa-bacb07df4783", "5da604df-2c79-4239-ba8a-8ae2e13a3fe1"],
                'discount_upper_limit' => 5518,
                'display_starts_at' => "2024-11-20T23:37:34.000000Z",
                'display_ends_at' => "2022-07-08T23:35:29.000000Z",
                'is_disabled' => TRUE,
                'is_hidden' => TRUE,
                'is_public' => FALSE,
                'code' => "rNxQgJ",
                'usage_limit' => 419,
                'min_amount' => 1970,
                'storage_id' => "0e3f20fd-d064-4eb1-92ab-5aea1c5941d2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCoupon47()
    {
        $client = $this->newClient();
        $request = new Request\CreateCoupon(
            "95211c5b-07c2-4920-816c-7394f1f9625b",
            "f",
            "2020-04-14T11:16:32.000000Z",
            "2020-09-04T21:17:15.000000Z",
            "1330505e-bc9a-4de8-b068-7a07c009ebc6",
            [
                'discount_percentage' => 5956.0,
                'is_shop_specified' => TRUE,
                'available_shop_ids' => ["d6c4aaf8-d3f8-4603-960d-44ecd205b5be", "32976b51-7846-44e8-8d4d-f4326bd6881c", "06caff24-392c-4965-846f-43705c41e260", "9d8957ed-0c49-4cec-9f6d-bb8cb01a91f6", "4b765fad-fc8f-47f1-ba2d-15f1df0e657e", "9acc1b5b-aa97-4ca5-bf0f-6414b4997f10", "30664fee-ecc7-4f4f-9459-1ee2e127aa14"],
                'description' => "g6rdqjemTbEPE7it6nxw8VlzyCNbz8zcALV0qfahEqSWpbWk8lIjmXf3crokuVBQQlsA8T5nZUMuDqspHuPmGiUoPteza9Foxx3GETJuunMNM7JUVu7YgDI0zSm63cU49za1QJALcpDZJ7Y",
                'discount_upper_limit' => 1227,
                'display_starts_at' => "2021-02-14T03:30:06.000000Z",
                'display_ends_at' => "2024-05-01T05:30:09.000000Z",
                'is_disabled' => FALSE,
                'is_hidden' => FALSE,
                'is_public' => FALSE,
                'code' => "ZqFQRMY",
                'usage_limit' => 1570,
                'min_amount' => 2282,
                'storage_id' => "adcdd6b7-7165-42c9-96bb-e192156d31b0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
