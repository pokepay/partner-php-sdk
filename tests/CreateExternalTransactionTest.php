<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExternalTransaction extends TestCase
{
    public function testCreateExternalTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "8d29a4ca-d502-4d1b-bdee-0b503dce8095",
            "58cde5bd-740a-4706-9d08-879a372004c3",
            "54f6eb4c-7455-498b-b8c7-991f6258a2be",
            8268
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExternalTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "8d29a4ca-d502-4d1b-bdee-0b503dce8095",
            "58cde5bd-740a-4706-9d08-879a372004c3",
            "54f6eb4c-7455-498b-b8c7-991f6258a2be",
            8268,
            [
                'request_id' => "0387e1e0-6cf4-4a5c-b267-cf6f8a923867"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExternalTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "8d29a4ca-d502-4d1b-bdee-0b503dce8095",
            "58cde5bd-740a-4706-9d08-879a372004c3",
            "54f6eb4c-7455-498b-b8c7-991f6258a2be",
            8268,
            [
                'products' => [],
                'request_id' => "6c5b6e68-ff07-44d3-b370-bd50306a703c"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExternalTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "8d29a4ca-d502-4d1b-bdee-0b503dce8095",
            "58cde5bd-740a-4706-9d08-879a372004c3",
            "54f6eb4c-7455-498b-b8c7-991f6258a2be",
            8268,
            [
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "338ac73d-0ec8-4345-b5b7-80b49109483c"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExternalTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "8d29a4ca-d502-4d1b-bdee-0b503dce8095",
            "58cde5bd-740a-4706-9d08-879a372004c3",
            "54f6eb4c-7455-498b-b8c7-991f6258a2be",
            8268,
            [
                'description' => "eX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSs",
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "5416faef-52c5-42f4-bbd0-db5614209eef"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
