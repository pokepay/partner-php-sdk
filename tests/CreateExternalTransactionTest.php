<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExternalTransaction extends TestCase
{
    public function testCreateExternalTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "ca489c32-3a6c-4f8e-b06f-1fb0407fb1e7",
            "a0f15138-5d0e-4553-98fc-6f52b686ef5f",
            "c8338fbf-7f1a-4ba4-bada-f433b205ff70",
            9685
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExternalTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "ca489c32-3a6c-4f8e-b06f-1fb0407fb1e7",
            "a0f15138-5d0e-4553-98fc-6f52b686ef5f",
            "c8338fbf-7f1a-4ba4-bada-f433b205ff70",
            9685,
            [
                'request_id' => "e6e7344b-de48-4248-a5d8-d02eb6c83575"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExternalTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "ca489c32-3a6c-4f8e-b06f-1fb0407fb1e7",
            "a0f15138-5d0e-4553-98fc-6f52b686ef5f",
            "c8338fbf-7f1a-4ba4-bada-f433b205ff70",
            9685,
            [
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "8242d677-eae7-40a8-9c15-b431cd60c332"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExternalTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "ca489c32-3a6c-4f8e-b06f-1fb0407fb1e7",
            "a0f15138-5d0e-4553-98fc-6f52b686ef5f",
            "c8338fbf-7f1a-4ba4-bada-f433b205ff70",
            9685,
            [
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "9d9a2bd9-9b87-4467-a7ad-0c04a1fa7901"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExternalTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "ca489c32-3a6c-4f8e-b06f-1fb0407fb1e7",
            "a0f15138-5d0e-4553-98fc-6f52b686ef5f",
            "c8338fbf-7f1a-4ba4-bada-f433b205ff70",
            9685,
            [
                'description' => "3A",
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "bbda88bb-17d4-4a4f-b2f9-81fd33669349"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
