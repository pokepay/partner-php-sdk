<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExternalTransaction extends TestCase
{
    public function testCreateExternalTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "5b8c1045-7438-4e79-a58e-622e5cfa8838",
            "52387805-2fbb-47f8-a4e9-9e235d9cc243",
            "8b951d70-c974-4472-807e-2e991747cc38",
            6488
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExternalTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "5b8c1045-7438-4e79-a58e-622e5cfa8838",
            "52387805-2fbb-47f8-a4e9-9e235d9cc243",
            "8b951d70-c974-4472-807e-2e991747cc38",
            6488,
            [
                'request_id' => "52fd151a-8b14-4913-b323-19116a5d3cfe"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExternalTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "5b8c1045-7438-4e79-a58e-622e5cfa8838",
            "52387805-2fbb-47f8-a4e9-9e235d9cc243",
            "8b951d70-c974-4472-807e-2e991747cc38",
            6488,
            [
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "0219c8d1-fe53-4624-8aa7-e07dc1376673"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExternalTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "5b8c1045-7438-4e79-a58e-622e5cfa8838",
            "52387805-2fbb-47f8-a4e9-9e235d9cc243",
            "8b951d70-c974-4472-807e-2e991747cc38",
            6488,
            [
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "9c3d530b-567d-409a-b9e3-c8a2fa6bfa9f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExternalTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateExternalTransaction(
            "5b8c1045-7438-4e79-a58e-622e5cfa8838",
            "52387805-2fbb-47f8-a4e9-9e235d9cc243",
            "8b951d70-c974-4472-807e-2e991747cc38",
            6488,
            [
                'description' => "vMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvA",
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "37140474-4d1b-44b9-9132-1dd973a82581"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
