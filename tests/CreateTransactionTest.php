<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "1d3831bb-a724-4804-9fc2-8a14d55c4475",
            "8e35ccbe-6def-4224-814a-7e84feedf9d3",
            "54834b5c-2549-4c46-95f2-4d29e2e821d4"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "1d3831bb-a724-4804-9fc2-8a14d55c4475",
            "8e35ccbe-6def-4224-814a-7e84feedf9d3",
            "54834b5c-2549-4c46-95f2-4d29e2e821d4",
            [
                'description' => "1u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxw"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "1d3831bb-a724-4804-9fc2-8a14d55c4475",
            "8e35ccbe-6def-4224-814a-7e84feedf9d3",
            "54834b5c-2549-4c46-95f2-4d29e2e821d4",
            [
                'point_expires_at' => "2021-09-24T18:10:59.000000Z",
                'description' => "U0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5h"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "1d3831bb-a724-4804-9fc2-8a14d55c4475",
            "8e35ccbe-6def-4224-814a-7e84feedf9d3",
            "54834b5c-2549-4c46-95f2-4d29e2e821d4",
            [
                'point_amount' => 704,
                'point_expires_at' => "2023-02-11T11:10:11.000000Z",
                'description' => "61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUIL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "1d3831bb-a724-4804-9fc2-8a14d55c4475",
            "8e35ccbe-6def-4224-814a-7e84feedf9d3",
            "54834b5c-2549-4c46-95f2-4d29e2e821d4",
            [
                'money_amount' => 6062,
                'point_amount' => 4712,
                'point_expires_at' => "2020-08-18T18:30:44.000000Z",
                'description' => "tRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr07"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
