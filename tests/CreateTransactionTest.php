<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
            "871826fd-fb3c-441c-b3de-2ce18e09ee81",
            "5b6ab0cd-5833-4d3f-8dc6-d12cdae70d0b"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
            "871826fd-fb3c-441c-b3de-2ce18e09ee81",
            "5b6ab0cd-5833-4d3f-8dc6-d12cdae70d0b",
            [
                'description' => "n6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
            "871826fd-fb3c-441c-b3de-2ce18e09ee81",
            "5b6ab0cd-5833-4d3f-8dc6-d12cdae70d0b",
            [
                'point_expires_at' => "2025-01-24T17:31:49.000000+09:00",
                'description' => "u8UbXHSU9E0Qlg3gebv"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
            "871826fd-fb3c-441c-b3de-2ce18e09ee81",
            "5b6ab0cd-5833-4d3f-8dc6-d12cdae70d0b",
            [
                'point_amount' => 4033,
                'point_expires_at' => "2020-08-08T04:46:09.000000+09:00",
                'description' => "jzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
            "871826fd-fb3c-441c-b3de-2ce18e09ee81",
            "5b6ab0cd-5833-4d3f-8dc6-d12cdae70d0b",
            [
                'money_amount' => 8979,
                'point_amount' => 9768,
                'point_expires_at' => "2024-06-11T00:07:56.000000+09:00",
                'description' => "rmP2c2b7A"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
