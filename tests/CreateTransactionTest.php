<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "3748b395-ca61-48cd-a586-e9da339c5bb3",
            "84e6b71f-7605-4233-8187-5906f517df10",
            "1a47b3b3-9f22-4211-8ea9-9e97d12fe4f1"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "3748b395-ca61-48cd-a586-e9da339c5bb3",
            "84e6b71f-7605-4233-8187-5906f517df10",
            "1a47b3b3-9f22-4211-8ea9-9e97d12fe4f1",
            [
                'description' => "PConw4LerCJAh5eafAZHYQRcKg5nREDZlUMFKY93VpSGflCZYxOmPtUcQWhtC4bYOLXg1mfruZmSpwpI1MHPAY3F4I2y7B"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "3748b395-ca61-48cd-a586-e9da339c5bb3",
            "84e6b71f-7605-4233-8187-5906f517df10",
            "1a47b3b3-9f22-4211-8ea9-9e97d12fe4f1",
            [
                'point_expires_at' => "2020-09-02T10:55:45.000000+09:00",
                'description' => "IqmwJn6y6QSeM6JYFcth82SR9k2d5FclXOZ6pOP1rVFU9n9OYjnn9DqTBHUUTyOoy36bi4SsQUuJoDSQlEZJPjojinuDVKNv0OkPrmHgS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "3748b395-ca61-48cd-a586-e9da339c5bb3",
            "84e6b71f-7605-4233-8187-5906f517df10",
            "1a47b3b3-9f22-4211-8ea9-9e97d12fe4f1",
            [
                'point_amount' => 5517,
                'point_expires_at' => "2023-12-29T16:15:40.000000+09:00",
                'description' => "yOCxx0Yos9ifBJEIcnWFYQXkLO81QQ8JlVMpKEzX2Q9D4qZy4zR5u79JUdeszGbgoBXtQp6qRbj8X0rcH6uoe1h2ODNWvkRDW3l4BaHEZK3LK6hT2bvfTxfgtj0vCRDfjoqRzt1AeUTuxYqHwiNdyD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "3748b395-ca61-48cd-a586-e9da339c5bb3",
            "84e6b71f-7605-4233-8187-5906f517df10",
            "1a47b3b3-9f22-4211-8ea9-9e97d12fe4f1",
            [
                'money_amount' => 7742,
                'point_amount' => 8693,
                'point_expires_at' => "2022-06-11T10:37:40.000000+09:00",
                'description' => "9LZiauikzdAYutgegLm0xgYdxH1jX7sVyxwQuMaNjY16qUIbB1U8KvI7dRnyamUyQf8ZoBYztYCvbOk8WF6WkpKBKZaObQA0JDwB65iQNDVHYjHvHs0FuLD5NPw1TiHONKVnTXdXNXrDiA6UKMceLYAp9iwQ9IAW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
