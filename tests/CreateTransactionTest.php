<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "5261605c-89db-4afa-86b9-bf15f99b2bb8",
            "89725227-7e63-4f19-9d86-9afd24ad7415",
            "debbeb91-609f-4c04-a398-a2513081e214"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "5261605c-89db-4afa-86b9-bf15f99b2bb8",
            "89725227-7e63-4f19-9d86-9afd24ad7415",
            "debbeb91-609f-4c04-a398-a2513081e214",
            [
                'description' => "OurWti4GCuPyMsc1sZHdFVOmWThS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "5261605c-89db-4afa-86b9-bf15f99b2bb8",
            "89725227-7e63-4f19-9d86-9afd24ad7415",
            "debbeb91-609f-4c04-a398-a2513081e214",
            [
                'point_expires_at' => "2024-01-24T13:20:19.000000+09:00",
                'description' => "1tbVkyDNR7rRT5hZ2kJUWrqGzCzEHtQPrEIZntgZsjpT8UlUGmbgtOH7LfoDbDM85XKVVh7pJXRzkFi2nujhjdLk6TPfwS56GBTZvY88y7ODmTlWDsveXS1mAE6mDMbKpDP4k508E5Ro9QvQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "5261605c-89db-4afa-86b9-bf15f99b2bb8",
            "89725227-7e63-4f19-9d86-9afd24ad7415",
            "debbeb91-609f-4c04-a398-a2513081e214",
            [
                'point_amount' => 8874,
                'point_expires_at' => "2023-11-24T07:17:06.000000+09:00",
                'description' => "RVx3gsJ0VtLSq6UjiQuxAhEUazejqAvM7DxvuV6tZGKvLQaLQIT3W52gIcFDfas8CxZ706EUPvViQlyNYdjBeVLy2edE0JDnBMc0b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "5261605c-89db-4afa-86b9-bf15f99b2bb8",
            "89725227-7e63-4f19-9d86-9afd24ad7415",
            "debbeb91-609f-4c04-a398-a2513081e214",
            [
                'money_amount' => 3523,
                'point_amount' => 2509,
                'point_expires_at' => "2021-02-17T16:25:43.000000+09:00",
                'description' => "9DYfsd1qGBkvn0wKVBa2adCpxoRbtKcSNv6213ZjY7J1lT1hAy7GcG0WC0RQiyFO8hpGWY1QptmY3mG86MSfiWPrzbcJm7JuS71yaVp35zO3qaV6AO2CY6vCZVEjppnI1385oWXOPHZZx1Kt9xu78ay7bidkV4WhFHuoiNbhejsKnYQEg14HoPKYC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
