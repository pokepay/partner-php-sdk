<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "7a657de0-32c3-438b-a0ce-b943ab491211",
            "f2bfb46c-799f-4fb9-b800-79b97cddbfc9",
            "440bd825-396e-4805-a3f2-d03dd24204a4"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "7a657de0-32c3-438b-a0ce-b943ab491211",
            "f2bfb46c-799f-4fb9-b800-79b97cddbfc9",
            "440bd825-396e-4805-a3f2-d03dd24204a4",
            [
                'description' => "h5bKrK2A0mcFTtdvdsEkzDVoxJr0lAnMovtOnbZ68JstsOcxw5PoatcF0TU5W5omYIqjFLKdIYieVX7m2aCCypluKCuWAlkVHsDkHFJvihW5VcQOv2mc2ISnCuuu6HEZICTUsFd55cysKpzPw06buTFvYo4vEubGw6jVHah2jNyPqoWcQPdnYsCcbQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "7a657de0-32c3-438b-a0ce-b943ab491211",
            "f2bfb46c-799f-4fb9-b800-79b97cddbfc9",
            "440bd825-396e-4805-a3f2-d03dd24204a4",
            [
                'point_expires_at' => "2016-04-05T14:00:33.000000+09:00",
                'description' => "2KFXsspdkpVkTBJa3OTrsXs88kJNoIZazm0lWPTZ7efHVp4Du6bqVzq0H9hNDIpWOGRlL4QDCIWrLzYwdZH6RYisLn"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "7a657de0-32c3-438b-a0ce-b943ab491211",
            "f2bfb46c-799f-4fb9-b800-79b97cddbfc9",
            "440bd825-396e-4805-a3f2-d03dd24204a4",
            [
                'point_amount' => 1389,
                'point_expires_at' => "2023-04-15T07:39:52.000000+09:00",
                'description' => "i2yyfAvCUPPfC6gPSyCFjnlF5wS89FXtStGksuJSc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "7a657de0-32c3-438b-a0ce-b943ab491211",
            "f2bfb46c-799f-4fb9-b800-79b97cddbfc9",
            "440bd825-396e-4805-a3f2-d03dd24204a4",
            [
                'money_amount' => 7297,
                'point_amount' => 8762,
                'point_expires_at' => "2016-02-14T20:17:25.000000+09:00",
                'description' => "YbNMb4YSuPWKo7xO0kav9UABs7zcSSckrHrP7zrKa6Deu24AbEENpv2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
