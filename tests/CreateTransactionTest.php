<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "6376c4cd-77d5-4f83-b5f6-4a691c7475e7",
            "7b12d97c-fa58-4ed8-b7a7-7e94d15e1291",
            "4bf1ac04-bd49-4763-ae1e-7f11cd3bc12d"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "6376c4cd-77d5-4f83-b5f6-4a691c7475e7",
            "7b12d97c-fa58-4ed8-b7a7-7e94d15e1291",
            "4bf1ac04-bd49-4763-ae1e-7f11cd3bc12d",
            [
                'description' => "jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "6376c4cd-77d5-4f83-b5f6-4a691c7475e7",
            "7b12d97c-fa58-4ed8-b7a7-7e94d15e1291",
            "4bf1ac04-bd49-4763-ae1e-7f11cd3bc12d",
            [
                'point_expires_at' => "2022-04-18T05:29:48.000000Z",
                'description' => "y1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "6376c4cd-77d5-4f83-b5f6-4a691c7475e7",
            "7b12d97c-fa58-4ed8-b7a7-7e94d15e1291",
            "4bf1ac04-bd49-4763-ae1e-7f11cd3bc12d",
            [
                'point_amount' => 350,
                'point_expires_at' => "2023-05-10T17:38:49.000000Z",
                'description' => "RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "6376c4cd-77d5-4f83-b5f6-4a691c7475e7",
            "7b12d97c-fa58-4ed8-b7a7-7e94d15e1291",
            "4bf1ac04-bd49-4763-ae1e-7f11cd3bc12d",
            [
                'money_amount' => 2628,
                'point_amount' => 4634,
                'point_expires_at' => "2020-05-01T08:52:03.000000Z",
                'description' => "vKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFT"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
