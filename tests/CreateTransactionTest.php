<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "49e86053-1355-4238-bf2d-7c6da6ffc327",
            "9af7cc09-0b54-41b9-8e37-ee7bdc6728d9",
            "a9c6983e-8e64-43ef-b9ba-6f686ab81c76"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "49e86053-1355-4238-bf2d-7c6da6ffc327",
            "9af7cc09-0b54-41b9-8e37-ee7bdc6728d9",
            "a9c6983e-8e64-43ef-b9ba-6f686ab81c76",
            [
                'description' => "K96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7Ozzt"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "49e86053-1355-4238-bf2d-7c6da6ffc327",
            "9af7cc09-0b54-41b9-8e37-ee7bdc6728d9",
            "a9c6983e-8e64-43ef-b9ba-6f686ab81c76",
            [
                'point_expires_at' => "2020-12-21T01:34:50.000000Z",
                'description' => "RdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmosz"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "49e86053-1355-4238-bf2d-7c6da6ffc327",
            "9af7cc09-0b54-41b9-8e37-ee7bdc6728d9",
            "a9c6983e-8e64-43ef-b9ba-6f686ab81c76",
            [
                'point_amount' => 3050,
                'point_expires_at' => "2024-04-23T13:14:38.000000Z",
                'description' => "7gjncZRjG49ZyE9dB8fCGfT"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "49e86053-1355-4238-bf2d-7c6da6ffc327",
            "9af7cc09-0b54-41b9-8e37-ee7bdc6728d9",
            "a9c6983e-8e64-43ef-b9ba-6f686ab81c76",
            [
                'money_amount' => 7228,
                'point_amount' => 2765,
                'point_expires_at' => "2024-02-15T15:30:06.000000Z",
                'description' => "Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
