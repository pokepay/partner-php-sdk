<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "62db0e25-c813-40e5-b3fe-d42d22eb66cd",
            "828f09a0-5be5-4755-983c-ceb95d4f1343",
            "7a77404c-858e-4ab2-8300-ee54ef492e0e"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "62db0e25-c813-40e5-b3fe-d42d22eb66cd",
            "828f09a0-5be5-4755-983c-ceb95d4f1343",
            "7a77404c-858e-4ab2-8300-ee54ef492e0e",
            [
                'description' => "2SlRue58PaXeNwvPfNYN9qo1iSThbeDQpDO7xHZRfdFMa7Vmw0dL1Ojo9pmFyvV9q92VKsIU63BkMCFHu8gp6B8XN8sG5hXTkbn0echFlmhiziKGmaHIwSmvMxq1wBSE9qUE7uNMIDr9Tj4XOga3RNUcC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "62db0e25-c813-40e5-b3fe-d42d22eb66cd",
            "828f09a0-5be5-4755-983c-ceb95d4f1343",
            "7a77404c-858e-4ab2-8300-ee54ef492e0e",
            [
                'point_expires_at' => "2021-04-25T01:03:42.000000+09:00",
                'description' => "1r4Cm26k2ccnfACBh1Re8oKKdRP2XpNPgWP0cdkFPDqrcFxfCtFHDoZIrRs34xIHTMt1rVkNFXl4K9HaFoTAs"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "62db0e25-c813-40e5-b3fe-d42d22eb66cd",
            "828f09a0-5be5-4755-983c-ceb95d4f1343",
            "7a77404c-858e-4ab2-8300-ee54ef492e0e",
            [
                'point_amount' => 1545,
                'point_expires_at' => "2021-04-30T22:53:51.000000+09:00",
                'description' => "phWQxRU9InaSn2oQwRjjISr7hNvuvlH5lADJ3iCnaElQ4ILOdRZNI3pE4X1oYdZzIMXOJUG5E"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "62db0e25-c813-40e5-b3fe-d42d22eb66cd",
            "828f09a0-5be5-4755-983c-ceb95d4f1343",
            "7a77404c-858e-4ab2-8300-ee54ef492e0e",
            [
                'money_amount' => 4979,
                'point_amount' => 3006,
                'point_expires_at' => "2022-07-07T09:17:20.000000+09:00",
                'description' => "dP1BEMW9wdFKWRbm"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
