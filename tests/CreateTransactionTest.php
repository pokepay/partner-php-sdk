<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "bbfc8cce-9c6b-4298-a621-102f1705c57d",
            "9351ab93-412c-40ba-ab71-0d64713deda2",
            "242ed247-7f7c-4ea2-a0cf-5712cb850259"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "bbfc8cce-9c6b-4298-a621-102f1705c57d",
            "9351ab93-412c-40ba-ab71-0d64713deda2",
            "242ed247-7f7c-4ea2-a0cf-5712cb850259",
            [
                'description' => "a42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1d"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "bbfc8cce-9c6b-4298-a621-102f1705c57d",
            "9351ab93-412c-40ba-ab71-0d64713deda2",
            "242ed247-7f7c-4ea2-a0cf-5712cb850259",
            [
                'point_expires_at' => "2022-01-04T18:56:57.000000+09:00",
                'description' => "pEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4UwDxtqXzHNdytk1inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKT"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "bbfc8cce-9c6b-4298-a621-102f1705c57d",
            "9351ab93-412c-40ba-ab71-0d64713deda2",
            "242ed247-7f7c-4ea2-a0cf-5712cb850259",
            [
                'point_amount' => 4908,
                'point_expires_at' => "2024-09-16T01:46:53.000000+09:00",
                'description' => "YT7eEYLwvHQFKDImV0W8u"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "bbfc8cce-9c6b-4298-a621-102f1705c57d",
            "9351ab93-412c-40ba-ab71-0d64713deda2",
            "242ed247-7f7c-4ea2-a0cf-5712cb850259",
            [
                'money_amount' => 1229,
                'point_amount' => 8734,
                'point_expires_at' => "2024-04-21T17:54:26.000000+09:00",
                'description' => "ziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6tQ3vZwFKRF7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5O"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
