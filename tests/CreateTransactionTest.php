<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "d60a13d6-f664-4a16-ac01-df9fba2ae897",
            "8d1f33b3-7b31-4b3e-ac03-4b178ac7d565",
            "6e4a6348-e90e-4594-bd19-959f986dd8b5"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "d60a13d6-f664-4a16-ac01-df9fba2ae897",
            "8d1f33b3-7b31-4b3e-ac03-4b178ac7d565",
            "6e4a6348-e90e-4594-bd19-959f986dd8b5",
            [
                'description' => "Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "d60a13d6-f664-4a16-ac01-df9fba2ae897",
            "8d1f33b3-7b31-4b3e-ac03-4b178ac7d565",
            "6e4a6348-e90e-4594-bd19-959f986dd8b5",
            [
                'point_expires_at' => "2023-04-28T14:17:57.000000Z",
                'description' => "ZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "d60a13d6-f664-4a16-ac01-df9fba2ae897",
            "8d1f33b3-7b31-4b3e-ac03-4b178ac7d565",
            "6e4a6348-e90e-4594-bd19-959f986dd8b5",
            [
                'point_amount' => 6465,
                'point_expires_at' => "2020-12-08T17:02:41.000000Z",
                'description' => "2xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqz"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "d60a13d6-f664-4a16-ac01-df9fba2ae897",
            "8d1f33b3-7b31-4b3e-ac03-4b178ac7d565",
            "6e4a6348-e90e-4594-bd19-959f986dd8b5",
            [
                'money_amount' => 5766,
                'point_amount' => 4156,
                'point_expires_at' => "2023-09-25T18:36:20.000000Z",
                'description' => "sahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghDCw1Un7nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
