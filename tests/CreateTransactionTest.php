<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "1aebeca4-a104-4516-b51a-ccd52b482d6f",
            "a136030a-64b9-4834-9d94-fabf53e0a273",
            "395b2ea1-1e87-4b35-b649-4d019a8301f7"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "1aebeca4-a104-4516-b51a-ccd52b482d6f",
            "a136030a-64b9-4834-9d94-fabf53e0a273",
            "395b2ea1-1e87-4b35-b649-4d019a8301f7",
            [
                'description' => "fyDurWVkkLRThSIv6XB96SseHLp5K9kuBtm41x98oaGZL11l4boH7C2HKos6UqrUMJyf0M1cLCVKpzUouBaexX1RXV9jBe77aghCTpMoc8CIPuaGEbNVaZSbM2FkM4gHM4fhzUQPg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "1aebeca4-a104-4516-b51a-ccd52b482d6f",
            "a136030a-64b9-4834-9d94-fabf53e0a273",
            "395b2ea1-1e87-4b35-b649-4d019a8301f7",
            [
                'point_expires_at' => "2023-04-26T06:56:35.000000+09:00",
                'description' => "DlnqHrjEZhrb1Q2tVadSTM7WCTKU5IfjEXVtCG16YkuoxHPHqsGl8ytKhkkr6EGjHQ4X4UuJzZqFQZgacAD1WFXwUXMuS68L1dIHn3eDBt3AkuvBSrhA1N42a0iXPFZiooloM3gEmFprAhGnBJ7GqKF7SyLxqWYynLE3Gn9wRDEWeAzwX3drFGI1UuXPaMVGQW2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "1aebeca4-a104-4516-b51a-ccd52b482d6f",
            "a136030a-64b9-4834-9d94-fabf53e0a273",
            "395b2ea1-1e87-4b35-b649-4d019a8301f7",
            [
                'point_amount' => 3891,
                'point_expires_at' => "2022-10-26T14:35:33.000000+09:00",
                'description' => "RIJu5btZ0NxXaBBMlMpLlcqEeGIYFoWNGZFYZxz2ElD6EMf3DXGbtmpxDdSLjAdu6F8Vl08n6eYVXyn58BoiyultCyHPo1p63"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "1aebeca4-a104-4516-b51a-ccd52b482d6f",
            "a136030a-64b9-4834-9d94-fabf53e0a273",
            "395b2ea1-1e87-4b35-b649-4d019a8301f7",
            [
                'money_amount' => 8268,
                'point_amount' => 7073,
                'point_expires_at' => "2021-08-02T06:21:13.000000+09:00",
                'description' => "NjAQVMHKEI8cjLLBoqoVkCZuTdhKqmTdgwXwMpJw50Q3VTdABKGp7hTT9HCzul8iDs8KAJEGJF87JDA6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
