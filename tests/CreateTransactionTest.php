<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "8a480fc1-4577-4907-9d6a-c87cf26f7afa",
            "a387e891-8847-4c38-9559-5e87acab0e1d",
            "d044b25e-2b03-4761-acdb-0b70e9a91604"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "8a480fc1-4577-4907-9d6a-c87cf26f7afa",
            "a387e891-8847-4c38-9559-5e87acab0e1d",
            "d044b25e-2b03-4761-acdb-0b70e9a91604",
            [
                'description' => "gA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2J"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "8a480fc1-4577-4907-9d6a-c87cf26f7afa",
            "a387e891-8847-4c38-9559-5e87acab0e1d",
            "d044b25e-2b03-4761-acdb-0b70e9a91604",
            [
                'point_expires_at' => "2023-11-18T10:39:42.000000Z",
                'description' => "K33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "8a480fc1-4577-4907-9d6a-c87cf26f7afa",
            "a387e891-8847-4c38-9559-5e87acab0e1d",
            "d044b25e-2b03-4761-acdb-0b70e9a91604",
            [
                'point_amount' => 676,
                'point_expires_at' => "2020-08-14T23:35:01.000000Z",
                'description' => "ofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "8a480fc1-4577-4907-9d6a-c87cf26f7afa",
            "a387e891-8847-4c38-9559-5e87acab0e1d",
            "d044b25e-2b03-4761-acdb-0b70e9a91604",
            [
                'money_amount' => 7778,
                'point_amount' => 5824,
                'point_expires_at' => "2024-01-26T18:25:24.000000Z",
                'description' => "i1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
