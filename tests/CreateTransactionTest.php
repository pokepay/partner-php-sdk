<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransaction extends TestCase
{
    public function testCreateTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "63474c6c-907e-4aa9-be73-322520264a64",
            "32d4c003-a3e2-487b-b217-018aecfa7812",
            "1b984778-0255-4354-a2fe-f113e9606a70"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "63474c6c-907e-4aa9-be73-322520264a64",
            "32d4c003-a3e2-487b-b217-018aecfa7812",
            "1b984778-0255-4354-a2fe-f113e9606a70",
            [
                'description' => "kQr9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "63474c6c-907e-4aa9-be73-322520264a64",
            "32d4c003-a3e2-487b-b217-018aecfa7812",
            "1b984778-0255-4354-a2fe-f113e9606a70",
            [
                'point_expires_at' => "2021-06-06T22:19:39.000000+09:00",
                'description' => "1HarFGRZ0Q28LywVGUz2sIRxtNbAYMzHePlwRHJLPebYCA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp7HiQajpl09d6QIiaL5c40GPi4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxs"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "63474c6c-907e-4aa9-be73-322520264a64",
            "32d4c003-a3e2-487b-b217-018aecfa7812",
            "1b984778-0255-4354-a2fe-f113e9606a70",
            [
                'point_amount' => 1179,
                'point_expires_at' => "2023-02-03T13:27:12.000000+09:00",
                'description' => "j4qDxwlIsjYdDsgNzWfMVYN8tFOR"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransaction(
            "63474c6c-907e-4aa9-be73-322520264a64",
            "32d4c003-a3e2-487b-b217-018aecfa7812",
            "1b984778-0255-4354-a2fe-f113e9606a70",
            [
                'money_amount' => 9065,
                'point_amount' => 8097,
                'point_expires_at' => "2024-08-26T02:07:07.000000+09:00",
                'description' => "N1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6KqsDEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
