<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreatePaymentTransaction extends TestCase
{
    public function testCreatePaymentTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "ce60f2c3-5f9f-4ec7-993f-5ba1e68b7038",
            "d86ee7e0-23e9-4e1a-bc00-0a97564e5127",
            "48c2bea5-17bb-429a-a419-f900634aa370",
            7678
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "ce60f2c3-5f9f-4ec7-993f-5ba1e68b7038",
            "d86ee7e0-23e9-4e1a-bc00-0a97564e5127",
            "48c2bea5-17bb-429a-a419-f900634aa370",
            7678,
            [
                'request_id' => "6677c494-7529-4337-983a-1e244f8d52bb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "ce60f2c3-5f9f-4ec7-993f-5ba1e68b7038",
            "d86ee7e0-23e9-4e1a-bc00-0a97564e5127",
            "48c2bea5-17bb-429a-a419-f900634aa370",
            7678,
            [
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "d3e8a186-bf22-4886-a51f-c559a1289335"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "ce60f2c3-5f9f-4ec7-993f-5ba1e68b7038",
            "d86ee7e0-23e9-4e1a-bc00-0a97564e5127",
            "48c2bea5-17bb-429a-a419-f900634aa370",
            7678,
            [
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "849ffd6d-c8e2-422d-87bd-4b0440b219a9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "ce60f2c3-5f9f-4ec7-993f-5ba1e68b7038",
            "d86ee7e0-23e9-4e1a-bc00-0a97564e5127",
            "48c2bea5-17bb-429a-a419-f900634aa370",
            7678,
            [
                'description' => "DtGNKyXA9xzKVTlopBDPFsqLGUBct3mOm6ghMhCkjN5EuLIHYQgQQomV44Xd0tzgWOUJiKsm8MtiIFa54zfXHCtfmk7fxE6dfY73EJszJnJmOfRNJmE03o1RGbOWWMlfBsMp4b4t",
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "d39afd1d-e6b2-4022-8af9-eb98dae1e13d"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
