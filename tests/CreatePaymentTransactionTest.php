<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreatePaymentTransaction extends TestCase
{
    public function testCreatePaymentTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "057ceab5-469c-4f3a-92ae-59357b21d776",
            "9da3f599-0ad2-40e5-947f-0dcd34ccbde2",
            "8f7ec3a8-ace2-4f1a-bcd6-87a92c10a958",
            3256
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "057ceab5-469c-4f3a-92ae-59357b21d776",
            "9da3f599-0ad2-40e5-947f-0dcd34ccbde2",
            "8f7ec3a8-ace2-4f1a-bcd6-87a92c10a958",
            3256,
            [
                'coupon_id' => "452b1129-5fc0-4428-88d3-6bdfdb52067f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "057ceab5-469c-4f3a-92ae-59357b21d776",
            "9da3f599-0ad2-40e5-947f-0dcd34ccbde2",
            "8f7ec3a8-ace2-4f1a-bcd6-87a92c10a958",
            3256,
            [
                'strategy' => "point-preferred",
                'coupon_id' => "eb37be4a-071d-4b94-b713-23199e350e11"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "057ceab5-469c-4f3a-92ae-59357b21d776",
            "9da3f599-0ad2-40e5-947f-0dcd34ccbde2",
            "8f7ec3a8-ace2-4f1a-bcd6-87a92c10a958",
            3256,
            [
                'request_id' => "3044885f-5407-4f4b-b611-e160b2590ce6",
                'strategy' => "money-only",
                'coupon_id' => "649d9f51-7d83-4942-987c-8a62c12c8877"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "057ceab5-469c-4f3a-92ae-59357b21d776",
            "9da3f599-0ad2-40e5-947f-0dcd34ccbde2",
            "8f7ec3a8-ace2-4f1a-bcd6-87a92c10a958",
            3256,
            [
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "31244ea3-69c7-447d-90b5-781fb5102cc6",
                'strategy' => "point-preferred",
                'coupon_id' => "a7f10a5f-7d66-444f-a2ba-e6e22b620e4b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction5()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "057ceab5-469c-4f3a-92ae-59357b21d776",
            "9da3f599-0ad2-40e5-947f-0dcd34ccbde2",
            "8f7ec3a8-ace2-4f1a-bcd6-87a92c10a958",
            3256,
            [
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "f4875893-03d3-42a0-b2f7-a24fcd3c43b8",
                'strategy' => "money-only",
                'coupon_id' => "db04f8ca-2955-42d3-ac36-5e54f07df563"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction6()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "057ceab5-469c-4f3a-92ae-59357b21d776",
            "9da3f599-0ad2-40e5-947f-0dcd34ccbde2",
            "8f7ec3a8-ace2-4f1a-bcd6-87a92c10a958",
            3256,
            [
                'description' => "MNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f5",
                'metadata' => "{\"key\":\"value\"}",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "quantity" => 1, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "c16e39bb-b259-4849-b1ab-3250b11f14fb",
                'strategy' => "money-only",
                'coupon_id' => "750d3568-8e94-4333-8fd5-a0426cda8d41"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
