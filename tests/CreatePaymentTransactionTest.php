<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreatePaymentTransaction extends TestCase
{
    public function testCreatePaymentTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "8743b12f-c1e3-4ca1-b061-6db0b16451a0",
            "9edde9e1-2bdf-4eb0-a9aa-5ebc2d21fbf0",
            "6118cef5-daad-4acc-b4b3-4349e3dd7dd1",
            5707
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "8743b12f-c1e3-4ca1-b061-6db0b16451a0",
            "9edde9e1-2bdf-4eb0-a9aa-5ebc2d21fbf0",
            "6118cef5-daad-4acc-b4b3-4349e3dd7dd1",
            5707,
            [
                'request_id' => "6a4d1551-1551-4901-8bc8-2f62ddc93afc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "8743b12f-c1e3-4ca1-b061-6db0b16451a0",
            "9edde9e1-2bdf-4eb0-a9aa-5ebc2d21fbf0",
            "6118cef5-daad-4acc-b4b3-4349e3dd7dd1",
            5707,
            [
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "3d69c636-5ce6-4ae9-aba7-11aebf9290dd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "8743b12f-c1e3-4ca1-b061-6db0b16451a0",
            "9edde9e1-2bdf-4eb0-a9aa-5ebc2d21fbf0",
            "6118cef5-daad-4acc-b4b3-4349e3dd7dd1",
            5707,
            [
                'metadata' => "'{\"key\":\"value\"}'",
                'products' => [["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        , ["jan_code" => "abc", "name" => "name1", "unit_price" => 100, "price" => 100, "is_discounted" => FALSE, "other" => "{}"]
        ],
                'request_id' => "c61a43e7-f138-43d5-abbe-9db39bd42f58"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransaction4()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransaction(
            "8743b12f-c1e3-4ca1-b061-6db0b16451a0",
            "9edde9e1-2bdf-4eb0-a9aa-5ebc2d21fbf0",
            "6118cef5-daad-4acc-b4b3-4349e3dd7dd1",
            5707,
            [
                'description' => "igR3jya01cL7edhmrVi5NIsblUeDquiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa",
                'metadata' => "'{\"key\":\"value\"}'",
                'products' => [],
                'request_id' => "65ad82b5-601e-4eb4-a198-e961c7cbc9a2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
