<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class GetPrivateMoneyOrganizationSummaries extends TestCase
{
    public function testGetPrivateMoneyOrganizationSummaries0()
    {
        $client = $this->newClient();
        $request = new Request\GetPrivateMoneyOrganizationSummaries(
            "6ae3b4b0-5e5b-4e95-8564-d6ff7e5d6837"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testGetPrivateMoneyOrganizationSummaries1()
    {
        $client = $this->newClient();
        $request = new Request\GetPrivateMoneyOrganizationSummaries(
            "6ae3b4b0-5e5b-4e95-8564-d6ff7e5d6837",
            [
                'page' => 5765
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testGetPrivateMoneyOrganizationSummaries2()
    {
        $client = $this->newClient();
        $request = new Request\GetPrivateMoneyOrganizationSummaries(
            "6ae3b4b0-5e5b-4e95-8564-d6ff7e5d6837",
            [
                'per_page' => 5862,
                'page' => 8957
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testGetPrivateMoneyOrganizationSummaries3()
    {
        $client = $this->newClient();
        $request = new Request\GetPrivateMoneyOrganizationSummaries(
            "6ae3b4b0-5e5b-4e95-8564-d6ff7e5d6837",
            [
                'from' => "2018-10-18T15:25:13.000000+09:00",
                'to' => "2022-08-26T08:09:53.000000+09:00"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testGetPrivateMoneyOrganizationSummaries4()
    {
        $client = $this->newClient();
        $request = new Request\GetPrivateMoneyOrganizationSummaries(
            "6ae3b4b0-5e5b-4e95-8564-d6ff7e5d6837",
            [
                'from' => "2016-08-27T17:21:24.000000+09:00",
                'to' => "2021-06-14T10:22:43.000000+09:00",
                'page' => 8847
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testGetPrivateMoneyOrganizationSummaries5()
    {
        $client = $this->newClient();
        $request = new Request\GetPrivateMoneyOrganizationSummaries(
            "6ae3b4b0-5e5b-4e95-8564-d6ff7e5d6837",
            [
                'from' => "2020-04-29T14:08:56.000000+09:00",
                'to' => "2016-10-22T04:10:05.000000+09:00",
                'per_page' => 5288,
                'page' => 3029
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
