<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class GetPrivateMoneyOrganizationSummaries extends TestCase
{
    public function testGetPrivateMoneyOrganizationSummaries0()
    {
        $client = $this->newClient();
        $request = new Request\GetPrivateMoneyOrganizationSummaries(
            "d8b99c9b-157c-4c26-b8cb-a653d242dd9c"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testGetPrivateMoneyOrganizationSummaries1()
    {
        $client = $this->newClient();
        $request = new Request\GetPrivateMoneyOrganizationSummaries(
            "d8b99c9b-157c-4c26-b8cb-a653d242dd9c",
            [
                'page' => 3171
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testGetPrivateMoneyOrganizationSummaries2()
    {
        $client = $this->newClient();
        $request = new Request\GetPrivateMoneyOrganizationSummaries(
            "d8b99c9b-157c-4c26-b8cb-a653d242dd9c",
            [
                'per_page' => 3815,
                'page' => 8720
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testGetPrivateMoneyOrganizationSummaries3()
    {
        $client = $this->newClient();
        $request = new Request\GetPrivateMoneyOrganizationSummaries(
            "d8b99c9b-157c-4c26-b8cb-a653d242dd9c",
            [
                'from' => "2022-05-07T10:50:17.000000Z",
                'to' => "2020-06-21T04:11:02.000000Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testGetPrivateMoneyOrganizationSummaries4()
    {
        $client = $this->newClient();
        $request = new Request\GetPrivateMoneyOrganizationSummaries(
            "d8b99c9b-157c-4c26-b8cb-a653d242dd9c",
            [
                'from' => "2021-11-09T07:50:51.000000Z",
                'to' => "2020-02-07T11:49:14.000000Z",
                'page' => 9542
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testGetPrivateMoneyOrganizationSummaries5()
    {
        $client = $this->newClient();
        $request = new Request\GetPrivateMoneyOrganizationSummaries(
            "d8b99c9b-157c-4c26-b8cb-a653d242dd9c",
            [
                'from' => "2023-03-29T21:09:55.000000Z",
                'to' => "2023-12-24T11:05:04.000000Z",
                'per_page' => 8558,
                'page' => 4876
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
