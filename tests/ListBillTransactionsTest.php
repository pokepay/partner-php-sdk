<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListBillTransactions extends TestCase
{
    public function testListBillTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'per_page' => 166
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'prev_page_cursor_id' => "60fe0e50-aba1-4233-bb7c-2964f54d34af",
                'per_page' => 505
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'next_page_cursor_id' => "d15140cc-1a68-49c4-a1ea-7e8a71ca7b90",
                'prev_page_cursor_id' => "031f1872-bdf4-4c21-b4af-9b43b371718c",
                'per_page' => 327
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'to' => "2022-05-20T00:37:16.000000Z",
                'next_page_cursor_id' => "3cf72fc5-ee7c-45de-9653-6d578d29a4ca",
                'prev_page_cursor_id' => "804fd502-9d1b-43bd-ae50-809558cde5bd",
                'per_page' => 11
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'from' => "2022-01-28T10:55:25.000000Z",
                'to' => "2025-05-09T08:51:20.000000Z",
                'next_page_cursor_id' => "c4bf879a-04c3-4b4c-958b-6478c3f3b2c7",
                'prev_page_cursor_id' => "b83d991f-a2be-4aab-bcbb-e04c0387e1e0",
                'per_page' => 245
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'is_modified' => TRUE,
                'from' => "2025-02-13T22:45:06.000000Z",
                'to' => "2020-04-27T19:32:55.000000Z",
                'next_page_cursor_id' => "664ecf6f-3867-4a5b-9068-ff0700d684d3",
                'prev_page_cursor_id' => "e08fe0b3-f270-4d50-bca3-c73d0b630ec8",
                'per_page' => 838
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'bill_id' => "04fa6b35-29b7-40b4-bce5-ee23988082bf",
                'is_modified' => TRUE,
                'from' => "2023-03-07T04:40:26.000000Z",
                'to' => "2021-07-15T06:56:49.000000Z",
                'next_page_cursor_id' => "d9edfd02-486b-410e-b3c8-5cb404d2a152",
                'prev_page_cursor_id' => "b5cd2eb2-924d-4209-a708-fd795d9e25d7",
                'per_page' => 165
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'transaction_id' => "3bf4dabf-bab6-45fa-b1b4-ab0bb6108139",
                'bill_id' => "c9b848ca-a142-4c52-9adb-3ced964ca051",
                'is_modified' => FALSE,
                'from' => "2021-12-10T04:33:28.000000Z",
                'to' => "2021-10-06T07:05:16.000000Z",
                'next_page_cursor_id' => "200a23fe-dd22-4a18-9455-fd8746a91a91",
                'prev_page_cursor_id' => "82b0a411-9ae7-461c-977a-6d65e99bbf7c",
                'per_page' => 996
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'description' => "WdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHfSBBKI1KQl4cK6HLesoN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lz",
                'transaction_id' => "a88089c7-49e7-43b9-abb8-8583b0e9167a",
                'bill_id' => "a33bae58-e499-4935-8127-4926dff9f028",
                'is_modified' => TRUE,
                'from' => "2023-06-09T09:23:23.000000Z",
                'to' => "2020-06-13T05:51:52.000000Z",
                'next_page_cursor_id' => "c09567a8-bcb6-4d72-bd0d-7addd8dda9e4",
                'prev_page_cursor_id' => "0b94da7a-de29-4fda-803a-078e03815e36",
                'per_page' => 940
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'terminal_id' => "eddf07cb-5869-44f7-b630-2f457760bacb",
                'description' => "pO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9V",
                'transaction_id' => "4c785adc-cb77-471b-b0e7-9268c700689c",
                'bill_id' => "030f0c76-919c-4355-b7c8-1c59d295b734",
                'is_modified' => FALSE,
                'from' => "2021-06-23T10:59:12.000000Z",
                'to' => "2021-02-20T03:43:09.000000Z",
                'next_page_cursor_id' => "c193c811-e4e7-487c-942d-2771bfcd6f61",
                'prev_page_cursor_id' => "59c99334-a487-4670-a6b3-17ce5a7e4dbb",
                'per_page' => 513
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'customer_name' => "BV6jnDEmNinmBAkCQlWqd",
                'terminal_id' => "a9264c34-1456-46a7-a7f4-ace06c4196e1",
                'description' => "7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8Kxv6FPaZ8I6AxiybIUdjn2JlMSQ6V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0BEPaxu5hz",
                'transaction_id' => "07d54cb8-d381-4484-b1ac-ea82783a0af5",
                'bill_id' => "91145548-3538-4838-8ee7-4e9c0828e659",
                'is_modified' => TRUE,
                'from' => "2022-05-11T08:04:01.000000Z",
                'to' => "2023-10-05T10:58:36.000000Z",
                'next_page_cursor_id' => "64c7c096-2cd1-4c27-9643-dcb4339fbfa7",
                'prev_page_cursor_id' => "74af3005-1f8d-49b5-9951-0a7da2abe273",
                'per_page' => 221
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'customer_id' => "cf01d52d-da8e-4fe5-9d17-e879ddb76a90",
                'customer_name' => "s9QyHVorEq6zLZyg3cEPs9bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqyENnnotJ",
                'terminal_id' => "6745f3ff-4fcb-474e-a54d-e7327835c544",
                'description' => "vQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GPfHYeeJWiJLn1TOW",
                'transaction_id' => "8bfa1c08-f556-4d4e-b1be-6a03ad5ebfcb",
                'bill_id' => "4cea0c5c-5d43-4d59-abe7-5d61e5c67c4e",
                'is_modified' => TRUE,
                'from' => "2023-12-21T19:10:01.000000Z",
                'to' => "2020-08-16T04:12:38.000000Z",
                'next_page_cursor_id' => "90bafded-8686-4ea7-a1d3-3dda0667b657",
                'prev_page_cursor_id' => "499bdeaa-5aca-43ee-9e2b-bbbc64a7a92f",
                'per_page' => 904
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'shop_id' => "ae11e487-1431-4090-ac2a-9fbf0b9e4384",
                'customer_id' => "ff08dda5-3908-44bc-93b2-941169c57607",
                'customer_name' => "7yVjYZzSkjksojB4PnV9",
                'terminal_id' => "144fa3f3-a69d-4921-8207-c5848e4b17a6",
                'description' => "fF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXW",
                'transaction_id' => "2fddce04-7c7c-4ac3-b51b-70f4852c0429",
                'bill_id' => "d87ba3fe-19cc-4ec6-8e27-73a3444916de",
                'is_modified' => TRUE,
                'from' => "2020-09-10T20:04:56.000000Z",
                'to' => "2023-07-09T03:31:17.000000Z",
                'next_page_cursor_id' => "aac2dd93-e210-4c7c-b15c-9ed6b027a8a0",
                'prev_page_cursor_id' => "c67bbd50-ea2a-4643-be5f-39880f55a604",
                'per_page' => 279
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'organization_code' => "Fm-",
                'shop_id' => "a3aa113a-8113-4dfe-a2eb-79007c9f52ad",
                'customer_id' => "190c67f8-f98e-493f-9fb4-074b3f6b0db7",
                'customer_name' => "mpotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIV",
                'terminal_id' => "8ed87dea-d9f4-4f5e-9591-fa6b2e7b2586",
                'description' => "TSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0Q",
                'transaction_id' => "361edf54-365f-4f0e-a6bc-afa2f9c42317",
                'bill_id' => "9fcf2d40-a278-4982-b86c-a5b2d11015bb",
                'is_modified' => TRUE,
                'from' => "2021-09-25T23:49:46.000000Z",
                'to' => "2022-03-23T13:41:52.000000Z",
                'next_page_cursor_id' => "6915cc42-07bc-496a-9979-aa3fc57b1ed1",
                'prev_page_cursor_id' => "cb0b8d8d-e5f1-479d-a520-accfee17411e",
                'per_page' => 272
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions15()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'private_money_id' => "9aeee731-60fe-4f2b-b93f-764b089d7d68",
                'organization_code' => "S6-pZn6zKe3am-3l-N7RH-Or9",
                'shop_id' => "4c31d29a-31ff-4be4-a42b-383ae9016134",
                'customer_id' => "22e4bfa7-c7ed-47ad-8c80-601f0b400fca",
                'customer_name' => "zHpOgkhaasWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMMEyVApk",
                'terminal_id' => "a1a45582-2dab-46a4-a144-686552dae459",
                'description' => "OtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTq",
                'transaction_id' => "6c4258ff-1c10-41bf-884c-e2a432ad195b",
                'bill_id' => "9920bdd1-0d77-4861-865a-76025ae04e39",
                'is_modified' => TRUE,
                'from' => "2022-05-05T05:49:39.000000Z",
                'to' => "2023-09-06T13:11:29.000000Z",
                'next_page_cursor_id' => "44324a70-0bef-45d2-af88-055081e7443c",
                'prev_page_cursor_id' => "9e7e9011-bc0b-48cb-95e7-2c7e94ec302f",
                'per_page' => 10
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
