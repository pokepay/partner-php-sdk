<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListBillTransactions extends TestCase
{
    public function testListBillTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'per_page' => 155
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'prev_page_cursor_id' => "605b0ee7-59a4-4f6b-a4ae-ba380686a451",
                'per_page' => 352
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'next_page_cursor_id' => "3bd2de53-d2da-471d-9377-7e4afb270031",
                'prev_page_cursor_id' => "8c1e8775-8ce4-4c8c-a91c-555b27f1d9af",
                'per_page' => 838
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'to' => "2023-07-05T09:20:09.000000Z",
                'next_page_cursor_id' => "60fd087e-9908-497e-86a1-e686a1427962",
                'prev_page_cursor_id' => "b5d99fa9-4089-4498-b73e-777aa0278abf",
                'per_page' => 264
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'from' => "2024-10-13T21:58:57.000000Z",
                'to' => "2020-01-03T21:42:34.000000Z",
                'next_page_cursor_id' => "e57385db-97b6-4da7-8bda-27d4721f2c23",
                'prev_page_cursor_id' => "0c41c311-7adb-43c5-ab14-0f30eb758d3a",
                'per_page' => 521
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'is_modified' => FALSE,
                'from' => "2020-11-09T18:23:35.000000Z",
                'to' => "2023-06-23T22:03:48.000000Z",
                'next_page_cursor_id' => "22d3be7f-8452-4b47-b1bf-6564a3e61a38",
                'prev_page_cursor_id' => "f98d206a-9b97-4510-87e9-7b68a4142ec6",
                'per_page' => 563
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'bill_id' => "zo2GN3QYDG",
                'is_modified' => TRUE,
                'from' => "2024-04-07T11:52:35.000000Z",
                'to' => "2023-03-28T10:01:49.000000Z",
                'next_page_cursor_id' => "28ba46a6-d228-448c-83da-5c53b36d0f31",
                'prev_page_cursor_id' => "c5c1c65b-7810-483b-90d6-f50496929a65",
                'per_page' => 182
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'transaction_id' => "Zzi2NmWBlu",
                'bill_id' => "rzflOytNd",
                'is_modified' => FALSE,
                'from' => "2022-01-25T09:52:15.000000Z",
                'to' => "2023-07-13T06:43:13.000000Z",
                'next_page_cursor_id' => "fe1ac32a-de6d-4c3b-8839-24ee4aff824d",
                'prev_page_cursor_id' => "2b2fcfbc-afab-4566-ac7f-f51c2681b2c1",
                'per_page' => 329
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'description' => "X3LOs6P3dxLhDjrt4CFESWJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHfSBBKI1KQl4cK6HLesoN7AsxjaX4b",
                'transaction_id' => "zo",
                'bill_id' => "5SSzFCKj",
                'is_modified' => FALSE,
                'from' => "2024-03-28T05:01:26.000000Z",
                'to' => "2023-02-09T02:28:46.000000Z",
                'next_page_cursor_id' => "2c45663e-9dfc-439c-85b8-e4328414273b",
                'prev_page_cursor_id' => "b33ff9b9-ed7c-4b50-9611-23ca013b7a5a",
                'per_page' => 11
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'terminal_id' => "5b5178f1-48b4-43b4-b640-e7a2c6570c3c",
                'description' => "5w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2U",
                'transaction_id' => "R",
                'bill_id' => "U",
                'is_modified' => TRUE,
                'from' => "2023-01-29T08:35:12.000000Z",
                'to' => "2021-02-01T10:40:32.000000Z",
                'next_page_cursor_id' => "28c4af63-13ab-4e0c-b7b9-5672c314e52e",
                'prev_page_cursor_id' => "fcfbe88f-e8ba-4bf6-bdbe-7974bc20307f",
                'per_page' => 780
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'customer_name' => "OfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8Kxv6FPaZ8I6AxiybIU",
                'terminal_id' => "1b90ab64-46ea-4fdf-ae32-94dfa5cdae26",
                'description' => "lMSQ6V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0BEPaxu5hz8quH88gYqQC45YQse",
                'transaction_id' => "yms9QyHV",
                'bill_id' => "Eq6",
                'is_modified' => TRUE,
                'from' => "2023-10-19T09:25:14.000000Z",
                'to' => "2021-08-16T10:30:05.000000Z",
                'next_page_cursor_id' => "caf43398-1d4c-40a7-a927-707b4629b28e",
                'prev_page_cursor_id' => "a559ac19-bb24-445a-a7f9-2519cadabe03",
                'per_page' => 9
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'customer_id' => "12f5cce7-0388-441b-a9ad-249113d035b3",
                'customer_name' => "EPs9bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxma",
                'terminal_id' => "a4b2aa7f-b1af-4f23-8ca4-2a196d8d752a",
                'description' => "HHuXDOcuycPW2WYY40yWZt9",
                'transaction_id' => "ZjHK",
                'bill_id' => "Li",
                'is_modified' => FALSE,
                'from' => "2023-10-13T05:30:26.000000Z",
                'to' => "2023-07-28T17:42:24.000000Z",
                'next_page_cursor_id' => "f8db6c8b-f421-441a-9f9b-66a550b59219",
                'prev_page_cursor_id' => "4440cf27-04b6-4ff1-adc3-cf18aacbcbde",
                'per_page' => 764
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'shop_id' => "1e81400b-3bff-42c6-b37a-ab6660353afb",
                'customer_id' => "9fbd6b2b-b38f-406f-a145-31ce082f7234",
                'customer_name' => "G6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqyENnnotJKNM2DvQSu06FE8juzeNINZktFZU0Jp",
                'terminal_id' => "5a43d8a8-cc48-4dc0-9270-d3d3edbca772",
                'description' => "bF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2",
                'transaction_id' => "VmnwZ1",
                'bill_id' => "YQAtf",
                'is_modified' => TRUE,
                'from' => "2020-09-02T18:36:23.000000Z",
                'to' => "2024-03-09T02:14:24.000000Z",
                'next_page_cursor_id' => "48325a32-e847-41d0-a63e-e948ab0b7e59",
                'prev_page_cursor_id' => "a894565b-9de5-4c9c-a5ca-bed739c8f016",
                'per_page' => 459
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'organization_code' => "-p--Qk-ft1--",
                'shop_id' => "b6611fff-d137-455d-b92d-73a858c514d6",
                'customer_id' => "9bf5346a-9159-487d-9a1a-65a63be07b7a",
                'customer_name' => "kjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompot",
                'terminal_id' => "67ba05e1-28ca-4396-a0a1-264036402b42",
                'description' => "Lyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJii",
                'transaction_id' => "zBkt",
                'bill_id' => "9",
                'is_modified' => TRUE,
                'from' => "2022-12-04T17:33:31.000000Z",
                'to' => "2023-01-18T10:01:23.000000Z",
                'next_page_cursor_id' => "37284bc4-5064-4c4b-abe6-9d624d329243",
                'prev_page_cursor_id' => "905a8190-f8a8-4239-af36-7a449d92f240",
                'per_page' => 864
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions15()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'private_money_id' => "cad46929-3a8f-457c-9d5c-31c277b7123f",
                'organization_code' => "2-y--fJ2-S---",
                'shop_id' => "46dcba2e-8ca8-4ad1-a4a4-88b6ba61bec6",
                'customer_id' => "19d96b46-016a-40fa-b199-3f5e9456f677",
                'customer_name' => "njIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8ELq",
                'terminal_id' => "ba84bbca-b2f7-4252-9f41-f8a9243f659a",
                'description' => "2Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMMEyVApkaDeYuOtB",
                'transaction_id' => "Zgc4",
                'bill_id' => "wc8RSE7B",
                'is_modified' => FALSE,
                'from' => "2022-08-11T00:57:01.000000Z",
                'to' => "2021-04-22T15:36:43.000000Z",
                'next_page_cursor_id' => "2db0b421-c073-4771-ae7e-4780e6dd3d22",
                'prev_page_cursor_id' => "da0e76a3-63fe-44e6-8819-4ec1cf3adbad",
                'per_page' => 191
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
