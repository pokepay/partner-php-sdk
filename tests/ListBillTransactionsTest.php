<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListBillTransactions extends TestCase
{
    public function testListBillTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'per_page' => 240
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'prev_page_cursor_id' => "eaabfe74-0124-461b-8acb-a74ef40db4a5",
                'per_page' => 846
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'next_page_cursor_id' => "2e4de732-c544-4c8a-abf6-377c6d8b3ed1",
                'prev_page_cursor_id' => "e11a828b-aba8-4627-9805-fa5356585475",
                'per_page' => 46
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'to' => "2020-04-23T09:39:11.000000+09:00",
                'next_page_cursor_id' => "b5c51899-151c-482e-8887-dc30d41f3736",
                'prev_page_cursor_id' => "f1500b00-7c09-43c6-be5f-2f451752a938",
                'per_page' => 7
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'from' => "2020-05-11T19:31:12.000000+09:00",
                'to' => "2021-06-21T23:30:50.000000+09:00",
                'next_page_cursor_id' => "821ace6a-a787-46a2-b57c-cffaa83a0fe5",
                'prev_page_cursor_id' => "0b087dce-7049-4b4e-9aeb-69252556c6c0",
                'per_page' => 576
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'is_modified' => TRUE,
                'from' => "2025-08-10T18:34:13.000000+09:00",
                'to' => "2020-09-06T00:37:18.000000+09:00",
                'next_page_cursor_id' => "a6ea190b-8306-4946-9b8a-fdda7b264355",
                'prev_page_cursor_id' => "edcda3bf-b630-454a-b0a8-cc4837cb0dc0",
                'per_page' => 915
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'bill_id' => "5201c270-d3d3-4772-b04e-1a62670d75ab",
                'is_modified' => FALSE,
                'from' => "2025-01-16T01:13:42.000000+09:00",
                'to' => "2023-05-26T17:30:32.000000+09:00",
                'next_page_cursor_id' => "ff80bd4f-5cac-4cb3-977a-787bcc034ad9",
                'prev_page_cursor_id' => "b32d57c6-c653-4ac7-99b9-adae48bc8c62",
                'per_page' => 728
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'transaction_id' => "4416a556-5fb5-486a-a25b-72ce89ded603",
                'bill_id' => "b701e2bf-dcc2-4ac5-bc88-860661692490",
                'is_modified' => TRUE,
                'from' => "2023-08-23T09:33:46.000000+09:00",
                'to' => "2021-02-06T11:29:53.000000+09:00",
                'next_page_cursor_id' => "139041a8-6eb4-4ee6-91b9-d14267303597",
                'prev_page_cursor_id' => "4b52c749-c3f0-42d4-baa6-b3d8979ebe23",
                'per_page' => 842
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions9()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'description' => "luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GPfHYeeJWiJLn1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn",
                'transaction_id' => "dbd693ba-5536-4c6e-81a9-6ea91c52196c",
                'bill_id' => "6b120a60-d3a6-4334-a311-99ba3e177a10",
                'is_modified' => FALSE,
                'from' => "2021-07-07T20:02:32.000000+09:00",
                'to' => "2025-03-20T01:21:17.000000+09:00",
                'next_page_cursor_id' => "4c2bc984-f997-4537-b108-cc82f4f18620",
                'prev_page_cursor_id' => "c4ca9c05-8b05-4b5c-8824-b462373b699f",
                'per_page' => 571
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions10()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'terminal_id' => "d8004f72-effb-4cb7-9c6a-b3760b234102",
                'description' => "7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmp",
                'transaction_id' => "289134e8-71eb-405b-a1af-b5fa17849a1e",
                'bill_id' => "79bab493-d090-4c17-a9d4-c921deb8b291",
                'is_modified' => FALSE,
                'from' => "2023-01-23T11:45:11.000000+09:00",
                'to' => "2021-06-14T17:27:23.000000+09:00",
                'next_page_cursor_id' => "f13ef236-e8f0-40fb-b4c8-498883172fac",
                'prev_page_cursor_id' => "fe688d73-f97e-464c-a5c9-105dc1340b63",
                'per_page' => 829
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions11()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'customer_name' => "rFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGEC",
                'terminal_id' => "7065e522-5f56-4776-8a8c-fe1516e9430a",
                'description' => "Anqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mL",
                'transaction_id' => "cd261880-601f-4fca-83fa-57217045fba6",
                'bill_id' => "b84ceb17-bf48-4e9f-b000-ac4f42aa9b1f",
                'is_modified' => FALSE,
                'from' => "2021-05-05T15:24:13.000000+09:00",
                'to' => "2022-11-30T08:01:47.000000+09:00",
                'next_page_cursor_id' => "59a03de8-d8e1-4a9a-a188-1df34b42afbc",
                'prev_page_cursor_id' => "39f8bd08-13bf-42ad-9706-f98f3b1df25e",
                'per_page' => 676
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions12()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'customer_id' => "be1f0d49-df00-465d-b828-424583ad0ffb",
                'customer_name' => "qJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQm",
                'terminal_id' => "8d4be100-f3e8-410a-bfd8-eb48fcbcc1a5",
                'description' => "GSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMMEyVApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AHk6",
                'transaction_id' => "3dc48903-c855-4346-b155-12eab8fe65d7",
                'bill_id' => "912f2b0d-5590-4d05-955d-19f98eba7f77",
                'is_modified' => FALSE,
                'from' => "2023-06-14T08:26:31.000000+09:00",
                'to' => "2024-01-01T04:04:24.000000+09:00",
                'next_page_cursor_id' => "ebef4b94-b9b5-4457-9769-e6b06d9ca92c",
                'prev_page_cursor_id' => "6e819b05-dea2-4487-a78a-bdd5fec81d6c",
                'per_page' => 206
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions13()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'shop_id' => "3638d035-c068-4457-8dd2-73efc1bafd8a",
                'customer_id' => "5cb7a58b-38f0-4606-bf9d-0e95932db771",
                'customer_name' => "8fm3Qjw",
                'terminal_id' => "994ab972-efd5-4ea4-8ac4-2bd3d0b6c836",
                'description' => "QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzC",
                'transaction_id' => "536a4760-6599-4a3d-9b76-3e09f77b1237",
                'bill_id' => "f395364f-76cb-47ff-9561-7aa90abc11b8",
                'is_modified' => TRUE,
                'from' => "2020-12-09T00:43:00.000000+09:00",
                'to' => "2022-08-26T06:13:34.000000+09:00",
                'next_page_cursor_id' => "714a5619-37ce-4c65-85a9-bd6eb67cc3c6",
                'prev_page_cursor_id' => "a6e04134-35fd-4731-af17-e155ad96cbcd",
                'per_page' => 600
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions14()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'organization_code' => "yT-KY-TY-0w1-KRM----io--3dEPCx",
                'shop_id' => "7a76de30-dccb-4f52-9bc7-25d562fc7830",
                'customer_id' => "c33465fc-3087-4432-852c-d6d4f139247f",
                'customer_name' => "tMe3p5BruF5QOJx8zwWTQtwhgEUQr",
                'terminal_id' => "46b5b8af-342d-48f0-9da3-39db84adb392",
                'description' => "qVtFI20RqU84wWVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzOlLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4P",
                'transaction_id' => "7e22bd27-81ec-413a-90f6-97a3f91efc79",
                'bill_id' => "32d821e9-d395-4bff-af3f-d5641a164869",
                'is_modified' => TRUE,
                'from' => "2020-02-10T12:48:03.000000+09:00",
                'to' => "2023-08-18T18:54:40.000000+09:00",
                'next_page_cursor_id' => "96d79cff-e15c-4ff9-80cf-ca931b5eaee8",
                'prev_page_cursor_id' => "7ffeac3d-ea0e-4a04-824c-18f6a76fc7ae",
                'per_page' => 971
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBillTransactions15()
    {
        $client = $this->newClient();
        $request = new Request\ListBillTransactions(
            [
                'private_money_id' => "0c897b02-8900-4c64-b1b8-4246a3fb66b7",
                'organization_code' => "Dw-9-up-3Mr-n-n206n-A4",
                'shop_id' => "f841d81f-8726-4549-9d73-0352adbb907c",
                'customer_id' => "e9004674-09c6-4a46-abb9-10f83efd5678",
                'customer_name' => "8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3m",
                'terminal_id' => "5398a95b-dd9d-4f6b-81d0-344078a3cd41",
                'description' => "Z0UMnnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ah",
                'transaction_id' => "9ee87e4e-bde3-4166-b4b2-de3272789150",
                'bill_id' => "5b5b092b-bef2-4890-8529-3240b59b3aa5",
                'is_modified' => TRUE,
                'from' => "2022-03-15T22:11:08.000000+09:00",
                'to' => "2024-08-11T02:48:19.000000+09:00",
                'next_page_cursor_id' => "e343977b-20a9-4ccb-970e-3099817d99f8",
                'prev_page_cursor_id' => "df7e9e47-9c1f-4485-b4d1-4ea0806fccaf",
                'per_page' => 619
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
