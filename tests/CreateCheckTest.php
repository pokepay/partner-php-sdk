<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 4581.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 9493.0,
                'description' => "sSHy55WYfHfvN0Q"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 2117.0,
                'is_onetime' => TRUE,
                'description' => "OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUbFxl1xg8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4m"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 2508.0,
                'usage_limit' => 357,
                'is_onetime' => FALSE,
                'description' => "HweV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 2950.0,
                'expires_at' => "2022-05-29T04:13:45.000000+09:00",
                'usage_limit' => 149,
                'is_onetime' => TRUE,
                'description' => "DqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrv"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 9976.0,
                'point_expires_at' => "2021-08-25T00:55:07.000000+09:00",
                'expires_at' => "2020-09-05T09:35:52.000000+09:00",
                'usage_limit' => 1437,
                'is_onetime' => FALSE,
                'description' => "VYBDQiRCyVTR3czNdwQ9LziqjK5MdQ1lZMyARXVB9A32ESqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHhIbteE"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 5519.0,
                'point_expires_in_days' => 8734,
                'point_expires_at' => "2024-02-28T16:30:39.000000+09:00",
                'expires_at' => "2022-03-29T23:28:49.000000+09:00",
                'usage_limit' => 6388,
                'is_onetime' => FALSE,
                'description' => "OMttUhD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 4912.0,
                'bear_point_account' => "48aa4112-5e4f-4969-b712-f5813d3aa3a2",
                'point_expires_in_days' => 454,
                'point_expires_at' => "2023-12-25T10:44:06.000000+09:00",
                'expires_at' => "2024-01-24T01:46:23.000000+09:00",
                'usage_limit' => 9718,
                'is_onetime' => TRUE,
                'description' => "7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzyk"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 9876.0,
                'point_amount' => 3252.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 6257.0,
                'point_amount' => 2818.0,
                'description' => "QWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dBSWzD3agMTAvZtCmtviHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT689"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 1833.0,
                'point_amount' => 6408.0,
                'is_onetime' => TRUE,
                'description' => "BIT98Ea3vOiHnJbC3RzxMsGYTRQVbbD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 7755.0,
                'point_amount' => 9414.0,
                'usage_limit' => 3574,
                'is_onetime' => TRUE,
                'description' => "fr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 7556.0,
                'point_amount' => 7166.0,
                'expires_at' => "2023-09-11T23:49:55.000000+09:00",
                'usage_limit' => 4178,
                'is_onetime' => TRUE,
                'description' => "Y0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRpuKefj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 5381.0,
                'point_amount' => 3001.0,
                'point_expires_at' => "2024-02-14T04:50:02.000000+09:00",
                'expires_at' => "2020-03-21T14:19:26.000000+09:00",
                'usage_limit' => 5343,
                'is_onetime' => TRUE,
                'description' => "2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 6569.0,
                'point_amount' => 6976.0,
                'point_expires_in_days' => 758,
                'point_expires_at' => "2020-07-08T22:02:05.000000+09:00",
                'expires_at' => "2023-06-04T01:10:59.000000+09:00",
                'usage_limit' => 6943,
                'is_onetime' => TRUE,
                'description' => "B6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'money_amount' => 8761.0,
                'point_amount' => 5250.0,
                'bear_point_account' => "36788d7e-438b-49d4-9cd9-322c5b3c0ab9",
                'point_expires_in_days' => 1987,
                'point_expires_at' => "2023-11-06T02:29:36.000000+09:00",
                'expires_at' => "2021-04-29T11:26:40.000000+09:00",
                'usage_limit' => 3210,
                'is_onetime' => TRUE,
                'description' => "5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'point_amount' => 4732.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'point_amount' => 5287.0,
                'description' => "JiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'point_amount' => 5989.0,
                'is_onetime' => FALSE,
                'description' => "dVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'point_amount' => 8199.0,
                'usage_limit' => 7334,
                'is_onetime' => FALSE,
                'description' => "k2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'point_amount' => 6001.0,
                'expires_at' => "2021-08-25T22:19:54.000000+09:00",
                'usage_limit' => 4397,
                'is_onetime' => FALSE,
                'description' => "pbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'point_amount' => 2993.0,
                'point_expires_at' => "2020-09-17T01:44:30.000000+09:00",
                'expires_at' => "2021-04-27T01:14:19.000000+09:00",
                'usage_limit' => 9193,
                'is_onetime' => TRUE,
                'description' => "HcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'point_amount' => 6236.0,
                'point_expires_in_days' => 1021,
                'point_expires_at' => "2021-12-04T04:39:01.000000+09:00",
                'expires_at' => "2022-05-28T06:47:48.000000+09:00",
                'usage_limit' => 1137,
                'is_onetime' => TRUE,
                'description' => "2rRxx8SeYgA5RTAZIE0d3whSKLF"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "3062fee1-c575-4aaa-b8c4-41b4f9c7f129",
            [
                'point_amount' => 3590.0,
                'bear_point_account' => "9a21587b-1da3-4a00-9758-62c3604d51e7",
                'point_expires_in_days' => 9554,
                'point_expires_at' => "2022-09-09T13:21:19.000000+09:00",
                'expires_at' => "2020-12-13T05:39:41.000000+09:00",
                'usage_limit' => 4068,
                'is_onetime' => FALSE,
                'description' => "sQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
