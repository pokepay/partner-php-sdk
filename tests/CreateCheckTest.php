<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 5725
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 4848,
                'description' => "u3R9lJVdDaUu8gKI7uxlsX8tJTVN1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 2143,
                'is_onetime' => TRUE,
                'description' => "4Avhi0fX5dozKzovfXQ3PHUhjHLVEtSIaxZ8O9N2SLzG35Urh2rbZx2aArvrKFEW0caD1nqOzKQjZCyx1Ep4VkAmGgvgI7YgVKC9RfQiSpTWZrd0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 9960,
                'usage_limit' => 3414,
                'is_onetime' => TRUE,
                'description' => "S"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 3353,
                'expires_at' => "2022-08-21T17:25:16.000000+09:00",
                'usage_limit' => 9717,
                'is_onetime' => FALSE,
                'description' => "KN3fmfJoVUvvyWz4acD4Y"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 9626,
                'point_expires_at' => "2020-12-07T07:33:42.000000+09:00",
                'expires_at' => "2024-02-22T15:56:45.000000+09:00",
                'usage_limit' => 5305,
                'is_onetime' => TRUE,
                'description' => "59xIWGujcTxFFrrXyLyMOsteVH8YLvoUoraYyVUvoHuSd144X7ZEq8UGlMat7Q5BMcC1v73v60y8DMLWrlnr061xWZsz1ogogHitDMic7XGDhIwoiIw8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 994,
                'point_expires_in_days' => 292,
                'point_expires_at' => "2020-12-07T16:59:41.000000+09:00",
                'expires_at' => "2017-08-14T05:37:38.000000+09:00",
                'usage_limit' => 4493,
                'is_onetime' => TRUE,
                'description' => "CDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIbzCAj1GsSvfXjxUW5PMdDuBsMe04PTf8vSsZQwwHu7ykbtkzGPhzROeLpMaUZfjz7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55oAI4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 9174,
                'bear_point_account' => "5627e643-9947-4ea3-90b4-9afbfb197d73",
                'point_expires_in_days' => 2389,
                'point_expires_at' => "2020-07-23T19:05:31.000000+09:00",
                'expires_at' => "2016-10-24T02:27:19.000000+09:00",
                'usage_limit' => 8199,
                'is_onetime' => FALSE,
                'description' => "FwcP7ZmLygXYRtjxN2aIco6xNkWo0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7GOWj7LV4v5yotPxhlRj2vkjikjfOo5Zy9zD8cfycxd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 7483,
                'point_amount' => 5088
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 5982,
                'point_amount' => 9304,
                'description' => "F6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4Wo0L4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 1545,
                'point_amount' => 9480,
                'is_onetime' => TRUE,
                'description' => "LjpsodOQD43fZ5T5bk20dIuBp2e25agSXyEGickpeze5Yn7vyzhltNB5edjt157B8n6abEccTMUOFUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 7750,
                'point_amount' => 8964,
                'usage_limit' => 2092,
                'is_onetime' => TRUE,
                'description' => "1a7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 9289,
                'point_amount' => 4294,
                'expires_at' => "2023-06-15T23:07:14.000000+09:00",
                'usage_limit' => 5207,
                'is_onetime' => FALSE,
                'description' => "PubyeqITUoc5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 7568,
                'point_amount' => 2074,
                'point_expires_at' => "2015-11-08T17:04:41.000000+09:00",
                'expires_at' => "2021-08-30T17:57:47.000000+09:00",
                'usage_limit' => 271,
                'is_onetime' => FALSE,
                'description' => "WI6lY3NxA2Qq6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 3740,
                'point_amount' => 935,
                'point_expires_in_days' => 318,
                'point_expires_at' => "2020-08-29T15:11:20.000000+09:00",
                'expires_at' => "2021-08-02T14:38:07.000000+09:00",
                'usage_limit' => 4871,
                'is_onetime' => FALSE,
                'description' => "UPugetKJLdESdgB4DMlPhuAgx6J23S5a4KJH2dJnXOe"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'money_amount' => 2753,
                'point_amount' => 8697,
                'bear_point_account' => "acd953b8-2978-4cd9-965d-4be75d49686d",
                'point_expires_in_days' => 4312,
                'point_expires_at' => "2023-09-14T04:18:46.000000+09:00",
                'expires_at' => "2021-05-02T05:23:56.000000+09:00",
                'usage_limit' => 1700,
                'is_onetime' => TRUE,
                'description' => "nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'point_amount' => 7896
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'point_amount' => 5516,
                'description' => "fgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC8MN1MIRbysguh0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'point_amount' => 7473,
                'is_onetime' => FALSE,
                'description' => "ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'point_amount' => 2876,
                'usage_limit' => 5574,
                'is_onetime' => FALSE,
                'description' => "l1xg8SX1voG8Gydqo4fQ7D47J36"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'point_amount' => 4633,
                'expires_at' => "2016-01-15T08:47:29.000000+09:00",
                'usage_limit' => 3487,
                'is_onetime' => TRUE,
                'description' => "f2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2H"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'point_amount' => 7673,
                'point_expires_at' => "2016-04-22T11:52:10.000000+09:00",
                'expires_at' => "2016-03-11T15:22:48.000000+09:00",
                'usage_limit' => 1549,
                'is_onetime' => FALSE,
                'description' => "rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'point_amount' => 8169,
                'point_expires_in_days' => 3652,
                'point_expires_at' => "2018-12-31T16:31:21.000000+09:00",
                'expires_at' => "2022-01-28T23:09:55.000000+09:00",
                'usage_limit' => 8741,
                'is_onetime' => TRUE,
                'description' => "R3czNdwQ9LziqjK5MdQ1lZMyARXVB9A"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8564a2b9-f092-4e7c-8a67-ab5bf8fcdf1f",
            [
                'point_amount' => 9500,
                'bear_point_account' => "ecd3b933-7732-4883-a094-c845b821ae53",
                'point_expires_in_days' => 2034,
                'point_expires_at' => "2017-06-10T01:31:40.000000+09:00",
                'expires_at' => "2022-05-21T19:15:20.000000+09:00",
                'usage_limit' => 8277,
                'is_onetime' => FALSE,
                'description' => "E1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHhIbteE1tQOMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
