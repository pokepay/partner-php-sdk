<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 1435.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 8208.0,
                'description' => "UNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dBSWzD3agMTAvZtCmtviHLHOBHoLHZ5Hyso5u9O"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 6378.0,
                'is_onetime' => FALSE,
                'description' => "ia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQVbbDGQ3KFvfr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 4329.0,
                'usage_limit' => 9908,
                'is_onetime' => FALSE,
                'description' => "ZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRdkY0a6T9IRy95uKnYj6aDVb3qDkr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 2007.0,
                'expires_at' => "2021-12-19T15:34:12.000000Z",
                'usage_limit' => 5825,
                'is_onetime' => FALSE,
                'description' => "7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 9899.0,
                'point_expires_at' => "2020-04-03T06:29:11.000000Z",
                'expires_at' => "2020-05-25T23:00:02.000000Z",
                'usage_limit' => 9349,
                'is_onetime' => FALSE,
                'description' => "Xm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 5843.0,
                'point_expires_in_days' => 5605,
                'point_expires_at' => "2020-05-12T00:06:28.000000Z",
                'expires_at' => "2022-05-05T21:50:12.000000Z",
                'usage_limit' => 8579,
                'is_onetime' => FALSE,
                'description' => "ORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwi"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 9425.0,
                'bear_point_account' => "700247a8-0a92-4116-a151-bb3f22742c2a",
                'point_expires_in_days' => 6472,
                'point_expires_at' => "2023-05-16T00:55:10.000000Z",
                'expires_at' => "2020-12-01T21:23:00.000000Z",
                'usage_limit' => 9921,
                'is_onetime' => FALSE,
                'description' => "91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3x"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 3927.0,
                'point_amount' => 3782.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 4619.0,
                'point_amount' => 6580.0,
                'description' => "fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 1339.0,
                'point_amount' => 7063.0,
                'is_onetime' => TRUE,
                'description' => "s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPSk"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 4011.0,
                'point_amount' => 2163.0,
                'usage_limit' => 2376,
                'is_onetime' => FALSE,
                'description' => "UuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1P"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 3538.0,
                'point_amount' => 2009.0,
                'expires_at' => "2020-08-28T12:34:03.000000Z",
                'usage_limit' => 1440,
                'is_onetime' => FALSE,
                'description' => "ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 6236.0,
                'point_amount' => 1020.0,
                'point_expires_at' => "2020-09-17T12:01:30.000000Z",
                'expires_at' => "2020-01-30T22:41:27.000000Z",
                'usage_limit' => 7068,
                'is_onetime' => TRUE,
                'description' => "rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 6131.0,
                'point_amount' => 7044.0,
                'point_expires_in_days' => 4630,
                'point_expires_at' => "2023-02-11T10:04:11.000000Z",
                'expires_at' => "2020-12-27T09:38:55.000000Z",
                'usage_limit' => 7632,
                'is_onetime' => TRUE,
                'description' => "ApoltrzZbMjGbqCaDUv"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'money_amount' => 423.0,
                'point_amount' => 4035.0,
                'bear_point_account' => "6b081695-2273-4ad7-8054-cb904fd041a4",
                'point_expires_in_days' => 7901,
                'point_expires_at' => "2020-04-19T07:27:53.000000Z",
                'expires_at' => "2021-12-09T19:50:18.000000Z",
                'usage_limit' => 7090,
                'is_onetime' => TRUE,
                'description' => "dXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F6PUopGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'point_amount' => 387.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'point_amount' => 6838.0,
                'description' => "Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLmu9RV4wTQ1eFfFoOmA6KgKFTgU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'point_amount' => 3618.0,
                'is_onetime' => FALSE,
                'description' => "IqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3U"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'point_amount' => 8287.0,
                'usage_limit' => 4724,
                'is_onetime' => TRUE,
                'description' => "G2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSqVBGp3Ank6BTTvgxH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'point_amount' => 7433.0,
                'expires_at' => "2020-06-17T18:36:18.000000Z",
                'usage_limit' => 2878,
                'is_onetime' => TRUE,
                'description' => "gdLIxgPMdYrCUsTg7mFBD5JyTl3O"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'point_amount' => 1619.0,
                'point_expires_at' => "2020-09-11T11:17:54.000000Z",
                'expires_at' => "2021-12-08T07:48:33.000000Z",
                'usage_limit' => 6198,
                'is_onetime' => FALSE,
                'description' => "9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'point_amount' => 3271.0,
                'point_expires_in_days' => 6735,
                'point_expires_at' => "2023-10-13T14:03:50.000000Z",
                'expires_at' => "2021-09-30T14:14:20.000000Z",
                'usage_limit' => 6565,
                'is_onetime' => FALSE,
                'description' => "Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOm"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "8b93b0d5-fb9e-448a-a9fd-b88ff6847752",
            [
                'point_amount' => 8809.0,
                'bear_point_account' => "0736add5-2976-43ff-90cb-baf7dda6fe8b",
                'point_expires_in_days' => 1068,
                'point_expires_at' => "2023-09-04T23:43:12.000000Z",
                'expires_at' => "2022-06-02T14:38:33.000000Z",
                'usage_limit' => 2491,
                'is_onetime' => FALSE,
                'description' => "SoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Char2D"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
