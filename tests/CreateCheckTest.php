<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 9410.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 8482.0,
                'description' => "6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjF"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 9448.0,
                'is_onetime' => TRUE,
                'description' => "YgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 3210.0,
                'usage_limit' => 6298,
                'is_onetime' => TRUE,
                'description' => "5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47Xe"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 4346.0,
                'expires_at' => "2022-03-26T18:20:47.000000Z",
                'usage_limit' => 1113,
                'is_onetime' => FALSE,
                'description' => "aQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPSksHUuefNAm0yTlB8Y7jnh"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 4677.0,
                'point_expires_at' => "2020-12-02T11:49:10.000000Z",
                'expires_at' => "2021-03-16T21:57:04.000000Z",
                'usage_limit' => 8337,
                'is_onetime' => FALSE,
                'description' => "VfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 5887.0,
                'point_expires_in_days' => 8507,
                'point_expires_at' => "2024-02-28T08:15:03.000000Z",
                'expires_at' => "2023-12-03T05:36:08.000000Z",
                'usage_limit' => 6826,
                'is_onetime' => TRUE,
                'description' => "HRtQBqCHsxk71kIOiSHcZ37"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 4969.0,
                'bear_point_account' => "c3bf7a17-5d0d-41ef-aa60-9a20234a6eee",
                'point_expires_in_days' => 5740,
                'point_expires_at' => "2022-03-09T10:21:43.000000Z",
                'expires_at' => "2023-05-17T17:33:30.000000Z",
                'usage_limit' => 3506,
                'is_onetime' => TRUE,
                'description' => "3qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 1926.0,
                'point_amount' => 1737.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 3633.0,
                'point_amount' => 9333.0,
                'description' => "CwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApo"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 9105.0,
                'point_amount' => 1004.0,
                'is_onetime' => TRUE,
                'description' => "rzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F6PUopGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5Az"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 9132.0,
                'point_amount' => 465.0,
                'usage_limit' => 8034,
                'is_onetime' => FALSE,
                'description' => "E5VhNxjrtNh84WLuHKWoYQpDL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 2676.0,
                'point_amount' => 5322.0,
                'expires_at' => "2024-03-10T02:31:21.000000Z",
                'usage_limit' => 7962,
                'is_onetime' => FALSE,
                'description' => "WbDVy6Ss7attO0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 5779.0,
                'point_amount' => 6184.0,
                'point_expires_at' => "2021-10-19T08:15:57.000000Z",
                'expires_at' => "2020-04-27T09:52:11.000000Z",
                'usage_limit' => 2593,
                'is_onetime' => TRUE,
                'description' => "Z2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 6601.0,
                'point_amount' => 7035.0,
                'point_expires_in_days' => 3528,
                'point_expires_at' => "2021-10-21T23:47:41.000000Z",
                'expires_at' => "2022-05-27T09:41:16.000000Z",
                'usage_limit' => 2708,
                'is_onetime' => TRUE,
                'description' => "b57N6Bfk723xgVJhWc2FL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'money_amount' => 3205.0,
                'point_amount' => 6411.0,
                'bear_point_account' => "964f5ced-a5f5-40b9-852d-2fd21b587a7c",
                'point_expires_in_days' => 2485,
                'point_expires_at' => "2020-12-27T05:32:39.000000Z",
                'expires_at' => "2024-10-01T08:57:54.000000Z",
                'usage_limit' => 817,
                'is_onetime' => FALSE,
                'description' => "FfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'point_amount' => 1701.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'point_amount' => 6900.0,
                'description' => "p1lylHobnm6HycWppeOG5c4bSqVBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQY"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'point_amount' => 4691.0,
                'is_onetime' => TRUE,
                'description' => "SoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'point_amount' => 93.0,
                'usage_limit' => 2886,
                'is_onetime' => FALSE,
                'description' => "GmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'point_amount' => 8001.0,
                'expires_at' => "2022-12-01T00:06:04.000000Z",
                'usage_limit' => 5044,
                'is_onetime' => TRUE,
                'description' => "MRFhBa1KS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'point_amount' => 7226.0,
                'point_expires_at' => "2023-06-01T14:20:15.000000Z",
                'expires_at' => "2022-08-21T00:16:06.000000Z",
                'usage_limit' => 6434,
                'is_onetime' => FALSE,
                'description' => "AtQPb0UOTifX7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'point_amount' => 8059.0,
                'point_expires_in_days' => 9472,
                'point_expires_at' => "2021-05-25T04:18:07.000000Z",
                'expires_at' => "2020-09-12T18:57:04.000000Z",
                'usage_limit' => 6469,
                'is_onetime' => FALSE,
                'description' => "c6DIDKem3xaXPio5o0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c88e2d1d-1b1f-45da-a392-319bc72de1bf",
            [
                'point_amount' => 6281.0,
                'bear_point_account' => "08141bf1-29b9-4178-b0e9-675585186008",
                'point_expires_in_days' => 4352,
                'point_expires_at' => "2022-03-21T21:06:35.000000Z",
                'expires_at' => "2020-08-30T05:34:49.000000Z",
                'usage_limit' => 2690,
                'is_onetime' => FALSE,
                'description' => "rfJOMPlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRMPV8lVcOO1w2GShMQxP1XNaA4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
