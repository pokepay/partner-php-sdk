<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 2816
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 6850,
                'description' => "8n6abEccT"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 8661,
                'is_onetime' => FALSE,
                'description' => "FUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 4296,
                'usage_limit' => 5837,
                'is_onetime' => TRUE,
                'description' => "x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95FB1a7IFTBkW9tPubyeqITUoc54HWI6lY3NxA2Qq6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQRpkGArTGUPug"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 4581,
                'expires_at' => "2018-11-09T21:43:48.000000+09:00",
                'usage_limit' => 3848,
                'is_onetime' => FALSE,
                'description' => "JLdESdgB4DMlPhuAgx6J23S5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 2145,
                'point_expires_at' => "2019-03-24T07:16:36.000000+09:00",
                'expires_at' => "2020-12-25T04:51:28.000000+09:00",
                'usage_limit' => 4385,
                'is_onetime' => TRUE,
                'description' => "XOeAy8xYgmSSWd6nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilSXXfgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC8MN1MI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 6140,
                'point_expires_in_days' => 6303,
                'point_expires_at' => "2022-04-04T06:20:22.000000+09:00",
                'expires_at' => "2019-12-08T18:06:25.000000+09:00",
                'usage_limit' => 3701,
                'is_onetime' => TRUE,
                'description' => "0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyA"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 6910,
                'bear_point_account' => "1cfecc92-c98c-4978-bc82-b1e4453b2968",
                'point_expires_in_days' => 2261,
                'point_expires_at' => "2019-03-17T05:12:51.000000+09:00",
                'expires_at' => "2019-04-14T16:51:46.000000+09:00",
                'usage_limit' => 5345,
                'is_onetime' => TRUE,
                'description' => "VM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUbFxl"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 6705,
                'point_amount' => 3704
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 4896,
                'point_amount' => 1767,
                'description' => "8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyVTR3czNdwQ9LziqjK5MdQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 9393,
                'point_amount' => 1004,
                'is_onetime' => TRUE,
                'description' => "yARXVB9A32ESqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enF"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 1690,
                'point_amount' => 7929,
                'usage_limit' => 840,
                'is_onetime' => TRUE,
                'description' => "bteE1tQOMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 9188,
                'point_amount' => 6210,
                'expires_at' => "2021-10-13T03:24:11.000000+09:00",
                'usage_limit' => 5133,
                'is_onetime' => FALSE,
                'description' => "zD3agMTA"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 7386,
                'point_amount' => 7924,
                'point_expires_at' => "2022-08-04T16:28:11.000000+09:00",
                'expires_at' => "2016-02-26T14:19:06.000000+09:00",
                'usage_limit' => 5613,
                'is_onetime' => TRUE,
                'description' => "viHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQVbbDGQ3KFvfr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 4329,
                'point_amount' => 9908,
                'point_expires_in_days' => 1544,
                'point_expires_at' => "2017-06-24T09:15:27.000000+09:00",
                'expires_at' => "2024-06-02T21:18:13.000000+09:00",
                'usage_limit' => 760,
                'is_onetime' => FALSE,
                'description' => "8N4p4uCNZaugRp11iMcrfILoN8ZP7287J"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'money_amount' => 8362,
                'point_amount' => 9185,
                'bear_point_account' => "d6ff851a-8bef-4e59-9f1f-e49ad55e179d",
                'point_expires_in_days' => 5825,
                'point_expires_at' => "2023-06-11T04:54:02.000000+09:00",
                'expires_at' => "2017-03-08T05:13:35.000000+09:00",
                'usage_limit' => 8458,
                'is_onetime' => TRUE,
                'description' => "1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0ns"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'point_amount' => 4178
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'point_amount' => 7999,
                'description' => "0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2k"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'point_amount' => 4323,
                'is_onetime' => FALSE,
                'description' => "hNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'point_amount' => 3566,
                'usage_limit' => 8522,
                'is_onetime' => FALSE,
                'description' => "R6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'point_amount' => 5898,
                'expires_at' => "2022-02-05T14:38:26.000000+09:00",
                'usage_limit' => 8700,
                'is_onetime' => FALSE,
                'description' => "EIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'point_amount' => 1324,
                'point_expires_at' => "2017-09-19T12:32:25.000000+09:00",
                'expires_at' => "2022-08-07T04:05:45.000000+09:00",
                'usage_limit' => 2037,
                'is_onetime' => FALSE,
                'description' => "NAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLix"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'point_amount' => 5777,
                'point_expires_in_days' => 5743,
                'point_expires_at' => "2019-12-31T10:32:39.000000+09:00",
                'expires_at' => "2022-10-23T16:55:46.000000+09:00",
                'usage_limit' => 7857,
                'is_onetime' => FALSE,
                'description' => "Wqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "35a98674-54b1-4eff-b5b7-49135a97ff9c",
            [
                'point_amount' => 5256,
                'bear_point_account' => "1c1e7409-12c4-4775-8287-f6ad37e0a041",
                'point_expires_in_days' => 1467,
                'point_expires_at' => "2023-03-23T06:40:54.000000+09:00",
                'expires_at' => "2016-05-08T05:59:07.000000+09:00",
                'usage_limit' => 2621,
                'is_onetime' => TRUE,
                'description' => "u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
