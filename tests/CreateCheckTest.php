<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 5608
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 4830,
                'description' => "WHQ5cbR62EyfrAyRxoXmZ8a"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 1397,
                'is_onetime' => TRUE,
                'description' => "D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUbFxl1xg8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 6344,
                'usage_limit' => 8642,
                'is_onetime' => TRUE,
                'description' => "xbiEM0oFGnnvKX9mW4mLerHweV6yDqMF"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 9205,
                'expires_at' => "2023-04-04T06:41:38.000000+09:00",
                'usage_limit' => 7564,
                'is_onetime' => FALSE,
                'description' => "HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyVTR3czNdwQ9LziqjK5MdQ1lZMyARXVB9A32ESqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHhIbteE1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 6388,
                'point_expires_at' => "2023-09-22T17:50:17.000000+09:00",
                'expires_at' => "2021-01-05T12:52:28.000000+09:00",
                'usage_limit' => 2767,
                'is_onetime' => FALSE,
                'description' => "MttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dBSWzD3agMTAvZtCmtviH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 3144,
                'point_expires_in_days' => 3536,
                'point_expires_at' => "2016-11-16T15:00:18.000000+09:00",
                'expires_at' => "2021-07-03T09:54:18.000000+09:00",
                'usage_limit' => 3400,
                'is_onetime' => FALSE,
                'description' => "Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62i"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 3836,
                'bear_point_account' => "40dbb2ed-f712-4465-99ba-1b610651864e",
                'point_expires_in_days' => 1501,
                'point_expires_at' => "2021-12-06T10:42:21.000000+09:00",
                'expires_at' => "2025-03-07T19:32:11.000000+09:00",
                'usage_limit' => 5209,
                'is_onetime' => TRUE,
                'description' => "QYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQVbbDGQ3KFvfr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8N4p4uCNZaug"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 6930,
                'point_amount' => 6590
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 8432,
                'point_amount' => 8980,
                'description' => "iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRdkY0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 3624,
                'point_amount' => 6166,
                'is_onetime' => TRUE,
                'description' => "eXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 9531,
                'point_amount' => 5961,
                'usage_limit' => 1670,
                'is_onetime' => FALSE,
                'description' => "tW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 633,
                'point_amount' => 9023,
                'expires_at' => "2016-12-13T09:21:10.000000+09:00",
                'usage_limit' => 5853,
                'is_onetime' => TRUE,
                'description' => "1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdX"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 2280,
                'point_amount' => 4201,
                'point_expires_at' => "2023-09-01T02:47:24.000000+09:00",
                'expires_at' => "2023-02-27T16:56:31.000000+09:00",
                'usage_limit' => 3963,
                'is_onetime' => FALSE,
                'description' => "cAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0I"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 4198,
                'point_amount' => 5678,
                'point_expires_in_days' => 4361,
                'point_expires_at' => "2017-02-01T23:20:14.000000+09:00",
                'expires_at' => "2021-11-08T11:28:08.000000+09:00",
                'usage_limit' => 7408,
                'is_onetime' => TRUE,
                'description' => "32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkCl"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'money_amount' => 8575,
                'point_amount' => 3215,
                'bear_point_account' => "77c86859-7673-4bf8-9d1c-4ad9d323f20a",
                'point_expires_in_days' => 2686,
                'point_expires_at' => "2024-03-10T00:01:54.000000+09:00",
                'expires_at' => "2018-04-03T04:43:40.000000+09:00",
                'usage_limit' => 6461,
                'is_onetime' => TRUE,
                'description' => "Nck"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'point_amount' => 8280
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'point_amount' => 3927,
                'description' => "b6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9ARntTDK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'point_amount' => 1945,
                'is_onetime' => FALSE,
                'description' => "O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'point_amount' => 5489,
                'usage_limit' => 3882,
                'is_onetime' => TRUE,
                'description' => "MzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'point_amount' => 2148,
                'expires_at' => "2016-01-14T08:14:13.000000+09:00",
                'usage_limit' => 7295,
                'is_onetime' => TRUE,
                'description' => "KLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'point_amount' => 3957,
                'point_expires_at' => "2025-03-15T03:06:56.000000+09:00",
                'expires_at' => "2015-10-22T20:22:10.000000+09:00",
                'usage_limit' => 7428,
                'is_onetime' => FALSE,
                'description' => "3plgJR5fwzKIFQcpGZZVlRU03Fa2F6PUopGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'point_amount' => 8899,
                'point_expires_in_days' => 4074,
                'point_expires_at' => "2020-02-22T11:24:17.000000+09:00",
                'expires_at' => "2024-02-28T10:57:05.000000+09:00",
                'usage_limit' => 7767,
                'is_onetime' => TRUE,
                'description' => "AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "92c437d3-2974-48b3-b7bc-31a113ccbc8a",
            [
                'point_amount' => 8032,
                'bear_point_account' => "3c032dad-4040-4af5-8233-59c93ffdfab6",
                'point_expires_in_days' => 7036,
                'point_expires_at' => "2018-04-03T02:24:01.000000+09:00",
                'expires_at' => "2023-02-05T04:23:32.000000+09:00",
                'usage_limit' => 6798,
                'is_onetime' => TRUE,
                'description' => "57N6Bfk723xgVJhWc2FLmu9RV4w"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
