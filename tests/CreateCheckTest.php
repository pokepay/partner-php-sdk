<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 2192.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 1342.0,
                'description' => "lD5P2apMgZlTLEFjL98SstpXlRfIIQidVptLJ5KiygyzeGm2yH6BvDDIFQI860NXwKLkYmgigiRBecjiYHAY2JzBXAH8kMOdWqNTIGASpUbYQp5bqa8tWD6s9Q6iiZbOooVKgu1qds6qgsoONFz6uyU0wrmFTsH1jox1nE7Xd1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 401.0,
                'is_onetime' => TRUE,
                'description' => "HtA5BVDLAJt8tqoldYOWGhpaRKD1ENaiTkaXYFCXi0fdqXvmGys8YOpBu2KczD6BTCHnjtvnDM8G6PBmZyIjoWRfxfaml9V53r3s21bgJInEjXNNDJsFK9WBlSOaEAClE0qaCOj2fSXpFKUlotq"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 7413.0,
                'usage_limit' => 2482,
                'is_onetime' => FALSE,
                'description' => "2iyxgBYhgQbJ9IVu3c5hWvjkkOZFf6OCrzDvyXye2YX5J7kswz32xxJb5gogkv5hZzhmNsrWablOgZAXoZX3MAHgYPmjySnk7glzhXNaVAYaLNrv4APPX0VuhkKvXP9XmQeb4lI9NzNi4QRVhKIgwqcZXXujn6BV89aH0zGishUXB3k1TCBIJLPgkjFM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 890.0,
                'expires_at' => "2020-11-12T21:35:21.000000+09:00",
                'usage_limit' => 5347,
                'is_onetime' => TRUE,
                'description' => "nWHq19FZrEznmqJPjUJTgImhGc9HJEQJmhSQSbckJ0fOiubMoC3zDcy2cOdFG6DwbVSKZ2WrdC05OlbHcOU5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 9113.0,
                'point_expires_at' => "2021-01-30T18:22:21.000000+09:00",
                'expires_at' => "2021-01-18T21:56:36.000000+09:00",
                'usage_limit' => 3353,
                'is_onetime' => FALSE,
                'description' => "Ozje0pxC3a7ehXW7AlGm4wkfy3Zcp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 9116.0,
                'point_expires_in_days' => 1391,
                'point_expires_at' => "2022-07-15T02:57:02.000000+09:00",
                'expires_at' => "2022-11-17T11:52:05.000000+09:00",
                'usage_limit' => 3249,
                'is_onetime' => FALSE,
                'description' => "wZsTUehdZchNmtmmUiRjvHmuI3Xz9h"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 500.0,
                'bear_point_account' => "6f614bac-6021-443f-a0f1-9112685f8096",
                'point_expires_in_days' => 2323,
                'point_expires_at' => "2021-01-13T06:05:48.000000+09:00",
                'expires_at' => "2020-09-26T05:33:06.000000+09:00",
                'usage_limit' => 3842,
                'is_onetime' => FALSE,
                'description' => "ezXyLXJsEvfTSncRo7it4pVulLYkS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 7159.0,
                'point_amount' => 9340.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 1813.0,
                'point_amount' => 8516.0,
                'description' => "Z9TbRw3V1nu1YMpRChCHVMpSWKVi5mN7y3SPx9Uvns7gLOU5JmSxhNTmL5CoRyGeNp0HxXnZXSXNgckUAwWayJKCRYX3YIcgcnowGfiwKDxXVuCnD6rOBTI27AIAV5JepzVqhTxky4RP0gQPVohOKO497LqBx5s"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 8669.0,
                'point_amount' => 9523.0,
                'is_onetime' => TRUE,
                'description' => "3IycobYifawLoyomWOOMozo5jpKaGDznlAnGQMpbxQAiLohSPUwUYCUJg68uA2AmnfrLs0DzubTwACwZ7ZhzXL6GQDOebU5xROJsENJO2NqdySldX94xlSRqnAPOZUjwSd4H43FQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 4536.0,
                'point_amount' => 3670.0,
                'usage_limit' => 7995,
                'is_onetime' => TRUE,
                'description' => "TmMl7klMt3C13MqnL5qq1u02f7XAIyZQ65mKbppT1wZa5Ul9NliFarXnpuT0KKlK0tskfwpiMYtzv0hOHu7kauWEG06SgCTer9oFRJ4RuLmQ0Lm0BujxjuGzP64zEajyqhONnTNJefr2TiFsY9hewfsBiByfrEZOyxfKfoQGupNHaPUWIAEdiNMDugLuPAj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 6457.0,
                'point_amount' => 7596.0,
                'expires_at' => "2020-12-25T16:03:01.000000+09:00",
                'usage_limit' => 7134,
                'is_onetime' => TRUE,
                'description' => "AynsLeqsGdglo4RznM6xq8a41fGu54mYbxoNTpwSF7lLeXEgHqdJbSYvAjEwhC3hwMP5cgQTpj98oXR8pOFi9g2w6AFQtTwKA2dNvAhM3isQf3EbT9n4bNXT5kpK8LD20g1iwKbDSOY8Obvi4UJC9R4UvEHmyGnNqQFSIcOK9wFQbyZ9b8R7gO8vV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 4528.0,
                'point_amount' => 6263.0,
                'point_expires_at' => "2023-12-10T03:00:58.000000+09:00",
                'expires_at' => "2023-05-23T03:36:15.000000+09:00",
                'usage_limit' => 135,
                'is_onetime' => FALSE,
                'description' => "sRQx2GjtZtc0mEUcwyMTNclRT8anSF4797Isvvx4D21T3szc3MMJDFTd79nrIkN7710ccwkJCiZ6xsNNNx2dbtRgPRbJA41KzXwKEeW7Ee9gQ1Xqm0Mr8e4fOsttgRdKgJ5TaBhCxXy5eiKJvTnfGx9U"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 6978.0,
                'point_amount' => 8477.0,
                'point_expires_in_days' => 2767,
                'point_expires_at' => "2020-01-06T21:58:22.000000+09:00",
                'expires_at' => "2022-03-18T20:28:07.000000+09:00",
                'usage_limit' => 1460,
                'is_onetime' => TRUE,
                'description' => "BZW73MgjBUp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'money_amount' => 9726.0,
                'point_amount' => 5543.0,
                'bear_point_account' => "77d2a1ef-ddc4-4cf3-ba13-0c01d80d6df4",
                'point_expires_in_days' => 8737,
                'point_expires_at' => "2020-10-08T09:39:43.000000+09:00",
                'expires_at' => "2020-08-25T21:20:37.000000+09:00",
                'usage_limit' => 9487,
                'is_onetime' => FALSE,
                'description' => "l8Q8krxoNbFySRYxHdmcptN7UFKIDwRdE"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'point_amount' => 145.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'point_amount' => 9773.0,
                'description' => "Cc8HmGF9msxGU78YYRLKyAzTlBIeteiCwnn2AkFEHWmhunXAbha6G6LUeRquIGHalY5Yqwbt4ylOmlQCP5fKdJc9lWZylYUpghwQLnf1z3MHQgtlZ8QfIVB1oXYNG4sKRFvg6YdTr0i1rSgAbA5RQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'point_amount' => 8157.0,
                'is_onetime' => FALSE,
                'description' => "xqR6XdxzOZtQAeiM61lw6X1TRrPjNvTKIIi1vxxW36PofA04mczd3NB71CouubUnrOayeYRDPoksfxbnF2fGrxy8ZEF3AUO3LtqeDs2VaRNNQvNB3O3wYUHbnLm0UU6SYCSzmQCJp88XB5GZMU61O"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'point_amount' => 314.0,
                'usage_limit' => 3685,
                'is_onetime' => TRUE,
                'description' => "9wpR75o7qY3nB8nPSQCuln92heBPvdJw7UVSVsag3xjpGWd5xUTXHqWXtFyCcpy91pyfOCK7TKTgeKKrbUqO8R6COB4yCAI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'point_amount' => 59.0,
                'expires_at' => "2020-05-27T17:42:42.000000+09:00",
                'usage_limit' => 9716,
                'is_onetime' => TRUE,
                'description' => "GNsOhik4ZhMfBPAnIb4g4DBqdaOiPFuAuuhi1gPhyzpnclLUK4iIHGh5Dcp3uoyrMNutgp8XnNinvI3nVbCIt4QRKA3PjU94wiODESl9alAgegm2kYyCx"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'point_amount' => 4538.0,
                'point_expires_at' => "2023-05-10T01:58:29.000000+09:00",
                'expires_at' => "2023-09-04T02:43:07.000000+09:00",
                'usage_limit' => 8904,
                'is_onetime' => TRUE,
                'description' => "dPhI5ctdbixdEvbPbZHnuD2MwGagO7ObjKZrrtjXw64Bydm9TDJoJQkYypqsOj0N3ye812D1oEuXGrXVe5Sp0xkNHE7mc8HFGjlyuL2QWu3IJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'point_amount' => 3604.0,
                'point_expires_in_days' => 4592,
                'point_expires_at' => "2023-02-08T20:13:04.000000+09:00",
                'expires_at' => "2020-04-25T11:48:15.000000+09:00",
                'usage_limit' => 1917,
                'is_onetime' => FALSE,
                'description' => "ZYAUiF7ZlmGiZKUboYTIVNfQV6vkceeAVGlzXGjsKDnroSL0HCeDWUfky"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5ae8dcfa-11a7-4c3e-8307-87763c19227b",
            [
                'point_amount' => 7717.0,
                'bear_point_account' => "d53fe300-1a9b-48b0-aa3f-1377af56b206",
                'point_expires_in_days' => 8842,
                'point_expires_at' => "2022-06-24T18:04:49.000000+09:00",
                'expires_at' => "2023-06-27T07:21:52.000000+09:00",
                'usage_limit' => 8581,
                'is_onetime' => FALSE,
                'description' => "qfDk6u1VqDRYUDpbQy9ZWYLW7IEXOP3FFSTbrfHpCEqcviBgZl2vN9hOC9DRIu8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
