<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 5442
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 4924,
                'description' => "BCDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIbzCAj1GsSvfXjxUW5PMdDuBsMe04PTf8v"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 7165,
                'is_onetime' => FALSE,
                'description' => "QwwHu7ykbtkzGPhzROeLpMaUZfjz7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55oAI4V"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 9795,
                'usage_limit' => 6471,
                'is_onetime' => FALSE,
                'description' => "4sTwcYeFwcP7ZmLygXYRtjxN2aIco6xNkWo0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7GOWj7LV4v5yotPxhlRj2vkjikjfOo5Zy9zD8cfycxdjXF6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 6414,
                'expires_at' => "2019-05-03T14:12:01.000000+09:00",
                'usage_limit' => 7164,
                'is_onetime' => TRUE,
                'description' => "L4evFZLjpsodOQD43fZ5T5bk20dIuBp2e25agSXyEGickpeze"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 4023,
                'point_expires_at' => "2018-03-11T02:38:10.000000+09:00",
                'expires_at' => "2022-07-08T12:11:45.000000+09:00",
                'usage_limit' => 872,
                'is_onetime' => FALSE,
                'description' => "ltNB5ed"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 1652,
                'point_expires_in_days' => 5298,
                'point_expires_at' => "2020-07-06T08:37:37.000000+09:00",
                'expires_at' => "2024-02-16T01:46:48.000000+09:00",
                'usage_limit' => 3355,
                'is_onetime' => TRUE,
                'description' => "n6abEccTMUOFUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95FB1a7IFTBkW9tPubyeqITUoc54HWI6lY"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 8215,
                'bear_point_account' => "526fadb3-fa90-457f-8e5c-0678195e33c1",
                'point_expires_in_days' => 5555,
                'point_expires_at' => "2018-09-23T16:27:36.000000+09:00",
                'expires_at' => "2018-03-05T11:35:21.000000+09:00",
                'usage_limit' => 1183,
                'is_onetime' => FALSE,
                'description' => "6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQRpkGArTGUPugetKJLdESdgB4DMlPh"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 4341,
                'point_amount' => 8453
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 1819,
                'point_amount' => 12,
                'description' => "gx6J23S5a4KJH2dJnXOeAy8xYgmSSWd6nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilSXXfgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC8MN1MIRbysguh0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5Eo"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 342,
                'point_amount' => 5638,
                'is_onetime' => FALSE,
                'description' => "dmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZx4eE9mHPjq6XCvYjxbcuNA5AOQHru6gAX"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 4463,
                'point_amount' => 8092,
                'usage_limit' => 7440,
                'is_onetime' => FALSE,
                'description' => "UpOUbFxl1xg8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPgxI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 5024,
                'point_amount' => 7269,
                'expires_at' => "2016-07-06T05:37:37.000000+09:00",
                'usage_limit' => 3031,
                'is_onetime' => TRUE,
                'description' => "JKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 1083,
                'point_amount' => 7854,
                'point_expires_at' => "2022-11-09T12:14:18.000000+09:00",
                'expires_at' => "2016-07-31T12:05:06.000000+09:00",
                'usage_limit' => 7214,
                'is_onetime' => FALSE,
                'description' => "czNdwQ9LziqjK5MdQ1lZMyA"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 1234,
                'point_amount' => 8064,
                'point_expires_in_days' => 6979,
                'point_expires_at' => "2024-08-10T09:35:05.000000+09:00",
                'expires_at' => "2018-04-18T08:05:42.000000+09:00",
                'usage_limit' => 5344,
                'is_onetime' => TRUE,
                'description' => "SqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHh"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'money_amount' => 4553,
                'point_amount' => 5773,
                'bear_point_account' => "aa1efee2-12fb-4a74-a545-2a0562a1f98f",
                'point_expires_in_days' => 5520,
                'point_expires_at' => "2018-06-14T19:13:27.000000+09:00",
                'expires_at' => "2018-12-04T15:17:40.000000+09:00",
                'usage_limit' => 8710,
                'is_onetime' => TRUE,
                'description' => "OMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzSQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dBSWzD3agMTAvZtCmtviHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYh"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'point_amount' => 3558
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'point_amount' => 7124,
                'description' => "v94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQVbbD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'point_amount' => 7755,
                'is_onetime' => TRUE,
                'description' => "fr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'point_amount' => 7999,
                'usage_limit' => 6753,
                'is_onetime' => FALSE,
                'description' => "T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'point_amount' => 9565,
                'expires_at' => "2017-02-13T22:49:55.000000+09:00",
                'usage_limit' => 4769,
                'is_onetime' => FALSE,
                'description' => "j9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fm"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'point_amount' => 7691,
                'point_expires_at' => "2016-03-06T09:52:08.000000+09:00",
                'expires_at' => "2021-09-17T16:54:03.000000+09:00",
                'usage_limit' => 1206,
                'is_onetime' => TRUE,
                'description' => "SXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'point_amount' => 2225,
                'point_expires_in_days' => 2621,
                'point_expires_at' => "2019-10-29T04:38:08.000000+09:00",
                'expires_at' => "2023-05-17T07:39:03.000000+09:00",
                'usage_limit' => 6629,
                'is_onetime' => TRUE,
                'description' => "NJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "ce5c4e69-e4c9-47f7-b8e2-81239073ebf5",
            [
                'point_amount' => 4479,
                'bear_point_account' => "13049eeb-a24c-4638-bceb-db1ea417ee75",
                'point_expires_in_days' => 7753,
                'point_expires_at' => "2018-05-08T07:35:43.000000+09:00",
                'expires_at' => "2023-11-14T12:55:05.000000+09:00",
                'usage_limit' => 608,
                'is_onetime' => FALSE,
                'description' => "oA9Wjz3x"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
