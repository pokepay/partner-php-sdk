<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 7770.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 5465.0,
                'description' => "oc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 1602.0,
                'is_onetime' => TRUE,
                'description' => "tgwRL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 778.0,
                'usage_limit' => 5777,
                'is_onetime' => FALSE,
                'description' => "nA1GWqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 7863.0,
                'expires_at' => "2024-12-15T15:16:44.000000+09:00",
                'usage_limit' => 3506,
                'is_onetime' => TRUE,
                'description' => "3qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 1926.0,
                'point_expires_at' => "2022-03-07T09:56:13.000000+09:00",
                'expires_at' => "2023-08-25T09:06:57.000000+09:00",
                'usage_limit' => 9333,
                'is_onetime' => FALSE,
                'description' => "CwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 3590.0,
                'point_expires_in_days' => 6268,
                'point_expires_at' => "2022-08-25T04:46:27.000000+09:00",
                'expires_at' => "2023-06-09T13:37:04.000000+09:00",
                'usage_limit' => 1751,
                'is_onetime' => TRUE,
                'description' => "gQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F6PUopGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 1653.0,
                'bear_point_account' => "f5c1a848-cb4b-42d7-af5d-3999de74be7c",
                'point_expires_in_days' => 3930,
                'point_expires_at' => "2022-11-29T16:56:49.000000+09:00",
                'expires_at' => "2022-05-20T20:54:37.000000+09:00",
                'usage_limit' => 9028,
                'is_onetime' => FALSE,
                'description' => "LtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVo"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 7714.0,
                'point_amount' => 8336.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 2661.0,
                'point_amount' => 5495.0,
                'description' => "JggIMA5wXB3CTdPu3I6Gb57N6Bfk723"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 6588.0,
                'point_amount' => 4984.0,
                'is_onetime' => FALSE,
                'description' => "JhWc2FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 1701.0,
                'point_amount' => 6900.0,
                'usage_limit' => 5293,
                'is_onetime' => TRUE,
                'description' => "lylHobnm6HycWppeOG5c4bSqVBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOmiUvKwyiQYSSoPK3"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 3592.0,
                'point_amount' => 2357.0,
                'expires_at' => "2020-03-26T05:23:38.000000+09:00",
                'usage_limit' => 3655,
                'is_onetime' => TRUE,
                'description' => "U0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkDTFwGmGihFz2z0gAPf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 2007.0,
                'point_amount' => 7492.0,
                'point_expires_at' => "2020-05-02T21:43:10.000000+09:00",
                'expires_at' => "2023-03-12T01:44:22.000000+09:00",
                'usage_limit' => 2313,
                'is_onetime' => FALSE,
                'description' => "MsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIPb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 2988.0,
                'point_amount' => 9385.0,
                'point_expires_in_days' => 5838,
                'point_expires_at' => "2025-05-13T19:41:17.000000+09:00",
                'expires_at' => "2025-02-14T23:02:59.000000+09:00",
                'usage_limit' => 8988,
                'is_onetime' => FALSE,
                'description' => "MMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'money_amount' => 8496.0,
                'point_amount' => 5353.0,
                'bear_point_account' => "a1936755-6008-40ff-9b79-4a82207cd425",
                'point_expires_in_days' => 3991,
                'point_expires_at' => "2024-08-30T16:21:06.000000+09:00",
                'expires_at' => "2021-12-16T22:15:37.000000+09:00",
                'usage_limit' => 6374,
                'is_onetime' => TRUE,
                'description' => "PlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'point_amount' => 4950.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'point_amount' => 3896.0,
                'description' => "cOO1w2GShMQxP1XNaA4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHA"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'point_amount' => 3789.0,
                'is_onetime' => TRUE,
                'description' => "JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'point_amount' => 7603.0,
                'usage_limit' => 2818,
                'is_onetime' => TRUE,
                'description' => "dKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'point_amount' => 7605.0,
                'expires_at' => "2023-02-14T18:16:23.000000+09:00",
                'usage_limit' => 3661,
                'is_onetime' => FALSE,
                'description' => "3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568yn3vAdg2WzE6cQfJbdKVhYmdIeaGt"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'point_amount' => 413.0,
                'point_expires_at' => "2020-02-24T15:23:37.000000+09:00",
                'expires_at' => "2025-04-14T08:09:01.000000+09:00",
                'usage_limit' => 4570,
                'is_onetime' => TRUE,
                'description' => "iVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi32RsgmtpDzruBR2bpCJbWCsF1XOM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'point_amount' => 759.0,
                'point_expires_in_days' => 3103,
                'point_expires_at' => "2022-01-10T15:50:37.000000+09:00",
                'expires_at' => "2021-10-21T06:42:46.000000+09:00",
                'usage_limit' => 9247,
                'is_onetime' => TRUE,
                'description' => "CbRi8MeoObjQBbD5vivOmPF0WWyAe43BTjYiVtdGDmgs4Vk2VUx2tI5N4bIOpNtWwRJ7taFGOOZNR9womkOYYXss1h0acoAUmABE9DWtANH45sfx8Sg9q1O62IQSAJ63xgskw6yfFQPcXHRn98CcSXK5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "c84ed19f-46a6-4cb1-a080-ec3acf6b75e6",
            [
                'point_amount' => 6534.0,
                'bear_point_account' => "90441e08-449c-405a-ac23-3ef1709a6e35",
                'point_expires_in_days' => 5841,
                'point_expires_at' => "2024-02-11T04:38:26.000000+09:00",
                'expires_at' => "2023-06-06T18:02:33.000000+09:00",
                'usage_limit' => 2059,
                'is_onetime' => FALSE,
                'description' => "V0xbdBDEvdzHS5KI84n4B4JwtxMbsrynFzleqVzZvPQrwaZ5xfzumz05DAlrcpNez8TuusjLCXuqGq9aXt2RyxOmHZB8Y"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
