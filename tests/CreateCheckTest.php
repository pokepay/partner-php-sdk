<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 6406.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 7560.0,
                'description' => "6TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLe"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 8205.0,
                'is_onetime' => TRUE,
                'description' => "HweV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 2950.0,
                'usage_limit' => 4601,
                'is_onetime' => FALSE,
                'description' => "DqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyVTR3czNdwQ9LziqjK5MdQ1lZMyARXVB9A32ESqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 9233.0,
                'expires_at' => "2024-08-13T01:01:15.000000+09:00",
                'usage_limit' => 8368,
                'is_onetime' => FALSE,
                'description' => "9olxtCG8sS34enFyHhIbteE1tQOMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO3Ox8qDzS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 721.0,
                'point_expires_at' => "2023-06-18T12:50:23.000000+09:00",
                'expires_at' => "2022-06-13T19:26:25.000000+09:00",
                'usage_limit' => 7698,
                'is_onetime' => TRUE,
                'description' => "NC6SfrLsEgbwDrafzykU4qQWw"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 7086.0,
                'point_expires_in_days' => 9379,
                'point_expires_at' => "2018-12-03T12:37:48.000000+09:00",
                'expires_at' => "2024-08-24T00:57:08.000000+09:00",
                'usage_limit' => 1768,
                'is_onetime' => TRUE,
                'description' => "7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dBSWzD3agMTAvZtCmtviHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsG"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 5780.0,
                'bear_point_account' => "c1af4784-46d4-4052-9fd1-04a3fa8985d6",
                'point_expires_in_days' => 6945,
                'point_expires_at' => "2023-07-25T12:28:26.000000+09:00",
                'expires_at' => "2016-06-03T17:04:55.000000+09:00",
                'usage_limit' => 7755,
                'is_onetime' => TRUE,
                'description' => "fr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 7999.0,
                'point_amount' => 6753.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 8837.0,
                'point_amount' => 7734.0,
                'description' => "9IRy95uKnYj6aDVb3qDkr4z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 2007.0,
                'point_amount' => 5825.0,
                'is_onetime' => FALSE,
                'description' => "7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 9899.0,
                'point_amount' => 9349.0,
                'usage_limit' => 8408,
                'is_onetime' => FALSE,
                'description' => "6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 9908.0,
                'point_amount' => 8704.0,
                'expires_at' => "2019-04-26T10:28:52.000000+09:00",
                'usage_limit' => 8888,
                'is_onetime' => TRUE,
                'description' => "hKD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 2375.0,
                'point_amount' => 1634.0,
                'point_expires_at' => "2019-01-28T23:19:44.000000+09:00",
                'expires_at' => "2017-04-01T10:05:47.000000+09:00",
                'usage_limit' => 8306,
                'is_onetime' => TRUE,
                'description' => "6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 59.0,
                'point_amount' => 6448.0,
                'point_expires_in_days' => 3901,
                'point_expires_at' => "2019-05-31T03:19:07.000000+09:00",
                'expires_at' => "2023-03-07T18:36:03.000000+09:00",
                'usage_limit' => 3273,
                'is_onetime' => TRUE,
                'description' => "gud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0Fc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'money_amount' => 5589.0,
                'point_amount' => 4338.0,
                'bear_point_account' => "a334af1a-2e28-4ac2-9f0d-d5c86ad58a8e",
                'point_expires_in_days' => 1744,
                'point_expires_at' => "2024-08-25T06:38:19.000000+09:00",
                'expires_at' => "2023-11-25T04:31:05.000000+09:00",
                'usage_limit' => 9411,
                'is_onetime' => FALSE,
                'description' => "s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9AR"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'point_amount' => 653.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'point_amount' => 5893.0,
                'description' => "ntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71k"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'point_amount' => 9193.0,
                'is_onetime' => TRUE,
                'description' => "HcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'point_amount' => 6236.0,
                'usage_limit' => 1020,
                'is_onetime' => FALSE,
                'description' => "qv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzKIFQcpGZZVlRU03Fa2F6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'point_amount' => 6692.0,
                'expires_at' => "2024-02-12T12:16:30.000000+09:00",
                'usage_limit' => 7484,
                'is_onetime' => FALSE,
                'description' => "pGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'point_amount' => 9270.0,
                'point_expires_at' => "2018-07-24T11:01:23.000000+09:00",
                'expires_at' => "2017-09-13T10:22:26.000000+09:00",
                'usage_limit' => 4324,
                'is_onetime' => TRUE,
                'description' => "6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLmu9RV4wTQ1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'point_amount' => 8165.0,
                'point_expires_in_days' => 3911,
                'point_expires_at' => "2017-07-19T23:16:18.000000+09:00",
                'expires_at' => "2023-11-29T12:55:51.000000+09:00",
                'usage_limit' => 109,
                'is_onetime' => FALSE,
                'description' => "6KgKFTgUMIqeaKPydQtxKkP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "17f5f16e-bd5c-4601-b52f-f3f2794c20bc",
            [
                'point_amount' => 320.0,
                'bear_point_account' => "4533aa8a-86c5-4415-bea8-1969ccba28df",
                'point_expires_in_days' => 3002,
                'point_expires_at' => "2021-06-16T18:57:59.000000+09:00",
                'expires_at' => "2025-02-10T15:11:10.000000+09:00",
                'usage_limit' => 1661,
                'is_onetime' => FALSE,
                'description' => "2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSq"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
