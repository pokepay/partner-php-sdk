<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 8380.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 6406.0,
                'description' => "36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7arw2NKYH12xHXaAOFqIwxrvxkxwVYBDQiRCyVT"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 8734.0,
                'is_onetime' => TRUE,
                'description' => "3czNdwQ9LziqjK5MdQ1lZMyARXVB9A32ESqVUKE1GN9JqLEvyRdA5j20ws4Z1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 7574.0,
                'usage_limit' => 138,
                'is_onetime' => TRUE,
                'description' => "jZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHhIbteE1tQOMttUhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUNaSg6OcHEmOeQFO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 7859.0,
                'expires_at' => "2023-05-07T23:01:35.000000Z",
                'usage_limit' => 3057,
                'is_onetime' => TRUE,
                'description' => "SQ0YVNC6SfrLsEgbwDrafzykU4qQWwEl9RBh7JkqQ2DDr8e6Qf8fK7SBxethCuCr4dBSWzD3agMTAvZtCmtviHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 7124.0,
                'point_expires_at' => "2023-05-07T19:04:42.000000Z",
                'expires_at' => "2021-04-03T08:49:41.000000Z",
                'usage_limit' => 5919,
                'is_onetime' => TRUE,
                'description' => "v94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQVbbDGQ3KFvfr7wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVtovIA3w7if4YoZJ6xmZ8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 5070.0,
                'point_expires_in_days' => 6716,
                'point_expires_at' => "2023-03-31T08:24:20.000000Z",
                'expires_at' => "2020-11-28T02:54:40.000000Z",
                'usage_limit' => 2977,
                'is_onetime' => FALSE,
                'description' => "ZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRdkY0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6By"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 2132.0,
                'bear_point_account' => "564f0633-c088-426c-bfdf-b12916570056",
                'point_expires_in_days' => 4947,
                'point_expires_at' => "2024-03-06T17:39:29.000000Z",
                'expires_at' => "2024-01-16T03:09:56.000000Z",
                'usage_limit' => 8911,
                'is_onetime' => TRUE,
                'description' => "23WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6X"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 2943.0,
                'point_amount' => 6616.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 4440.0,
                'point_amount' => 2094.0,
                'description' => "3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 1341.0,
                'point_amount' => 3944.0,
                'is_onetime' => FALSE,
                'description' => "ERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOE"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 1020.0,
                'point_amount' => 7368.0,
                'usage_limit' => 6710,
                'is_onetime' => FALSE,
                'description' => "NdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 5196.0,
                'point_amount' => 8782.0,
                'expires_at' => "2023-04-24T17:55:07.000000Z",
                'usage_limit' => 3819,
                'is_onetime' => TRUE,
                'description' => "oAuPSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 5465.0,
                'point_amount' => 9473.0,
                'point_expires_at' => "2023-01-06T00:46:39.000000Z",
                'expires_at' => "2023-12-11T07:46:43.000000Z",
                'usage_limit' => 1602,
                'is_onetime' => TRUE,
                'description' => "tgwRL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 778.0,
                'point_amount' => 5777.0,
                'point_expires_in_days' => 5743,
                'point_expires_at' => "2020-09-11T08:09:37.000000Z",
                'expires_at' => "2020-06-24T07:15:37.000000Z",
                'usage_limit' => 6025,
                'is_onetime' => TRUE,
                'description' => "1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'money_amount' => 3271.0,
                'point_amount' => 1239.0,
                'bear_point_account' => "d98f9df1-5a7b-4001-a67e-7d325bfa80fc",
                'point_expires_in_days' => 1933,
                'point_expires_at' => "2022-10-06T14:18:40.000000Z",
                'expires_at' => "2021-10-09T18:26:18.000000Z",
                'usage_limit' => 2848,
                'is_onetime' => TRUE,
                'description' => "amqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHs"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'point_amount' => 4728.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'point_amount' => 4232.0,
                'description' => "1kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvR"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'point_amount' => 5863.0,
                'is_onetime' => TRUE,
                'description' => "fjTir1eeHpnGAvFN5uVHKI7mM3plgJR5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'point_amount' => 8844.0,
                'usage_limit' => 6043,
                'is_onetime' => FALSE,
                'description' => "wzKIFQcpGZZVlRU03Fa2F6PUopGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'point_amount' => 5779.0,
                'expires_at' => "2021-08-19T06:24:40.000000Z",
                'usage_limit' => 6812,
                'is_onetime' => FALSE,
                'description' => "KDvZ2PuoFKU33PYYZTEIyRn"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'point_amount' => 7103.0,
                'point_expires_at' => "2022-04-14T03:54:12.000000Z",
                'expires_at' => "2023-11-18T08:53:29.000000Z",
                'usage_limit' => 8965,
                'is_onetime' => FALSE,
                'description' => "mm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6Bfk723xgVJhWc2FLm"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'point_amount' => 9717.0,
                'point_expires_in_days' => 8378,
                'point_expires_at' => "2022-01-29T08:19:17.000000Z",
                'expires_at' => "2020-01-09T22:54:37.000000Z",
                'usage_limit' => 2484,
                'is_onetime' => FALSE,
                'description' => "TQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6HycWppeOG5c4bSqVBGp3Ank6BTTvg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "daf2d002-f16e-4d5c-81f5-532f11a3f3f2",
            [
                'point_amount' => 5112.0,
                'bear_point_account' => "3b5cf612-fb24-4648-ba09-81a28c59f07a",
                'point_expires_in_days' => 2879,
                'point_expires_at' => "2020-05-16T22:29:02.000000Z",
                'expires_at' => "2020-03-08T04:01:31.000000Z",
                'usage_limit' => 8140,
                'is_onetime' => FALSE,
                'description' => "gPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
