<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 2461.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 6810.0,
                'description' => "8AT2IOI6NWLomRfC04yJNf5WGiMDDOqrLwX8vWut4RalBR1Reu7wkhAQ5gDPxtBcFyuppI3aVU9KW9uAl"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 1227.0,
                'is_onetime' => TRUE,
                'description' => "TpzxwaT9pO7euNU8KjQxxyHMlosIeRi7dsSIjUJ5GwZT6A74uohYeN4H5812nfekOOWdA9xviHS29Cnucf3KhwexIjsV1nDXnPk9hFfCiDyZuHpK88wkMoxKg7ozVSNwSTOZ1u2LGskfKBvBUnKVKIc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 2095.0,
                'usage_limit' => 9701,
                'is_onetime' => FALSE,
                'description' => "BdBuuO3SPPDfS4QyCUbBPbS4FqcexoiURPlTlYK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 1711.0,
                'expires_at' => "2020-01-18T10:39:13.000000+09:00",
                'usage_limit' => 6974,
                'is_onetime' => TRUE,
                'description' => "616ByjbKsr0wyCYOPkCEeHeTzrVQtLiXiFbQBhxutmLpFI2BaJWJfYO48cwuneYSQJIXVJNfugihbbUJHrWu6Q4YOXe0Tx9ZUP4wIpxcDMtRVHq9lka46Oa4ZjIfHltBt9hbhV13nZn7VBieqrRUz24Plg8t6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 3069.0,
                'point_expires_at' => "2022-08-22T12:40:29.000000+09:00",
                'expires_at' => "2022-04-06T11:49:24.000000+09:00",
                'usage_limit' => 8970,
                'is_onetime' => FALSE,
                'description' => "p84xybjFy3PzmylU612iXWMjH0qP3HlXJiyDaronvylyEnL5ugsrMN4OsedQqj0IhrFEAfIrrVlGM0Q71qccXfCk3V88dLCQcnw2o5D6flL96mAKqkWR2zhLTBW29dYITybkPVHtptKANtIc1Bs52j2YAJ5aXXYs5ykKopLbLNTTMwp6rcYnTQDSfsg8dBY4k"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 2094.0,
                'point_expires_in_days' => 6029,
                'point_expires_at' => "2023-09-03T08:00:38.000000+09:00",
                'expires_at' => "2024-02-11T07:54:10.000000+09:00",
                'usage_limit' => 6649,
                'is_onetime' => FALSE,
                'description' => "44w8czli9JPjzDipR7SPAN5Xumpl"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 134.0,
                'bear_point_account' => "45a6b7e2-c93b-4cf1-82a5-3f645454e418",
                'point_expires_in_days' => 7434,
                'point_expires_at' => "2020-05-28T11:36:16.000000+09:00",
                'expires_at' => "2022-06-06T23:18:05.000000+09:00",
                'usage_limit' => 33,
                'is_onetime' => TRUE,
                'description' => "jbXUxczQDttGE0Fo7tLZZoYuAyDiK9eNuZHG5edYYozhrTAguO9fIsWLLiklvKbJ65OHXFRCys3WumzP2JKmMrTiWgJPc3zVxPRIIxp5x3JvS8veX5Kn"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 4737.0,
                'point_amount' => 6798.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 2880.0,
                'point_amount' => 1147.0,
                'description' => "yF8mWNrDWMbfdcVjswYaXdm2W340BJfDGU7TeKLgO1SOB3foWlhwU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 8974.0,
                'point_amount' => 2125.0,
                'is_onetime' => TRUE,
                'description' => "4LygSGa7NX31jRjVh620BEoJ1GtR0xijnTRiZ5QFp99S94ixTvgjIC1KUFr66DDdboHjYYxyMS3JUV6L77yIHE"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 181.0,
                'point_amount' => 5520.0,
                'usage_limit' => 7957,
                'is_onetime' => FALSE,
                'description' => "HiErgEWFUeogYOD6Pwei6QwxbNQzwpYqj8JHvnZZwEfGdKLyt5NAuVyC6JVJWhgNeL77knEE3axvQsWDx41vaHy2WHIz4mmJtEcgT14RceFumxpW7TFpRNQvsdNiQD83ybg5ffaDFT1Z"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 6999.0,
                'point_amount' => 1769.0,
                'expires_at' => "2022-03-26T05:56:51.000000+09:00",
                'usage_limit' => 7818,
                'is_onetime' => TRUE,
                'description' => "mNwvZLBtWzbCuOWDp86V4PWxMaJrDiJV0ut8BmIp6AVJrf3BeRDp39umW1ysDME1KGSTVv7Lj2cGvoGBEOHvs9a343htoLSO6GhrLU28FEdqAoJffK8bGCoZ5Xpxg7DsgiZPLaARM3Zg9vZh7IB6jiMZd11Ll0KDwSb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 4528.0,
                'point_amount' => 1826.0,
                'point_expires_at' => "2022-05-04T08:51:16.000000+09:00",
                'expires_at' => "2020-03-01T17:05:55.000000+09:00",
                'usage_limit' => 71,
                'is_onetime' => FALSE,
                'description' => "7Mcm7hiecJEBVV8Uhg66stUbSstuTasxIAjN18f6RH6Wa2w4vy0YaWtoP5GJYIre1lprDYhAtI0AOxBEvT0YIxdOjzstysXh6cBatOGiS4qocdPphDBPB0lRBlegA3KzJpkzdJDPMQPTUMYUJHGoyshVqdX7Mn0MzmJ1ZkrFKkZHTdQSFapAOTbMw6qdquI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 6258.0,
                'point_amount' => 9849.0,
                'point_expires_in_days' => 4361,
                'point_expires_at' => "2020-03-06T04:57:05.000000+09:00",
                'expires_at' => "2023-01-12T00:23:28.000000+09:00",
                'usage_limit' => 2437,
                'is_onetime' => FALSE,
                'description' => "M79NM3hiN0hphEfuUM7NCjtInG0KqMzK3fagVXd2XRzWoOWuaGwdyNks8nu1Nxfq7su72pzDqJFx"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'money_amount' => 1086.0,
                'point_amount' => 8253.0,
                'bear_point_account' => "f9c95e10-cbb3-4104-9556-f55e16aa3252",
                'point_expires_in_days' => 3504,
                'point_expires_at' => "2020-02-16T22:05:08.000000+09:00",
                'expires_at' => "2022-03-07T13:22:59.000000+09:00",
                'usage_limit' => 3574,
                'is_onetime' => TRUE,
                'description' => "q8geXh7r5dMR9eq0FCkY2EDlkvR6c2JVAR8TYIbCudFNvGuSqA4GTlkpPTKVypIHFtzn8uZKumNRyE4zMpRBZCj3AWdEXPHc7DgFbmBH9dW0yxCwzxESFjVyps6V7npEbNBN40JIU9VmoBNK4h4qUHbvsGKZTYsqmfUcTefOfsTCb7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'point_amount' => 1619.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'point_amount' => 5793.0,
                'description' => "KfPkO2IBcZJar1jj2wID68otThRpY0150BmRsPTS4jJ33O5Vo9W534JEasFQrHyLU508hpT8lUEf44yjftTz7cqgBEDIAd2qJCOWbAr4YkZVTj0fLqM2buwgUUrK2IeHWjNTujJGMA8HJGbnAdnCS1ZZs4ZNhz7J4PDxjZpP1vhJL5zRAVhE5hdN75"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'point_amount' => 1645.0,
                'is_onetime' => FALSE,
                'description' => "DGoj8WR1F5K9k8K1lArT9NdkEMFAypEbPO4zU5kqVdrIlvlAqIlPrmqp04jAKPF4Bdcftp7FSgf6yVcg2dKhOZvfIu6UMzr6GMXHVk2zGYD5QCi9eIuhFvzrSLfHVQ03yXRPb0dNTHhzovLX00KeTJSsjFy875gmawawz8Xirru8rrBRZIlb346BEZfU8T"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'point_amount' => 7468.0,
                'usage_limit' => 4025,
                'is_onetime' => FALSE,
                'description' => "BUm084tdwWEVPFrCRGNcIz419QqeoKz3EH5wnqV1SejyUFDjDKfs3x9IQcwoqfe707YJ9FS8dNIGn7WSFhefiuYSh28CapKL6KOmPAVBgGMcNchS0LnVfmUqrbMP9Rss8S0qsbWpsIOvNFLXiKgX73XC1AIX2wMpXvi"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'point_amount' => 2507.0,
                'expires_at' => "2022-01-17T01:32:09.000000+09:00",
                'usage_limit' => 4500,
                'is_onetime' => FALSE,
                'description' => "X3wNPFXvgxSpuMg5HttjWmkdPnJp98hpQ13UG1A0Ym7H"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'point_amount' => 1239.0,
                'point_expires_at' => "2021-02-17T09:14:59.000000+09:00",
                'expires_at' => "2022-03-04T23:18:11.000000+09:00",
                'usage_limit' => 6043,
                'is_onetime' => FALSE,
                'description' => "BYWXQpznbI2bvSPZzqspkpSaRuu8R0f7nOdFREc0QIOKn86eMS55zGHvtLZILutot2QXDp2ubbNWItoCL2aBVIamI8nHt4q1jyY2PKjP25CNC5FgWWOvRpnaLicypsI51OSLxXeEmeUE7jmboTAWOVcKGzb0Mu2vsIH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'point_amount' => 5279.0,
                'point_expires_in_days' => 4246,
                'point_expires_at' => "2021-09-28T13:44:33.000000+09:00",
                'expires_at' => "2020-10-22T14:15:09.000000+09:00",
                'usage_limit' => 2823,
                'is_onetime' => TRUE,
                'description' => "iZ8QmYIdXMA8NbBcSTFccrP1h72hVoyv2aeLzb3MXnmhb4DFIFkUMt3qr1kbqzq3lAzfaDRfpvolVkvRUzcgT6gkrh2wbGvHh9a1IbF4tC1mmE27GIxDcnpegGKO6gdDqz288HmEqGRLCY1dXmeLTXd1OIhy"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5436b725-427d-42b2-baf5-e96037ba9603",
            [
                'point_amount' => 3460.0,
                'bear_point_account' => "ec5e6070-72ff-44d1-a896-da7ea3007636",
                'point_expires_in_days' => 949,
                'point_expires_at' => "2022-04-19T06:01:21.000000+09:00",
                'expires_at' => "2024-02-07T00:32:11.000000+09:00",
                'usage_limit' => 5921,
                'is_onetime' => FALSE,
                'description' => "24nHqehqSp8OwDqu1iZhbh3yCzzeZFjaOQhmvf5VaQBcCM5Yak4Kkd5xrV1K7SftGNYY9lUFhXGzD4QRZbN5zXQANEYXcNPd3UcoifFLSo7iuY1U"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
