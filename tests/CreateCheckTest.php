<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 6759.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 1338.0,
                'description' => "egcqTwYO82kGPQQr2MO5KCC4HxuDHtlw9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 4059.0,
                'is_onetime' => TRUE,
                'description' => "gI7tgcBNDr8Jq904qs3Jhmh1uan3I0UucsmEOdmxT0m67rIzuN9tcgEpMBK76fvMDw6ciA4cf2iX3AwrgRsK2JGpnBdnuespMtDCVQrS6v1di8SPYB0k9hbbMxBar53HcoJKT8h6NNtCpjhCG656zCwGPJ3qle6Np6rNpH5UlA66b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 5256.0,
                'usage_limit' => 9169,
                'is_onetime' => TRUE,
                'description' => "wcFoeDqSO8No0ggR7lhzEIylGSzzqFet7Px0tIVgUdo0aPSYwh7UynnXcOyfVA4THGbyJtEZUGTlzqASB8L7GXU7fxa"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 6696.0,
                'expires_at' => "2023-04-03T12:57:29.000000+09:00",
                'usage_limit' => 9015,
                'is_onetime' => FALSE,
                'description' => "g5NPCIz0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 3245.0,
                'point_expires_at' => "2021-06-19T14:33:56.000000+09:00",
                'expires_at' => "2023-07-21T00:55:20.000000+09:00",
                'usage_limit' => 6700,
                'is_onetime' => FALSE,
                'description' => "mJFduUB68TTiqwMruivuRfXV447Lle6hV4FFCfZlIs4WfCVLTGKjVt"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 6873.0,
                'point_expires_in_days' => 432,
                'point_expires_at' => "2021-01-25T20:05:10.000000+09:00",
                'expires_at' => "2023-09-11T16:55:04.000000+09:00",
                'usage_limit' => 1119,
                'is_onetime' => TRUE,
                'description' => "MzuLNELkRoJ7oE7SrLVbWbCzKGObK3T1U9HibM8aSfkuC3C4fdRowLPdLvWonzXPLVbgY5fuX144c5kqO8cai037TCA3KwgLXHNwNjQ8v2WxuXpP6imEka6urEvaKjJuG1UgxpmRfr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 583.0,
                'bear_point_account' => "6f1638b6-6000-4ce5-9294-ae978bdf6d2d",
                'point_expires_in_days' => 6120,
                'point_expires_at' => "2022-08-20T19:53:20.000000+09:00",
                'expires_at' => "2021-01-20T17:22:23.000000+09:00",
                'usage_limit' => 5748,
                'is_onetime' => TRUE,
                'description' => "dlzJKKF2L5z9EVKAG4eTLa6YHwOo7mDsuJb8sp4CWI9UOJgcoalrIKJjNskxAVIfeDGg19jlDOXHGEaaahUFtzotU3fY3fI5FjYl83tZGM8iS5EMJPovZbqCdcXdBVevnsBaB0CjW74DabyR5a9xgcLHWyYiUygqgU9RIKKnHqS0J9jn"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 9875.0,
                'point_amount' => 9516.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 4332.0,
                'point_amount' => 1393.0,
                'description' => "rPMTRSR5F5edzEcOruRKRMON1ggStAXtU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 992.0,
                'point_amount' => 1016.0,
                'is_onetime' => TRUE,
                'description' => "4GBWwAYqfrxiFvEMDGHSYPPZQ0KG3zOWgY5WKMYaF9XRxW5C9CxiWw8qyzgK2RvQT7jbDzZJ9LdWlnhOm85RRz1bpcDSO2ZwohWo6RmhF8oFQCvWVhjEc72RON5f9B7AjFZnq1bVxKoRp4FR8tjzVyIQZMP1y1yGA1gv1rzdQal616Sl80pYms"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 4213.0,
                'point_amount' => 620.0,
                'usage_limit' => 8504,
                'is_onetime' => TRUE,
                'description' => "Dkm4IXqqT1ZpBAErrW9MtXy4J6vtdAEQgKwPtozJXMzWCh6Xn2BeXoxJ1Bg8VLnWhE35cKJmQzjVZFQ2ao2sR8lJjIpjLtPwJhhl2kK5kxc2L4scr1beS7hIBgPq0F9q4yjo8OKCWhpBmEXQwolZkKykkq2MdHgVyyjwSzVWKaA0wLX"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 9317.0,
                'point_amount' => 3126.0,
                'expires_at' => "2021-10-07T14:38:50.000000+09:00",
                'usage_limit' => 2718,
                'is_onetime' => FALSE,
                'description' => "5rtjU4szWfBk0Qto20UljV492EawAvlzo1Wk3Tb4PVDV8tE3BfWA1p390jKnazJrADCq8FZzI1JiTGajos9lQ1waI4V2wnb8IdOxXzMoRx1dXRlMFGC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 3880.0,
                'point_amount' => 5138.0,
                'point_expires_at' => "2020-01-06T18:19:58.000000+09:00",
                'expires_at' => "2020-01-23T23:36:47.000000+09:00",
                'usage_limit' => 4743,
                'is_onetime' => FALSE,
                'description' => "t1ZwJyeVHOV36wicTwEQlKYQVakvQQh1N5eUJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 347.0,
                'point_amount' => 6137.0,
                'point_expires_in_days' => 4345,
                'point_expires_at' => "2021-09-22T15:14:08.000000+09:00",
                'expires_at' => "2022-10-17T16:51:06.000000+09:00",
                'usage_limit' => 7970,
                'is_onetime' => TRUE,
                'description' => "fki5v3rHj1lH2vUZKJ8AexuTcEPfOifnGX6OLvpHCZxz"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'money_amount' => 1177.0,
                'point_amount' => 8283.0,
                'bear_point_account' => "5d01acac-d893-47b8-812d-99ae5ede36c0",
                'point_expires_in_days' => 8876,
                'point_expires_at' => "2020-11-06T05:48:50.000000+09:00",
                'expires_at' => "2022-07-08T15:46:08.000000+09:00",
                'usage_limit' => 3254,
                'is_onetime' => FALSE,
                'description' => "mJRRK7jQF0GIia8vNSfBRk8zpN2Q6BCx5RG95VFzo5RcVnbRMWIpL1sMJgwFo6JuG2KlUFPf2uMBxxV9vWJQiPegGWmfCpfkERA48SRaeguTf2SYnpi2VhUhwoLWL6MsYsurSRW5aKhzY9ltG8Vt2tpzTR46jCY08yGsrTKfHC2CjMkqWotYe9SnBLGbTLC1f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'point_amount' => 5241.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'point_amount' => 7454.0,
                'description' => "lvd9AnlGLBnCWm61EbH3ZBgT6UHaaHiuCiH1HWNi5bqbXSQO5IIPFS9Meu3Jp3GDacgZ1lXJB5zCk8o2uqUoOzjOSEhOmjppyXlWkYQlEmIjR7VRwCdOj40HDMuknCiSMXipFvzhIIP7kOnMQpptRL2dUvmtmF"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'point_amount' => 9771.0,
                'is_onetime' => TRUE,
                'description' => "buhzwauubncFVqAYuUKtls0Z6tn0TF2VfQYfLD6D0ULU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'point_amount' => 6043.0,
                'usage_limit' => 8321,
                'is_onetime' => FALSE,
                'description' => "2vXA6AcGGDK72zUNdC45WWhGgGvBdJ0mGvvBSxjOOHkh3M4WmdVUTLECTcvEQ9vhuSsamWijOIpWibs9XYURaiZ6Dx1gkaszgVEEHnum5aFPXgx3kjAc57nzExGDntlJkUANTJHEkERSW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'point_amount' => 9859.0,
                'expires_at' => "2022-11-18T23:25:11.000000+09:00",
                'usage_limit' => 8617,
                'is_onetime' => TRUE,
                'description' => "gjFGtDJBZR5AbvMswDWQTQd9U6U5RZIThgLFWNEePxuQPgIbihBAkBGxm0Yha0L6Ht1ybMRhQ5hUobfDIyAlssQDpaoQKe0Hle2A3c8fjnsyU4FHwJoyq0ZZ3LqXWxjbEnEoSIQFT8gVsfPuQVaowDYu3d5Sm9zyIcRdxyPhvN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'point_amount' => 9089.0,
                'point_expires_at' => "2022-06-20T04:40:21.000000+09:00",
                'expires_at' => "2020-01-11T16:29:51.000000+09:00",
                'usage_limit' => 9719,
                'is_onetime' => FALSE,
                'description' => "ETAQgPekgAKwMH174rbfDViH42QTSZs6yFu8FkF480FKwQqxq6r9xFthPMxqp8GIIinccp41v2FiNpGDXTzbYV15gUB2ncbInL1kdPtX34JCRuH9seuaIH49bzPpyDdManbnSE1pzUuFBC2YALiRTgbjqcdmQliCKHEztMZDqTj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'point_amount' => 5624.0,
                'point_expires_in_days' => 6655,
                'point_expires_at' => "2023-10-06T16:04:34.000000+09:00",
                'expires_at' => "2021-07-15T21:47:06.000000+09:00",
                'usage_limit' => 4832,
                'is_onetime' => FALSE,
                'description' => "ZM5oxU05AkAGxB5ouzK8aqMU7zGD122Aj56qUCV9VGKc43X7JKrtbIUCcgwokeLuTHz6NCcviY6xe6LHkTuVpPamsVnk7glHM1Flzv8oSwAI8Snh56MllDgmospIl0Doyz44FHfPsl5i1gbErX1kMJKtFXM1RYY"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d606775-d303-4c16-9ee6-f23169559e7e",
            [
                'point_amount' => 1068.0,
                'bear_point_account' => "da2826a7-e4f0-456a-be9e-3f2e8c8cd964",
                'point_expires_in_days' => 8745,
                'point_expires_at' => "2022-10-16T03:51:59.000000+09:00",
                'expires_at' => "2020-01-25T00:50:39.000000+09:00",
                'usage_limit' => 8303,
                'is_onetime' => FALSE,
                'description' => "w5b96EWEwNqZJdf9FIZ2GbAJNHYdnpF6I7N5OVFdlqLks3vK4gyDw63j57hluiANfQMUDbLQGQ3AH5PfXPROBLS6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
