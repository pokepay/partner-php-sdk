<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 7194.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 920.0,
                'description' => "Au0ZEXpgGqy7sKnFNMc4k2uvMqgLXR0pe6waGgx7YqevGZwIvmu41Hstmk7tU1ab4UisKWhCZeU40DYgA9Zi6OUSwisF0ahTusqmCNy5OtvU3THCsvK411FQHGPxBHBmhr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 1781.0,
                'is_onetime' => TRUE,
                'description' => "mp8vJI8dQkxitG9lcZgP8kO2us68SmJL43HztB5HqRF5smOpqsr3ikuTbJxhp5Aqy8s77eUm4OaP87EinxO0kh73COFzzQzAEce8DAKSS5TyNyukZurDxcaXjYfJ6ggpphOvdBhQGz0BsqTCvDFtObY69erjGWE8OWFsFLm4U6yWxtcrkZvnLJrENLK2ElVRAPuKf5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 6407.0,
                'usage_limit' => 5508,
                'is_onetime' => TRUE,
                'description' => "VsouFrLyYyfvp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 9681.0,
                'expires_at' => "2020-10-12T17:35:24.000000+09:00",
                'usage_limit' => 5230,
                'is_onetime' => FALSE,
                'description' => "uqKO6483oE0c26"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 1865.0,
                'point_expires_at' => "2020-02-26T01:54:47.000000+09:00",
                'expires_at' => "2020-05-15T20:10:35.000000+09:00",
                'usage_limit' => 1228,
                'is_onetime' => TRUE,
                'description' => "Yve3SSwCW4mytDZor1TqRS2FArGJ35y9lFqoSfTn8huBFLeoAXkmrHocVP5ik3L2HytYab4hPlokeNOeGLAWziDCKRwJ5Kj2frv07ygGCE5PF5i9ecJGyeXwcBvhGQa6UK00xNTeksQnzKfeDa4I79f4CXd4aFy1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 9491.0,
                'point_expires_in_days' => 3439,
                'point_expires_at' => "2022-09-20T01:16:48.000000+09:00",
                'expires_at' => "2022-07-13T04:49:47.000000+09:00",
                'usage_limit' => 7189,
                'is_onetime' => TRUE,
                'description' => "eKvsmooSgwEijVH2Glg9gAWTk6fhbIXi0l41iq1eHUNVYawswUzuEvofJ2ByRpYSMSWzDgW6cfhJJ9NaUZnAaCmfuqAiO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 8987.0,
                'bear_point_account' => "d854f76c-5d75-4426-ae37-32e43d5c4e6e",
                'point_expires_in_days' => 4064,
                'point_expires_at' => "2022-08-08T19:48:14.000000+09:00",
                'expires_at' => "2020-07-18T12:25:01.000000+09:00",
                'usage_limit' => 2468,
                'is_onetime' => FALSE,
                'description' => "ceSCHOKPFsZmRFoKJXWFKJZKMlJrngk9RFf0EZs9MV07SfVqICzlFqgzvn4YIhxEro4Ru16eYdCqWwnGgwFR9KfWs22O5SNMzbNTZVLReDMMIP5jirg8c2BmAD9h8ZftpkZDz9FL545xS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 9105.0,
                'point_amount' => 8593.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 3921.0,
                'point_amount' => 8968.0,
                'description' => "cktb9BsJOxsL9pVCEEVYMBLmsjMi0kjxfsnSO6l2SlAs8aJT8AIfPNVgYrfQI73qKQ4GVxQXYUelrJjG2QXENq0TfDGWQUao7vq2tatkAXcNqmBrBmS0srgxbGvvDAxYBcYmLS6yUdTrqC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 2111.0,
                'point_amount' => 297.0,
                'is_onetime' => TRUE,
                'description' => "ZokflecCvRteiVGIeC4ZU8Hw6xdf8GiI7b5ilHXvRNr9nbpDVYxvJSbs5vlfimi6G0Up3p501XCgX7d8xOeNqx"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 3921.0,
                'point_amount' => 8784.0,
                'usage_limit' => 3561,
                'is_onetime' => TRUE,
                'description' => "zy8o1oLmjmDjt1fjDkWjxZExxLQX9l9T9Guxpx17GVUdPzjpcQtbtuzKt6jZ1mSP8s7dt7jKFyfyzJPojE3RgLiLBYXjBOj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 7141.0,
                'point_amount' => 2628.0,
                'expires_at' => "2022-02-28T03:38:34.000000+09:00",
                'usage_limit' => 5659,
                'is_onetime' => FALSE,
                'description' => "9zavLxMJyhV7SoL0iHrKPmr9VC5TilkTW2HlTMObHaCqlpKdA2cErKudZRQB82Ulto56"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 8801.0,
                'point_amount' => 6039.0,
                'point_expires_at' => "2023-02-21T13:33:22.000000+09:00",
                'expires_at' => "2023-01-30T15:48:49.000000+09:00",
                'usage_limit' => 6456,
                'is_onetime' => FALSE,
                'description' => "K8DLfbdVK1ZIW4NA2uy9K"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 7068.0,
                'point_amount' => 5630.0,
                'point_expires_in_days' => 3460,
                'point_expires_at' => "2023-09-21T19:14:57.000000+09:00",
                'expires_at' => "2023-12-21T06:13:07.000000+09:00",
                'usage_limit' => 3242,
                'is_onetime' => FALSE,
                'description' => "VvAayJoq9EM8LHdpMsoQQ1hUP6GpqSfm"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'money_amount' => 1345.0,
                'point_amount' => 795.0,
                'bear_point_account' => "92545595-e820-4939-bcc5-bc52fe9f0347",
                'point_expires_in_days' => 3418,
                'point_expires_at' => "2021-06-04T15:29:43.000000+09:00",
                'expires_at' => "2020-11-14T02:36:49.000000+09:00",
                'usage_limit' => 998,
                'is_onetime' => TRUE,
                'description' => "2J6w1frM9WDTc8NJxFUc4fBfLYDa82pRM5NXO1AefgFpnXHxZRXwV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'point_amount' => 7072.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'point_amount' => 6988.0,
                'description' => "ZO0mb01wTScJoZXtC6wIjXYMvtmTlFqOCr7EycK4FgZQyqVnnDAoMHq18O5u6qoRCFowXKykpVeSsT809da4Fex6s6YMkz9z6bZ1AMxsm6F8Kr3EIIhIPo3K68EetP3omblbJMlnSCY1sk1z4aYezlDLm948Brq6DQZ7bZXZMR3uG204T8IbhrhcDuU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'point_amount' => 8562.0,
                'is_onetime' => FALSE,
                'description' => "jYWyFadvF0K3zCCBV5M5lvs0MFcauDgBk01OQowkgghzk0CLFe2v0iTe9oy4eDPIhMLV8BF2ZJiuEld2zoDjfzAMbRqZ1NheFbQzLTDqVBD5cJJRBbeNUW1PqTI6Yj4k8CHfW22xkjtAJ6HwsEEsIpwvdG9D9bGL1PgNhybxs2YVNZIrJX7vHE8iYg4i"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'point_amount' => 1121.0,
                'usage_limit' => 5142,
                'is_onetime' => FALSE,
                'description' => "LV3xN1WvMjC4vVaWEuAgLwomfTLgnZCWAOxByby28r8LGM2QaBMRg3ckE3BUguFOzMCBtBNo5YYa3gkUxCsbzS2Ao0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'point_amount' => 4388.0,
                'expires_at' => "2020-04-17T23:48:52.000000+09:00",
                'usage_limit' => 8205,
                'is_onetime' => FALSE,
                'description' => "MDLFo3OuYoenFGMRytPiBnQo8eT6gkxcXOIFppoW9G54KMWB3SuMQju9otXE3VXO4wVzW6m7KxgEyMYFTADduK5UnT4cubnhjQ0FK7JVaef8zoatI2hEApjsNXhHc94kzoJkYzcYwioqNEQM4JoZ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'point_amount' => 8643.0,
                'point_expires_at' => "2021-12-19T16:21:51.000000+09:00",
                'expires_at' => "2021-09-17T06:32:04.000000+09:00",
                'usage_limit' => 2809,
                'is_onetime' => FALSE,
                'description' => "ya9QesyrGMpolQRs7jdx71WJSZK4ScA0ODpAou7RfgkGATYlAlS5q0enQE6qXqMwFEPfjgfZsWpg7RXJxNBOKDzsEanuvv44563KrlQI2gM7qXNFl6JF"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'point_amount' => 4574.0,
                'point_expires_in_days' => 7591,
                'point_expires_at' => "2021-06-29T17:17:32.000000+09:00",
                'expires_at' => "2021-06-24T06:24:31.000000+09:00",
                'usage_limit' => 2272,
                'is_onetime' => TRUE,
                'description' => "qcQIA92SOcpG4n7ghBTGlEwywFDhoLVROxDQvdo3hD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "5d028901-230c-4603-9501-ab115478ea4b",
            [
                'point_amount' => 61.0,
                'bear_point_account' => "098315e2-3a0e-401d-a329-25d4eaf628db",
                'point_expires_in_days' => 1412,
                'point_expires_at' => "2023-03-29T11:08:19.000000+09:00",
                'expires_at' => "2023-04-07T05:28:39.000000+09:00",
                'usage_limit' => 2927,
                'is_onetime' => FALSE,
                'description' => "mL3NXGrvaBIWou4aiVcqC4TzKHYQBbqYKohq3Ciwl0h2oB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
