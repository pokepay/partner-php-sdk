<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 4069.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 1565.0,
                'description' => "1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB1XeTNJcIKtWyeNc1zzlxW2hgOK8NI225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZed"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 7956.0,
                'is_onetime' => FALSE,
                'description' => "LbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL8kuH9QZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2I"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 5158.0,
                'usage_limit' => 2569,
                'is_onetime' => FALSE,
                'description' => "flsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46hfsRF0YKxTClCMK7WZ9OzNLNkjfoA"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 8588.0,
                'expires_at' => "2021-01-26T06:24:15.000000Z",
                'usage_limit' => 5493,
                'is_onetime' => TRUE,
                'description' => "PSksHUuefNAm0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 4511.0,
                'point_expires_at' => "2023-03-20T09:30:14.000000Z",
                'expires_at' => "2023-07-08T20:47:28.000000Z",
                'usage_limit' => 9856,
                'is_onetime' => TRUE,
                'description' => "YocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72t"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 3947.0,
                'point_expires_in_days' => 9709,
                'point_expires_at' => "2022-11-26T07:13:31.000000Z",
                'expires_at' => "2022-08-28T18:06:55.000000Z",
                'usage_limit' => 3877,
                'is_onetime' => TRUE,
                'description' => "yikvXSu1xVqKMzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0d3whSKLF4xWXCgQOdSsQVPrApoltrz"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 5978.0,
                'bear_point_account' => "60eaa0bd-34e2-43cd-94ea-b5804c63cca1",
                'point_expires_in_days' => 4926,
                'point_expires_at' => "2022-05-11T05:10:00.000000Z",
                'expires_at' => "2023-04-12T03:55:47.000000Z",
                'usage_limit' => 481,
                'is_onetime' => TRUE,
                'description' => "Uv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN5uVHKI7mM3plgJR5fwzK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 8777.0,
                'point_amount' => 8833.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 2840.0,
                'point_amount' => 966.0,
                'description' => "cpGZZVlRU03Fa2F6PUopGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr20CiDsCwyLdW5AzEeQb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 5144.0,
                'point_amount' => 453.0,
                'is_onetime' => FALSE,
                'description' => "VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB7swghUIdkqUOY2HAI87h7tC8vMnTzjNmFWDzLZEPN7HQXwymFrbXYvN3cal4RO9jT63d"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 8402.0,
                'point_amount' => 4676.0,
                'usage_limit' => 125,
                'is_onetime' => TRUE,
                'description' => "xKNVoewLoaJggIMA5wXB3CTdPu3I6Gb57N6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 4802.0,
                'point_amount' => 4362.0,
                'expires_at' => "2020-03-01T15:51:02.000000Z",
                'usage_limit' => 6251,
                'is_onetime' => FALSE,
                'description' => "23xgVJhWc2FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5tp1lylHobnm6Hyc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 5463.0,
                'point_amount' => 5744.0,
                'point_expires_at' => "2023-05-20T10:59:17.000000Z",
                'expires_at' => "2023-07-08T18:55:00.000000Z",
                'usage_limit' => 7133,
                'is_onetime' => FALSE,
                'description' => "5c4bSqVBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahn"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 230.0,
                'point_amount' => 2523.0,
                'point_expires_in_days' => 4402,
                'point_expires_at' => "2022-03-23T18:42:19.000000Z",
                'expires_at' => "2021-12-25T08:01:12.000000Z",
                'usage_limit' => 4946,
                'is_onetime' => FALSE,
                'description' => "DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmz"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'money_amount' => 5821.0,
                'point_amount' => 4366.0,
                'bear_point_account' => "4de7aa21-f45b-4775-ba3b-3da7b2f82f8c",
                'point_expires_in_days' => 6040,
                'point_expires_at' => "2024-04-13T00:45:37.000000Z",
                'expires_at' => "2024-12-18T05:23:19.000000Z",
                'usage_limit' => 5918,
                'is_onetime' => FALSE,
                'description' => "OOmiUvKwyiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'point_amount' => 1185.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'point_amount' => 133.0,
                'description' => "Char2DsC6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROpiRc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'point_amount' => 2757.0,
                'is_onetime' => FALSE,
                'description' => "IhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdseC51TTzGU05VTqLi"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'point_amount' => 7675.0,
                'usage_limit' => 4642,
                'is_onetime' => TRUE,
                'description' => "TT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'point_amount' => 6469.0,
                'expires_at' => "2020-07-18T03:30:33.000000Z",
                'usage_limit' => 6615,
                'is_onetime' => TRUE,
                'description' => "c6DIDKem3xaXPio5o0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'point_amount' => 6281.0,
                'point_expires_at' => "2024-04-17T16:46:41.000000Z",
                'expires_at' => "2023-03-09T16:35:05.000000Z",
                'usage_limit' => 4472,
                'is_onetime' => TRUE,
                'description' => "yrfJOMPlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRMPV8lVcOO1w2GShMQxP1XNaA4tMwkt9CE"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'point_amount' => 2633.0,
                'point_expires_in_days' => 9272,
                'point_expires_at' => "2023-11-11T19:30:07.000000Z",
                'expires_at' => "2020-09-03T18:15:08.000000Z",
                'usage_limit' => 9855,
                'is_onetime' => TRUE,
                'description' => "2Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "1218966b-259f-47a0-8426-0e620a5da89b",
            [
                'point_amount' => 1601.0,
                'bear_point_account' => "e42bcecd-ef88-41b5-8a64-f5aa201b788a",
                'point_expires_in_days' => 7264,
                'point_expires_at' => "2021-02-14T22:09:27.000000Z",
                'expires_at' => "2021-09-27T00:04:06.000000Z",
                'usage_limit' => 5547,
                'is_onetime' => TRUE,
                'description' => "W8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9O"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
