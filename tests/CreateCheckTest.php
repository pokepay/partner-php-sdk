<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 724.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 2384.0,
                'description' => "lGY8HYbUBtwrcnyNXvLVB2eSO5zXUaj36J85INKtbjuCsryFdTHchzl5arm9INgr7w6z2U2YVZW0PZzYoqi0WLS4nWBVSqUjYfU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 4294.0,
                'is_onetime' => TRUE,
                'description' => "GfUHnc1RSnRqCJVny7oBLbWRRMxpkwDy5o99oLPWu9rjSj7KmNS22SUUmiBSL4kxSCYJ8IOgujiuhNEOrjXAOhXKshP3D2wnLse0v2FIciy6aPHLOYM54xDbjbor6slKspv5stud"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 3497.0,
                'usage_limit' => 2034,
                'is_onetime' => TRUE,
                'description' => "o7TqBZ4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 5406.0,
                'expires_at' => "2020-09-14T06:06:31.000000+09:00",
                'usage_limit' => 4722,
                'is_onetime' => TRUE,
                'description' => "7FBNiMOIuc5TDOlmHxHuyN5sxQsyYXX5tPa54rzRUCN7y8RvRV1ZfAK4VPrwY8YhSXPGSb4hlw0jDLo30Qufkgwohg7Owy9XAp1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 8837.0,
                'point_expires_at' => "2022-10-21T15:39:49.000000+09:00",
                'expires_at' => "2022-03-07T22:33:37.000000+09:00",
                'usage_limit' => 6526,
                'is_onetime' => FALSE,
                'description' => "AteT9vYGPU9eeZx2j6OpKroXh70oj9kzSAfLqll5HXTXzXq6kvU6BtMtia71iEuZR38I7afxMK0igELF4Ymi"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 6853.0,
                'point_expires_in_days' => 864,
                'point_expires_at' => "2022-10-09T00:17:14.000000+09:00",
                'expires_at' => "2022-09-15T08:19:25.000000+09:00",
                'usage_limit' => 6636,
                'is_onetime' => FALSE,
                'description' => "Djv1358dQoYTzFtHX6OYsdRKVAKsY38ylaAsAcId2pvYZEqlgkqOk77DGBddieqi0hU1SII0szjK9lyAcxPnJCQybO7mXbNDfZVN1ZdnUsVfvY"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 4066.0,
                'bear_point_account' => "84298c15-07b6-489e-b25e-7e35ad9dcae8",
                'point_expires_in_days' => 1950,
                'point_expires_at' => "2021-12-17T15:38:22.000000+09:00",
                'expires_at' => "2020-10-27T23:17:55.000000+09:00",
                'usage_limit' => 4205,
                'is_onetime' => FALSE,
                'description' => "7c8d8bxbiJ3NlGjEfT"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 6862.0,
                'point_amount' => 7485.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 3958.0,
                'point_amount' => 5077.0,
                'description' => "8JMmpvidrjCpV3r"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 2266.0,
                'point_amount' => 4817.0,
                'is_onetime' => TRUE,
                'description' => "pCet0Lhst7J4usZ6Fs4Zi5qZwCF5wZzjWlc9OibGeTsJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 8036.0,
                'point_amount' => 5142.0,
                'usage_limit' => 19,
                'is_onetime' => FALSE,
                'description' => "3zSzDqKQhcqdokakfyxFaIYcqXDWV0BN0d7jPyMmlmpMT6p17QHQuDscU81Pm3o0uATOfqcQyQ5kjfmaA66D0cQ0qMPZKMXe0BIGmBLhD7EQeydrouLm3XldEPO8NuMG7J68iHjcOOqgBfDJ0n2Qt9nvGQqw148gPBpfnjqXqSSHt2n06QIah6aqCm0QK0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 3063.0,
                'point_amount' => 4661.0,
                'expires_at' => "2020-07-20T21:49:25.000000+09:00",
                'usage_limit' => 4753,
                'is_onetime' => TRUE,
                'description' => "28HiBinqatjLecBvyeGl9d3Y4rHDX2fyipiSZNGB3Sj1v5Zy7YzmN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 811.0,
                'point_amount' => 3673.0,
                'point_expires_at' => "2020-01-20T06:18:38.000000+09:00",
                'expires_at' => "2022-07-31T11:59:31.000000+09:00",
                'usage_limit' => 671,
                'is_onetime' => TRUE,
                'description' => "J9FnqGXjcySxoRJkjhXqSUSPt2c1qgrdczXx48VwL433lw8FjXi0p2DzlkB28GiGoVLjZu253Z82E8YUeqCddXnYZTRuOSMjnO41HnZrn7caenzT06tkSwKx3k6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 6255.0,
                'point_amount' => 957.0,
                'point_expires_in_days' => 1208,
                'point_expires_at' => "2022-02-22T08:17:50.000000+09:00",
                'expires_at' => "2022-01-16T14:10:38.000000+09:00",
                'usage_limit' => 5528,
                'is_onetime' => TRUE,
                'description' => "PJCy3sfz4W4N01mVDakinUo0tSXbSlPeyDBo3FeGeRDlqMbwLm3jFreRIFPlNFbnwUIqf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'money_amount' => 4264.0,
                'point_amount' => 4629.0,
                'bear_point_account' => "ea4840f3-6b01-4ca4-8359-da29e44f9d07",
                'point_expires_in_days' => 2305,
                'point_expires_at' => "2021-01-30T07:07:24.000000+09:00",
                'expires_at' => "2020-10-21T09:12:30.000000+09:00",
                'usage_limit' => 646,
                'is_onetime' => TRUE,
                'description' => "0CO8XiIvGVny6baMJIG3NQZh"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'point_amount' => 5292.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'point_amount' => 9636.0,
                'description' => "U325g03aXsaTRD29C2FNEmxfklowla8Mzpu49yr6bnkkf8TCwf3Qf3p7i6azQ4BzZg25bHmxuPmsRzDXB7AOLh5XncDTs8qkKTuOfm5YecLeQeae8j2JRSuDdbg7Z7Xrudh5poIjaWVWfMYxtpmwG3kg6uHFFsldojJ3un59gPBlSSlJBZ2KVB7UCxkjHS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'point_amount' => 8479.0,
                'is_onetime' => TRUE,
                'description' => "wj6nOqrFpzRSYZwtbD22ihXZjIcBzx5fGh0rLLjql5kaM6xHPg2mrw84wIFS5SJEoglsQWXIBwtPOIo29aPqOUnHG8PgfxS3j6MdfjAp3Uv6qLPIfAJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'point_amount' => 9730.0,
                'usage_limit' => 2823,
                'is_onetime' => TRUE,
                'description' => "TLRHsb5KnSfN1kzk90rbef4FVOjd9XeEzu19OcdqyPgvTIYdwAuHJGkzXwdKA64iBMzObH9BKBMEzwvckSZpi7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'point_amount' => 202.0,
                'expires_at' => "2021-09-26T13:55:30.000000+09:00",
                'usage_limit' => 613,
                'is_onetime' => TRUE,
                'description' => "qaEEQnoMsfEwlJzJ1zgJ2YSmrf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'point_amount' => 930.0,
                'point_expires_at' => "2021-05-16T16:25:29.000000+09:00",
                'expires_at' => "2023-12-11T13:17:10.000000+09:00",
                'usage_limit' => 6936,
                'is_onetime' => FALSE,
                'description' => "AM1xhpVIPFNR9X7qc3XwwESokNT7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'point_amount' => 6256.0,
                'point_expires_in_days' => 5124,
                'point_expires_at' => "2022-03-02T12:30:50.000000+09:00",
                'expires_at' => "2020-03-30T18:21:50.000000+09:00",
                'usage_limit' => 7146,
                'is_onetime' => TRUE,
                'description' => "9fC7e9hd1SW79BdhxflIerkXJwwg6LB718HeGGwcvY4gSUd60IoGSjUdURU1H940CZTp7JVLVcDWnEvp6hkbV2CxEwwTyFvr6iGKyXCJ0U3q5N56aTK7GiehScjXJ3wgGb5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "032dfcc5-41bf-45c1-a77b-d4453ddc2134",
            [
                'point_amount' => 4209.0,
                'bear_point_account' => "02ac6e3c-df59-4b44-adfb-9b3b54a6affa",
                'point_expires_in_days' => 2372,
                'point_expires_at' => "2023-04-29T10:02:11.000000+09:00",
                'expires_at' => "2020-03-24T13:51:38.000000+09:00",
                'usage_limit' => 7638,
                'is_onetime' => TRUE,
                'description' => "JV98meGyfcy8Rf0OhUXYMjH2NOG46hpYsNWUQn0vYe2h4PbeBSFgp7OEW5Z9iPAzfpRzB0DnswNFXJvp855OlmUv6iaT57c4c2TKskMPgmNiFkhToc5vDAugUXqKkV97F2UrcXGmIHbYPmix2lCucpaMpUVPI9U79WokkPZRGiHghoxM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
