<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 2662.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 1522.0,
                'description' => "wcTIqfZGa8VmM7LxaafZsEiZ4h1kUtLESZUqCMHUv6WI9WlLqAjFFVto"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 3062.0,
                'is_onetime' => FALSE,
                'description' => "3w7if4YoZJ6xmZ8N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRdkY0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 2589.0,
                'usage_limit' => 5247,
                'is_onetime' => TRUE,
                'description' => "yT3lVRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvTHbjOWbqqVGNOP2f7Fmc6XSXXM3Y5XPxnjFhfkfYgvABxRhjV7rXm6F6onhtgkbe1I3fnSrAjiMpnuQgQNZWqLAFAWqZBqyjs43AAjNChMERBnJER6lOBQBwAgsTow2Z3Uka1wds9TY9Bp5VDJiBPB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 2225.0,
                'expires_at' => "2020-10-10T03:32:12.000000Z",
                'usage_limit' => 3631,
                'is_onetime' => FALSE,
                'description' => "eTNJcIKtWyeNc1zzlxW2hgO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 1227.0,
                'point_expires_at' => "2020-05-16T01:17:44.000000Z",
                'expires_at' => "2021-08-28T21:31:38.000000Z",
                'usage_limit' => 3150,
                'is_onetime' => FALSE,
                'description' => "I225RAsUHuuLFS4058hKDGnyjbxrF6zxkmTZedVWeLbSdWlORFkWxf1fgII7vrhxHZrOEIH6HNdDlfIrfFFwUdXhpSi4j72IcAxs47XeIzYlwiQaQGyn4Age91Y1cWNDBnv9RrzZK5kL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 1592.0,
                'point_expires_in_days' => 6943,
                'point_expires_at' => "2022-03-05T21:00:37.000000Z",
                'expires_at' => "2022-04-23T11:08:18.000000Z",
                'usage_limit' => 7752,
                'is_onetime' => FALSE,
                'description' => "ZjAoA9Wjz3xWF4fJVtnG3Avmta20vIgud6F1UgGMHbk2IRflsvwuZxk0nQmXMvg0FcWUrBHOSV7LC2s46h"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 7185.0,
                'bear_point_account' => "2a44ed92-9e66-47dc-b37e-4efb99f965d2",
                'point_expires_in_days' => 663,
                'point_expires_at' => "2023-10-11T13:28:27.000000Z",
                'expires_at' => "2021-08-21T10:35:05.000000Z",
                'usage_limit' => 3019,
                'is_onetime' => TRUE,
                'description' => "TClCMK7WZ9OzNLNkjfoAuPSksHUu"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 2203.0,
                'point_amount' => 1446.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 3328.0,
                'point_amount' => 5357.0,
                'description' => "0yTlB8Y7jnhE6v0ICVfZpB32LWZFMYYNQ77hNnDgeQkP6BrHNLW2TjgwJkClYsxYjLV6mNckmXWb6cDTOBEvT1fZYocBrtgwRLixenA1GWqf2JPqamqpbbuSj1PURjYRasH9ARntTDK9f1O2csoG3F55uy56fVMl4ovKtbbNMLWzz4xf72tklHyikvXSu1xVq"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 3882.0,
                'point_amount' => 2310.0,
                'is_onetime' => FALSE,
                'description' => "MzKtPMLBX6YLvmDqPAbWtHJHRtQBqCHsxk71kIOiSHcZ37iojnk7j2j33qMA4N2evwLBNS7QyCEhtgNDuAnxydB9u3o7ZMeTosoRh4S0mExQI1uCwHXvSS9xqXNJMeqv2rRxx8SeYgA5RTAZIE0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 2148.0,
                'point_amount' => 6835.0,
                'usage_limit' => 2807,
                'is_onetime' => FALSE,
                'description' => "KLF4xWXCgQOdSsQVPrApoltrzZbMjGbqCaDUv1CsWTy6z2FdXbfXavW2HwaVVWGcOvRgfjTir1eeHpnGAvFN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 3957.0,
                'point_amount' => 1941.0,
                'expires_at' => "2021-07-25T17:17:19.000000Z",
                'usage_limit' => 7428,
                'is_onetime' => FALSE,
                'description' => "3plgJR5fwzKIFQcpGZZVlRU03Fa2F6PUopGrOCijX4VQZjHwhb9lV9sTjbq8Wo22UU1er3T1gBtfr2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 8899.0,
                'point_amount' => 4073.0,
                'point_expires_at' => "2020-07-20T07:17:59.000000Z",
                'expires_at' => "2023-06-19T16:14:49.000000Z",
                'usage_limit' => 1356,
                'is_onetime' => TRUE,
                'description' => "5AzEeQbE5VhNxjrtNh84WLuHKWoYQpDLtJyiWbDVy6Ss7attO0KDvZ2PuoFKU33PYYZTEIyRndmm72c26Cd6B3OB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 5471.0,
                'point_amount' => 9975.0,
                'point_expires_in_days' => 5224,
                'point_expires_at' => "2023-05-19T13:55:52.000000Z",
                'expires_at' => "2024-01-30T17:01:09.000000Z",
                'usage_limit' => 5391,
                'is_onetime' => FALSE,
                'description' => "dkqUOY2HAI87h7tC8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'money_amount' => 8196.0,
                'point_amount' => 8481.0,
                'bear_point_account' => "3b750c29-9b3b-4505-9e8a-4ef6dc1c5a4d",
                'point_expires_in_days' => 6639,
                'point_expires_at' => "2023-06-05T04:28:42.000000Z",
                'expires_at' => "2024-01-18T23:41:29.000000Z",
                'usage_limit' => 7066,
                'is_onetime' => TRUE,
                'description' => "NmFW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'point_amount' => 9668.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'point_amount' => 261.0,
                'description' => "ZEPN7HQXwymFrbXYvN3cal4RO9jT63dRDxKNVoe"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'point_amount' => 5495.0,
                'is_onetime' => TRUE,
                'description' => "JggIMA5wXB3CTdPu3I6Gb57N6Bfk723"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'point_amount' => 6588.0,
                'usage_limit' => 4984,
                'is_onetime' => FALSE,
                'description' => "JhWc2FLmu9RV4wTQ1eFfFoOmA6KgKFTgUMIqeaKPydQtxKkPEiJ9F7s09s2D07ZJtROtnJyz65lsPnpU0js5rsIZ4cWpER3UtPkG2eq1I6SZr9Xo8DUROCVDxPSk72x92MmliF75MFhbZKuKGU7dTPisUgKnCVzFujd5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'point_amount' => 1701.0,
                'expires_at' => "2021-02-13T20:25:17.000000Z",
                'usage_limit' => 6128,
                'is_onetime' => FALSE,
                'description' => "lylHobnm6HycWppeOG5c4bSqVBGp3Ank6BTTvgxHzzgdLIxgPMdYrCUsTg7mFBD5JyTl3OSbQF6o9LFFmkiVCdqahnfY1HR9DfMzD3LCASqee9bY3sHOGNF3Mai4m7no77RN8AasCH56gnyuHFpFsNPJmzuH1GHYOOm"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'point_amount' => 8809.0,
                'point_expires_at' => "2023-11-01T17:45:57.000000Z",
                'expires_at' => "2022-06-28T14:04:38.000000Z",
                'usage_limit' => 9215,
                'is_onetime' => TRUE,
                'description' => "yiQYSSoPK3N5ZGrmU0unMptspEioBBqGcJLaXcepDTPRHElLNQrvWUnk17KWAioiFIGH7shpxz5S2r82nr4Char2DsC6IOlQ3ZCa8lZmMT5mAFAIeN7EOzXnRCcbLOsMiN4tjoxBAROp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'point_amount' => 2172.0,
                'point_expires_in_days' => 162,
                'point_expires_at' => "2022-10-26T23:49:24.000000Z",
                'expires_at' => "2020-12-31T15:11:36.000000Z",
                'usage_limit' => 6948,
                'is_onetime' => TRUE,
                'description' => "c0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "42127d33-ab91-4e4b-86f6-8e9ab9f70d96",
            [
                'point_amount' => 689.0,
                'bear_point_account' => "c5326363-7a38-43bc-b1bf-7a4bca8a5f86",
                'point_expires_in_days' => 7941,
                'point_expires_at' => "2021-12-07T03:10:44.000000Z",
                'expires_at' => "2023-03-01T00:04:05.000000Z",
                'usage_limit' => 3447,
                'is_onetime' => FALSE,
                'description' => "6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOTifX7KrzTtAdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
