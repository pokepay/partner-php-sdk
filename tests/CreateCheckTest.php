<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 3891.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 832.0,
                'description' => "J5GTUGj01Fiwa0qtjZ0gi2aJwD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 1858.0,
                'is_onetime' => TRUE,
                'description' => "wBdzqowlWarr2V68q28Lzokz0pGRkZmfrntDFDNZdEpDU70uAWnunvVL2HzFGjNBD534RINP8Q1Re8ZodW8myjuM2kKFb6bDSA5KOivUIB927HvS2PeOQhbxdoZjI6jmjYrj4dTpffw8u"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 1681.0,
                'usage_limit' => 899,
                'is_onetime' => TRUE,
                'description' => "ZUGaPu5hoaE9148zFevKKRgPpMDhzs7OOi6hsV0l5zD8gpHiG3iJgGxq3dTcuM6qj36SlpmjltHqydq99huI1hnfPyAqA1KfDhNBSmBrsgGJPxnNLpOy"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 9849.0,
                'expires_at' => "2020-05-07T19:10:29.000000+09:00",
                'usage_limit' => 1304,
                'is_onetime' => FALSE,
                'description' => "vO7Ke9I0eY0Qp5zXIWJAvDwRAcoUyzw6jpDe0iXXWpHaVgs2NvFY4RBEMpAvLH18s5yRzfPDR60w3nUfoRd0DVRpgzEcK0ctsbIp0ZCCeIeHhCtliiBeFIeWAboOEyL2Kk"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 313.0,
                'point_expires_at' => "2020-09-11T18:42:16.000000+09:00",
                'expires_at' => "2022-05-04T04:31:03.000000+09:00",
                'usage_limit' => 7234,
                'is_onetime' => FALSE,
                'description' => "vRmp6uCfR5Wh9ZtWlFZIWG45ZbZPVkUlfhZGGe9cudf0o7rM2K87t9fK9KbIhb3Fu5yOppG8qmqeyhfasmqGiaK6w6V5cAK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 1933.0,
                'point_expires_in_days' => 1436,
                'point_expires_at' => "2021-12-06T15:13:13.000000+09:00",
                'expires_at' => "2022-12-20T06:36:47.000000+09:00",
                'usage_limit' => 863,
                'is_onetime' => TRUE,
                'description' => "2fyjznEfLkLLrNqvCGLc4yTEdoZOVyBMVVmPdKhB1pKOdlDhO88vFyJ6qH6aht44jEvgSR0J92zX5m62mJYTnpnauaCmlIruDfzbFiQM9URlthCPrW479xppqkJlPZPNlSrej8BqsKC5KKPcXcsJgME30gOtvQuUNMonBXIdgLMVsnhoFl5ulh7APFLKqxp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 3962.0,
                'bear_point_account' => "88dc7a37-dcc3-4c48-8c64-ad9a50652f53",
                'point_expires_in_days' => 3690,
                'point_expires_at' => "2020-05-25T15:16:08.000000+09:00",
                'expires_at' => "2020-04-05T08:23:03.000000+09:00",
                'usage_limit' => 9214,
                'is_onetime' => TRUE,
                'description' => "n35nyFwm3dYnCkKQiXtFSYm4r14lIB8SR7QelmzF870e65VvjZbyzGK1qmk7H0MK1HXl1UmmHgldvwbzLVFFaevPyHvjvMzTU1ATibodjUDLzBZEYL2AaJRG0UDu4rugFDJC5RUyakgYxC9jXOMnfoQA4BFQVAHwn"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 9570.0,
                'point_amount' => 9431.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 7177.0,
                'point_amount' => 3571.0,
                'description' => "idmTiWTAoUXlLj3fMS0uStk8eu4646PMUrrDLbiQebfHnOJlJSmfmQIq5KfOPj2MFGBrKpwgVtfm5sG926nSyClJbGu0V78YCv7kO1vBJHUDyQ5em5jZExbciSjlCXfBvyg6hjFgqcH2f2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 3704.0,
                'point_amount' => 1863.0,
                'is_onetime' => FALSE,
                'description' => "pQSDT8w1EFdCnzX6r4WuB9S9xQEZzPeqxkokYU2SSVk51VQnAZoxiGROz5N5PEEtMF7TEKosGM85kaBCDs8gBU2DOj6UWpEcpjteTTUh074P3YL6ueuHPai0f7DxkyDpECEDo4qKE48g2Sqm5mNfyrZWxCQ9Cymfo1RWTtYlleMKQ22KffWpm7imvQ5VMl"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 6736.0,
                'point_amount' => 7512.0,
                'usage_limit' => 9580,
                'is_onetime' => TRUE,
                'description' => "gUW21ehyisK8WFKZ2sSfekI4gQEBgpFkJNOF68Qs7D9WTA0QV3SQbm8aHutEZLVJh5U984l2jjDxU35XYNjWr9rpF4Y5ccn2QBwvHj8KjfiKJFdFYikgriSDjYgPw2tU72fesHDmztJBCiuLdKFegl6TH3TvOvr0a92A7FsnJRmxX9x4RsJPv0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 9102.0,
                'point_amount' => 2681.0,
                'expires_at' => "2021-06-18T18:25:11.000000+09:00",
                'usage_limit' => 3142,
                'is_onetime' => FALSE,
                'description' => "tbJrNwbYvqZXk7ipFy0FGZYFyskECYGxPGhklHqaT0jxHvPYpZOrEaiSD62ab42Z1VcwbPKW0jrt34DYR6vQTi8hMgEvfpRjQAdhBFYGnnAkBP2gToIMaRT5blRzuNBweYqwQ6Ena3nfpyMAJR3HUNViOTeEbGzR78dOadvjp0cFTmDYA4LeEdg0gCrAwm64NcCkd2H"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 8543.0,
                'point_amount' => 7710.0,
                'point_expires_at' => "2020-08-02T02:44:21.000000+09:00",
                'expires_at' => "2021-04-01T16:09:31.000000+09:00",
                'usage_limit' => 9697,
                'is_onetime' => FALSE,
                'description' => "u4j9rhv44g4z765mj6FfeUq5vVdpIeW2BrjjyoL6rGeLdN2oZ6lj7F7tPw8sbTTHPlGWfz46KJRt6w1iqcRkeg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 8493.0,
                'point_amount' => 9489.0,
                'point_expires_in_days' => 7639,
                'point_expires_at' => "2023-02-26T04:51:50.000000+09:00",
                'expires_at' => "2023-04-28T03:48:03.000000+09:00",
                'usage_limit' => 5735,
                'is_onetime' => FALSE,
                'description' => "vIc1iZ5f7ZtLeiHleYrN4PUBGUNt1LfKUymWA5BIR6qv8aB7fmcQKNdSBPqVvd6PrlIMIXUVeJNjnCVZEI3fYNAyv4lcVX8r7K2DXcfmyRBCY716jgj26OcUgykz"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'money_amount' => 6821.0,
                'point_amount' => 4041.0,
                'bear_point_account' => "b107875f-c2bb-4962-8d24-99f4c3ac0716",
                'point_expires_in_days' => 1305,
                'point_expires_at' => "2023-02-13T04:52:53.000000+09:00",
                'expires_at' => "2021-05-01T21:02:20.000000+09:00",
                'usage_limit' => 8712,
                'is_onetime' => FALSE,
                'description' => "r6VcFJfYuVmQd2jJmgWsYT2AC0mD3fGwgaGFO8YL0hrphMPVAU6UlADVlkkEnJwfpc6mE9yXs0Fwhmxt4xkKogOi2lgaTVUw4EyoDxZvSvSU5G8BvkKsHyvKK35HdBcg8J9VCa0zNZDBP3HDEMm6lJq5WAhQfgxysxrlqp44F5CMOPZCsG37AzT47FIAIKbMnOm"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'point_amount' => 6199.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'point_amount' => 1944.0,
                'description' => "nHsgM3RGBZFxlbiO0LlH5M93BoxU9HSWBtSzXMmCZgIxWAhxw9nf00rLiKjclUOHMExc4m"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'point_amount' => 2609.0,
                'is_onetime' => FALSE,
                'description' => "U9OVqEixaL3KiPEx0NlvoEigBUwoUloAyaYlR9fs1NCNCk7rxDUnkSjF5hdwNPS2i0rY7DSJLkPvb1XedVrwO0w1adKf8xuMlIMPPZkghMnbXR56Er760GVzGbbjpb0VOuWZf5NB0mYrG7Fra2mQgzu"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'point_amount' => 2842.0,
                'usage_limit' => 1576,
                'is_onetime' => FALSE,
                'description' => "XdNpeALe3pJH1yJior3UoyILtSPAd0oXuNZmr1iGTEPPh0p3PP5IgqIHF8CAu3bLgQTDPaEB19iGtcbHw0tTdq4GknmXjyLF1K6bSTaWz3S5Qo37yRXcSBI8fSMnN26MAkJOtQBSNwIBs1VsjKLAMH3vXLfumqaXzFGvlL5DVbtaZtdKa"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'point_amount' => 9928.0,
                'expires_at' => "2021-03-05T21:01:01.000000+09:00",
                'usage_limit' => 821,
                'is_onetime' => FALSE,
                'description' => "MZ8Jrpyi57D2bfOPVYXOzJvRPgDmvSg400bAoRp5tIosLCfTQ4kl03a0CU8EiBoVogBlC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'point_amount' => 1421.0,
                'point_expires_at' => "2024-01-19T07:37:16.000000+09:00",
                'expires_at' => "2020-11-25T01:26:10.000000+09:00",
                'usage_limit' => 2929,
                'is_onetime' => FALSE,
                'description' => "lomHQY75cVITS2hyCAuflf9kGOFfWCH9naZBSNgy9qyd4HWMImfuum7Fy5mxEktNCpXm8hDS6WrGR1zbswrxEFVDm5ELOaTAMaugpgpeUCDnnNkoQKjT2G7pCMTs4h5VnGqbekZDH3tpgLWqQyqo9YugZIxNmvPSdBBQh6DwPLZKoLLnZXLVTtEUpuV2gEQZQrO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'point_amount' => 1665.0,
                'point_expires_in_days' => 8692,
                'point_expires_at' => "2020-06-04T22:45:03.000000+09:00",
                'expires_at' => "2021-02-25T03:33:27.000000+09:00",
                'usage_limit' => 2342,
                'is_onetime' => TRUE,
                'description' => "JTL58mcitivZcBEYjniKRBIJwRuI2lHOUXhetw9JgGFvtK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "94808eb9-bb66-4623-aac3-773e521e7ad1",
            [
                'point_amount' => 9406.0,
                'bear_point_account' => "b826e0ff-5b40-44c5-9aa1-c6fb23bdab8f",
                'point_expires_in_days' => 76,
                'point_expires_at' => "2020-08-13T15:11:58.000000+09:00",
                'expires_at' => "2020-04-04T15:59:13.000000+09:00",
                'usage_limit' => 8367,
                'is_onetime' => FALSE,
                'description' => "qtyB5mSWOwFUa2xvbP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
