<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 3843
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 6919,
                'description' => "p1VFXi65IWH287FkS1AdoZmrqVFQp8fp9IpDGNT32XXjSeAsfsowmrnytFnDNPErJC0T6j8TSBN1GRIxfJ3UGUUM2jHDzbRjTfUU5d5AtOipE6L0lEeYXxSLgJV1GwAOqdc8zzTPJEfMbaKIEhnBHfV6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 5284,
                'is_onetime' => TRUE,
                'description' => "GM4VGRurvyE3ASr9IOsPHz4Zd6uXHhC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 4418,
                'usage_limit' => 7286,
                'is_onetime' => TRUE,
                'description' => "8wCQDn5TxePGCKc6zq0vbsfAwCBSEwRfx0DBbiZykOey7zjJ6OyJP83x3uLLTOPjH6jj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 1669,
                'expires_at' => "2024-04-10T03:14:47.000000+09:00",
                'usage_limit' => 2015,
                'is_onetime' => FALSE,
                'description' => "RSGQkOLow4uOPR7jYUkie5Rbdop3nbAQNRasJaqAeaFh0mPOgCiw12joVskUHIrzFx85stT5X2fdTsebRuLVbzPU8r1TG2yJE"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 9645,
                'point_expires_at' => "2017-09-17T23:54:25.000000+09:00",
                'expires_at' => "2021-11-16T02:29:39.000000+09:00",
                'usage_limit' => 7329,
                'is_onetime' => FALSE,
                'description' => "QVh8G8vXFKeuF0FhTncNlMmgEuaHAHntz60OEH7JgjiAw3cGaLL5KHpinnRK5y0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 9039,
                'point_expires_in_days' => 1693,
                'point_expires_at' => "2025-07-21T18:28:34.000000+09:00",
                'expires_at' => "2023-01-13T14:03:45.000000+09:00",
                'usage_limit' => 8694,
                'is_onetime' => TRUE,
                'description' => "cVYRMoN8ciCbZWnzcDnK4LA4gWzsFxrEWGQmIqwq80GWYOCdqp3aMw45RftnlC78XMJnZ0CKAQudtFEN83UK6KJ482qLWZU1lTgJBoEtylA7LcgVEYNBH5KGkiTeGrXAkdlmbDvPcxbP00J7QmpOVA7MePtYYSm3L3WBUYIGLXhu0DvMLxv"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 7413,
                'bear_point_account' => "e663bb44-c26a-4082-849a-bb4a535d8ffb",
                'point_expires_in_days' => 1247,
                'point_expires_at' => "2016-07-08T05:31:14.000000+09:00",
                'expires_at' => "2019-02-22T12:18:24.000000+09:00",
                'usage_limit' => 2820,
                'is_onetime' => FALSE,
                'description' => "sKkwbEHxkNigyccRVuXaxHAAztkflrbX507aitxdTcYjjCJVatXW3s3mbWj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 2825,
                'point_amount' => 1898
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 6241,
                'point_amount' => 2686,
                'description' => "cKJS9JHlwFlJcsltjjmodDQEUxDaghv7DnSC5Rfu0C0uKFwmpPkPjblE3KxRrUTFSpI6jwJUUxrUc5YmXel2A200gV6FxYfWwCiS0MuCLswxDV9drgRKhLSvZ2KQORxMHroQo6jM66W2y8KrZ8xMlNalvWasLjNh8s14cZJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 2083,
                'point_amount' => 4776,
                'is_onetime' => FALSE,
                'description' => "e4Q9GCUyL2v9u3mWzZwKqxzujrUlmkKRdRXeieY6AmMB38WCqGZQWNed5BL6m650n0RmhPNf1QdSFaslICN4xIeeSgcGsS3PA5BMU547lNJdN573CatnkU3QijXWL36Ne9BIyD0VsxUMLq2pynj2i9JShHMs7dpHbhmzmDvsuxd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 3164,
                'point_amount' => 6865,
                'usage_limit' => 8774,
                'is_onetime' => TRUE,
                'description' => "1b9FFVSxNRhY3CeG383Fyff0GWufJQM5UqG40T5H1YOyXeD7lp3hQ7iTUdtYXMwyZtYN7Nc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 8488,
                'point_amount' => 675,
                'expires_at' => "2017-12-14T21:09:07.000000+09:00",
                'usage_limit' => 1092,
                'is_onetime' => FALSE,
                'description' => "I01ioT6dE59eFWe4PxHJhHM6PRObQxj3f4w8El4HGgfInUuZUZacdXJKlldoDuv9TA2XHRXocL0a2ENjq4YdkJGWg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 608,
                'point_amount' => 621,
                'point_expires_at' => "2023-09-03T21:40:52.000000+09:00",
                'expires_at' => "2018-02-26T14:34:24.000000+09:00",
                'usage_limit' => 468,
                'is_onetime' => FALSE,
                'description' => "A1MAf2HgecIl74FyRST7ScfdaiXI0aphnQpmaEH46JpxMwBWB66twUXazpjqxEREjqmyqJkEdfkYviMgBpZAYBbcvRZz"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 2913,
                'point_amount' => 5427,
                'point_expires_in_days' => 7312,
                'point_expires_at' => "2016-06-22T15:30:31.000000+09:00",
                'expires_at' => "2017-11-13T20:05:16.000000+09:00",
                'usage_limit' => 5563,
                'is_onetime' => FALSE,
                'description' => "pl5Gz36NQavWZXSE0IrKdpz0FXntwLwsP6PlvtKfS7zk6Hoi0oeAT0NWEwBSET0oVnBy6crZKnvytNg93oYMrwaGFqX3wegLSKGRpqSEuwLWT9k07B088FFfNZznrcL9APcDhFVXImIJBKStcO3wB304Jmf05hgJ0r"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'money_amount' => 7758,
                'point_amount' => 335,
                'bear_point_account' => "78b0af06-60b7-4901-81ad-d4ae8e6ed326",
                'point_expires_in_days' => 4513,
                'point_expires_at' => "2015-12-23T12:07:26.000000+09:00",
                'expires_at' => "2017-06-21T01:55:35.000000+09:00",
                'usage_limit' => 6626,
                'is_onetime' => FALSE,
                'description' => "X8oQj9wf9SU4WjLK1VT02GEDFloz09QK5UFuC5JXRVayFf6oyQZu56A1wWzKTTxm1brwQKhHT3R75Hu8YJJm39h1WaxTt5SssiAjKWyz1Cvo6cvEGDQNsufaSx2VVAwQqeQUNQCi45yyQTl9wTWmjZWPblWstjkwC6ll5fjzCHapR04ADVEFmUehgiDu"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'point_amount' => 3971
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'point_amount' => 4745,
                'description' => "605XKZ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'point_amount' => 9451,
                'is_onetime' => TRUE,
                'description' => "bVsNuqqVdUDyaVdHFVHz0uIFKJoDWeoZQYdDyUkA8HMjkxTYcusA1RKieQ1ldipC3qoQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'point_amount' => 6488,
                'usage_limit' => 759,
                'is_onetime' => TRUE,
                'description' => "DsqZ3ZF38hv2ikQGfIfeAIGZfO7OrSr8B2QPQ9Y2Rpsj0heI1pcWBx1T31cQtfbPCATbfETgM8KooCtS8z1fc4bmpdjKCTfj1GK9RSuRp80JIGIfZb0zQJuIdXR7obZEoGLvyrYRSePLUjWmS1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'point_amount' => 6368,
                'expires_at' => "2020-12-31T09:21:52.000000+09:00",
                'usage_limit' => 2457,
                'is_onetime' => TRUE,
                'description' => "4rF1Hr4pu5zkebHCqAbvDaj08T6AqfU9VC96cIIeErItINWil5tFd5fwAxEmAXCuaDk4OeOYMd636fXlQmJ9z2bnV3FEVOMMOncgSg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'point_amount' => 2107,
                'point_expires_at' => "2018-08-30T04:12:11.000000+09:00",
                'expires_at' => "2018-11-21T08:44:06.000000+09:00",
                'usage_limit' => 3519,
                'is_onetime' => FALSE,
                'description' => "yRgGfUfNENrDu8T1J2YZjgzjmCRB6BbdWS6JCIuNd5OFNrZXER72QaNrZpzYfcTDxwidoKxhgH4IlA44068ievlut"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'point_amount' => 3462,
                'point_expires_in_days' => 2443,
                'point_expires_at' => "2019-03-08T09:30:19.000000+09:00",
                'expires_at' => "2020-11-27T17:39:48.000000+09:00",
                'usage_limit' => 4631,
                'is_onetime' => TRUE,
                'description' => "788"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "9190cf18-f4a2-4404-9d34-af1b3fd8ee97",
            [
                'point_amount' => 4073,
                'bear_point_account' => "399d52a1-156c-41dd-a0dc-087b5b8ad7ac",
                'point_expires_in_days' => 5678,
                'point_expires_at' => "2015-11-01T03:58:24.000000+09:00",
                'expires_at' => "2016-01-27T21:59:31.000000+09:00",
                'usage_limit' => 7025,
                'is_onetime' => FALSE,
                'description' => "Ly9xJxJq4hHbOAXXYVgVjKzFhmxuYV64qe5o2B2OlLXdk5kJbuw4YuJbyUdwtweakDyg0TFsZujDlCiTABlfIhphFt9MZHKK4Bljx7sJ424DF7dkePprAJuqXJL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
