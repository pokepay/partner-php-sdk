<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCheck extends TestCase
{
    public function testCreateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 8662.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 4719.0,
                'description' => "WoZu1esharkMkBfkZvAVLC8hOGRbctGMaQag5GoyRZe5uMk2s5UYZs6l4R3uCzlK4OQ38GxdpGfoOY5q5kd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 3969.0,
                'is_onetime' => TRUE,
                'description' => "jZwszTJ7T7cUbWAHtw671TbjRwIORvReW61K3D"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 8052.0,
                'usage_limit' => 1425,
                'is_onetime' => FALSE,
                'description' => "PZS9qBNxfdFITulxmlfw3O4jwhl"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 6210.0,
                'expires_at' => "2021-10-24T17:21:51.000000+09:00",
                'usage_limit' => 4333,
                'is_onetime' => TRUE,
                'description' => "vPfWds3rQF6a2ui0TKfONPPqjjgce0tFAe9pNPpPgafJuVkZ0VDuYw"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 4573.0,
                'point_expires_at' => "2020-08-08T04:00:48.000000+09:00",
                'expires_at' => "2021-07-25T17:16:28.000000+09:00",
                'usage_limit' => 9075,
                'is_onetime' => TRUE,
                'description' => "tOlkxITV6tqhNK32VPRMPHp4EILwXoAEpFcwhc3odWL0dVvk1PVwCL0XiSM6JFuOR"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 5287.0,
                'point_expires_in_days' => 4976,
                'point_expires_at' => "2024-02-04T03:59:59.000000+09:00",
                'expires_at' => "2023-07-19T22:21:14.000000+09:00",
                'usage_limit' => 2328,
                'is_onetime' => TRUE,
                'description' => "jqPMZ2lHD25dVONreqGMOk9o37Ot0mnEpS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 2629.0,
                'bear_point_account' => "c40090ef-1582-474c-bddf-60cf639b2898",
                'point_expires_in_days' => 4519,
                'point_expires_at' => "2022-07-20T20:28:28.000000+09:00",
                'expires_at' => "2022-10-22T16:20:37.000000+09:00",
                'usage_limit' => 2499,
                'is_onetime' => FALSE,
                'description' => "dlqafvkpEPNFdyzKn5vWJuUG53eT3jXuipX7pGx91ZtbDqAiSQVIQNYbTf37GCYehwnzWe0Ln13BCdKsBR9dqxB0EeNrIQHiR4aZeKR0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 6361.0,
                'point_amount' => 4630.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 5526.0,
                'point_amount' => 251.0,
                'description' => "FmmPsaVc9agIfM5IgckburfSGNYf7J4xubsDSoAQ1qAhQO8MY90hCQgMXIWOHtILFQ2LUvST"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 3494.0,
                'point_amount' => 520.0,
                'is_onetime' => FALSE,
                'description' => "q2p9FWaqmelIQ1RdRRtpUH1BCFcA3tPjkoyh8yLqKiuMLU0mG5Q3V9ItMj9pEqOKCvBlvuAdAJMO6IlYqwARFGtAhw4BMj5dAxtZ4L3qTgLkJNvynQXG0SEoRF2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 2281.0,
                'point_amount' => 3917.0,
                'usage_limit' => 1928,
                'is_onetime' => TRUE,
                'description' => "i1p3WudHaFq4reBooQwNHrtp3MXNfbR77FQeUUAZ0azeUeq6MXegmCoPfQ3OZHG2PhWYd54f4OKvKf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 243.0,
                'point_amount' => 4418.0,
                'expires_at' => "2021-02-12T12:58:31.000000+09:00",
                'usage_limit' => 4215,
                'is_onetime' => TRUE,
                'description' => "E9bnA0yVvQjIqFwcTbCuxX8Te6ZOBsrbd90n2pBARZM8GzcLF8gtXuoebr3zkszhUouCt9VgQ3"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 4870.0,
                'point_amount' => 9112.0,
                'point_expires_at' => "2023-03-03T02:36:29.000000+09:00",
                'expires_at' => "2024-02-13T05:06:44.000000+09:00",
                'usage_limit' => 2337,
                'is_onetime' => FALSE,
                'description' => "Hl9NYnAnmkYmoiM9vWLDEWwgUCI7zOj2UpPHbz2K7hqhIHJTCO4BKJ5N2AYie7STzSQA2cDPRjVz26rZdeYyGAyHYcG0R4glQlb6Ev5YkxeSdNq5sm9cHG7pUIM8jZ04tBv9pb0HuR47zXNRFrTpbo0kfxCFtrjTaHeiH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 872.0,
                'point_amount' => 2780.0,
                'point_expires_in_days' => 6699,
                'point_expires_at' => "2022-09-18T04:16:03.000000+09:00",
                'expires_at' => "2023-12-07T06:22:52.000000+09:00",
                'usage_limit' => 4735,
                'is_onetime' => TRUE,
                'description' => "3nf2xbaJBS7TX4mmg9E4QS6ZEw9K5WYLNqUZtz5d9h24kSBlxuBKwxG4lgGqL8iZhpvFoA8J5vR4th4OC5ZN7B0NT2CtMnQtcpfNicGVhW4yUzgsD6kEEZVvd92LIbhPN7sBKuuTaAnFeXVzsPqJaVYNcQPoehli"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'money_amount' => 1015.0,
                'point_amount' => 1366.0,
                'bear_point_account' => "7352b222-a418-411d-8403-40cbe751ab76",
                'point_expires_in_days' => 7007,
                'point_expires_at' => "2024-01-24T03:56:53.000000+09:00",
                'expires_at' => "2022-01-20T01:20:23.000000+09:00",
                'usage_limit' => 2460,
                'is_onetime' => FALSE,
                'description' => "Giup5wSVIYcPRp0YdicsG4eefdcP6FrD3Uv3p8mowdyPN3F0Ch6iwOtYLpAZyk900gRtDaWC6zinkLP42aFlyD9A5wNlxgw6klr2PMu3dK2PcsSyOLaGRQyeI0EektAT0mdHIGSJh4u2I"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'point_amount' => 6798.0
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'point_amount' => 802.0,
                'description' => "HkQ33wGuKemT2CIcxyPggXikUygQLdtpYPjbfNBvGFT3vKgqpXJfGtqlRZh4q4lV1sMnqynpV9AfcDYmohxDmhjfHFXXcsAegCHlzCQ4mMLjaJ7P4vdX1Mbpl53Hm3XsFGlzTKiUnnWGOF6l2MS7H3zkejJ3l0ckAgNjFhRa8b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'point_amount' => 6332.0,
                'is_onetime' => TRUE,
                'description' => "7bwLH0Y3h3osyqMfvozNH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'point_amount' => 297.0,
                'usage_limit' => 3454,
                'is_onetime' => FALSE,
                'description' => "qoEhmZw3z3NYdRt67shE5x97r1UOOncAtOmTvzs"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck20()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'point_amount' => 2004.0,
                'expires_at' => "2021-12-12T02:46:58.000000+09:00",
                'usage_limit' => 7167,
                'is_onetime' => FALSE,
                'description' => "bGTHXefiZ2keupAiUzQH2jF7FFokS8MmQ4h2gqv981Ws9YLY8dHt9E73kW6aY6EZfaqDgJ4U352fME5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck21()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'point_amount' => 6923.0,
                'point_expires_at' => "2024-01-23T17:52:26.000000+09:00",
                'expires_at' => "2022-08-04T00:18:08.000000+09:00",
                'usage_limit' => 1977,
                'is_onetime' => TRUE,
                'description' => "eSNbVGmp3wTKnfTl2HHmqJW8NwuuzSEsfpH5icHblunWyydUIMVkGrdezRcY5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck22()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'point_amount' => 6580.0,
                'point_expires_in_days' => 3618,
                'point_expires_at' => "2023-08-16T22:36:29.000000+09:00",
                'expires_at' => "2020-04-15T04:18:02.000000+09:00",
                'usage_limit' => 3486,
                'is_onetime' => FALSE,
                'description' => "NeV98wpUQGhizShkmSSRLlUTO8Yn4Ehkmkd1whvZy7JO11RN1ft4mQRpxg2ulQDVpOB9sGNE3JsMRLkl2VzHVo"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCheck23()
    {
        $client = $this->newClient();
        $request = new Request\CreateCheck(
            "4971ac6d-1792-4b8d-9f2a-b89178d78037",
            [
                'point_amount' => 4020.0,
                'bear_point_account' => "bb4d3138-585c-4afe-a4ea-8dcb10dc1d63",
                'point_expires_in_days' => 8527,
                'point_expires_at' => "2022-06-23T04:25:50.000000+09:00",
                'expires_at' => "2021-09-18T06:46:22.000000+09:00",
                'usage_limit' => 668,
                'is_onetime' => FALSE,
                'description' => "7ZDIpHIVvdV0CCbrEk97W7mpZSJZH60ROYNngFOQSuMb8UFgkuQq45n7kblj6tNwEXOjCYaqDJHTZkTM2vALaYtb1d6bFKGl1a57vfcVsadef0QTs4NdIQJ8u37arn4SEC7nk8fO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
