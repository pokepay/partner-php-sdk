<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "B8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMMEyVApkaDeYuO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["coupon", "transfer"],
                'description' => "c8RSE7B5wsqfAkho5yO5EQGpb9AHk6UF1UjWU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["expire"],
                'transfer_types' => ["coupon", "cashback", "transfer", "exchange", "topup", "payment", "campaign", "expire"],
                'description' => "UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "exchange", "payment", "topup"],
                'transfer_types' => ["transfer", "expire", "payment", "campaign", "cashback", "topup"],
                'description' => "v7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5BruF5QOJx"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "f69561a4-e09f-407c-b8fa-8a77efa971df",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "transfer", "exchange"],
                'transfer_types' => ["topup"],
                'description' => "UQr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "46b5b8af-342d-48f0-9da3-39db84adb392",
                'private_money_id' => "20809e81-1bfd-4bac-b156-1e24a7e2ec98",
                'is_modified' => TRUE,
                'transaction_types' => ["payment"],
                'transfer_types' => ["coupon", "campaign", "cashback"],
                'description' => "4wWVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzOlLMmdBSZr220xtZpZdQ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXm",
                'transaction_id' => "7e33e549-d7b4-49d0-a7ec-c13a756c6a50",
                'private_money_id' => "a6f903f6-97a3-4c79-a995-6bff066954ef",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "transfer", "payment", "exchange", "expire"],
                'transfer_types' => ["payment", "topup", "campaign"],
                'description' => "vJd18F7msVClYIZ6Bq4ZCm153pAwidsKM1ZphpLhv7NIoqmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "7fc65c90-b7ee-46a2-8f16-d4bce6538980",
                'customer_name' => "XURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvf",
                'transaction_id' => "fc297801-b78b-4f4a-8c62-b329c91511d4",
                'private_money_id' => "97d8027c-d1df-4b1b-9a98-b22b550a3192",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "payment", "cashback", "exchange"],
                'transfer_types' => ["exchange"],
                'description' => "6HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "gvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4sIXfB3ep9eHnNy54z9YZjsWtY1WGlubcf8poH65gFI1eD4xOb3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6",
                'customer_id' => "e5825dbc-4081-4491-8d3f-63efd163ccad",
                'customer_name' => "DkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9CQqv6T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBS",
                'transaction_id' => "3267ce5b-2640-48e8-957e-3a280ad90b36",
                'private_money_id' => "f50c6398-e785-4885-be49-2cb6c0a7c0f1",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "exchange", "cashback", "payment"],
                'transfer_types' => ["expire", "coupon", "campaign"],
                'description' => "IFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "1b5c4179-22cc-453c-bef9-a39a42ccb65a",
                'shop_name' => "50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZXmsoGSwaJT",
                'customer_id' => "23ea49e9-3c17-45a5-b713-2bcf881f9d2b",
                'customer_name' => "UK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevnEoyfpAANnkoel9aDgdNS",
                'transaction_id' => "fa19fce6-0283-4b97-9e7b-88ed8c45ea7d",
                'private_money_id' => "11dc6f98-d386-49c5-b5a3-06ff3d16fe21",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "topup", "payment", "exchange", "transfer", "expire"],
                'transfer_types' => ["transfer", "cashback", "coupon", "campaign", "payment"],
                'description' => "MyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 1417,
                'shop_id' => "94a51035-33ad-4aa6-b258-03c055df6fb0",
                'shop_name' => "rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ",
                'customer_id' => "bb41ea14-5f37-4c80-a5b1-2d1545b7e61a",
                'customer_name' => "CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jR",
                'transaction_id' => "cf80c144-88bc-4199-966e-0e44ebff96e6",
                'private_money_id' => "1f3e21d5-f316-4cf4-807d-2fb459bdb925",
                'is_modified' => TRUE,
                'transaction_types' => ["payment", "transfer"],
                'transfer_types' => ["coupon", "payment", "campaign", "topup", "transfer", "expire", "cashback", "exchange"],
                'description' => "cCShoExxXDzwmu0NmtxroKVUk7sDu4lw8ZxL5ooBCUmbexHlOYPdRDRXfcFEKebPAHiatKRmL7K8IMJIBW1vB1RC8WQ75Zq2CPEph5LyiHrKKZ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 1939,
                'per_page' => 1737,
                'shop_id' => "9bd97640-2990-4459-95a7-b5e50f914add",
                'shop_name' => "A6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdTYv",
                'customer_id' => "e00a80d9-2931-4a88-99d7-e78ccf09b74d",
                'customer_name' => "a6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20S",
                'transaction_id' => "49c2a599-497d-4359-a27b-dc3bf9a82d32",
                'private_money_id' => "44b7185d-0938-429c-837d-a918e99902c5",
                'is_modified' => TRUE,
                'transaction_types' => ["payment", "cashback", "transfer", "exchange"],
                'transfer_types' => ["transfer", "topup", "coupon", "campaign", "exchange", "payment", "cashback", "expire"],
                'description' => "FgkUTJYHHOr63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ34GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCG"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2020-03-12T11:40:45.000000Z",
                'page' => 6724,
                'per_page' => 3429,
                'shop_id' => "37e7f3a0-6f1a-45c5-a411-ee1ca472a898",
                'shop_name' => "Z7gIcLSudPl4JIrQmLFWJxcGB9NLriuIsMTYyCUoOEa9YZaUNPTM",
                'customer_id' => "1c97d2e1-cf8b-4819-97e7-57c45a2e72d3",
                'customer_name' => "eHLGCGYvgqbqCIdoPTyGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1UycVdhwjqe7Rve16qe5BUa3mrt",
                'transaction_id' => "ec44d2c3-c59c-45f8-ab16-18eba6632c74",
                'private_money_id' => "5d4437cd-697e-4662-a92c-2a003930cc0f",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "payment", "expire", "exchange", "cashback", "topup"],
                'transfer_types' => ["coupon", "exchange", "campaign", "topup", "payment"],
                'description' => "bRZC0vDYNEWMfxXSVHRY4YZdsEswklf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2020-03-21T17:58:30.000000Z",
                'to' => "2022-05-05T13:45:47.000000Z",
                'page' => 2900,
                'per_page' => 2506,
                'shop_id' => "9cadd92f-eae4-4cad-854a-11cdb435cec7",
                'shop_name' => "98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3jVYhbh4RW4SjcPHu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9o0TcGJkIJgRMahTjY4B83KCbssdnciBK2yKUyBpazsFHLyPhoCqWWrzikH0DrThI9ndCARX9iZhUIwUrsQ8Uijo55dyiBxXbKWYhqIQcADAJhW",
                'customer_id' => "2ef834c6-5b7c-4ff7-a33b-63413bb3e106",
                'customer_name' => "ll2hGkEzja1NmQHCUATGGz590dtBhucZ4e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uvaLnbw12Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYmrCrWwA7IkDmk9acr8tX9JQSHyiFoseHqYyK8GIOW",
                'transaction_id' => "dbcd2c99-007b-412f-b0d0-9c09313f4008",
                'private_money_id' => "975e10bc-5d92-42c7-add5-eeb4b1466735",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "exchange", "payment", "transfer", "topup"],
                'transfer_types' => ["coupon", "transfer", "exchange", "payment", "topup", "expire"],
                'description' => "NvUC0bqs1hvmd5I8evbrAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3zumve771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtu"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
