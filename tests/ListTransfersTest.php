<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "aX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dz"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["payment", "expire", "coupon", "cashback"],
                'description' => "mxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["payment", "topup", "transfer", "expire"],
                'transfer_types' => ["transfer", "campaign", "expire", "topup", "cashback", "payment"],
                'description' => "0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8Kxv"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => FALSE,
                'transaction_types' => [],
                'transfer_types' => ["payment", "coupon", "campaign", "transfer", "cashback", "exchange"],
                'description' => "AxiybIUdjn2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "e76494df-ae26-4c4a-9bbc-97eccb08a75b",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "expire", "transfer"],
                'transfer_types' => ["campaign", "expire"],
                'description' => "YSFDiggsa"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "649474f3-2934-4ece-a122-fb22e02ad4ed",
                'private_money_id' => "5ce07cc0-bc34-4d50-a262-54174f5eeaf1",
                'is_modified' => TRUE,
                'transaction_types' => ["topup"],
                'transfer_types' => ["exchange", "topup", "coupon", "payment"],
                'description' => "c91YrDumA0BEPaxu5hz8quH88gYqQC45YQseyms9QyHVorEq6zLZyg3cEPs9bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqyENnnotJKNM2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaG",
                'transaction_id' => "50987425-04df-4492-ae1d-a9f94227c5b1",
                'private_money_id' => "55477e43-986f-4043-aa59-362f8110a1ef",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "expire", "exchange", "topup"],
                'transfer_types' => ["exchange"],
                'description' => "gsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "9e5ac666-9f3e-4948-995b-9de594906c9c",
                'customer_name' => "JWiJLn1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1Wpwh",
                'transaction_id' => "9bdfbd18-9c9f-42d0-ba08-10dce0940d88",
                'private_money_id' => "3aa17e44-58e5-47b8-81db-18d6c38995ac",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback"],
                'transfer_types' => ["coupon"],
                'description' => "l4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "kziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8ELqJ",
                'customer_id' => "06c0b2f7-c252-4f9f-81a9-659ad84a35b6",
                'customer_name' => "Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMMEyVApkaDeYu",
                'transaction_id' => "c9e9e483-65cf-4374-820f-546f54c7273e",
                'private_money_id' => "e255d3c3-2e5a-4510-a7e3-c5b47ca3b6e7",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "topup"],
                'transfer_types' => ["transfer", "topup", "exchange", "expire", "campaign", "payment", "coupon"],
                'description' => "sqfAkho5yO5E"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "1903e30a-3651-4aae-8727-87247fd249f0",
                'shop_name' => "9AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1Gk",
                'customer_id' => "a56580d2-6768-420e-bce2-9980eb949b6f",
                'customer_name' => "XHY39x3Xs6K",
                'transaction_id' => "bdbca2fc-1e80-497c-9662-76def3b6f6cb",
                'private_money_id' => "33928f91-1a4f-4421-aa55-41d1a2ed0a59",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["topup", "expire", "campaign", "exchange", "payment"],
                'description' => "DU70KRGU02ETtMe3p5BruF5QOJx8zwWT"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 6994,
                'shop_id' => "9f85817f-2d0a-4af4-9200-8df7200cbc68",
                'shop_name' => "gEUQrpqVtFI20RqU84wWVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzOlLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4PlPvyiodipyOhBLvJd18F7msVClYIZ6Bq4ZCm153pAwidsKM1ZphpLhv7",
                'customer_id' => "d67f33ce-9f49-4f6f-ac14-f284004ebc8f",
                'customer_name' => "qmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ",
                'transaction_id' => "76027831-dde8-4f8b-b8de-ae6b545404ed",
                'private_money_id' => "b3819e33-f76d-495b-9d6b-1241bcd57ad0",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["campaign", "cashback", "payment", "coupon", "topup", "expire", "transfer"],
                'description' => "nnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 5809,
                'per_page' => 4177,
                'shop_id' => "4d22d5e4-023d-482e-b9cc-6b15486bcb6d",
                'shop_name' => "5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKY",
                'customer_id' => "c85cc8a9-0bf5-4ede-9f1d-bfd508a65c73",
                'customer_name' => "7zf9dIsiva1vYlz4sIXfB3ep9eHnNy54z9YZjsWtY1WGlubcf8poH65gFI1eD4xOb3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJ",
                'transaction_id' => "03e00e48-9912-4430-aa1a-9b41b04fc66a",
                'private_money_id' => "29d826ce-5457-4c99-9785-64a9e6eece97",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "transfer", "cashback", "topup", "expire", "payment"],
                'transfer_types' => ["topup", "expire", "cashback", "coupon"],
                'description' => "DkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9CQqv6T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2017-06-17T18:42:42.000000+09:00",
                'page' => 2565,
                'per_page' => 3226,
                'shop_id' => "225550cd-2da8-4dc2-86d3-ce5ba9202640",
                'shop_name' => "U6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3",
                'customer_id' => "e116f53e-42f3-402c-acfb-be5122e303a1",
                'customer_name' => "w2Vv1qEnK",
                'transaction_id' => "115842e3-11e1-430b-801e-adf794c7ff31",
                'private_money_id' => "cc929af0-d47a-4682-b976-cd894bc7c084",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "payment", "exchange", "cashback"],
                'transfer_types' => [],
                'description' => "T"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2024-02-01T06:10:52.000000+09:00",
                'to' => "2018-12-19T16:32:48.000000+09:00",
                'page' => 2111,
                'per_page' => 9345,
                'shop_id' => "35213d04-0bee-49eb-9191-3f11c52ef4c0",
                'shop_name' => "HVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevnEoyfpAANnkoel9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEG",
                'customer_id' => "23220c70-8c4e-4a4f-8792-b28da62f851d",
                'customer_name' => "zwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKk",
                'transaction_id' => "9a394e55-9580-4442-8fb3-0d7418c2a02d",
                'private_money_id' => "8e4825f5-522e-4971-8331-9b58abbb8faa",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["transfer", "exchange", "payment"],
                'description' => "UruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417Cl"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
