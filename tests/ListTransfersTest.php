<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "g"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["transfer", "coupon", "payment", "campaign", "expire", "exchange", "cashback", "topup"],
                'description' => "618nfekyTApXl15ao3Y3BIbcSERCoiVRrw1KegTob5enT0yFA52ir12d87dlVaI6GkxbFSjZOy6bLnaWLepJtuRkY4yin6Oxhb5rzCceUCKkoAVkDYTeXQaQ9Jm"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["exchange", "cashback", "expire", "topup", "transfer"],
                'transfer_types' => ["transfer", "expire", "topup", "cashback", "exchange", "payment", "coupon", "campaign"],
                'description' => "vIbaZuOdZhdFoe2QDv6oFklalTUIwAb1CehqsGB5wfm8iHgELRuhpJm7YDlxSf2Go"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["cashback"],
                'transfer_types' => ["campaign"],
                'description' => "bDCbomepLiaJNKtk5Qr8056Dg4ys4rEs6iC7kfsRWTAI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "9686f7be-7887-46b5-9946-297a8a06a39d",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "cashback"],
                'transfer_types' => ["transfer", "campaign", "topup", "cashback", "exchange", "coupon"],
                'description' => "UfCBXK56OZXxRInRjGJZladSNhDMJ57bWWgt11ZEkf5RzUiCjdBLPBLdxoxobFdtmIqjAxs5QAQp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "9180e747-e223-43bd-878d-dad469b6c962",
                'private_money_id' => "b8b1cd65-1ca7-428f-b5f0-a16ee08e1ff6",
                'is_modified' => TRUE,
                'transaction_types' => ["payment", "cashback"],
                'transfer_types' => ["cashback", "transfer", "exchange", "expire", "topup", "coupon", "campaign", "payment"],
                'description' => "OTeYuMSIKNUPALxd9Ycxqzu3QOXhOhgtwsGKvkktTg3q6LmQ6JSClde4i4SjUhsUjxMW4C5bqggFNDmUTHyQd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "TQzTV7u0qkhMQnWyIqouPT9i49B3Q8lzeQ3xVJ6oFlJm",
                'transaction_id' => "5426af2a-d540-4c4c-af26-a5d41b73a98b",
                'private_money_id' => "a62b71be-6bf5-4b27-92af-75e06e97a681",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "exchange", "cashback", "payment", "transfer", "topup"],
                'transfer_types' => ["campaign"],
                'description' => "tC8yy99cjRhuJdDZGonZgKgVL7Uq0i7jJheDN59tGYuTJBx2BG5lSGO3KYeSUde57Z39YpoDavVaPyVWsZtXE3B5UT"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "cdab1871-67e2-49f2-8c6f-d8af856afe82",
                'customer_name' => "10sSf43vb6KMYNAuY8WGS6HX2IP37b8z9OjwDN",
                'transaction_id' => "d432765b-a7f1-4917-b26d-780eb102c53a",
                'private_money_id' => "9924d637-b5fd-4acc-b25c-1c0bbf0cd4f7",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "payment", "expire", "topup", "cashback", "exchange"],
                'transfer_types' => ["campaign", "exchange", "topup"],
                'description' => "9958q63T9N9kycZlidfqu5bQnNm4wXObIGxFgHLYePeWvwk4ke9wl34Zqch4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "d2tXyWUqGIdunIIdyYZSz1UQ0BOokX8tgcON0p3hVxaylGrl3Eo5G0MWb6HcQ",
                'customer_id' => "0714eb13-acd9-45c4-a21f-eeb390797e74",
                'customer_name' => "GYx9l1QwZjEJuOYQfhsxZPxhbKGoH3VSmOboB6AQcharaCzcbBgatfjYJ9OZYX7d2VinnSna1ZCTARXcZLGSZHBZ8MeUviXOBmzzdiTz0OZOtBaUyfrQ2WDviPEPldLFF9qguXLvoW84GABtpUppzo5mleNvY1F2jXZJ9RbUY3zezynrJ26K7LImzEW3RCSNVyHf3mORnm8n4oZPyoCUCW2I811TSN3b8D32wU1sGrxGY36XlIaU9TFxar",
                'transaction_id' => "5060fae6-ad87-40f6-bd81-4ed61fef7f55",
                'private_money_id' => "320c2020-5545-484a-9198-db850aea928b",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "transfer", "payment"],
                'transfer_types' => ["exchange", "campaign", "expire", "payment", "topup", "cashback"],
                'description' => "Fc13nZQFBpgMyUGeSWqJOTpWevr9BYAMgQprHF9rs41m0ZMHtOBn2E4yWFuxCDbji3pyR1wt8KRZ1e0g76XvkHBIs49KdZyf52AA9HOjP7XlUGUHV3XicF6fMDObuQKG9KrGrHHZC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "a113cc8b-4c24-4e98-909b-ed692724ec7e",
                'shop_name' => "59xdDnsokGwzJJonFA1wiKR551A5f6VTD4tBGYXD8AZl5qgWXwfu7vfTXIzyPoPWAEKjFHHEApSGklKbbL7NLxh5JxM5Iq53TVVSekdgeZw",
                'customer_id' => "525cbe10-82ef-4df7-a839-ebb2907acf8d",
                'customer_name' => "claV3588DQwYtwsGu",
                'transaction_id' => "9167daa8-5096-4fad-ba17-9a41eea6d868",
                'private_money_id' => "88784505-58b2-4579-9cab-1c2c80d6b571",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "cashback", "expire", "topup", "exchange"],
                'transfer_types' => ["campaign"],
                'description' => "J8vbNSFuiOj5r"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 6861,
                'shop_id' => "103ff3ee-5181-41ee-bb4c-03a7f5071b5f",
                'shop_name' => "mqZIsVdkQ9pFsE7Uespp6V1N5ekgnBqlggi94BqCJHNE",
                'customer_id' => "b0c5194e-d16d-4fb7-8d99-9373cc6eb0cc",
                'customer_name' => "JIVaJeP14bqVn7sxEXnLM4bpfdp7Z3GK0JqAI6nwgnzbFrHbu79gMsrPzUZhBsqcT9m7jOLuClFvSs4X5PcQqiUCUDIFJ076Kr0waLDsv854cj5o13j3vSj9QWGsfbDMS6ZFiqHHE8iYxmo7gkU87of35GHPNLxuZxrh",
                'transaction_id' => "ee3ff0a3-9b3e-4af7-9cf1-8fa35e2f1f01",
                'private_money_id' => "d103048d-c497-4c33-9764-9f9e445f9bd3",
                'is_modified' => FALSE,
                'transaction_types' => ["expire"],
                'transfer_types' => ["campaign", "cashback", "exchange", "coupon", "transfer", "topup"],
                'description' => "fCgG4QqPkKgORxdXui7OHEO7zLPPAv12MdO4UvzJcmYh0sXV7plpSSxfvwwhVJ1LW1YJx5czRnLzb4QoD1wBiiWa3E8rqey0trCukbojnsB5vRkPyJaxcon9HW4AyuR2hNtGJNouYqASE9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 7963,
                'per_page' => 6879,
                'shop_id' => "3125933d-8000-4083-b6a9-cfb6b24b8e14",
                'shop_name' => "l7dwSmCNbpvGqIk1iMTDyhTCPOfbfIBVb0nJKzTmSr9uxyjUu2zO8H4Jt4sKs2yVSzXWgWxfp5aExTY2RuOzbiuBSSHKbnpqtrzepXaGo8dCcXGhh3QPukYFeFFu5LLXGiMgMWzaEhwFxzcJTtXlguerlIOTVJUfTkWR56cdBubeZL",
                'customer_id' => "3977069f-de9a-4b7a-b449-ca61a524ec2e",
                'customer_name' => "7n6f8n4K0yH5UVJkel30Y7AVy2SvB6X8e3mGfzIzqPrhPuq8jTVtOTeh8RohPUObcYWMCNPWh7SKiCCyKWUgNOxFe8vYyHmrmNvS9Kx9q6yGCAFmCuTxIEiRRe3LmAHPuqq47xcxjx9q7hn5MQXtpjxQA6Vrk0fqGWwWntcmjRMr040MGfP1ZrtiGlpL0chDYsoA4Jn3FSpofyK3MHI4K1P2f7EJn9xszrBXN6USXxxv3IhCh",
                'transaction_id' => "0dd7d304-b7a5-432b-91d2-40065841ad5d",
                'private_money_id' => "744e38fb-8d9a-496e-8b6b-1d072fadabbb",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "topup", "cashback", "exchange"],
                'transfer_types' => ["campaign", "exchange", "topup", "coupon", "cashback", "expire"],
                'description' => "7W"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2023-05-14T00:02:23.000000+09:00",
                'page' => 3174,
                'per_page' => 7903,
                'shop_id' => "2d181a3f-62e4-4b08-86fa-c00dce3db5e7",
                'shop_name' => "mkwnoPRsrvIqKn7meC5DpMNyC6PdY8pQOihPlHvW0zftAUILdJC8fw7ITNbaNXi1smNfEPF2En10oWtKwXI1ICBymTJ0IwUGeJbVUqAoB2iOIl9SttgXPtJe4hnJ5RTFtIt040OsjqPVfj6TZQCv1wdnq3NsKfb1gd8DF7vVwQyxJ1v",
                'customer_id' => "0628a9fa-462f-4321-a164-a28c3a15ec3e",
                'customer_name' => "eNzSlGFfrRGlP0ODYcxwpGZjb7HqUUQO5FqtU1YIbeoLPXbMwvZIZx1xqAsibEvjBVnMSRzuHaVMlC7UoQ8Zn9ZdhlgtI50FMDxmqquVsdCVY27scOtPXw6lZNejNG9sUe0GBYUdgnygaNt",
                'transaction_id' => "a4873330-ccd0-4764-84fd-2bdec0484705",
                'private_money_id' => "4b5a480f-cccc-477f-9e70-9795064e7597",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "transfer", "expire", "payment"],
                'transfer_types' => ["transfer", "coupon", "expire", "cashback", "topup", "exchange", "campaign", "payment"],
                'description' => "nPLNz2lO1ysltKfAVqassz65n0iJtj3SZS0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2021-06-07T07:58:20.000000+09:00",
                'to' => "2022-08-10T13:04:37.000000+09:00",
                'page' => 7158,
                'per_page' => 1365,
                'shop_id' => "f1ba86a4-de01-4524-9aeb-c5f7a855db35",
                'shop_name' => "7xXU5nhDPKq8u2I1lXMh8smNBSGIWYJIn0w1dw2lC6TtWQIoCpuP9ek4KEDJme1bXeQ3c50qKVUm5yB24LfBWRQIpRvubBRpo6GiLianNqf6QmhOEQCsN25anSLuwgWzteq6zt5JSdQ6vNc8NmI3FaRGwX1G54lWs5r3zEuV6FewDY1T8brRe7fxQLCFtf0xBfAcY1qfNMwsPOsLa3EFW",
                'customer_id' => "2d03dc90-79f6-475e-ba75-2b14835fa4fa",
                'customer_name' => "Xawg4IzyEItEfOzQ4XdQwhj4l9JfF6BCBEbqH2YuutVuwHPtSqyI3xSUtvlqrLzSd8oCzHYtrB9tRJB6Ev9UP3cxjio0rmd9EQWHsMSVGMuEkMYskPz3Yp74iTpH5LcTvMHqH0DiNwRSIOp0ni7neu7yGzg3Ks1l4n08Yl0XP2rs5DmFcmhQY",
                'transaction_id' => "8558bc7f-b9b4-4736-a5a4-55d68adb7850",
                'private_money_id' => "72290a4c-5788-45de-849c-4ec3545a2119",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "exchange", "transfer", "payment"],
                'transfer_types' => ["expire", "topup", "payment"],
                'description' => "20NFIc8L4brSTThfRnihCOu8x3z2mUn1knF021u3WTZejWiJduHPGf0ElRuawOAeNznIAJ7fO7OJgrTuuXIiT8F6YPUU2mzzX9CHfYqa7gSrgAcq5saoNDz9Dckk5lwRkd30fOoOzWVL3llPHP7USk4iNShQmTuwdj3E5q6PouSxdixrgNKN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
