<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "KG30XRr0YgWeAP4LpOKH9SSQrN0HXeXsaUx5152lJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["transfer", "exchange", "coupon", "topup", "payment", "cashback"],
                'description' => "As9AYtgDuQCMlJp304Dz7A23yMzB3IKac75mKLXI7OIEPsabKoj1STGHelBUPF6ypERlsC0u4adm8LBqYle27ADj7Wd3EirnVfj4QOrzsCYF6cOoTdTtx7A4wv6fJuLaU3OWEPQGh1zDRT1v0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["expire", "exchange", "transfer"],
                'transfer_types' => ["transfer", "topup", "coupon"],
                'description' => "19ZZaRZISVZwb3128fCG8iNAgCUHWJXFHCDuwlPWPTwYy1EBj06kigIErtt4MSmdLLQAMMKxxSPgURLBpH30Bctr6NxGn14JDZBuxfjE91oOw6UrV7P75MgoeJrYydzx6q22R"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["exchange"],
                'transfer_types' => ["campaign", "exchange", "topup", "transfer", "payment", "cashback", "expire", "coupon"],
                'description' => "bydkWShdznvJUrwGE1ZYVdZZmQ1shNN102izdW1QD0zOoUn3WCzGiQLdOUdvgHlCVmck7XGsm9rqDzB24yxCES1L4V6OPGnC8Ef6fZHVMKlEulgl0wuo3ooA6x0N6vpF1CMgdAQ9Btkml2EnDYUa8coJdqUKWB2T0ZHXP23oHzobGlPvd4uUb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "b72e61f2-c92f-48c6-8b59-1c13731ec4eb",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange"],
                'transfer_types' => ["expire", "topup", "transfer", "cashback"],
                'description' => "hR8nu5VUpCQOeaUyIU3PUnVBztIsl8N6utDu2F1w28Sn"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "1ced6c09-a88f-4885-a420-b72bfccc0dbd",
                'private_money_id' => "53678c0b-b17c-4689-b9a2-1a1266fc6a45",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange"],
                'transfer_types' => ["transfer", "exchange"],
                'description' => "PeyZuFb1jooLHp9REoRuryOKYrGG8b62Yl6N343U3OiRn6TEA0Czn8ZHEKxmlsftdX2IHCnVN9d7m5lPD3RjiubvoIHsTGmksMIthnhUyP6R7z1odWdoW8FlMVFIZXlJFw"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "b3T6fPLS5ycY8ECpgqs",
                'transaction_id' => "f7c75db0-39f2-45d8-9531-8d26c3daad48",
                'private_money_id' => "28fd8af4-e8b0-4069-a549-0d0f63a2ef7d",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "expire", "exchange", "cashback", "topup"],
                'transfer_types' => ["exchange"],
                'description' => "ZGsHJftALoqscGSTu5uKTjmgDiRcztq5w4q3BERnRDD4zYISdhDQPW8PZSYlJ3TNMFJtZ4jhT8PyrukTSDHqHyF9RcwVtxnEd7k6dXQAxUoY0fKUmuz1cIpEiBWiMrpHrtBSdn4oMxiDFPEGxvr16"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "b31872cc-80e3-4452-96e1-7f12909bb508",
                'customer_name' => "ir2N3nAcfCGilJmPfQJllmBZNVazLSPQ31xaqm2x01Qk0kvPjACUjeOriOgwiqq0EePWypoM1szPoDEZQ5JoHVuF7kJgLbE0AHpDSgfiofa92W2j1AEcUVhYRbUzuVlPO0PzUVZifwOQtklW3txrlBjQPlgYJIYWdeZDpfU8TVq3d7qhsBbwN3sJKo5zogCzttp1zmLyoIX5vLn1neY8Y3V7RXhjJp9b8MPZprE178mpEw2D8urJj",
                'transaction_id' => "53dc4597-3162-492f-8f0a-ddb6920573f6",
                'private_money_id' => "28899004-db11-4318-b397-cc39db846b88",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "exchange", "payment", "transfer", "topup"],
                'transfer_types' => ["coupon"],
                'description' => "fLkRKzU0G9T3J4AyA8Z7UMWWCcSdO9B7FHxuykHKBtweNDtLUDx5qeZizuwmcRLqFdoSbYMcLJ4TAO31z8Z4luXrOWevGR97EGplV7QSXX2yijzkrwcdwUHXwY5Xj5bivZdf0HL9rMHpDRxaM47IaZbTIRA7lkQQazBcM3Pn8NHJjBkOCxFpe80k0kxyAA7XEidHhU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "cto6nrudnGSmaO4eZRfuRaqXYxItsHWpTVvt9NsLq5pz0o94lXM4whHTC5zpoA7Oex23YOvh6gDMsYVc3cJauzXkYe3li6nVcsQOxNsAqviJRWNMV6R739ZuhFt0dCFR6KiHCz1W5o0a26SA2oUVeuyLrxiwi68fkZRMBqebpUgDudRAqPkwrKed8M15jcAfwk1TsT2N15GWSuQJkab",
                'customer_id' => "18310254-c7cd-48d9-8163-5e294bfe7b8e",
                'customer_name' => "tpJtpA7WfKynSv1HCDdI0Sv0vZRB7eISNZ9ozF9ThIcGdnsRR",
                'transaction_id' => "9cd12036-37ea-4fb4-b945-4a952d27970d",
                'private_money_id' => "d648ed3b-7ecb-4d0b-91a3-4739a780917b",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "payment"],
                'transfer_types' => ["exchange", "transfer", "payment", "topup", "campaign", "expire"],
                'description' => "1lZaBdYxL4QW3xEIbgpjECqJDfypDrIb3dpjZvq4auFGnslNoaHeexob6OmcC1WTWaNrMN5h6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "a807d16e-e3f4-44d6-adc4-95160270220b",
                'shop_name' => "Fyhx5FKU7s0ihNz4VNU2tOiaD5LMbBkd2Rit3ruK1E88Y1vr2c69DeRccmrZdCSDGOv4kYPtyLLcdu8ffrqgLAInPprBWgjweLwfLMgORjLacArBmaLxlS57jDw87fXpSGq0FsxmAbSr9e6ZN6rfKyloKEt717YBFdxDyrSaN7mq11QuuXQSlxg2C1",
                'customer_id' => "9cc8a521-0380-4d5c-83b9-844b615d5134",
                'customer_name' => "pgylCiK5m3DoJuvoCSTAwuak4LgWNtvKQa6s6DI98GmPruInK7jrcVVppqBrZgry6gqDvWrw",
                'transaction_id' => "4d7e3316-c8a4-4922-813d-ce3bc3fe0a4d",
                'private_money_id' => "e39001c1-9a55-438b-b1fd-7f3a7b876e66",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "payment", "transfer", "expire", "cashback"],
                'transfer_types' => ["expire", "campaign", "payment", "coupon", "exchange", "cashback", "transfer", "topup"],
                'description' => "6lgfgW56QTZAEnjIMBmTvzTF03ndCH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 9968,
                'shop_id' => "249d334d-cd0e-431b-b3c8-b27b1b19064f",
                'shop_name' => "3j6CJ7mLY4gNQsvfdQWO8s9IG98Q4GXA3870MYwWRc4CIe5rlBqExEeDaXq8H2TMcFISO7P6Si8UGsw6EYeF9L7Q1OJ5GxLZdjwIyOzMyjHiS8XHfqsrWsHqMpRlnKffLl5aoYJMg8LCcXbfdxlHT7PXXCvPDOersXHnsH8qA5adnmHYcyw6LH7wN1rSykoqsjZz6F0aKmaZz",
                'customer_id' => "bbca891d-8bc1-4528-9f9d-3f2c5ed19db9",
                'customer_name' => "RKFX4yPRqiWrOOzz25ggOf9mLDR9AgkHmDkMxhhT4AQuX77TByvzSIBh5pRB5gUhH8OrM67PagHkAid4DXdPMFz8AZTaOCgLa4yTtl21CBXARcURCRDsuTcfxGFZD6emkUT86lBUlOT3ZuSBftqLTJ1Jb6tkQroza7ytGOHVXPmzxecACqkehQ90Ij",
                'transaction_id' => "83cfb298-2395-44d7-a152-a3f9779a699e",
                'private_money_id' => "903e57cd-d849-409b-9c4e-d372751edf8b",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "topup", "expire"],
                'transfer_types' => ["transfer", "topup", "exchange", "payment", "expire", "campaign", "coupon"],
                'description' => "GIpbmqMykLIbD3DriT9IG28An2VKy6bac422kkvE2GLqcQVwTI34U5iK7MCl4H8eZtAiPujs1PbLHhEtaYnfS44orV1FW4grufL27h1PLJe1olvyFJViztdb1TpTtdstYvmJ9TbsOGp8T12gwZFqWgE50xQogTXQW6SpduNrcMag7ZvKNXPKwqF"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 5230,
                'per_page' => 9996,
                'shop_id' => "e4c67fd8-6c43-41ee-a782-1272bce2b9e7",
                'shop_name' => "zYvIvhUVI1hZuX4tj7U0k9RwjBryM0z2qhqKq3Jzi7bSiqGCrJzeMfowORRX324kFvj2FeEIl9HJIbWUhcJrvSboJSoIOYJhO1ev9HLM8USOsptpZfgOGKFeVhve",
                'customer_id' => "0fb9a3d1-a7ad-4661-a5de-ba8fcbbb5f79",
                'customer_name' => "ofDi9wiWAtf3fNc2Q1zq4t8e8zp1H8ozpOwR6JdFf1L2vGPN6GOkgEr",
                'transaction_id' => "583acc33-1fa8-4beb-8e5a-7a2081b8c143",
                'private_money_id' => "780e7d4c-bb39-4a7f-b963-b528cea757bc",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "expire", "topup", "cashback", "exchange", "transfer"],
                'transfer_types' => ["coupon", "campaign", "payment"],
                'description' => "WZcuGxwzaV5KxDMSANS3BOnB1QBtWMBv9sJy9dkolPtq6Lh44CBxRIxEswKK3nEgSyKkp8Rn2lCrqPiDktqGp2xg4ICjaNe8MYysV7yq7QoeGNUHoqA7PVhYs9UF8ZMXWFp0UXffRJQsAOZj79qgk46pdsW5pgl0WrI5EYUu6rfCAuLCEBnXuL6FAstwYaGBe6C"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2020-04-29T01:04:29.000000+09:00",
                'page' => 4793,
                'per_page' => 3425,
                'shop_id' => "bebff782-6050-420a-8b2b-e9ed7c3e58f8",
                'shop_name' => "dCpf3yhHL",
                'customer_id' => "d2436b7e-feff-449d-9d89-de4983fa413c",
                'customer_name' => "slSxsygmw31oty0uoqpFu6PLcrdvhs9SuVd1ckriHDYfBmC4JvmdM6KD6v10YTXdvbjSJC0jcr6j7vmc3FpFvuNoOlHyWI7GZe7umexdOxqeNifNuMnNxl3cCSHnvkacG3qQ3dgm4JLUxXnXSCVyND6UYm2BJvXIZowO77bfFpH1KK57OgPWKl6k0lECgA",
                'transaction_id' => "f9dc8bc8-23b6-4624-a9e6-a5cddc1f7441",
                'private_money_id' => "4baf62f2-6bce-4a0f-82ae-41f839d2c871",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "payment", "exchange", "cashback", "topup", "transfer"],
                'transfer_types' => ["topup", "exchange", "payment"],
                'description' => "XwpTo0zx8J"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2020-01-07T16:09:29.000000+09:00",
                'to' => "2022-12-14T08:24:21.000000+09:00",
                'page' => 5452,
                'per_page' => 544,
                'shop_id' => "606f9804-337e-40f3-9a7d-dfc5596c40ff",
                'shop_name' => "VXUpHO9PKP7yXKJwrPweXSajWLzxphFLm7mrNLp1sq2TASXtYXnWJ8YhGpbf7hPC9lnn0k9Ht03HWRN39aUNXiSj8fQHtYpfrGgltzXmCaeZI9K1",
                'customer_id' => "f95f92e3-fd36-4900-b2bc-9310f17984a5",
                'customer_name' => "MPaeLZftdGW44VwBPzuBDlIODfVIvATLrkNqEfvBpQfo4G6VpOEEombuFgYrZ7h5NDnTtn2RwxUxXOxLMtDxg",
                'transaction_id' => "a9fa34f5-78d6-4df1-b636-5d9fbc4cd461",
                'private_money_id' => "4ee2c75e-c702-4fc4-a947-4e317ca4f5de",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "cashback"],
                'transfer_types' => ["transfer", "exchange", "cashback"],
                'description' => "h52jqk4iv8ZStSb8l1qC5cNMsniQw0zZNRSs1jBCSyYHTyIHPa5kUqykO99GJLJ0Hb1bUoks2nKzFFDMCkl44QDqPRBWhhWD9sdlzE7Pe9k"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
