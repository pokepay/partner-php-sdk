<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "XnCqnnjKe2ZokcQxt9okwN5c4Mkgq5YYKEEntoCEiLAHJ2sW9FitjutUJJsIkCXGENUTkzcX2ykkKJlN107OaiUpqdHMS0BnQNQ8yntRPdiO7nDWAmmXsETvex6EwUtMqxtCSMEZWLR3IYMZqZQp71KYV2dqAhSRH0jBaTj6CKr7da3Hc5MrDSrYQmTFD8MK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["transfer"],
                'description' => "RladKEnUCUBMTsHjSLXQWZdqZHXOS9NchMxuvMOV5pE0ThI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["payment", "exchange", "transfer"],
                'transfer_types' => ["topup", "coupon", "campaign", "transfer"],
                'description' => "n04FvafoOT5XflXygJfyBJl1nws6Ne3S7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["topup", "coupon", "payment", "transfer", "exchange"],
                'description' => "i9FCf9vj51iwXi5vVk"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "c9e85c1c-cee1-4a69-b766-2e4d54aea83e",
                'is_modified' => FALSE,
                'transaction_types' => [],
                'transfer_types' => ["exchange", "payment", "coupon", "transfer"],
                'description' => "kchJ2ELHNBkuEPtWGn6U1tknXv7iBjpuz8kXfTQVtq7nYSMGg6A5q48d0VvhbqvZRxa"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "af0d52aa-d609-4517-9426-27c9a85a3e1b",
                'private_money_id' => "c43d81b0-82dc-4041-9644-d28d89cec10e",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["payment", "campaign", "transfer", "coupon", "exchange"],
                'description' => "M988xOpACBuWehCLI5Ithzpo1sbw0fi8Tfl4MiezYuuDN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "5NO2HkiJUlQ4dKgR3uo3pyHQKCLEzAV2HW0T6wtgFo",
                'transaction_id' => "81eee587-9677-41e8-aaeb-4a8d7a4acf3b",
                'private_money_id' => "9a38dfbe-e87e-4ca9-abaf-2f27818656f0",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["payment", "topup", "campaign", "coupon"],
                'description' => "KJlAlkDX0z9k4WtlP60t1pGDCB7WpLioRLUylhwp3jBXylmnzTDYQPTQEhEDpiIl88uXhFr9tzNaCFLhrW7Qg63LOoyDRk2frbKYDtHXRSpeSviFk4W1qsOLMcNwe8KEeqmGGreSt4nt1ybC0Ywm3a7y1jkUDzYlQVbUnnRBBQRDsGnvgO2bodBPeKpRFsQIEwGM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "154e5804-9da5-47eb-bd45-8e1d3a34ec89",
                'customer_name' => "BFs4OKbpkXgOJ3P1nM9riBWugVW8sRa",
                'transaction_id' => "ebf7fba6-2a45-42e8-93f8-31b827843861",
                'private_money_id' => "a0e11d3d-2c5e-4a4a-8e5b-d8a82691156b",
                'is_modified' => FALSE,
                'transaction_types' => [],
                'transfer_types' => ["transfer", "topup", "payment", "campaign", "exchange"],
                'description' => "cxqLSG8S4aP0CNMNfb6VowWUVfzovzP7VL5ebcijLtVhmlM6kBu7DCNg4aU7BlWsNECFWA4hHlvtcjGtIPadSKiVX8t6IuP7AfSh1iSdnomWlXA8y2vwAsTNYaeLyV7CWdrmk7DRyx2nAdRh4U2Gnj6HilrfsKlPIExrXeCFOu5KxrV4xhz7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "DzBywKIci",
                'customer_id' => "9d7c34cd-6c88-4616-80ae-ec0bded7dfec",
                'customer_name' => "0S7L0N0uBHj0xIlmI7crwjgiJmBq8x2BMoiejWmPY8qwKCFWRUhTWJtrSHM5KvGCx3jvLeQXqJ7fOtRApW564YK0LvLN69VHlYJhXH6cUQL7XLfiXA0zUZ8WIiKSeWU9z6lAbD3wpFlmsWusC8RGaBKUJdHLf9kwaxRbmzAo5vzrqC43kvR5VzS4JSx7Qk5qYm8EJV1By6vGk0F",
                'transaction_id' => "dae95075-b128-4ad7-a8a8-2d7ed6dc78da",
                'private_money_id' => "2918073f-7c2a-4b33-bca1-27a981699d70",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "transfer"],
                'transfer_types' => [],
                'description' => "WacdvlF8sKq6M8TMch0t9MLsXgvG8EYKbsPpBkO0z5h9VDX3NEhsO0rjGagOIQ6x9sSfu0zX8zdCniT7rbp4RdF8jzLLX07kGw"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "04bc3e18-6514-406d-9208-15daad931e52",
                'shop_name' => "9QJDyeQCnprhi7qh3KP4T37Wi9g9nZZhOiq9TM1kLnMOaPoayQ1SL4LwX",
                'customer_id' => "b444a014-68e3-4474-966b-6e3dd79257b2",
                'customer_name' => "uyuazqzFpngLk90ZBFe71DIECbUavopCer6amUqWii2uDVrmTki6pqO0f8cnp",
                'transaction_id' => "022ec9a6-63a7-4ffe-b4cd-9396ac4091fb",
                'private_money_id' => "9562eeeb-a095-4c42-9f23-28d2b613019d",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["payment", "campaign", "topup", "coupon", "transfer"],
                'description' => "eCg4xumOoxK0oT4F795unttA065Yr03Qzj1SYSblk7QSMdkkKPrtzfsCSKaR3OFn1WKJz5hhBZBCZgSERTDaoK9IqITw9RXh5VL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 2530,
                'shop_id' => "54e48342-39fb-42ae-98d3-bfd31c4960b3",
                'shop_name' => "zsrMpj8GBIyJaRyweuGKy2nXN4UBPwGQ9mhvxLr7QQxCiR4LJ0VAGQ0LknXBVXV6IePzMvb8rIAKhBAUImOpB9NJd0FGb0jOdIa2VbV1E7pIBf60ZOpXb0uUTjEzrW5FEq6VpVqu1DpFd0JaBsPBEjjxsN82R5bV74h6MclFLskpVJhF8OvhWGp3gTZC60RTw4fZ8z",
                'customer_id' => "dc70adbf-2157-40c2-b1d3-f22792de2143",
                'customer_name' => "3vDIMcnooU2vsEkhFzbMP7H4x70jy8CyXSjsNQfhm4JdiSR8LU0sAxVpKo9Pr8tnCR4b3VVcnR7ySaTJSLXaRbjFaOCY9HY0faJMcRsZ3tfn14pqdpY2gOVzxC2AMFcqtkzhdfPKiy9SERDVnpaYhOvVB8b8Y5rPTIoQaf",
                'transaction_id' => "f1472976-2b6c-433b-baa4-17dcffa5513e",
                'private_money_id' => "a26791e6-aeeb-4ef5-b942-09ad818df5e3",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "exchange"],
                'transfer_types' => ["campaign", "transfer", "topup", "payment", "coupon"],
                'description' => "faAmwoPiUeFs2qGGZk77FXigkPx1NC7bcdhHDyq2BmegmNcooOzsV0UAnFDq2j42XbKSjWX0mczdG92I3EQWa6MviKhzgN1WE1E9QE8I1WOtKGTOoDsggK2zVvIrNmjPyMt7JZTknlcSLOAfgHki7iEUUEZsYB8I8w6YX9AjYRSoiU1BYQYTGkBMdZ9gxwOlUDOeBSR"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 8426,
                'per_page' => 8946,
                'shop_id' => "372c90e5-fce1-477d-9810-1002017936ed",
                'shop_name' => "MaY0bgN8gTUkelv3hkGmk4iWQZAVafOlabiOcEnloh2DXft8ZR3ZIT5H8aSOl3MDXnG9yHqEAThwDuq1zewsMIx1hpzHiKxcCexEPr",
                'customer_id' => "667fedab-dcd7-4d4e-9e00-5b8683318b63",
                'customer_name' => "D1BCJ2Q7A3yxMyBqUSnmfmyMf158jbodxUJxcIS6QwIFvAWCZsB1EYOxuNXsb8K4XyQ60l6nZCLpElUd6iH1X66E0nqBBGmKnZ6uDIn3iuFQrrgeXzyNXNrNkeWa9hWsLSo6RhlRrNdmMatyDW12s5SKsd06fYHa9pHdUJ2NkpD9XRln1g4q1AmzenaBAIYsPX5BEVEkSwN7Jl7UfMqNeIWxDQ5mYkDBp",
                'transaction_id' => "fcf5a5bd-e337-44b6-a169-818ec08eec7f",
                'private_money_id' => "d5221a88-2a0c-4550-ad1e-e222ace7636c",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => [],
                'description' => "2cd0lMhCHFE2kwBpeHriIaXxYmUfeD23BKTCZPKhRk3w9r2MS5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2018-11-10T11:33:43.000000+09:00",
                'page' => 7932,
                'per_page' => 4543,
                'shop_id' => "247c4c5f-8b0d-4ac2-8370-43ba21944865",
                'shop_name' => "29hBWbNKIGuoyWD3BHeU5bcdtREmG3PoPoUnVURoRDP0303M0EUzCR0XC7UBINwESq7hPy7a3F5MBC2C7VfANu3p62KDWO8TDrLXiDq8ZM4HpSJ7ezaoKVM6PG4nVxadlDXYh8F3jX5Rw62VEObOlMsiJRl1b2ESaJKCDCVaIjvXY9buv1PGDaqpxNAcB7XJ2PMH0HA7",
                'customer_id' => "33e643dd-7eed-4c22-9cac-de4de18e7ec3",
                'customer_name' => "xlziaJ1nphI9ySRxw6pdyrj7YEb5BIbPwZWptKeWMAfjTzhjO10bQwyTU6ZUhrOp80a47LYIcD579HHiydYwYbStQsIHShYuqMOfry8huKLaun9q8fRCMt2pzYekawpUouvYHKlj0GUL0Fcnz7fEngR6pF3m54VmwYrgFgT3",
                'transaction_id' => "fdf2ca08-9052-4279-862d-737fc2bcb698",
                'private_money_id' => "c8599e9f-3755-41f4-b129-cca4a5c63aa6",
                'is_modified' => FALSE,
                'transaction_types' => [],
                'transfer_types' => ["campaign", "coupon", "payment", "topup"],
                'description' => "2ZIYN08OgDDQYpUk9QvTpwbva3X3fUufQz"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2022-01-31T23:01:02.000000+09:00",
                'to' => "2023-09-09T12:40:26.000000+09:00",
                'page' => 8832,
                'per_page' => 617,
                'shop_id' => "a02977fa-5fe5-4c93-a29c-d72837ddcc7b",
                'shop_name' => "68SpNEGkfmS3Uyy5Zn41VzLKUg3om1YNfeeKoLdFE8Hmt9R8Bv1AJsBz3l6W699PQnfTErfIkmiU4i2bFcYt",
                'customer_id' => "72b02224-490c-4033-a3fa-d27697876c2a",
                'customer_name' => "nnQAgg6WKGNa",
                'transaction_id' => "4c1003dd-e09c-4854-a3b3-48146d899a41",
                'private_money_id' => "486be008-9cb0-4b1e-b8bb-858f6cbe29a2",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "transfer", "payment", "topup"],
                'transfer_types' => ["transfer"],
                'description' => "u1yVQPNCQEFIkbwhO9RJiR7mxn7kYGzShazSiZH6DDfNqfsVRi3zxzsVzVJLxpF9uCjOUSNMH9fWh27PiOpr3HMMXsb4Lh4b0Gko8iE0P3Cu0AOaTlKzyVFYYoK00acoGlEqYYGWZUMgU5LJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
