<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "aWtitr6E7s6Kum0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["transfer", "campaign", "coupon", "exchange", "topup"],
                'description' => "KnLhk5xB26vo9oe8Wk6jBFacoUsizL7K4s0xHPmXUZBJppSfHBKFlpD0NralpGvxOqqRI6ktOk5ABZSkQRqNJgbW6GA89J6KSfB5ZF2F4ftYitjE6elBxnOwWriwNq3VnhvX6hmyzNMOnSlAOngnf1PxwBC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["expire", "cashback", "transfer", "exchange"],
                'transfer_types' => ["transfer", "exchange", "payment", "topup", "coupon", "expire"],
                'description' => "LUPmwOpWqHgr7GBuPler7BrNlOtVSgH3qVZD1biG8CHktmz3fjqmZapATG9wx3YI7IennPd5vbIdptZpnmhAmrRXlGxcV6nbPXj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "transfer"],
                'transfer_types' => ["transfer", "payment", "exchange", "topup", "expire", "campaign"],
                'description' => "d8KliX9vmvjGydQs4juaPYwnWbzrhJYnytBcaOJiQ90KgIQNg1SKvrLXmM6WZHzAA4Wk9Cam9oS5461mR2RptvAT5W2Pu6jDTyITm"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "4f6eecd3-5435-4b89-a451-2f0988240c37",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "topup", "cashback", "payment"],
                'transfer_types' => ["cashback", "exchange", "topup"],
                'description' => "O"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "d34cc129-fd05-49c2-a058-c5bb3748ac10",
                'private_money_id' => "f6cf5784-f7c9-4fa8-adc7-b9567cfcf35e",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "payment", "expire", "exchange"],
                'transfer_types' => ["payment", "cashback", "transfer", "coupon", "exchange", "expire"],
                'description' => "wQLTtl0d4DOV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "uNg5BiRBRBDlrqHfWaHuuWkYwcBoKTe5q2pNAbrq1JjVNxOXMRMdsjhLKBY2VGhyKxYQHtVUeyK844w91pB5oyP4hOqXOUenNKbQt",
                'transaction_id' => "ceec443a-cd96-4b09-b2d1-7c36d909bd73",
                'private_money_id' => "d2bfc212-4f0e-4538-91b3-6c9eeb2de255",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "exchange", "topup"],
                'transfer_types' => ["campaign", "coupon", "cashback", "expire", "topup"],
                'description' => "ubzGXpOfMMEKCH8h3bwvdycphTw9EEasFl"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "0f51acbc-889e-4d72-bb34-90d705dd8c77",
                'customer_name' => "Ex0P2pU1PuPi",
                'transaction_id' => "5aaf4068-0e31-421f-b0ac-a052029f1de3",
                'private_money_id' => "54f5a750-57c0-4bc0-b22c-267da59da168",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "expire", "topup", "exchange"],
                'transfer_types' => ["topup", "transfer", "payment", "exchange", "coupon"],
                'description' => "Eqj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "uUEkzlKaSIX7KA8S5W216LQG77bE8wPunN3ZmyuxU2LzZM7lErVA4NzlwbsnUCwUHdHYiGK0U2DMMtotcnjLJPqHfLjLSUwqRwjvPnWKnpMAZuMr792V93y0XtE1OYBC7CyoqvWoXSf6C",
                'customer_id' => "e35fa964-320b-4d2c-9cf5-f1a3e05a985c",
                'customer_name' => "SWe9",
                'transaction_id' => "14d2beb4-5c9e-4b02-b20f-4e2a199ea1a3",
                'private_money_id' => "dc99adef-fb5b-4d86-a1e2-42738994d291",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "exchange", "topup", "cashback", "transfer"],
                'transfer_types' => ["expire", "transfer", "topup"],
                'description' => "95QTFkqE0eyvhdkI2inyAMJxrlIDkU482Zl5VGgTHgb09Xzj0NEZbwill9koCjWIZV1MC2jTafew9Ox0XCiNmgrqspggA0RUNW4XXaaUYDiDmTNFg8ClqXo"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "81f598d3-b5eb-4e7e-8ba1-a4181cb4a51c",
                'shop_name' => "brdAsf7yA19eFUPthgEUYQI6rnWipHiJ",
                'customer_id' => "e09c91cf-c278-4d8d-ae24-844ef9d10f8a",
                'customer_name' => "ZqO0LktmOvJKGJ3gqi1vbdcEXahAT2UrtPYaP2R7MRdbf1SkO88RdsEdnP5spqd2vTAOFY7F5e6Da9VDQxxcEVh2M2YIb8UrWfFk80Z9ISteNeS9Q4zr",
                'transaction_id' => "d3081e62-f162-492d-ba4f-8f0d4fcb3409",
                'private_money_id' => "a91bb824-6b4f-4e87-aed0-3b6d000a2811",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "topup", "expire"],
                'transfer_types' => ["topup", "expire", "exchange", "cashback", "coupon", "transfer", "campaign"],
                'description' => "ZuQ55XsL8MlFytjIpHzCjv60pM7mHor88IDviqoFQ9YX6BCej8ZWTZzxLNjgf7ljSmyhpTdjuKKiRZd4zJcaRyRmC0GmF0lK1u40ELtzCatYTnWw81nKESMlcnGfbXZYoi2qCfnFbSKcxHbrHInBn6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 7770,
                'shop_id' => "759585fe-f7e5-4fb4-923f-7409b72f9287",
                'shop_name' => "CVUvTf6Gv3tpDOPvDMWTUiCQHoetYos0hdauSyfmJnyo1H2O24aIG6ADCPAknqVX0lkK13wFDzDUdEdDPctcHgVGP69SAarD9pdzBOBGf16USrnFdIEyJ90Z185vLcEbA5eEqfdHWahFjGq4RLafzONm0POmIt6sZ6xK694wN95gtpSyyCBbptSJGIoaXKkWONhcI6PpCbKOHJveoOh1kNlJNgFgEFQK36j8pOVMniP5jIH4nK8FJ",
                'customer_id' => "ec5f9c9e-db5b-4686-b28b-ee01329eda8e",
                'customer_name' => "uLEUUbZNR7jCBFqCBgCXGUbidnybgdGBuJVOX2orVIktx1rnf6phRScG1g7YrmC0ZNP5ae23qHiMocvq8VYe6go1sI5XFYEWWQccfDAddaj5hxXZn59pJ3mMESGSeqH5u3IN5XwdQKXqgBkqjh5fGn0Hfo7uuS5sAX1r2kAAdpPaeaVCqwQiTbLydhtwc8mbGJiQlsrizbuTf5yjK5cLAPnSOdFFXR7VHgP6vn31cGcXMBFBmuovlv8kp6DI9",
                'transaction_id' => "ddf56b43-9b00-467e-9bf4-7551f80bc407",
                'private_money_id' => "476b7fd5-d20b-4738-8102-5d711f012ac2",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "expire", "topup", "cashback"],
                'transfer_types' => ["campaign", "cashback", "topup", "transfer", "payment", "exchange"],
                'description' => "RrL2rCj5PS9dCfkDZPad1JBLl1ATyqGYfK8u6jhroLkct"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 9926,
                'per_page' => 8941,
                'shop_id' => "21e51ebc-4fd5-4856-8425-89ccdfc35949",
                'shop_name' => "0yPTp4D3PPlzbvgAKrWUbjtr3Tu6vwqxx0saSMWiH0B1T58dXppblDQ1fymXgoTCxeZvE7FKCZQCwZUkJEKxlHlpM5wVVcoHs28EaMT54sZe96DEDNtrL5RLMk8t7vr5QSPrWWUtKrPfPRucL7WDyWWHBDop07gHOH4aQqtFVQkryIco3Uea342F0Rn60lDEWBrVhNYxZ6NG",
                'customer_id' => "d1fc900c-5657-41a8-ae75-994c20268ec8",
                'customer_name' => "R",
                'transaction_id' => "f1e071e8-33c8-4c7a-b775-40e29c64e0c1",
                'private_money_id' => "5c48a716-d22a-4376-a4b4-00fc2645870a",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "topup", "expire", "payment"],
                'transfer_types' => ["cashback"],
                'description' => "NDwU2hMK78PNLrUwgWo3Xge0t8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2022-02-15T16:15:17.000000+09:00",
                'page' => 7316,
                'per_page' => 2030,
                'shop_id' => "5043276c-a70d-4d3b-909d-6a3861ce739d",
                'shop_name' => "4rEPwal6D5JXyd1gutXcHmQalfQAe02bZxQK94dWIML1ZDFa",
                'customer_id' => "18ae8471-c624-4f94-aa6a-e19385bdcbd6",
                'customer_name' => "5R33loNMNHLAXWZXiXewPRwhBJ",
                'transaction_id' => "ed16a135-cbd5-47f9-b369-4922651328e5",
                'private_money_id' => "b2de2119-74af-4e80-a2eb-cb7188ed4fa8",
                'is_modified' => FALSE,
                'transaction_types' => ["topup"],
                'transfer_types' => ["payment", "expire", "cashback", "coupon", "exchange", "transfer", "campaign"],
                'description' => "ushMtohtN3BRvoLzGwv0IztJGuSEwBnaMDDqIlYAOBgW3QQKB0S8Flwt68bpILGPf7lkIkM7xH2kr7lp9WE3XWwq7sLszcOdzdsvE2pCAmSIfe02pHr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2020-04-06T07:57:13.000000+09:00",
                'to' => "2020-04-16T12:30:14.000000+09:00",
                'page' => 7490,
                'per_page' => 8575,
                'shop_id' => "fabc227d-4f28-4113-a386-980dc87bdf49",
                'shop_name' => "2l6BD1g3R9SLEwNRURuQQuzbgrHW8nD6z6G3X0n2N9l7EkMAahTzb9yL2MdtJMGZ14MUK3xGcmL6sGd29W54uyv0amk9UGDOLjuavRgLaf4XG59h6ixtYZi0VUM6s87BX78GanISwIzidZa0mn4uEHn61N1zim756Zf9RvVBrPpqoJkrd1JhSGYgUF",
                'customer_id' => "16be29ef-ab71-4c58-a182-40cfe10ff800",
                'customer_name' => "Z9GMNzhA1boxRC5uArFQpJXygCKdSegRGX3S8uYJUQpzzV0UQoTPGCXES7mp",
                'transaction_id' => "97d05a9c-58fc-4bcb-a13e-4f0d96453eae",
                'private_money_id' => "bc830531-31c5-4a32-bd26-de9629e0d88e",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "exchange", "payment", "topup"],
                'transfer_types' => ["coupon", "transfer", "expire", "campaign", "payment", "topup"],
                'description' => "YfKaGonoGiVcPx1geNdlRa0pvywxjuSkj1yvPoldBWq3tqffAa1tQsXcGurI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
