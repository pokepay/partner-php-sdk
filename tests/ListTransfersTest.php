<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "LZyg3cEPs9bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["campaign", "coupon", "payment", "transfer"],
                'description' => "2hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqyENn"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["cashback", "expire", "payment"],
                'transfer_types' => ["cashback", "topup", "expire", "campaign", "coupon", "exchange"],
                'description' => "QSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GPfH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "expire", "topup", "payment", "transfer", "cashback"],
                'transfer_types' => ["payment", "transfer", "cashback", "expire"],
                'description' => "WVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4U"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "6442e65d-0082-43d8-b4ac-91a71ef23e81",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback"],
                'transfer_types' => ["exchange", "payment", "topup", "campaign", "expire", "cashback", "transfer"],
                'description' => "PzDe8V1DYdcKn6nAl4cEX71br"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "e361effb-5cb7-4b5c-aa76-41023e72ffe0",
                'private_money_id' => "9ab1a49d-7c1b-4137-8544-977e2ce378df",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "payment", "cashback", "expire"],
                'transfer_types' => ["topup", "transfer", "payment", "exchange", "campaign", "cashback"],
                'description' => "k1SGbd2fzw9nBiKXYeHN7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "C4dOhcXyEVzhZku2OJwUM0",
                'transaction_id' => "bd35fe0b-ca6b-423e-aaf4-363a09039aeb",
                'private_money_id' => "4e15d79a-f631-4b79-b365-dd2ddc25bb34",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "exchange"],
                'transfer_types' => [],
                'description' => "KbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "96edc93f-6bca-4fc2-8be7-b525e401f85d",
                'customer_name' => "rD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6",
                'transaction_id' => "9c8bc189-b91c-4e3f-8863-a0d3c4512665",
                'private_money_id' => "e6de3d91-f66f-4eff-aafa-360b778e8a1a",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "payment", "transfer", "expire", "topup", "exchange"],
                'transfer_types' => ["exchange", "payment", "expire", "cashback"],
                'description' => "3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMMEyVApkaDeYuOtBoCZgc4gwc8RS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "E7B5wsqfAkho5yO5EQGpb9AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvsz",
                'customer_id' => "815a75c6-147c-4c9e-bea1-705ae36f0e88",
                'customer_name' => "KZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5BruF5QOJx8zwWTQtwhgEUQrpqVtFI2",
                'transaction_id' => "ee977cfb-babf-4630-8c84-291c01b63fd2",
                'private_money_id' => "5aeef90c-6ff1-4b55-9238-c221dd38d923",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "topup", "payment", "transfer", "exchange"],
                'transfer_types' => ["exchange", "cashback", "transfer", "campaign", "payment", "coupon", "expire"],
                'description' => "R7PO79YOuc2btzI2HvKaIy1dRK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "5b9c0875-672f-4efa-bccf-0c6c8f12c82d",
                'shop_name' => "LMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXq",
                'customer_id' => "f531c559-4269-47c4-91d0-4413c42e0e0a",
                'customer_name' => "Fv2xIXmI4PlPvyiodipyOhBLvJd18F7msVClYIZ6Bq4ZCm153pAwidsKM1ZphpLhv7NIoqmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YU",
                'transaction_id' => "d8ba5929-843c-42a4-a2bd-cda31abc1ac9",
                'private_money_id' => "cc872592-9c1d-46a0-acf4-18adfa8130a2",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "topup", "payment"],
                'transfer_types' => ["topup", "campaign", "exchange", "transfer", "coupon"],
                'description' => "5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 3001,
                'shop_id' => "ea2ac809-953d-4aa9-ae0d-a4809538268c",
                'shop_name' => "oitBAmKCKeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4sIXfB3ep9eHnNy54z9YZjsWtY1WGlubcf8poH65gFI1eD4xOb3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySC",
                'customer_id' => "3ff4770f-883a-4498-86d0-9dbd2d1b89cb",
                'customer_name' => "ncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9CQqv6T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tV",
                'transaction_id' => "ac4efa18-be44-4d85-ad74-6a100a652f11",
                'private_money_id' => "e7d0cf7c-3dbd-4a7a-9c1a-0fb0e3ebd02f",
                'is_modified' => FALSE,
                'transaction_types' => [],
                'transfer_types' => ["cashback", "exchange", "topup", "payment", "campaign", "expire", "coupon", "transfer"],
                'description' => "LIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 4788,
                'per_page' => 9199,
                'shop_id' => "eb35aed6-a7c3-46d0-95ae-ac48ffeadc67",
                'shop_name' => "HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28",
                'customer_id' => "5d2ed476-1b05-4244-b396-5ed9cdbd239f",
                'customer_name' => "r2EOFyjAKpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevnEoyfpAANnkoel9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra9",
                'transaction_id' => "e966d7a6-d2b0-4f58-8b6b-4e558c279580",
                'private_money_id' => "55c97442-f20f-48b3-b42d-25f573b3522e",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange"],
                'transfer_types' => ["exchange", "payment", "expire", "transfer", "coupon", "cashback", "campaign", "topup"],
                'description' => "BKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21o"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2023-09-06T05:27:56.000000+09:00",
                'page' => 8881,
                'per_page' => 4827,
                'shop_id' => "68f43768-bb10-41a0-b0b8-f9b283feccf2",
                'shop_name' => "UmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8ZxL5ooBCUmbexHlOYPdRDRXfcFEKebPAHiatKRmL7K8IMJIBW1vB1RC8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRS",
                'customer_id' => "e18f8fc2-6506-49bc-abfe-842f762a2b62",
                'customer_name' => "fNhFwjSSUkqouGV2ULftf3KLiOm0u6Od",
                'transaction_id' => "4aafd7d4-babd-4213-99f6-80d951a32931",
                'private_money_id' => "0f851a88-9419-48d7-8c4d-51833b11149b",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "exchange", "payment", "expire"],
                'transfer_types' => ["campaign", "payment"],
                'description' => "i8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2018-03-23T04:40:18.000000+09:00",
                'to' => "2019-07-22T12:05:50.000000+09:00",
                'page' => 5004,
                'per_page' => 6751,
                'shop_id' => "dd68deaf-a417-443a-ac5e-5319e889d283",
                'shop_name' => "jeAF8N8XvR",
                'customer_id' => "bd509005-2885-4959-8df9-72907f72dace",
                'customer_name' => "jj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJ",
                'transaction_id' => "94221059-c41b-4101-8888-c68de6d2291f",
                'private_money_id' => "558dd17c-40a8-4848-9514-f7ad4e2a194f",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "expire", "cashback", "payment"],
                'transfer_types' => ["cashback", "coupon", "exchange", "payment", "topup"],
                'description' => "lJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RX"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
