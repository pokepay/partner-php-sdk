<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5Q"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["topup", "transfer", "exchange"],
                'description' => "bGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eu"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["topup"],
                'transfer_types' => ["coupon", "topup", "transfer", "exchange"],
                'description' => "iLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "exchange"],
                'transfer_types' => [],
                'description' => "SmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3Kept"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "8af39680-feaf-420d-a0f2-2c2e14c0e8a5",
                'is_modified' => TRUE,
                'transaction_types' => ["payment"],
                'transfer_types' => ["payment", "topup"],
                'description' => "PDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwq"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "1e012cde-c398-43fa-9686-d03ceb1a2f3f",
                'private_money_id' => "9705f224-b9bb-452c-88f3-58e12aa7d520",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "topup"],
                'transfer_types' => ["topup"],
                'description' => "DJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghDCw1Un7nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur4lrAg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "Y4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITc",
                'transaction_id' => "9e6e6a13-c3d7-46f9-ac58-062336dfcfeb",
                'private_money_id' => "798f0d11-e01d-4cd7-baa5-1b771ffcf6ce",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "topup", "payment", "transfer"],
                'transfer_types' => [],
                'description' => "I1N6RIMY7t"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "bc510b30-48a3-4475-be88-a502a2a10ba2",
                'customer_name' => "TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1E",
                'transaction_id' => "e8a5afd4-5797-46da-9fd6-e5fdbbe60df2",
                'private_money_id' => "1b0a6269-b223-452e-876d-d758078b1299",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "transfer", "payment", "topup"],
                'transfer_types' => ["topup", "transfer", "coupon", "payment"],
                'description' => "zw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4UwDxtqXzHNdytk1inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "vudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6t",
                'customer_id' => "453a840a-8fd1-4ba3-9098-25b3cc476976",
                'customer_name' => "wFKRF7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpY",
                'transaction_id' => "70c30f3d-13f4-4fe0-b0d7-5bbc789d0a06",
                'private_money_id' => "955e5b78-275f-479b-ab98-72a7e878a10f",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "payment"],
                'transfer_types' => [],
                'description' => "TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "8d8d9879-da4a-4f82-bdb1-b0d6b6b1729e",
                'shop_name' => "r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZ",
                'customer_id' => "8ee1ad64-d1b7-481e-a96b-afca27993130",
                'customer_name' => "09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaD",
                'transaction_id' => "530c2dde-1c65-44ec-b7f2-9f19da81846f",
                'private_money_id' => "216e4c3e-dcff-468e-be97-b1b452e3baac",
                'is_modified' => TRUE,
                'transaction_types' => ["payment", "transfer", "topup", "exchange"],
                'transfer_types' => ["topup", "exchange", "campaign", "payment", "transfer", "coupon"],
                'description' => "Y33ek4ahxmsrZJPb5B1K9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 7373,
                'shop_id' => "91e07a02-75ca-49fe-aaec-ea2538478551",
                'shop_name' => "rcG4cFx990D5go4dBLdUCSZVd4cTqnNfSRiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0ipuLt3IQKQQHb6fikVg8U3XBigR3jya01cL7edhmrVi5NIsblUeDquiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnNKINI7vj8qEDPsdJ8JkL6K4fbUtzmymsdzvhUXmrc210",
                'customer_id' => "931efb81-3fe0-4f56-af97-cc7a9d623959",
                'customer_name' => "Cz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZV",
                'transaction_id' => "84bc64f7-6942-40c2-93ae-eec2d8ef2bb9",
                'private_money_id' => "dba4b5ce-928e-44d1-b5c7-770b6bee6b3c",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "transfer", "topup", "payment"],
                'transfer_types' => ["coupon", "exchange", "topup", "payment", "transfer", "campaign"],
                'description' => "4cE8ye8xiCpt"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 5235,
                'per_page' => 5697,
                'shop_id' => "1978677e-2e99-4c38-aba8-d95852fd151a",
                'shop_name' => "3OQSs9cvMVMzYpfEHHq4A",
                'customer_id' => "0aca7b56-2e90-4f89-831e-262ab38cebbe",
                'customer_name' => "Php",
                'transaction_id' => "0566fca3-36c6-49ca-96a2-0b98937e6e0b",
                'private_money_id' => "087a9386-5b04-407c-bb3b-a893d9d51b6c",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "topup", "exchange"],
                'transfer_types' => ["campaign", "topup", "transfer", "exchange", "coupon", "payment"],
                'description' => "E9Oo"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2023-09-06T20:47:44.000000+09:00",
                'page' => 2622,
                'per_page' => 1957,
                'shop_id' => "5cd1e772-c62d-43c6-8c7c-b168170a03f6",
                'shop_name' => "ABt92YjeNGkeRyZCxDwnyuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy2qiGNeSDJueWNAF2iLhkB08mWoSEw4Yfn",
                'customer_id' => "7d0b6e13-95fa-4d2b-b565-53e0d0faeb33",
                'customer_name' => "jXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn7",
                'transaction_id' => "c238e715-8c33-4310-9e8e-40152c5ab832",
                'private_money_id' => "e2550fcb-b93d-45d5-9459-ad8f73c9b770",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "payment"],
                'transfer_types' => ["topup", "transfer"],
                'description' => "UcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2018-04-29T07:40:01.000000+09:00",
                'to' => "2020-08-03T06:12:34.000000+09:00",
                'page' => 3408,
                'per_page' => 7776,
                'shop_id' => "26db9fe2-e79e-4398-9c6f-bfd77c39ceb2",
                'shop_name' => "zpcaLxa2QZma6CRo8nyJ",
                'customer_id' => "8e4a549c-c54f-40b9-9933-4be6b62a1e00",
                'customer_name' => "9djMgk8QSZwJ1udEIb7zDJ6KZTEk0mDRGqd8jGihF2zo2GN3QYDG6CZS1PVe5LZzi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P3dxLhDjrt4CFESWJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2MgyW",
                'transaction_id' => "37d4c4a4-dabf-4ab6-ba31-5fb48e82ab0b",
                'private_money_id' => "b6108139-48ca-4142-925a-07db7ef93ced",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "payment"],
                'transfer_types' => ["topup", "campaign", "transfer", "coupon"],
                'description' => "zecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHfSBBKI1KQl4cK6HLesoN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSi"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
