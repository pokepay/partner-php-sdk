<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8E"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["transfer", "campaign"],
                'description' => "62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["payment", "cashback", "exchange", "topup", "transfer"],
                'transfer_types' => ["transfer", "exchange", "payment", "cashback", "expire"],
                'description' => "DeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "expire"],
                'transfer_types' => ["transfer"],
                'description' => "h1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9a"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "fb16ae71-09a5-4ea9-b2f0-9f5999151ebd",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "topup", "payment", "exchange"],
                'transfer_types' => ["payment", "exchange", "campaign", "expire", "coupon", "transfer", "topup"],
                'description' => "7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5BruF5QOJx8zwWTQtwhgEUQrpqVtFI20RqU84wWVej7KjR7PO79YOuc2btzI2Hv"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "88835889-9ec0-494b-a1c9-7cf9aa271e93",
                'private_money_id' => "18333db1-da64-40de-924b-0875311e672f",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "expire", "exchange", "transfer", "payment"],
                'transfer_types' => ["campaign", "expire", "exchange", "transfer", "topup", "coupon"],
                'description' => "mdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4PlPvyiodipyOhBLvJd18F7msVClYIZ6Bq4ZCm153pAwidsKM1ZphpLhv7NIoqmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "cagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbT",
                'transaction_id' => "97d8027c-d1df-4b1b-9a98-b22b550a3192",
                'private_money_id' => "5a533d72-30e8-4590-aedc-1c5cfb747dfb",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer"],
                'transfer_types' => ["campaign", "exchange", "payment", "transfer", "topup"],
                'description' => "zlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "7618b7bc-70c2-4b54-b2c9-72e48765ff4c",
                'customer_name' => "JZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4",
                'transaction_id' => "aebafc95-d346-4ddd-b2de-6c1f709882a1",
                'private_money_id' => "a462f935-e5c5-476e-b7ed-4a73fdd082a8",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "cashback", "payment", "topup", "expire"],
                'transfer_types' => ["payment", "expire", "coupon", "topup", "campaign", "cashback", "transfer", "exchange"],
                'description' => "P7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4s"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "IXfB3ep9eHnNy54z9YZjsWtY1WGlubcf8poH65gF",
                'customer_id' => "a05fa2a0-821b-41c9-8b3c-be834e4c2b22",
                'customer_name' => "1eD4xOb3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9C",
                'transaction_id' => "276861d1-333d-4d5f-9f2a-9206b00ae910",
                'private_money_id' => "50ddae93-11bb-4880-9771-43f6c293fe36",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "topup"],
                'transfer_types' => ["payment", "topup"],
                'description' => "d8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnlgG8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "3f3f40a6-505d-40ed-a888-d0998f411bef",
                'shop_name' => "qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5",
                'customer_id' => "0a5d469c-cf3a-4bd2-ae35-d7769da3f599",
                'customer_name' => "eMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015UD9qqTdXnkHVwtuWRPDBo28vDsYr2EOFyjAKpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra",
                'transaction_id' => "f3d53414-b9b1-4642-8d45-e672258d5f36",
                'private_money_id' => "89cf97a2-7ee0-47a6-bdb2-5ba0b7f396e7",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "topup", "transfer", "expire", "payment", "exchange"],
                'transfer_types' => ["expire", "exchange", "payment", "coupon", "transfer", "campaign", "topup"],
                'description' => "nkoel9aDgdNSfmE5De5bTvMyH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 9500,
                'shop_id' => "f2e34398-29f0-42e4-92b2-c05347aff9a5",
                'shop_name' => "WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S8FVSDMY5BU7",
                'customer_id' => "0c99275a-0918-4558-92a8-7ad4bdd55de6",
                'customer_name' => "NFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVCmpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ7",
                'transaction_id' => "690d1c80-d2a5-49b1-951a-ba24c2bf351a",
                'private_money_id' => "3180df2a-96c3-414c-abfd-578c81837bae",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer"],
                'transfer_types' => ["coupon"],
                'description' => "HUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8ZxL5ooBCUmbexHlOYPdRDRXfcFEKebPAHiatKRmL7K8IMJIBW1vB1RC8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2UL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 2347,
                'per_page' => 1781,
                'shop_id' => "4795060b-12e6-4db3-8b7f-914cb8b56a94",
                'shop_name' => "Om0u6OdTYvY1WMa6BMdHbor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJYHHOr63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkE",
                'customer_id' => "5d7c5eaa-f7f7-4b48-9642-40af7cf3843a",
                'customer_name' => "WOqOmjPQjCJIqduyEzf",
                'transaction_id' => "ecdad846-1834-4769-a83d-b6a3b8ddc6a2",
                'private_money_id' => "889f92c5-0dcd-49ee-b1c9-8c64aa302da7",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "topup", "exchange", "transfer", "payment"],
                'transfer_types' => ["coupon", "cashback", "campaign", "expire"],
                'description' => "Tmgqj81RXJ34GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3u"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2024-01-14T05:29:03.000000Z",
                'page' => 1476,
                'per_page' => 3400,
                'shop_id' => "205e3ebd-da43-4409-a4a0-6f1a212ae5c5",
                'shop_name' => "3Z7gIcLSudPl4JIrQmLFWJxcGB9NLriuIsMTY",
                'customer_id' => "c884d81c-e079-4643-956f-ec8785993e20",
                'customer_name' => "Ea9YZaUNPTMagDSPeHLGCGYvgqbqCIdoPTyGfjAlvbOwBRftL3mTfJhTjDs9c8QNUGvnht1UycVdhwjqe7Rve16qe5BUa3mrtCxkktMbdZ0Ff5nebRZC0vDYNEWMfxXSVHRY4YZdsEswklf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt",
                'transaction_id' => "222b6c33-7a49-4c0f-9520-d25668c91d0e",
                'private_money_id' => "eb816512-2ccc-447f-b56a-e8e671200aef",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "payment"],
                'transfer_types' => ["cashback", "exchange", "transfer", "coupon", "campaign", "topup", "expire", "payment"],
                'description' => "821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUm"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2022-12-10T09:24:52.000000Z",
                'to' => "2021-07-25T19:32:46.000000Z",
                'page' => 6618,
                'per_page' => 3324,
                'shop_id' => "ba286b8d-ed96-40b0-a543-52ccbc8bdf9f",
                'shop_name' => "foUMFSIdEJMG98zC6otpSw3LnpbrPkZnNjPWO55U7DSfY3LgW5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3jVYhbh4RW4SjcPHu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9o0TcGJkIJgRMahTjY4B83KCbssdnciBK2yKUyBpazsFHLyPhoCqWWrzikH0DrThI9ndCARX9iZ",
                'customer_id' => "7afd2ae8-1a80-458d-9549-3a776cc20ad5",
                'customer_name' => "rsQ8Uijo55dyiBxXbKWYhqIQcADAJhWFwASll2hGkEzja1NmQHCUATGGz590dt",
                'transaction_id' => "26c5edc2-8a24-423f-a8a4-b3751a2517e3",
                'private_money_id' => "22566fa2-8dbd-435a-a428-c3241f164cb4",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "topup", "transfer", "payment", "cashback"],
                'transfer_types' => ["exchange", "topup", "transfer"],
                'description' => "mxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2Y5YBaOZdS1seolNILNbVpFGvZ3N4x3uva"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
