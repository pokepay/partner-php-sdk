<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "RDQ6YT"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["campaign", "exchange", "payment"],
                'description' => "prQ3cmpI6bh8YrVsWGSghDCw1Un7nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztI"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["transfer"],
                'transfer_types' => ["payment"],
                'description' => "xb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "cashback"],
                'transfer_types' => [],
                'description' => "bNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "34e48dde-eabd-40e7-9878-16b432b1228d",
                'is_modified' => FALSE,
                'transaction_types' => ["expire"],
                'transfer_types' => ["expire", "topup", "payment", "cashback"],
                'description' => "KqmlOa23scUcryj4GBWTbDzAVeKXV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "2c4907fb-cad4-4a79-8ed2-14fb5ee007f5",
                'private_money_id' => "df3bc176-9a4e-4a41-a910-1bd5caaed78e",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "transfer", "topup"],
                'transfer_types' => ["transfer", "campaign", "topup", "expire", "payment"],
                'description' => "jQ03lDRu1dHypEu4pqRk9KXyywxfAs"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "vQQw8eNXwtPfKAW4UwDxtqXzHNdytk1inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwv",
                'transaction_id' => "ad6238fe-19c8-45de-91aa-5ac65b1d334b",
                'private_money_id' => "9d1fc9c4-a9c9-410d-918c-1a8cf7aca8ed",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "transfer"],
                'transfer_types' => ["topup", "cashback", "expire", "campaign"],
                'description' => "Mu"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "c9d11a82-45ed-4807-862a-633e3c1d1d26",
                'customer_name' => "aEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6tQ3vZwFKRF7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT",
                'transaction_id' => "af4ece92-1532-405f-a57d-7be3cc91e0e6",
                'private_money_id' => "47ade1ab-32cc-4de4-a35d-8db3a4aafd98",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange"],
                'transfer_types' => [],
                'description' => "nb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bG"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "LruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4dBLdUCSZVd4cTqnNfSRiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0ipuLt3IQKQQHb6fikVg8U3XBigR3jya01cL7edhmrVi5NIsblU",
                'customer_id' => "b5ee2322-83aa-4ae5-ac2f-b6446c7722f1",
                'customer_name' => "uiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnNKINI",
                'transaction_id' => "0ce42737-4af6-45ea-9c2b-ebc0f2480a0f",
                'private_money_id' => "9ca3a7a4-8538-47f1-bcc5-4e44bdd6d88c",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "cashback", "transfer", "expire", "payment", "exchange"],
                'transfer_types' => ["exchange", "coupon", "campaign", "expire"],
                'description' => "bUtzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQuG198o4cE8ye8xiCptr8X3OQSs9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "5d68bce3-c8a2-4a9f-a38f-cef62f90ddcd",
                'shop_name' => "VMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt92YjeNGkeRyZCxDwnyuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnN",
                'customer_id' => "5d1f48f3-b3bd-4825-b147-91091288f174",
                'customer_name' => "wvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy2qiGNeSDJueWNAF2iLhkB08mWoSEw4Yfnz5e3bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKWP",
                'transaction_id' => "868e5c11-4cc4-49bc-85fa-63810b85da65",
                'private_money_id' => "3918ac9a-e7ee-40b9-9e25-c17d02968c56",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "payment"],
                'transfer_types' => ["transfer", "coupon", "expire", "topup", "campaign"],
                'description' => "zsxb9tQKSZdMATJHlP3s2aiyvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leov"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 8080,
                'shop_id' => "4bd2f0e2-d57b-4daf-aa31-27d2ed1f2fbf",
                'shop_name' => "O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0mDRGqd8jGihF2zo2GN3QYDG6CZS1PVe5LZzi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P3dxLhDjrt4CFESWJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2",
                'customer_id' => "4371924d-c209-4367-8879-25d737d4c4a4",
                'customer_name' => "6z149JBRZmQUgzecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHfSBBKI1KQl4cK6HLesoN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E",
                'transaction_id' => "db078832-29ab-43c0-874e-746c5f532515",
                'private_money_id' => "48514fa1-1a7f-4228-bab5-ec56144dff31",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "payment", "transfer"],
                'transfer_types' => ["transfer", "exchange", "coupon", "payment"],
                'description' => "pqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDE"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 393,
                'per_page' => 4718,
                'shop_id' => "3774314e-50e0-4c69-aeae-846e2eb7b49f",
                'shop_name' => "BAkCQlWqd4VgtaT7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8Kxv6FPaZ8I6AxiybIUdjn2JlMSQ6V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0BEPaxu5hz8quH88gYqQC45YQseyms9QyHVorEq6zLZyg3cEPs9bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp",
                'customer_id' => "3451b91a-c281-428b-873e-279f67fb22a3",
                'customer_name' => "t8rtdj0F82hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjU",
                'transaction_id' => "4bc7c565-8cbe-4a18-9606-c421b7ab79fa",
                'private_money_id' => "f8831bdf-3631-40c7-b062-b197a7053e1e",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "cashback", "transfer", "topup"],
                'transfer_types' => ["campaign", "transfer", "exchange", "coupon", "expire", "topup"],
                'description' => "uXDOcuycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbY"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2016-03-16T19:18:15.000000+09:00",
                'page' => 8065,
                'per_page' => 8750,
                'shop_id' => "fd2db4c3-96ce-4879-a2ed-88105ec2c341",
                'shop_name' => "kaNJiOvuRswwQSmiJco3KwhjqpMqyENnnotJKNM2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luG",
                'customer_id' => "f7aafe9d-2457-4cff-bce1-e75e174f701f",
                'customer_name' => "Gy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GPfHYeeJWiJLn1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7j",
                'transaction_id' => "a060b376-4102-4fe0-9d1b-a137c864a2c5",
                'private_money_id' => "6b97bb44-977e-48df-ab77-93bbec7afed8",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["payment"],
                'description' => "k1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2025-04-10T05:49:49.000000+09:00",
                'to' => "2022-07-16T01:33:11.000000+09:00",
                'page' => 6159,
                'per_page' => 3358,
                'shop_id' => "17efba70-34e8-41eb-9b21-a2afaec6b5fa",
                'shop_name' => "iTG6p4HsLeIcNrFvlQBIX1JBgnrD1yL",
                'customer_id' => "0183e6c6-0c08-4c6c-a24c-1b80ba703613",
                'customer_name' => "5kbgs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1",
                'transaction_id' => "46221071-fb87-4aff-898e-e0d02b76b1b1",
                'private_money_id' => "1185d1fa-cac9-429a-a424-d22bfeaf383a",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "topup"],
                'transfer_types' => ["payment", "expire", "exchange", "transfer", "coupon", "cashback", "topup", "campaign"],
                'description' => "asWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Ho"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
