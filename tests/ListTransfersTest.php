<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "WNAF2iLhkB08mWoSEw4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => [],
                'description' => "bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["exchange", "topup", "cashback", "transfer"],
                'transfer_types' => ["topup", "exchange", "cashback", "expire", "campaign"],
                'description' => "n9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "payment", "topup", "cashback"],
                'transfer_types' => ["transfer", "coupon", "payment", "topup"],
                'description' => "8QSZwJ1udEIb7zDJ6KZTEk0mDRGqd8jGihF2zo2GN3QYDG6CZS1PVe5LZzi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P3dxLhDjrt4CFE"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "1114ee7c-75de-4e16-9357-a4ca804fd502",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "payment", "exchange", "cashback", "transfer", "topup"],
                'transfer_types' => ["campaign", "payment", "coupon", "cashback", "exchange", "transfer", "expire", "topup"],
                'description' => "LtrgoghS3pPHE574eeX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHfSBBKI1KQl4cK6HLesoN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "36928b52-1850-4d7f-97a8-b995dbf76d08",
                'private_money_id' => "97066609-c8d5-4c8c-b8c0-f9a028c4af63",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "transfer"],
                'transfer_types' => ["cashback", "topup", "payment", "exchange", "coupon", "expire"],
                'description' => "P20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4T"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "L9sXbFiutZ4wFjGxBLsRp",
                'transaction_id' => "7c87a917-c881-446f-b836-73f53e20a187",
                'private_money_id' => "dcf17fd8-101f-4e4c-a388-f5366550878c",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "expire", "transfer"],
                'transfer_types' => ["campaign", "payment", "expire", "exchange", "cashback", "transfer", "coupon"],
                'description' => "PaZ8I6AxiybIUdjn2JlMSQ6V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0BEPaxu5hz8quH88gYqQC45YQseyms9QyHVorEq6zLZyg3cEPs9bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBN"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "cf8fb74e-567f-46c7-9854-3cd052b6722a",
                'customer_name' => "71wcJLJGkIvTZn",
                'transaction_id' => "7141b1d2-93ce-4ba0-8ec1-1cf697f2e9b7",
                'private_money_id' => "8f51b53f-af84-429e-afad-8fe50c1eef51",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "payment"],
                'transfer_types' => ["expire", "exchange", "payment"],
                'description' => "CFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqy"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "NnnotJKNM2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GPfHYeeJWiJLn1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf",
                'customer_id' => "fd10e525-c5dc-4ab1-8e05-79c18ccfeb5b",
                'customer_name' => "7wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nA",
                'transaction_id' => "c744cfa9-6ea9-496c-a0a6-13342fd9c2e3",
                'private_money_id' => "c477ec11-99ba-4a10-8558-8c8d4c2bc984",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "topup", "cashback", "exchange", "expire"],
                'transfer_types' => ["coupon", "payment", "cashback", "campaign", "expire", "topup", "exchange"],
                'description' => "jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "cb63deea-16a4-42f5-95c3-fc290697ab9c",
                'shop_name' => "9OYkti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYs",
                'customer_id' => "3167a6a2-2de5-4121-8f1b-68f45bda2f80",
                'customer_name' => "l3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJ",
                'transaction_id' => "dade5100-e304-4c1e-8a7d-ea6e8898b98d",
                'private_money_id' => "2a1a8463-c02c-4a00-887b-f28c10b90e7f",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "expire"],
                'transfer_types' => [],
                'description' => "zId4mLJCzHpOgkhaasWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxu"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 4940,
                'shop_id' => "1e05a79c-7385-4309-80e7-04a75e82aa9c",
                'shop_name' => "FI0Qv1brn8ATMTNMMEyVApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AHk",
                'customer_id' => "64c6d336-8903-4855-8631-805584a012ea",
                'customer_name' => "Uyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsirdyb8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1Gk",
                'transaction_id' => "a56580d2-6768-420e-bce2-9980eb949b6f",
                'private_money_id' => "4185990a-f3d8-41c8-9859-c2336c22c10f",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer"],
                'transfer_types' => ["cashback", "expire", "exchange", "topup", "transfer", "campaign"],
                'description' => "KOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5BruF5QOJx8zwWTQtwhgEUQrpqVtFI20RqU84wWVej7KjR7PO79YOuc2btzI2HvKa"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 7828,
                'per_page' => 6757,
                'shop_id' => "c22690de-4a52-464b-b52f-3efab2b90c7c",
                'shop_name' => "lLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4PlPvyiodipyOhBLvJd18F7msVClYIZ6Bq4ZCm153pAwidsKM1ZphpLhv7NIoqmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6",
                'customer_id' => "2f9f34f5-4f87-4062-9593-c3d1756a0b52",
                'customer_name' => "iycmsaOa8T2aG",
                'transaction_id' => "78c00d0c-187f-485b-b01c-97506d92ddbb",
                'private_money_id' => "cfa5867d-08ae-4050-b674-42ee6bbd2726",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "payment", "transfer", "expire", "topup"],
                'transfer_types' => ["expire", "campaign"],
                'description' => "vfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2018-01-04T13:34:17.000000+09:00",
                'page' => 9125,
                'per_page' => 58,
                'shop_id' => "76591b43-9794-4d8b-807c-7fa2f592dffe",
                'shop_name' => "ltXlG6ahNcft22PrlsKWxGtQj4",
                'customer_id' => "abf1e64f-9e68-4fd6-8923-8fed147574d1",
                'customer_name' => "AfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4sIXfB3ep9eHnNy54z9YZjsWtY1WGlubcf8poH65",
                'transaction_id' => "065916e7-5f14-4a8c-9146-a2a01706821b",
                'private_money_id' => "cc7921c9-b20b-463c-8322-838df22f8e7f",
                'is_modified' => FALSE,
                'transaction_types' => [],
                'transfer_types' => ["cashback", "campaign", "coupon", "expire", "exchange", "topup", "transfer", "payment"],
                'description' => "BBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2019-01-19T04:25:02.000000+09:00",
                'to' => "2018-09-22T01:32:21.000000+09:00",
                'page' => 6757,
                'per_page' => 5826,
                'shop_id' => "a7708567-5124-4f51-ac66-02b144fb25eb",
                'shop_name' => "gylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9CQqv6T7eIQXHJd8SnpNPnO39WNWvjX",
                'customer_id' => "6228c9ec-fa48-4522-92d5-3ddeaa59f340",
                'customer_name' => "CIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnlgG8mho7qKjeP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNHBAUn0qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XI",
                'transaction_id' => "ff2d6888-bbba-458d-8e4a-ba33d2acdefb",
                'private_money_id' => "3f69575f-6d15-4b97-99e4-dcad2d27c3b9",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "expire", "cashback", "payment", "transfer"],
                'transfer_types' => ["cashback", "exchange", "coupon", "expire", "transfer", "topup", "campaign", "payment"],
                'description' => "VX8HS4JwKvfQBXbwG5FfObbKUS2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
