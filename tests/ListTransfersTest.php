<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "Ek0mDRGqd8jGihF2zo2GN3QYDG6CZS1PVe5L"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["campaign", "topup", "cashback"],
                'description' => "zi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["payment"],
                'transfer_types' => ["coupon", "payment", "cashback"],
                'description' => "4CFESWJnPCLUxGLtrgoghS3pPHE574eeX1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "cashback", "transfer"],
                'transfer_types' => ["campaign", "exchange", "payment", "coupon", "expire", "topup", "transfer"],
                'description' => "49JBRZmQUgzecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "6732aa93-ebac-406c-9c01-990663f870c9",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "transfer", "exchange", "payment"],
                'transfer_types' => ["cashback"],
                'description' => "4cK6HLesoN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "bc5813ab-de0c-4777-b972-e52efcfbe88f",
                'private_money_id' => "ef2fe8ba-7bf6-49fd-be74-307f582a830b",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer"],
                'transfer_types' => ["expire", "cashback"],
                'description' => "E2Nlz5V1CO5TSF"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "yNtopqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT7nx",
                'transaction_id' => "0f9fca39-628f-4b18-a4ee-5fc35929c428",
                'private_money_id' => "0977728e-e043-4d9e-8353-c73fa4fa5fc7",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange"],
                'transfer_types' => ["payment", "coupon", "campaign"],
                'description' => "PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8Kxv6FPaZ8I6AxiybIUdjn2JlMSQ6V8dRYSFDiggsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0BEPaxu5hz8quH88gYqQC45YQseyms9QyHVorEq6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "0dfe05ac-9e7b-44fa-ad98-1d4c01acf0a7",
                'customer_name' => "Zyg3cEPs9bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc",
                'transaction_id' => "114e8fb0-c375-41a2-99b6-c78085b74174",
                'private_money_id' => "b709518b-9d7a-4861-bdda-72331ca088f3",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer"],
                'transfer_types' => ["expire", "payment", "topup", "cashback", "transfer", "coupon"],
                'description' => "AlkaNJiOvuRswwQSm"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "Jco3KwhjqpMqyENnnotJKNM2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoCYoYma",
                'customer_id' => "59d67028-8094-47cc-b231-0cc213777c07",
                'customer_name' => "LYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GPfHYeeJWiJLn1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBf",
                'transaction_id' => "5219a392-442e-473f-8626-c1838d6c5eac",
                'private_money_id' => "bebf2731-9899-4042-9ca9-a6eb1d08fbc8",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "topup"],
                'transfer_types' => ["transfer", "payment", "cashback", "coupon", "expire", "exchange", "campaign"],
                'description' => "IRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "ecaf1409-8eb2-4c66-ba77-beb964ec2bee",
                'shop_name' => "iKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3il",
                'customer_id' => "5dea47be-18ce-4d90-8f2f-04a6a8ff59d0",
                'customer_name' => "pyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgk",
                'transaction_id' => "59a03de8-d8e1-4a9a-a188-1df34b42afbc",
                'private_money_id' => "39f8bd08-13bf-42ad-9706-f98f3b1df25e",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "topup", "exchange", "transfer", "cashback", "expire"],
                'transfer_types' => ["transfer", "campaign"],
                'description' => "62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXHGSVgVcs3OQMdHqZLlv01wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Hog0k8dxuKgCFI0Qv1brn8ATMTNMM"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 4746,
                'shop_id' => "04b2be3b-7ec5-4f79-8cd6-fa9f9fa3e284",
                'shop_name' => "ApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb",
                'customer_id' => "eb3c098d-498e-492e-afb9-a67e73338cff",
                'customer_name' => "AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgSco",
                'transaction_id' => "2d6e2ae8-741a-46c7-83a0-48297856d1f6",
                'private_money_id' => "05e2b9e6-8226-4288-87de-ef3bc4a62d24",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "cashback", "payment", "transfer", "topup"],
                'transfer_types' => ["cashback", "expire", "transfer", "campaign", "coupon", "payment", "topup"],
                'description' => "irdy"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 7267,
                'per_page' => 5945,
                'shop_id' => "331d8e4e-e2b5-4320-8eb4-5675fa4b493e",
                'shop_name' => "LXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzC",
                'customer_id' => "536a4760-6599-4a3d-9b76-3e09f77b1237",
                'customer_name' => "KUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5",
                'transaction_id' => "7392fcc2-4ff2-4aa6-b58a-65072e88a45d",
                'private_money_id' => "223e67c6-6f8c-4135-a316-0dd1ed3a88cf",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "expire", "payment"],
                'transfer_types' => ["expire", "topup", "cashback"],
                'description' => "w"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2020-01-10T15:51:04.000000+09:00",
                'page' => 4072,
                'per_page' => 1688,
                'shop_id' => "e43b3fa0-675b-4788-9fc5-63ad61e42d98",
                'shop_name' => "UQr",
                'customer_id' => "46b5b8af-342d-48f0-9da3-39db84adb392",
                'customer_name' => "qVtFI20RqU84wWVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzOlLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4P",
                'transaction_id' => "7e22bd27-81ec-413a-90f6-97a3f91efc79",
                'private_money_id' => "32d821e9-d395-4bff-af3f-d5641a164869",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange"],
                'transfer_types' => ["expire", "coupon", "exchange", "topup", "cashback", "campaign", "payment"],
                'description' => "d18"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2022-02-11T08:50:14.000000+09:00",
                'to' => "2022-02-12T05:37:59.000000+09:00",
                'page' => 8820,
                'per_page' => 7767,
                'shop_id' => "7fb84543-b9ec-4e59-9149-b55a4a7f4db6",
                'shop_name' => "Bq4ZCm153pAwidsKM1",
                'customer_id' => "e5beb83a-f718-45be-bba6-b70bfefea7da",
                'customer_name' => "phpLhv7NIoqmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo10",
                'transaction_id' => "426c949c-b387-4130-8da4-8206ad242ae8",
                'private_money_id' => "1bafb37f-67b7-4097-8834-b7bcb19570c2",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "topup", "payment", "exchange", "expire", "cashback"],
                'transfer_types' => ["transfer"],
                'description' => "CEki4ZW2q7YUbIlt759X"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
