<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "FFAzO6jhgKnGEEq30zJvCU"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["coupon", "topup", "expire", "payment", "transfer", "campaign", "exchange", "cashback"],
                'description' => "Z1CiEaSkTRRPOzvtuehWjzuS9UuXLw1tyeIlRiHEWAEMKd8AncIqDQCCpFY0jVovIIua4Y1iEGhBzBsL7urWbQPsC2ejpxxdTlJ4yYhLiY5xdYrlV6sdd4GtGnSZWppuVGKp9N4EmJGMpqEMRr2Im9AtF2EFuM8jfrFi7NzOLvna18jaIy4wRx9VFr8egDOs"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["expire", "topup", "cashback", "payment", "transfer", "exchange"],
                'transfer_types' => ["campaign", "payment", "expire", "transfer"],
                'description' => "B8gbpQLiGbtUjCY0fUTFr00wv468XDXNHEG6rsQQpPgAerupWfCSPNRA1UvDod4sNnOUZ1lI7VhZ8ZYmjsi3ERCBbaaaXdhEHCVj5kmXWa3scHyPzs9lBU4izJysEr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "exchange", "topup", "payment", "cashback", "transfer"],
                'transfer_types' => ["campaign", "expire"],
                'description' => "aICPt8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "b5f780b9-e564-4f39-8b6b-45183fcd3ddd",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "transfer", "expire"],
                'transfer_types' => ["exchange", "topup", "campaign", "coupon", "cashback"],
                'description' => "ymp67ZT4R9DmvBLZLQHKHzYKatRIv17mpggjCY1mYt4gG0vu62m"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "2e1074ea-be60-4e95-922d-c58a335250b2",
                'private_money_id' => "affd0432-607a-4982-8562-71b7a3a89d49",
                'is_modified' => TRUE,
                'transaction_types' => ["expire"],
                'transfer_types' => ["payment", "exchange"],
                'description' => "KjsW9deA1Y4erxKCSNnarmK7d9AdGJuLmiunzuIkt0mBfVx6fuZpGQ7L4K3nuHg2EapbyeV1rEB5m7bek3JDdsRCkcuvcYOIUsFMc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "of5xDTACUzFyaVsoGzHLV6SLwPp6NugpESZFLW70HOotgXK9hab0",
                'transaction_id' => "eec5bd6e-5aa7-4146-a938-b13405e479b8",
                'private_money_id' => "aa3b78b2-e507-41ef-82a1-adc2afb1be8a",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "payment", "expire", "exchange", "transfer"],
                'transfer_types' => ["payment"],
                'description' => "p7auxMJipJFa6MqSh8dj0PICe"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "3f3e5767-d622-4572-b865-f7f944c08053",
                'customer_name' => "zolC",
                'transaction_id' => "d98cea25-8aab-425a-9982-84bd4185bc18",
                'private_money_id' => "0cd66909-2c95-4469-9cc6-e7071de546c4",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "transfer", "expire", "payment"],
                'transfer_types' => ["expire", "cashback", "transfer"],
                'description' => "aN4WiHzKlXLVcObn2aHIXrQKf3L2l7MFDxeqLhGp848CuWtxBMkOLu433ypQiRxP9sGLZdGJvGUyRaa7sgpHV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "HWAC3xN4g2m8WCfHSekny8sn2VTr8cXIZYOaMknj5uFg0IUnK3nMDI5BUKoQqu0xmZznj58cjkUuEsETjCMoFWnGMXwF4uFXUAccOUtS4ghXlJDxquVBpwdgVgC25tuuoY1XidggGeOPHFd6ew3JevpGRPaOP48aYQS1A",
                'customer_id' => "8d4a690c-12ce-4513-a4b6-6bb59cf98b73",
                'customer_name' => "yG7tDaLYavjRmgcaVX9gN81hhhUs9MQychxda62q8WfrJRRtWhVTu9YgWUkuHUHdzqyM6NKh20UEpPvUBxMusj1ZO9cmIiR0hDUUmVbAz2EmZukHAa3I1VmV173UOFj1UHSB2",
                'transaction_id' => "5d7d8309-786d-4fb3-bd59-c2fa455300ee",
                'private_money_id' => "93abda01-3690-4011-b45e-cfdbb203a324",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "payment", "expire", "cashback", "transfer"],
                'transfer_types' => ["campaign", "exchange", "cashback", "coupon", "payment", "expire"],
                'description' => "ofDbc5VProu8v20LjYT12PCJ1V00ScCnKSD00YHOYFBg6fJwURvRTCcSKdwR8Aqvah0HZyfPCOiBDu5FdnQDgtKkb14cpDbkeMUevAY43P5Ef00SJ33RMEm8W17FLjkSSD5Tt8EeR0g1PnFKdgb7L8XGR3DiTJRLvrIz1qLpJlW4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "e3e7626a-9f0b-4e6c-b19b-3a72367e64d2",
                'shop_name' => "1QaWFnmt2DzH7vj7rxNpQ7LM5BgoepdqhuTCU3GmhyLn6oLRohCqLJEayjj1y8lN8KNcGgXk9igPNXgIrQIsWBdrrceLlU6EA",
                'customer_id' => "41171842-8518-406b-9e38-d7937b6ed0dc",
                'customer_name' => "g4LgHyi3hRvh4lJtDEYEPLmjVGEWeZCVR9DRVzM",
                'transaction_id' => "49f6fd36-c721-4b26-929f-3b2b185ac4e7",
                'private_money_id' => "24976f67-b686-4019-adea-9c550cc52d73",
                'is_modified' => TRUE,
                'transaction_types' => ["expire"],
                'transfer_types' => ["topup", "coupon", "exchange", "cashback", "transfer", "payment", "expire", "campaign"],
                'description' => "pgZ7hQTtUHWebdg6UDG3lqs5S4hhkdot79qK8GgcuIzap"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 4436,
                'shop_id' => "de2571ad-0790-4318-8c21-b4732703f7f4",
                'shop_name' => "6f54yJkJrfS9ZM5Yye3VIE4jIps88PYnhQ5UywPVnTqprNO4z2fxedoBlh7tSd24xsQgH55JWs7sHkpwJC7qeVcFU6H5Fl1tr51r5DnNzMrv9xzGgw3DKxSObd3hviEIN8fIb",
                'customer_id' => "2d9f711b-2c8f-4a78-8364-34d4d2a2c0f4",
                'customer_name' => "a3BpnJCm7Lb34av7jETgnxxnzhNgGlytzthsjwOSXs6hKJbtBOyjMB2obAt",
                'transaction_id' => "b86bdb89-2df0-4dfd-b4cc-33b4093a7525",
                'private_money_id' => "d14e5dfe-5ccf-4a71-96f8-6e3ed4b9860e",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "exchange", "transfer", "payment"],
                'transfer_types' => ["expire", "coupon", "transfer", "cashback", "exchange", "topup", "campaign"],
                'description' => "YiTeeoINKP6sK7XlznfETw7tMaJt3eoXU8akDoDXqEq"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 9815,
                'per_page' => 7593,
                'shop_id' => "bb049634-6e96-49e4-bf93-da6ade9fef6c",
                'shop_name' => "1UOeugVS5hGtZ9lAk5eG2UYbE17uTIfVklt6jE2G5Oom9IwkqnB2MIN6cGCpKZNrtytKRGYLaNsaCfrqAUqJVUFF0YXlcEmWYRTDOjuIjFan3Z00hGinnk00PL5rGms8naIG0VDMSy0k0Ek7rf7pn1KMunK7HmzauRghdfzeRyp0AnP0xfchn3lk2QgRp8FZsky95JYJbDfUCE6",
                'customer_id' => "5e352a52-ba0a-462c-9c6d-def1e52bd581",
                'customer_name' => "fcqcRKdaQNLBFUL2L2jApHpXWpxNPYdjmhXlHwbknLmByeohM2iBckZE9ssL53RLJ",
                'transaction_id' => "41ac68b2-afda-4f56-9ad9-47bfa30a171b",
                'private_money_id' => "fe892541-33b6-4ef9-9b84-187be21c276d",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "cashback", "topup"],
                'transfer_types' => ["expire"],
                'description' => "tbQWebywFXYpEZvCptnreuid2YxfwRgu3NTtDg40ldkVt61SQuwYhsd7kANvgH4SYU38Z3BgY63SC4sgqXlTcH5NTHeWH84GhmowHgyIIVOmdjcFI6z9bKgfj5hxWAQyJ3C"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2021-08-18T12:28:36.000000+09:00",
                'page' => 6227,
                'per_page' => 997,
                'shop_id' => "1481c13f-985f-40ff-8487-647cdd9655d8",
                'shop_name' => "zGkv11TNHV766iESeKhbQy0W7JUyATFh6PaLJVuVaMSrWsYD4pxITnSInci8BLqnuBvAEPwYUB3bfynx1MFPXEmM2emAF5ppEnvlCB9cYS",
                'customer_id' => "9f39be80-8abb-4fec-a511-263a3acacdc9",
                'customer_name' => "Zj2agcUHYCr78r9SNP5qvUZw46KFnK8InBc9zrWAlFJKhmVjonsAN22Rn3xFD822earAeX1prewwYA8YwTHsXZYfYypfHa81HC1lVkUSjEgIhqBo8sqriLJx3WDqopdiB16zXyw9oZBCUZJ2mOSCT65005pvQHBpcxdvGL12LlGA7YTetFoACJanmFayibFd2LQ4ry3FhmVLDD6zNFiGSh7jAvsGZVJw7zhjdQXuhoXtFt9dWnH3UbF1SXaSKNph",
                'transaction_id' => "d1dd526b-3943-42e3-8120-d493604fe0c9",
                'private_money_id' => "27374e68-b200-436a-a1ae-e6209ce8013a",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "topup", "expire", "payment", "transfer", "exchange"],
                'transfer_types' => ["transfer"],
                'description' => "lPrrLTzNMlJh6icwnKXikv335youhkkCpdkrCpQBvjqqWGlnZ2TLIGQxkfg5yJS2nFyq0RAAAHRqifjaEXpGpPvD8Emkw2W6lywJgzA3NhaSuh7GCaNIS2XEdmenLslagaOkU9Gw2UCX6IlYv6MWtSqreDQJbKggA"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2023-01-17T17:16:06.000000+09:00",
                'to' => "2021-11-29T16:48:44.000000+09:00",
                'page' => 3512,
                'per_page' => 5670,
                'shop_id' => "4855c6a9-107b-4ecc-bce4-1e21469e03f6",
                'shop_name' => "oeo9c6TxiHLdaDPda1BFEFdKV73SYUTJGjWNZh1H74kfC2buOJQ5vOYNfOCLdvdTe2OnoUopQdEUz7iFv3jy2l0OhqYd270SBJ6wftnBiKFi6bDuCJ7NkyGYBm7iSJdaKHTgB8zrZpfU7vrWqvjF2EsaA5qpGevRdYTYItempbzKMDh6FYN11cYIdzYq8QbVNiw5mYfpSVVJKlWXz6vhJVtcDt6sMaeLa9iPGbDwaRbbJByWCh",
                'customer_id' => "1aa4c914-a853-4fbc-a4a6-19da99f08ffb",
                'customer_name' => "GRqf77CJmtvaDTxIMb3p0Ap6Dpw0EGoSEEVqDw1Of56dIUUoeqQNIVeOvNfdgH9IJ5cr1p8zwbMhhbeSwiXh1EQIINiSVUApZBOb29L1giyzH9fckwOcXIr",
                'transaction_id' => "9c2b7a46-2a39-48c2-9bce-35a766da9461",
                'private_money_id' => "0ac73465-b24e-4a33-a024-f78c9c3a5e3d",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "payment", "exchange", "transfer", "cashback"],
                'transfer_types' => ["cashback", "campaign", "topup", "transfer", "coupon"],
                'description' => "PzWJKrVWGdh9CZFruiz1o1LhNANfrDufKJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
