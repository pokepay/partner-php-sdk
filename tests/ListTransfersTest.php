<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "G6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRswwQSmiJco3KwhjqpMqyENnnotJKNM2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["campaign", "transfer", "coupon", "cashback", "payment"],
                'description' => "z14f9BIpTXI2luGWaGy1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd2VmnwZ1YQAtf2GPfHYeeJWiJLn1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["cashback", "transfer", "expire", "topup"],
                'transfer_types' => ["payment", "campaign", "exchange", "topup", "expire", "coupon", "cashback", "transfer"],
                'description' => "I5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "transfer", "payment", "topup"],
                'transfer_types' => ["topup", "payment", "cashback"],
                'description' => "hZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8QhcNElbkx4K7ompotaJBLyz8KN17fLxPU1GvU5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "756e8b6f-d54a-4a6e-8836-7b9aa432b39e",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "payment"],
                'transfer_types' => ["expire", "topup", "exchange", "coupon", "cashback", "payment", "campaign", "transfer"],
                'description' => "mDSuxOmphkziTG6p4H"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "6c924988-2fac-4d73-be4c-ba65f1e586c9",
                'private_money_id' => "f563105d-0b63-433c-8e19-9089b8670c72",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "cashback"],
                'transfer_types' => ["exchange", "expire"],
                'description' => "JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9Yu"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "KsTGECVvJsAnqjel2la3rWWdK2ybDtXJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8ELqJwRA62Ghe0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXH",
                'transaction_id' => "fcbcc1a5-4a92-4a8d-870a-23d365c8b97d",
                'private_money_id' => "1b07a123-ec2d-4656-9767-ecd67903e927",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "expire", "payment", "cashback", "transfer"],
                'transfer_types' => ["topup", "exchange", "coupon", "expire", "cashback", "campaign", "payment"],
                'description' => "1wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Ho"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "78bb4967-bd05-4214-a6b0-e86b4f1fab38",
                'customer_name' => "xuKgCFI0Qv1brn8ATMTNMMEyVApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8",
                'transaction_id' => "9e59eb11-cf66-4d10-9b6d-c40f4e141921",
                'private_money_id' => "a7d8b2b3-88bd-41e0-8651-e9feedc2402f",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "expire", "cashback", "exchange"],
                'transfer_types' => ["expire", "exchange", "transfer", "payment", "topup"],
                'description' => "bGEOQG1PZp7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0fsird"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "b8N5N4uLXeppDXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe",
                'customer_id' => "293c3c2c-1733-429b-b035-fcc211734ff2",
                'customer_name' => "uF5QOJx8zwWTQtwhgEUQrpqVtFI20RqU84wWVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzOlLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4PlPvyiodipyOhBLv",
                'transaction_id' => "a76fc7ae-3bca-4b02-8064-e3b10a1d36b8",
                'private_money_id' => "d3fa4246-66b7-4ced-a773-de567fb84543",
                'is_modified' => TRUE,
                'transaction_types' => ["payment", "transfer"],
                'transfer_types' => ["exchange", "topup", "cashback", "campaign"],
                'description' => "3pAwidsKM1ZphpLhv7NIoqmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ1h8km3mkAPAZ0UMnnwlo100h7"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "96063097-7148-4834-bcc2-2b542745e7b2",
                'shop_name' => "dLeJZDTCEki4ZW2q7YUbIlt759XkPd0Pd9Lm5F7XmpoqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oitBAmKCKeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4sIXfB3ep9eH",
                'customer_id' => "98d160ee-3bce-4079-9cb5-1a0601a109b4",
                'customer_name' => "9YZjsWtY1WGlubcf8poH65gFI1eD4xOb3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9CQqv6T7eIQXHJd8SnpNPnO39WNWvjXlHUhCIHkbLQ7KL6y3Sdoxdn1tpYM1z5XMrmRY7bQCW9sPYWAKIaPAnl",
                'transaction_id' => "0834f167-d21f-4e27-8704-a0188cb3bb01",
                'private_money_id' => "e5797c89-913d-4d0e-a2b8-40a6168f505d",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "payment", "exchange", "expire", "transfer", "cashback"],
                'transfer_types' => ["exchange", "topup", "coupon", "cashback"],
                'description' => "eP1Vs1el3tVDmtz0qcHqLIsXtLIzc5kRp3WnRoU2x23XKfAMBShU6I6qbRRo0KsKQjbIFpDLYbMMvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq50fssjoNH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 9411,
                'shop_id' => "e38a02c1-943f-4a12-956e-343d0dab3e81",
                'shop_name' => "qZzCUWIZlu3nVCPUHg3HpQOkzK7LlGZ5l2cQL9XINJ3Yd9vs5R5vReMbbVX8HS4JwKvfQBXbwG5FfObbKUS2wO8JUS6TcMNwfudd0OcDN26kEZNJtfvLzUTMMVxGv3INa5f54YI1Ph3OUBAsVaG6TxK3slQw2Vv1qEnKcaw1pz9vX015U",
                'customer_id' => "4ee9c33e-9bc4-4039-b171-0fe0c2f5e900",
                'customer_name' => "TdX",
                'transaction_id' => "b90d6aa9-883e-4480-84ee-d9ebc868e291",
                'private_money_id' => "d5469691-3f11-44c0-8c1e-e05bc3c7b948",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "payment", "exchange", "transfer", "topup"],
                'transfer_types' => ["payment", "cashback", "coupon", "transfer", "expire", "campaign", "topup", "exchange"],
                'description' => "28vDsYr2EOFyjAKpCpIzZXmsoGSwaJTi7OUK0vKQ13gfO1QSAIUcA7AjSSLuHYzu2Ra1BMEr62gevnEoyfpAANnkoel9aDgdNSfmE5De5bTvMyHpd2S0WD3FaqRKAgoYEGpNOGzwWmNqL0QHxylFWlu94S"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 3297,
                'per_page' => 441,
                'shop_id' => "955006fc-2f46-4207-9653-5e4434697ccd",
                'shop_name' => "5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5r",
                'customer_id' => "7eb27e58-03c0-4fb0-9b72-e8561aec20a1",
                'customer_name' => "mpqdlLHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh082rSUmgTJgltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDf",
                'transaction_id' => "1f3e21d5-f316-4cf4-807d-2fb459bdb925",
                'private_money_id' => "982f1d5e-d2d9-4167-8979-01da54ab9d00",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "payment", "expire", "topup", "transfer"],
                'transfer_types' => ["exchange", "payment", "expire", "campaign"],
                'description' => "ShoExxXDz"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2022-04-04T13:09:11.000000Z",
                'page' => 622,
                'per_page' => 5213,
                'shop_id' => "84ad7475-84bd-4aaa-9f30-bd4020d89d8a",
                'shop_name' => "mtxroKVUk7sDu4lw8ZxL5ooBCUmbexHlOYPdRDRXfcFEKebPAHiatKRmL7K8IMJIBW1vB1RC8WQ75Zq",
                'customer_id' => "b20ca7b2-a03e-49c3-90a5-b390f50ba945",
                'customer_name' => "ph5LyiHrKKZ",
                'transaction_id' => "3fedc792-2f3a-46c8-8090-5459edb3ce95",
                'private_money_id' => "46ffd7a7-b5e5-4add-acc1-a3090d5b7b9d",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "topup", "transfer", "payment"],
                'transfer_types' => ["exchange", "coupon", "payment"],
                'description' => "fNhFwjSSUkqouGV2ULftf3KLiOm0u6Od"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2021-06-05T17:48:04.000000Z",
                'to' => "2020-12-26T02:42:27.000000Z",
                'page' => 218,
                'per_page' => 6793,
                'shop_id' => "66729419-18d7-478c-8d83-149b011f45e1",
                'shop_name' => "6BMdHbor9Bi8VjYj",
                'customer_id' => "ed0ac265-39c1-40c6-9eb8-7fe0ee0b134e",
                'customer_name' => "8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFvcvTYHWhMSc2JtDSCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJYHHOr63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU",
                'transaction_id' => "d59e9431-15a1-4f54-944e-4e02a1dc8d30",
                'private_money_id' => "d8651879-e2d8-4d24-b687-def752387178",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback"],
                'transfer_types' => ["expire", "payment", "topup"],
                'description' => "klncfGkEwHBWOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ34GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7gIcLSudPl4JIrQmLFWJxcGB9NLriuIsMTYyCUoOEa9YZaUNPTMagDSPeHLGCGYvgqbqCId"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
