<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["topup", "transfer", "payment", "exchange"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => [],
                'transfer_types' => ["transfer", "exchange", "payment", "topup"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["transfer", "topup", "payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "368f54fd-1e96-4c50-ba0d-a12f5de9af23",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer"],
                'transfer_types' => ["payment", "topup", "transfer", "exchange"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "8241fcb6-d353-4140-8de7-58b4bf444d8d",
                'private_money_id' => "c9a7fffa-67cf-482d-a73c-797474cfbc82",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["topup"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZepHVlU5UCBk1m",
                'transaction_id' => "08e34d43-0f3c-4a32-b611-47b09b9a65fe",
                'private_money_id' => "58ec801c-6b00-48d3-a8da-6e491e0e81d0",
                'is_modified' => TRUE,
                'transaction_types' => ["payment", "transfer", "exchange", "topup"],
                'transfer_types' => []
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "50b1b6bd-4942-42c5-b716-6b0691f05a4f",
                'customer_name' => "UnBV1wl8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO",
                'transaction_id' => "37d69ba8-d736-4ebf-a975-2d8af987bb0c",
                'private_money_id' => "ac618d34-601c-4499-aff8-e980399e6a28",
                'is_modified' => TRUE,
                'transaction_types' => ["topup"],
                'transfer_types' => ["topup", "payment"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "FskSUixLpvflY8MFYZJvlfPZ9XRs2DjUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUSx27eVHz2wOx9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04",
                'customer_id' => "67525409-8bc9-4be6-b305-5b6bb03698fa",
                'customer_name' => "Rh2KXDkJqy1UyPaGHVkyMSdmemZcovbEUc9TiM3DTSa7pJlo8JS6mIVfCl8O6XTpGUPEJOaNnRanlNyuKHWuXq7zEzVgAAIhzrVmMQ7zQf4j1Xlnx61iQEXBdwXQXBx9CjvSgZke3VuPIIBeUSxLQqoj9SXP9EgDJcoagTJNb42JvVKNsj3zA7Dw0uibv6O0nFaLFwVLIZnC6rDyYuuG1XnlSIVaCTCoBzc",
                'transaction_id' => "e076f30d-b8b3-4883-bcd0-5f6f63474c6c",
                'private_money_id' => "bf32907e-7aa9-44fe-b325-4a6432d4c003",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "topup"],
                'transfer_types' => ["exchange", "payment", "transfer", "topup"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "325b0ce2-36fe-4113-b054-736b9d27f651",
                'shop_name' => "9CA458OFUiC0xNjD1g6ausYOsWjmgSVes0LvRpIOKLgAa2m76DTKceEBbKe1QbzWrTYvHigdBYvKVDdotVdsHD1HarFGRZ0Q28LywVGUz2sIRxtNbAY",
                'customer_id' => "fb3046e0-b79d-4340-8dfa-a1c80d5219fc",
                'customer_name' => "ePlwRHJLPebYCA3qabphyjXP3xuhhy9uGRsNNOdzmZ5nbPQzPRirLmp7HiQajpl09",
                'transaction_id' => "9b146e26-ef95-42a7-a4b6-e5d1137f740c",
                'private_money_id' => "10abaa49-b0a4-4669-88a9-8161a01a7d00",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "transfer", "payment"],
                'transfer_types' => ["payment", "topup"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 1324,
                'shop_id' => "180f6db0-c1c7-4608-8793-483d48bbb718",
                'shop_name' => "i4ivBi3eJhDgAiQ5RhXwEfmyakwCi2K41MKrJ8u3JtJHw13BJLqURa9CDG8z1r52NxmvSo3IMgKOG9RqgqLtsxscDVj4qDxwlIsjYdDsgNzWfMVYN8tFORiCKaN1GSBkTmsnETZgON7wI25XD4LDGgtc1eHQx1a38fcy9G2ru7CIugZBUKc64A8KJDFHDE0sPhVLSmxr0FU3DnW6K",
                'customer_id' => "5608c25b-1d92-410e-99f1-9ff3a5830e98",
                'customer_name' => "DEeelMkJvsg1mQveiZolVhKjCQVZwzstz19XaUt7HUg2vBtQ3icUlEOMImvGy37aG3VpRlqKVbLVJ59qzi8HFxZtC5ypm8TU2Y6m10oazOnSDRVBADkHpYoJtK8deELoxPb8vCqW8ZrqfNGAkbzmAIScfq8JbwsU",
                'transaction_id' => "e6e1826a-238e-4f9f-80c6-601ffb2032e8",
                'private_money_id' => "931b2c72-db3a-4f2d-b329-864e46986df7",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange"],
                'transfer_types' => ["payment", "transfer", "exchange"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 9106,
                'per_page' => 2791,
                'shop_id' => "e060bcf5-9cca-435b-a9a5-c36f4da811ae",
                'shop_name' => "nAr0O5BazmKqHUlvI3TLRDU2wR06BrqE4xR4GA8B6QEvmEtQTqfIDfhF08aWAgYKgMRg4eijui0x4AzukqXii06wz9NdLnaFp0d8NnYZXWwwPUfmYGEVrOM4dkj0diMGxwkBMFBNKhTrrGkGVnz7dW1L5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYL",
                'customer_id' => "7706d498-d34c-4885-8e4a-db2aaa2caf46",
                'customer_name' => "bbjnOxn1Ii4QyBabDj1sJ7k6dP6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebv",
                'transaction_id' => "8a480fc1-4577-4907-9d6a-c87cf26f7afa",
                'private_money_id' => "a387e891-8847-4c38-9559-5e87acab0e1d",
                'is_modified' => TRUE,
                'transaction_types' => ["exchange", "transfer", "payment"],
                'transfer_types' => ["topup", "payment", "exchange"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2019-11-11T08:12:33.000000+09:00",
                'page' => 1333,
                'per_page' => 7237,
                'shop_id' => "8795a258-99ce-4774-aa73-f5e7e833cbb9",
                'shop_name' => "PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runis",
                'customer_id' => "8c96adbc-8bae-4d9f-8c56-901c04e72a3f",
                'customer_name' => "A8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkw",
                'transaction_id' => "faa5b900-9944-428f-9a2a-b745b058a667",
                'private_money_id' => "de760078-73fb-4ab5-8577-64070047582e",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "transfer"],
                'transfer_types' => ["exchange"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2022-04-19T07:02:50.000000+09:00",
                'to' => "2024-12-17T08:41:43.000000+09:00",
                'page' => 9221,
                'per_page' => 2642,
                'shop_id' => "a11be964-42a4-4ea5-9a9f-225fd2da3f6f",
                'shop_name' => "RUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrg",
                'customer_id' => "4861db91-7698-4d9d-a8b9-d21c6724cbb8",
                'customer_name' => "RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwD",
                'transaction_id' => "8a61d083-aedd-4920-92e2-9dc648949c5e",
                'private_money_id' => "29ab12ff-fe4a-4c78-9ab9-f6be43528871",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "transfer", "topup"],
                'transfer_types' => ["exchange", "payment", "transfer", "topup"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
