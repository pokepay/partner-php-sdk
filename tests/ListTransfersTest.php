<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "UXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQuG198o4cE8ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt92YjeNGkeRyZCxDwnyuzPdWfYw48"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["exchange", "coupon", "cashback", "topup", "transfer", "payment"],
                'description' => "Zh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy2qiGNeSDJueWNAF2iLhkB08"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["expire", "payment", "exchange"],
                'transfer_types' => ["campaign", "expire", "cashback", "payment", "transfer", "topup"],
                'description' => "nz5e3bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUio"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "exchange", "topup"],
                'transfer_types' => ["topup", "transfer", "expire", "exchange", "coupon"],
                'description' => "Q77U04aLs4hmy4C28WnCRfz2le"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "4ae879fd-7827-4cef-8f23-4429c76517f6",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "cashback"],
                'transfer_types' => ["expire", "topup", "payment", "cashback", "campaign", "exchange", "transfer", "coupon"],
                'description' => "W2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0mDRGqd8jGihF2zo2GN3QYDG6CZS1PVe5LZzi2NmWBluHrzflOytNd3RO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "e6a3bc01-c32a-4e6d-bbc8-7239f5ac24ee",
                'private_money_id' => "4aff824d-cfbc-4fab-a62c-657f5182f51c",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "payment", "transfer"],
                'transfer_types' => ["cashback", "topup", "exchange", "coupon", "expire", "campaign", "payment", "transfer"],
                'description' => "Djrt4CFESWJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "BBKI1KQl4cK6HLesoN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6",
                'transaction_id' => "42566d72-f23d-4b0d-9de4-da7ad7a5de29",
                'private_money_id' => "b2728fda-b7c0-4b3a-8e36-fbff20b64fab",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "topup", "exchange", "expire", "cashback", "transfer"],
                'transfer_types' => ["cashback"],
                'description' => "SiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "2ea841ea-23bb-416e-843a-854569384188",
                'customer_name' => "NinmBAkCQlWqd4VgtaT7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpox6uXLc6he8Kxv6FPaZ8I6AxiybIUdj",
                'transaction_id' => "cc647fdf-b0ee-4732-9f26-0c4a0e1903db",
                'private_money_id' => "e3804abc-97ec-475b-8dd3-f714e7c471bc",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "payment", "transfer"],
                'transfer_types' => ["expire", "transfer", "exchange", "coupon"],
                'description' => "gsas4Nm4Pbqn0MLycuAIyd8Tc91YrDumA0BEPaxu5hz8quH88gYqQC45YQseyms9QyHVorEq6zLZyg3cEPs9bN7e1DJRmWCvXV5f7NFx"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "RTTWOKh4c",
                'customer_id' => "67e0bba4-adf0-491a-818b-2107cf33c43e",
                'customer_name' => "2t8rtdj0F82hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjHKqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOvuRs",
                'transaction_id' => "ac30cf0d-4cf7-4e09-9df7-7cd1882551d3",
                'private_money_id' => "3507deed-a169-4702-95ca-666327fb4fef",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "topup"],
                'transfer_types' => ["exchange", "coupon", "expire", "payment", "transfer"],
                'description' => "nnotJKNM2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGW"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "5b162cff-f1fc-40e1-9e1f-46bb50302847",
                'shop_name' => "y1CoCYoYmaLr1BLYdgsrsB7nf3z7z76OYqLZhd",
                'customer_id' => "eda231ab-be32-4405-965d-606dc528576e",
                'customer_name' => "Z1YQAtf2GPfHYeeJWiJLn1TOWVNqKCYgaN6maSZWJn127yVjYZzSkjksojB4PnV9sBfF1BkHf1A87wLQ9bOIRS2WYI5ck8HRSP5FHw4UX4tGWi4N1WpwhPzDe8V1DYdcKn6nAl4cEX71br7jv7EDkwXN76HyKk1SGbd2fzw9nBiKXYeHN7C4dOhcXyEVzhZku2OJwUM0ktk1yse4CdNhZgpKbkXWC5tLFNUhqVPCyC44juCu9OYkti8Q",
                'transaction_id' => "579614a5-1d98-4985-a820-f763a62c38bc",
                'private_money_id' => "2b5989ce-ef25-4ddd-8504-696cad55579b",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["cashback", "campaign", "payment", "coupon"],
                'description' => "BLyz8KN17fLxPU1GvU5oJnH6hOfBgmDSuxOmphkziTG6p4HsLeIcNrFvlQBIX1JBgnrD1yLFlL5kbgs6xUgxf5sOofYseOtl3ilNOPpyIVjtUkLTSkOKux630Id9YuKsTGECVvJsAnqjel2la3rWWdK"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 923,
                'shop_id' => "28d237b2-45f9-4610-a299-94c4f52b980c",
                'shop_name' => "XJiikZzBktm983ksDdKfbC96DBMvuC0QTfx8l2ZZBjyQqeO19KhFrkxiVRAQ6FFjz1wnjIRjO9MofqJJncHBCR1qP1zId4mLJCzHpOgkhaasWI8ELqJwR",
                'customer_id' => "1fe0bf9f-b241-48a9-9ab6-54b208fafadf",
                'customer_name' => "he0ne6pcNR1V7JprfFD47gNL9WM6cSeojzOZZrLxO3x6r1ViuOnspa8l8OxqMpLrB8ZQmhXH",
                'transaction_id' => "fcbcc1a5-4a92-4a8d-870a-23d365c8b97d",
                'private_money_id' => "1b07a123-ec2d-4656-9767-ecd67903e927",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "expire", "payment", "cashback"],
                'transfer_types' => ["topup", "exchange", "coupon", "expire", "cashback", "campaign"],
                'description' => "1wGqOn2jIsFsWbo7bpQq9anT6PszkN335U1t4DYsuiE88p3Ho"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 2408,
                'per_page' => 8725,
                'shop_id' => "641effa6-09b0-486b-b864-f9f8d48ffd20",
                'shop_name' => "KgCFI0Qv1brn8ATMTNMMEyVApkaDeYuOtBoCZgc4gwc8RSE7B5wsqfAkho5yO5EQGpb9AHk6UF1UjWUyw97H5Wi0UlM5hWRopq8fm3QjwrUJDS6QIEgbGE",
                'customer_id' => "45b52ea1-b74f-4451-a047-3bb16028cd50",
                'customer_name' => "p7fjd91zgh1RHHtL55R7YEprCJ0U4QnLZWmGvTqLQwaZ9vOnv67spoRoPKUgWvYVa3Gv9xbfzvgScohGvfvszFZKZ0f",
                'transaction_id' => "109650f3-b303-4c18-ab69-163ae9739072",
                'private_money_id' => "3cf98227-1902-4a93-84a9-956470d55b79",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "payment", "cashback", "topup", "exchange", "expire"],
                'transfer_types' => [],
                'description' => "DXZ9aq2pYugtiiL7qWoYElTKmZkEzCv7OKUa8NeEnF41oUMWRj1sxtSyQgT1GkRhboXHY39x3Xs6KbKOjUQYLsphxNcJXceDU70KRGU02ETtMe3p5BruF5QOJx8zwWTQtwhgEUQrpqVtFI20"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2021-01-31T11:14:28.000000+09:00",
                'page' => 8339,
                'per_page' => 546,
                'shop_id' => "dd38d923-7034-4477-9f0f-3bff8d315fa5",
                'shop_name' => "WVej7KjR7PO79YOuc2btzI2HvKaIy1dRKuzOlLMmdBSZr220xtZpZdQ9ssluYJHAlylPpV6xWxt7f2oLFlgp2lLhVbHghg4lZSVxXqYiDQPFv2xIXmI4PlPvyiodipyOhBLvJd18F7msVClYIZ6Bq4ZCm153pAwidsKM1ZphpLhv7",
                'customer_id' => "d67f33ce-9f49-4f6f-ac14-f284004ebc8f",
                'customer_name' => "qmlJpzKOYIsRtFF9xx8GHcZXN3Xa70o7nFXURkjCcagg1x0DCy4shXKR7nTWCyIt3Gr6ubUQRiycmsaOa8T2aG0PP6tnqHnuoUILOizvfJbTrh0kbVP56HQVtzlq6MKoBezSZGJZ",
                'transaction_id' => "76027831-dde8-4f8b-b8de-ae6b545404ed",
                'private_money_id' => "b3819e33-f76d-495b-9d6b-1241bcd57ad0",
                'is_modified' => TRUE,
                'transaction_types' => [],
                'transfer_types' => ["campaign", "cashback", "payment", "coupon", "topup", "expire", "transfer"],
                'description' => "nnwlo100h7H4BT2IdLeJZDTCEki4ZW2q7YUbIlt759XkPd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2023-11-03T16:49:25.000000+09:00",
                'to' => "2016-09-20T10:11:38.000000+09:00",
                'page' => 9165,
                'per_page' => 2926,
                'shop_id' => "e5d5fc87-d235-4186-8dc6-a2b71f313dd8",
                'shop_name' => "poqfPmIraGVhsLJiqbQ3MQR9CltXlG6ahNcft22PrlsKWxGtQj4OhVmQAfFvVtR4Fr5En7ms3KrOq6LmEP7tafjyhKgvwh227cUJMuQ1t83oit",
                'customer_id' => "d31bf3c2-4c41-486d-87cb-953a077e788a",
                'customer_name' => "KeNp7Z6KeHafoOKYuUs7zf9dIsiva1vYlz4sIXfB3ep9eHnNy54z9YZjsWtY1WGlubcf",
                'transaction_id' => "bd08085d-e3b8-4bf0-afc8-4a36b5efe435",
                'private_money_id' => "065916e7-5f14-4a8c-9146-a2a01706821b",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange"],
                'transfer_types' => ["cashback", "topup", "payment", "campaign"],
                'description' => "b3KkBBLymzX1iKABzsalQh9et3sJPwGPZVdfeHb6D60qrRKjcydAgQf1kjgylUDTK4jhJH0jAjNW1ZH6MoDDkoySCPKncEWYebt4RUGRqT3wcuceySCabxrgTXSxZbg1Ud9jBS9C"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
