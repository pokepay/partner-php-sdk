<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "nDPFy25pg6mah3Jx6bgFIjvigMMkYiLBm8rpoIt6Iv7v16qxF260s9fWTYox0Xu5MaSsTVvY4cyVcLT106tPf2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["campaign", "payment", "topup"],
                'description' => "42KDRVVesV0c85dgyIZG4aZRHUyRZiMdH5mU3O163Nh60M8ppBJi20Y5yVfE63K6K1Q74DKkG8vYvRfG5MnPuIzbHr4gkfeh6cHeX6PAFuyXNglAkwoyCOAweoC2fncgVk"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["topup", "cashback", "payment", "expire"],
                'transfer_types' => ["exchange", "coupon", "campaign"],
                'description' => "b4tSEFO1JIa7j6TvQr6aPJRHeXj5vqktm2vbYBpds0uSSAEXibKzFFCZyuC1UYpeBxFM4tqw0gTmTpM7c6lX4UfEcHw33zP4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "transfer", "payment", "topup", "exchange", "expire"],
                'transfer_types' => ["expire", "exchange", "transfer", "topup", "coupon", "cashback", "payment"],
                'description' => "JAOSbWPnXj6Kl5ibG7FmpG5suyIs4SkiwSBcI33hIpidoWzcl31wAilp32nkb19ZfoZ7SAWZ1C6GowiVWIxhdghTQQNVMHefZqfalSnxM11BziNMKcsVl2mF5NajeHEMI0oMEgF"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "f40cbf1a-c147-4888-bcf3-4831de529142",
                'is_modified' => TRUE,
                'transaction_types' => ["payment", "topup", "cashback", "transfer"],
                'transfer_types' => ["payment", "transfer"],
                'description' => "wl9H5LcTLaTAgpuHYYtEhbnlhGscT3QA3YgDcd2mBuNAKWzTbZmmCDee"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "6318cda1-1317-4b16-a44b-788bab99b1bf",
                'private_money_id' => "32acacea-71ab-40f9-bb7c-7fb98332d532",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "exchange", "topup", "cashback"],
                'transfer_types' => ["exchange"],
                'description' => "3U5GCp6wRP4azgRVIkK522G0i3oMsagisnkBRHEV7REbvnxiBDjrUN5VSy0cKFQTf3CDnIahg5ny7jWM5pWQ3J1xN9LPIHf053Y8LZRZ0G9QPh5u4wll7mtpC0rZLeRIBodkZssFG0inGnmdHYMtHUysN13R2wD"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "YLtdlZFgM15qaoHJMPSSYCqYqN7o1rK5so5wVwa55IeIs9UA1tEHTkOWMy3bMUyCncE1u5XtyXCWOB8xAoLXveVgAUEral3IUspquv7cXnFSWZmKj6uRQrFrzlc5",
                'transaction_id' => "c4f00b22-33e5-4f16-9851-12b6c6b0604e",
                'private_money_id' => "02aefa8d-7426-4bfc-9d69-0915890d8095",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "transfer", "exchange", "payment"],
                'transfer_types' => ["coupon", "payment", "cashback", "expire", "topup"],
                'description' => "T97rGuXeCvmwPgSxx8upgZvTwe1Izw0bYoGxpp1mMyi"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "1e43054d-d26d-4a8a-ad65-abdb0b7c0890",
                'customer_name' => "xSjfmPuNkDcyI3Qb4eYmD3WwAhvEEZZJCy4jkb1Jeo954aSVXOAIShc1l4yvRdb0XwSQGLg1VgqEJrYkCVRUs1XO5KIKpcOvApVQQ09KuvgKkUF8V1yX4Tt6M1LD4GwUGnoOtUS2DNcKWn4OF5WPAUgmprUHVPLFnM6T5Xx3zAk87pfUl737IOoRLQjxj8",
                'transaction_id' => "56740fcd-39e3-4099-8219-f4d513f3a383",
                'private_money_id' => "b5332719-38fc-45f8-b00f-61c88f3613e2",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "topup"],
                'transfer_types' => ["exchange", "cashback", "expire", "coupon", "payment"],
                'description' => "B7lHWe7gEop"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "KoGBJ3v3J2jv9b71206WxA6AOnyTfQo2qhtpTrd3oqtrH8qYeTeReOXjUS2m6RGuwGFsDkA71hSq7aEhCzAxlk77C5uCeMiNGX",
                'customer_id' => "50ae3f29-4800-4df0-aa1f-e224258e4a3a",
                'customer_name' => "sEBpW1jaHxnyVyg84CEboANf3GgmcFSBGd4pmiTxHNbrYens4u9GQt9vJieM7BH7dEycECMTyZxqTix6LAjnLqA4wrG6US18ntM4onQf2m9t3OCNqfKmZWQ75F6MN97GlhoC6I3zsGp9nPAR9RCvJrSoN9CZyfSrti2B3f",
                'transaction_id' => "e76fcd53-ad9f-4d89-84ea-8ab74824eef3",
                'private_money_id' => "4b9e9d9d-2b4f-464a-b014-f91678dca8e2",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer"],
                'transfer_types' => ["campaign"],
                'description' => "BS8TUPRIrf3WBdtjs0nwzBQQceYtSoMCdyPk93zg"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "4b99003f-c999-4d43-bd80-fb74300cc289",
                'shop_name' => "uIFBqhcseNikPrDgCmHG8vikmFgrytVm463lqwzMNAaG9bsltmpBgYfNu8ATN3QeovsGABE6S29ugS2y1GaG8ZpC0XFOMwXbpPHJpJLIu2dZND3hmZ8SK3bABOEonXWu6UAKD2mn0mbl4JlqUOJWDDckmlqOA0GEe8OUDiOMBg3a8ZDqZf55MpshKZcfl4dQPvtLE0cwqc8POqfxISdeGrt",
                'customer_id' => "046537de-b874-4a7b-b05e-cb811cdadc68",
                'customer_name' => "KiFldbTZYJN2VXCE7IKHdKXtKyXMKlAlSwi7sBOg5iCuJ7VMHWo9QjZkEZHL6X7yTYi4IQldH8YVYfYTVzqthYVqcdJqZpsWClLie8XtWLywqRF3zuIz0PYKVFr7IEUtetulKM7ZSPEjYSpUepPA5VsVd3bq7yqDJr4vC47NH1s9ATWfHxipD2V4IiKSQ3gCEFUwYe4581ka50TDJbBJyhYmpkCeVCfc9LIImeNeX4d",
                'transaction_id' => "11fc5a6a-086d-4c1f-8a1f-bbf8e0b39a45",
                'private_money_id' => "8571c17c-554e-409f-a35e-d15ebad021c3",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "transfer", "cashback", "payment", "topup"],
                'transfer_types' => ["payment", "campaign", "cashback"],
                'description' => "DRqM0MIEM1l1YZevVaN8uQlEY8xEWXP1ntU6j4UNjNm3RjXWF35emHcZuWrjyUrrTQnTmkxDy9xOV3k96NHDCGY8idp7OzVY5QmbsHHDtGNKyXA"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 2169,
                'shop_id' => "271d42ff-878c-440b-8afa-3690800869cb",
                'shop_name' => "TlopBDPFsqLGUBct3mOm6ghMhCkjN5EuLIHYQgQQomV44Xd0tzgWOUJiKsm8MtiIFa54zfXHCtfmk7fxE6dfY73",
                'customer_id' => "eb2bd245-564a-49c0-8f73-5c7a544978ca",
                'customer_name' => "JmOfRNJmE03o1RGbOWWMlfBsMp4b4tk2ypFgqUTfZZG42WcFG709QaQV8OhZ60xidezDMfe8M23FMhDlRFTXYj1bC3D14xYvni5WEXobZ0fUoJZK52E8PaTwhL0PoqexnoU3cuwPpOeZb6cbv35hskmylxuqQUjB3EdCk3biHUtomLC0Vmj74F3CpFDM8BZO6J4n6zHimZQVjDp8BVxy3Q53BpSrDrnhriLBjRV0rqNmTaP",
                'transaction_id' => "36180240-b733-4f3d-8a17-0f76a4b4ea3a",
                'private_money_id' => "40066a3d-b914-479e-81cf-6ebd36d92b70",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback"],
                'transfer_types' => ["payment", "topup"],
                'description' => "9V30KaNUBYxbOQFm3nmKB7WcVYXplm0TBm9OmcX8G1EEN3K674DaLcjOthh0Eaf9Wfn8oLPruVzxhn1btA5JfS4GHjOdTb1VCqnDzFGDuW8R6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 6490,
                'per_page' => 9788,
                'shop_id' => "726e6382-a3be-49d1-8209-635241d7a51e",
                'shop_name' => "4P9Vy4mWYvpYTxkGSfVcQ8TmH85EaRWNCpZBqkC7vG2G1CPe6nCJXdPXSavMIC7L1PXkbArWdy4rq",
                'customer_id' => "d66023fc-ce1e-4a56-b11f-9023b00d6d91",
                'customer_name' => "R9dYbWBsymVxL6raa9lStAWIjI7qmEdg8Zu7xozJ03tKoqXhbdkHRWvlCHbA6UXHHNPTxl20KuFZHJqVvmIH18Mg5mKbxLvTVaMTW75BSJGVQhx22CmtQuFDmF70gBR0Izk9ATcevIEPcIYP68q0C3u9ElTYSSSiaMZIFmxLsSqSL3ynI1WmplBEiQsAxJPWHDDqUqBCIqmTNSr9",
                'transaction_id' => "286bbcaa-1351-4376-9ec5-5f5ee841b480",
                'private_money_id' => "f228610b-9dca-4b57-a8b5-b796dcfb661d",
                'is_modified' => FALSE,
                'transaction_types' => ["exchange", "transfer", "expire"],
                'transfer_types' => ["cashback", "campaign", "exchange", "coupon"],
                'description' => "oK35cQbr7jpdjCsDMdaO08nIwUWpDWiCZGnpL43DRa7Kqj2FZ7pyNS8ApHHKkrhLhrxjfdcKY9H6NjVOmbThi8JrzvaHyjKu7qWAtGoBWVS4OLJKrgW7jd28o88RS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2021-04-09T14:00:52.000000+09:00",
                'page' => 5746,
                'per_page' => 5341,
                'shop_id' => "3a02fe90-1c5d-4ed2-afdf-c28f2356802a",
                'shop_name' => "PJMAU0j7nZUqFZFtN2yUaAdBiypM3yfJ866",
                'customer_id' => "aa80265d-8997-40b0-be6a-b2062dec067b",
                'customer_name' => "daONHtLrONBb4FuXgxuJRpFauoZ2ZdfdvNT6hVAMnffyr3xPa3R3",
                'transaction_id' => "ba66f5fa-3bc4-4815-bb4c-45451465aa75",
                'private_money_id' => "18a31217-d132-46ae-91ad-a86344172c14",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "expire", "cashback", "exchange", "payment", "transfer"],
                'transfer_types' => ["transfer"],
                'description' => "tZPhoPwXCoaE27DIdZuPx2uBM0CkO9h6jCLhrICnnPhaRJvxt907hjCnNmynvVTiE8EaOvt2D1OLAdlTYkNl0HcWJzNrrOCqIK0jmHeu7YPTNsaym5w3J4aO8c9EvyEYh9Q5U4KNyL"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2020-09-21T04:26:04.000000+09:00",
                'to' => "2023-10-18T15:01:16.000000+09:00",
                'page' => 2972,
                'per_page' => 217,
                'shop_id' => "7156278d-502f-4fd4-8946-21ccc244b505",
                'shop_name' => "UbalSUxHdQFtk2hAwmajfPLeOJUWf4QqUHaHdtnKXPPyfQMQ4AH8E2TPLpOeCZ81xp3vZcfXlHlKfk2HcIqqYG32c2iOavaIUmnvcGF9w51RQ4TrSrnezZ6R3RzBlRhMaqKciBTUmrHWQMcTxbHhnXMI59DIqwNGwek",
                'customer_id' => "53725ba3-00f7-460d-b31a-a216b1ba296a",
                'customer_name' => "6O4H8ArpdMMUkr1jQXzePmBk2q4zrWqsHAw7Uo5fTXPGpDdNvatpuoKarDPhbdzVIVrm5gTTqS57pJq5AbFRy8NxbBYs9G",
                'transaction_id' => "77154738-1a70-4b93-b94a-22da080f76fd",
                'private_money_id' => "add67bb9-4df7-4c07-93a8-a59623c2b82b",
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "expire"],
                'transfer_types' => ["cashback", "exchange", "campaign", "topup"],
                'description' => "bdHMvyy4wQwQ7AS93OCgXZn5Q93aE56yCntBKdRcGfWRfBg1zyUsrPWOd5h6Cf8HzP8I2uCWgpHugJ8ClqOP0gOHrhJFZHkLmtUtD9l6mpP3Etuw67eeC4EZrrSChN68rRgWmEsN1BpPYawr"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
