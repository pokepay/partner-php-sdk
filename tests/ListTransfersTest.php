<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "JBwq6MwWSfJdfPTpZb5ac3mT1QOg7WuazA331mp9AVFYbrQrNMQwh9HjwGVbUUedTgXh9gQD63K6m3558gbzeAZw6OjLLPVMSplRpJhPYNLsJ4rws2H683eQBru2TT6v5mkZxDT5DRefKJkdKqWLmOkhQTDUsj"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["exchange", "campaign", "cashback", "topup"],
                'description' => "H1Ycx"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["exchange", "transfer", "payment", "topup"],
                'transfer_types' => ["cashback"],
                'description' => "hTtyUtyZGJTQKehivHc2a9Eb4yt0SbJSV7GyPD2av8Cv"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["payment"],
                'transfer_types' => ["transfer", "topup"],
                'description' => "aomyrJEh1zcMEWltNTx7p7IGDqaUnewbcRoAaHH34j5m81jSAxiO6gVdJr8qJGp1hxwVRo8syS8HMqtxJLpKCn7kQyCSjye4PU2r53Rdx9Z9a8gJxAbeVVeTVZYq9zoUmK5brj79ixI8Mzcxq5CMydABtApfJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "7d6fc8f4-f8b1-450f-9b2c-3191a52d8739",
                'is_modified' => FALSE,
                'transaction_types' => ["payment", "topup"],
                'transfer_types' => ["transfer", "expire", "coupon", "cashback", "topup", "exchange"],
                'description' => "PBnfOahul9slsxVGBXjnDAQjkbsLYB2fXdzm12Bg8sZUCtz6ES5WCrq18ugCcawTodhQKZoUn5nLzLx03ZYwVeZY1la7xDhz0mBbB5g7a5wJ2xanqF1q"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "e6f08bf4-cb6a-4f48-bb57-a349e5d3779f",
                'private_money_id' => "7a50d1f8-4c5e-4cd2-beb6-2526f1d899d6",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer"],
                'transfer_types' => ["coupon", "cashback", "topup", "campaign", "expire", "transfer"],
                'description' => "lnT9sNBHTOzyDxBgqPWPuX3O0shJwXKxqr81NwQYqxpA1KoUxxbcP6wP7F90dSKpssPeG9UL8bsLRjMzMDnrDZAiYup6udkK8swtXtIQfiiBhAufKboUwTQ5yXsZqLG0yHSMqqI5LESgALBXwBrVylYMAgr8vhQ00EMjYngdkWN20ZO7zDXMuO"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "O9s4B0ecs4R7Jo7svHaHTnOyGwCns33dGnjvbwAGDmUqnauhTzxHpWHBN05RX1KtPA2wWJZ2srpIhvMl8Ri2MGPFJsiNs2TMDCz6Ok3T9vSfaTwO89AL7rxkvpueNsrJR7skdQprVr7ZaScxdTorveRXZuCbYF5Atk3n9dImrxMF52qzERtyMguEmFquKFNt5g24Y49B8qPldnYHCAZkaABVQLoCaUsk38",
                'transaction_id' => "dd323be3-35c3-4c26-bf78-9058598986e1",
                'private_money_id' => "931867e9-043f-4973-ad57-76ebacd024e0",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "payment", "cashback", "exchange", "transfer"],
                'transfer_types' => ["topup", "coupon", "cashback", "transfer"],
                'description' => "7tF9hG1DZJeNRgBrU3prZG1jDAadcbN2CK6MxuZVo6XOWzS35BQTs87SF4Al8JyZwE4dY5RLdRaSBLaNsVa0ZwX3jxXxQ3w7Y4oFF2r0U69vnMUD4DY6QrrqM7i1h3ulsXeVud8SRaD1dZuofK3x47HKtxTmg9DOqtGOCr66CnTJwlO3MC6ZsSlTpsXHzyy"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "dbee535e-9e32-4d11-8314-501e17988944",
                'customer_name' => "tn9p4Bgg1qQm2YfuBIBqt3xBRQN7TQZrfouk8LAD4tzctjc4jOpBzNYRGJOORr8XwEIpWdFQg9EWHCciK4lWmjBPLP9LK7AOuKQSASKlk2rFAyfA3oKSg39X6lTsa5VXsHKBKDGMGXIP6CVghsluEE4Byv6uxndauuB69m2oacxgK4K68PIVQpOj7CWkz9r0X7SnbEoIfVnJ7KdFrr0i1c8",
                'transaction_id' => "fcc1c690-158f-4b31-8518-54779051a96d",
                'private_money_id' => "fb899b59-1475-46a8-86e2-748f6d914614",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "exchange", "transfer", "topup", "payment", "cashback"],
                'transfer_types' => ["transfer", "exchange", "topup", "payment", "coupon", "campaign", "expire", "cashback"],
                'description' => "XfJAlhxJ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "Nf51zbu3XCPLHg1XCTLVWy1xAIMOS5JMzpznXN4eZFmlYsztykeDjrH3k7dw79H51rUk0BT5rREWROmMNYobKOm7s3BqVqEc47dKw1RpKfTPjpbsuotZ7b43nJheLVU1B64EjOj2AJWkWARQUC1ZuJbZmz8n8GVWU2aRovTFxpOfevZEIhShK5pkG4ZXy3GvRtfN1XS1PF7VGCthkTsy6ywh81Xy5XnVH0Sr",
                'customer_id' => "183d5894-b884-4f8c-8f32-82744f37e379",
                'customer_name' => "IsKWwIsq8H1wn7deEt0zxrdBp0xQHarC6jLo5bbJAeDho6bTeSHxWbLNa0TLnyibL7",
                'transaction_id' => "e8364f57-43b3-4756-8644-8db316b5ab0b",
                'private_money_id' => "5db83c5b-1073-46e0-80d8-67995ad671d1",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback"],
                'transfer_types' => ["coupon", "campaign", "payment"],
                'description' => "y78Kd3OupPOVlVSLypzmKazH5InvsyYadzCx2jOucgvaxD5iu44oxatqeSa4p1DmarJxZKVfkIMLgXa8zyppehlaAD6fcQKvQ2"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "d5006d01-7be1-4c76-812f-07d89ddeb561",
                'shop_name' => "NwrhEwA9umnaZRy7lSoNa32uTW3uFjnDtkspTEjgkmcvWj2",
                'customer_id' => "911899bb-75fa-493e-afe9-16b16886e6da",
                'customer_name' => "pd2Pu882rUaZqB0HM2TdLlH8YguS8k0MCyZyQP1H6yMzbhriA3ixV1J50o9q",
                'transaction_id' => "0edb40cc-3ccd-45c5-9b67-7c43be383e63",
                'private_money_id' => "8b690d12-3315-4f6a-932f-2458bf589081",
                'is_modified' => TRUE,
                'transaction_types' => ["expire", "cashback", "transfer", "topup"],
                'transfer_types' => ["transfer", "cashback", "exchange", "expire", "payment", "campaign", "coupon", "topup"],
                'description' => "yOKQjD4B3CiSus5O8VxNnHOHfLFqKFqIJ75Lni8wkXCLY4y5Yb1EsrGk6zAbXXKpj7Ozyw0iz7gE8VoOY0TpooYH8JlFefKzJjCEXs54bL13h5h8AsSzNtaxjIo2jKGgG"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 2767,
                'shop_id' => "55ed714c-8268-4db8-a523-f4a1bcb35612",
                'shop_name' => "BRM0ML5",
                'customer_id' => "af2258f9-ea96-4532-aee6-3747616bcd98",
                'customer_name' => "WBZhNlsG0iKnA4kpCKAmHFFYQ4mPBOpRSEc2A3II2fo4DoaMADPjZogBFwhEJnKR4sSMwDlevfzLl4Si4Azke76d40x14I4DDjA2vYNXD5M1kvBgj5D8FGiSzNq5i34EJtfjys3RjW8I1",
                'transaction_id' => "865778af-3e15-4bbe-bb80-f79c31c15c50",
                'private_money_id' => "c64d8127-5d4e-40a2-b42d-4159e37ac651",
                'is_modified' => TRUE,
                'transaction_types' => ["topup"],
                'transfer_types' => ["exchange", "topup", "transfer", "payment", "cashback"],
                'description' => "8GTxOn3a8p6JFP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 6214,
                'per_page' => 3540,
                'shop_id' => "0d79c3c0-6ef4-4ffe-9724-72d73307f8af",
                'shop_name' => "2FxAz7EpIA5MhIuvnV9A3l0qfjTykZqJqb",
                'customer_id' => "10298dbd-bf62-4e5a-b8d0-6d2963baba20",
                'customer_name' => "lkTHsB78XESvM8oobr7VaXcul0x2YZMMOkGVGROhhruVMi2FiWILEZC5lkSAuz05c6jpvoUdI3Hz",
                'transaction_id' => "616273c9-c38f-4a22-94ae-ed2c362ed869",
                'private_money_id' => "bc87a88c-721f-45bc-bbbe-550b53aefaaf",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "expire", "exchange", "cashback", "transfer"],
                'transfer_types' => ["expire", "transfer", "coupon", "exchange", "topup", "campaign", "payment", "cashback"],
                'description' => "FgoxpcJf194N8wmUUCozo5O8CpMSWW4AaWKNHx1GnrWNjGW8xO6bXw95gXnn8VrRkLNSWhbOkw6NdCSb9Hl6bH1icCbduqMeoBuKnUsICNA4Rs0DUAvsRUEG7JmVNrKQV89iH"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2024-01-01T10:46:03.000000+09:00",
                'page' => 3525,
                'per_page' => 1419,
                'shop_id' => "9cc7551b-954f-4272-9a73-692f1bd4fe24",
                'shop_name' => "b0Oej2Axs4UXISas13RUEfP9Qb879LYuNpthoExiaIgvilFkwQpId7fxRLAvrv0vWA8OsHFP6Gk9jOhqswrdyhULRpzo07niCFDQz76MkPsMNnJoeLmwK7aJJ0HFFL5aqkWtSZwUuGSgcV27KuP0BWXeQQFRs9OIG93Tjp",
                'customer_id' => "b56236c6-07fe-4ece-822e-b18a97a3084a",
                'customer_name' => "jdVId8XyajX2lJHnqZZ1Piod7OHEZ2hUJnxzbGV7AJl1GG24zsrmKkONbPgAAucfec1spRGrGIoctxxgEDOmP4pxGeyYPbpHYXWwN91uiheUWtPVVTiO1VMe7",
                'transaction_id' => "f690f900-6fc1-4bf6-8f37-e751845c988c",
                'private_money_id' => "3565c0d5-c379-4cec-8d43-4594fb250af4",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "cashback", "transfer", "exchange", "payment", "topup"],
                'transfer_types' => ["payment", "topup", "exchange", "campaign", "coupon", "expire", "transfer", "cashback"],
                'description' => "Bl0kopTDh35rWY649gqU89ItO7EpzVfjhe8uGLT0KS2mF1PsQAFwR5RI7LZw2Lpotn0Mih1SJXps50L4tF6Xnqb9PYjcSwidoVd9w7eQjXo3qt4zkLZmPHiDVhKiRbImvFsZoC3NXAGQcrTxtuhrCDlI7j6Gf1whCcAixzZ"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2020-01-24T11:23:52.000000+09:00",
                'to' => "2020-10-04T12:46:28.000000+09:00",
                'page' => 7826,
                'per_page' => 140,
                'shop_id' => "7e432688-a547-423f-8886-be204776acb0",
                'shop_name' => "3ul70cBKM1i2wBD2OJtB2EVU81LqXgcIH7b7l8UFLKY2w52r",
                'customer_id' => "4ddff640-b92e-410b-9574-bf005e2f4f4b",
                'customer_name' => "6SWUAt2TNxUMiLSioZxReMfip688Jj90njuWoPxqGTTyfoxZrKCTiEctpN71EQC05svG6ZvTS8GJo8aZsOyPzwtlFCXak6DxQ20dYZpqJVL5G2ViHjWdCb6pppomxnveilLmMAIm4qYYEDAihBZMrO7DhcIiDH2T0snMySxQJ8KYATLCPziMJkPEDDr3avLShcmWF",
                'transaction_id' => "f4bb74d0-0169-4992-9ed1-49d4a2deb596",
                'private_money_id' => "f716a63b-7d63-421b-ae64-815c0e5162a8",
                'is_modified' => TRUE,
                'transaction_types' => ["topup", "transfer", "exchange"],
                'transfer_types' => ["expire", "topup", "cashback", "transfer", "exchange", "payment"],
                'description' => "cDB9YpyDz"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
