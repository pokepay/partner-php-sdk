<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransfers extends TestCase
{
    public function testListTransfers0()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers1()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'description' => "WmNqL0QHxylFWlu94S8FVSDMY5BU7ZXRTfnNFoNra90XKkUB3tuq1X9Hm0SHBKCUruJxi1ST1WXtfeKSzrq1Zc5Ju53UYOCwl5C8rEq5yNfh8NoRe5rX0rVC"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers2()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transfer_types' => ["campaign", "topup", "exchange", "coupon", "transfer", "expire", "cashback"],
                'description' => "LHNNlbdnW1ooZFRDSiyltrhPzNi7jenj4X3xdXKxR7POl5XLEB6rdcoyFq3Dy2RXyPUAe3PgOIxNaz33MDlMm45c417ClVPZadCz21oTLg0Zh"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers3()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_types' => ["topup", "payment", "transfer"],
                'transfer_types' => ["transfer", "cashback", "expire"],
                'description' => "gltXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8UiDVjyL8K2mxNxSNDBAB21jRDnDfUt4YgIyZaTsiHOmcCShoExxXDzwmu0NmtxroKVUk7sDu4lw8ZxL5ooBCUmbexHlOYPdRDRXfcFEKebPAHiat"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers4()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'is_modified' => FALSE,
                'transaction_types' => ["topup", "payment", "expire", "transfer", "exchange"],
                'transfer_types' => ["expire", "topup", "transfer", "cashback"],
                'description' => "JIBW1vB1RC8WQ75Zq2CPEph5LyiHrKKZHYeA6KMsRSBkbfNhFwjSSUkqouGV2ULftf3KLiOm0u6OdT"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers5()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'private_money_id' => "a7d1babd-c213-4ad9-b6d9-29310f851a88",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback"],
                'transfer_types' => ["cashback", "transfer", "expire", "campaign", "payment", "coupon", "exchange", "topup"],
                'description' => "bor9Bi8VjYjeAF8N8XvRYyNjj6LzPNoFY0NPc7gW3tdaerbfAUj6MGuDCQRgbbh69IfOOqdFv"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers6()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'transaction_id' => "a6d5f493-93a8-46a5-85bd-560738da15e3",
                'private_money_id' => "810a53f6-43d4-4720-9917-bf3a0969faad",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "payment", "cashback", "expire"],
                'transfer_types' => ["transfer", "topup", "cashback", "campaign", "expire"],
                'description' => "SCuxpXIBKjX0wbEINtuhWyJmxhctiEpL1KlL20SY28CEIpXvCz2lX0WFgkUTJYHHOr63hjnglJCcSZdRjCOwyap0lsb8d4Dc5yMU1TN0yX6wxY6IPoPyEr8klncfGkEwHB"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers7()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_name' => "WOqOmjPQjCJIqduyEzfF4ihEMnqIdNLL8T5msTmgqj81RXJ34GFY2SrpQfm9Le0rSPWlrPa8fbLwdjVaS9JydpHqXjqW7D3uCGCdE3Z7gIcLSudPl4JIrQmLFWJxcGB9NLriuIsMTYyCUoOEa9YZaUNPTMagDSPeHLGCGYvgqbqCIdoP",
                'transaction_id' => "5d53b7d4-d726-401a-a5fe-7d2eb5dbf85c",
                'private_money_id' => "c1134df9-7b26-4502-bf47-5911f1912966",
                'is_modified' => TRUE,
                'transaction_types' => ["transfer", "cashback"],
                'transfer_types' => ["cashback", "topup", "expire", "campaign", "coupon", "transfer", "payment", "exchange"],
                'description' => "OwBRftL3mTfJhTjDs9c8QNUGvnht1UycVdhwjqe7Rve16qe5BUa3mrtCxkktMbdZ0Ff5nebRZC0vDYNEWMfxXSVHRY4YZdsEs"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers8()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'customer_id' => "e609bf77-70fd-4c0e-861b-3c99093467ad",
                'customer_name' => "klf9tWgAr9KxjsUzeefEvU98BI4BdtnYVFOF5IXA6lNw66Yqs62ry4EX0H5SsjBGi2vt3IVLujfoeXIyA6Ao821XE55hc29pv4sZBooZY5wA4Og2kdAYLVTxSOsaSsUmdY0CLcfoUMFSIdEJMG98zC6otpSw3LnpbrPkZnN",
                'transaction_id' => "b7fb63ea-109f-40a5-90ac-9b9bd5633916",
                'private_money_id' => "e4c32796-5cac-49d7-8f0c-ace0a3e37cb5",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "transfer", "exchange", "topup", "payment"],
                'transfer_types' => ["transfer", "cashback", "expire", "coupon", "exchange", "campaign", "payment", "topup"],
                'description' => "W5M2IvR52CgIBy3eLTys12HHDFFeqLoUtYmfM0XLYceQxhubY3jVYhbh4RW4SjcP"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers9()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_name' => "Hu2gIp7HlCgxYlFZzBuHZ8tjsh68ScZg3aAMErPcV9o0TcGJkIJgRMahTjY4B83KCbssdnciBK2yKUyBpazsFHLyPhoCqWWrzikH0DrThI9ndCARX9iZhUIwUrsQ8Uijo55dyiBxXbKWYhqIQcADAJhWFwASll2hGkEzja1NmQHCUATGGz590dtBhucZ4e0BzAWy80f2MmxJUnd92RrjDmsbpR1t9xme9U0GR2pRvNpULEoTr6H5p2Y5YBaO",
                'customer_id' => "c91fa402-d6da-4e64-9453-d6b1db71e2ad",
                'customer_name' => "seolNI",
                'transaction_id' => "01c24d5f-63cc-4a1e-8ebd-dea3b56d54e2",
                'private_money_id' => "9eefdba1-3480-4f08-962f-dd2f4e01d3bb",
                'is_modified' => FALSE,
                'transaction_types' => ["cashback", "topup", "exchange", "transfer", "expire", "payment"],
                'transfer_types' => ["topup", "expire", "coupon", "campaign", "payment"],
                'description' => "uvaLnbw12Ii4C82SzJJG4lODNS2Ij7U5b72UTWbjXGfzCmZ2vkYm"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers10()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'shop_id' => "3d3b5286-b925-4b72-83f2-529bdd1fded7",
                'shop_name' => "wA7IkDmk9acr8tX9JQSHyiFoseHqYyK8GIOW0PGU45uzPdd0dJeNNvUC0bqs1hvmd5I8evbrAQGpnYomE2cpD4cThkIOO2LW0e3G1sTmjjHcN57ZbAikJ2opGyr1ja3z",
                'customer_id' => "ac1e56f5-6b83-4e81-926d-8e8aa2bff276",
                'customer_name' => "e771kQ7mwZnfGMQasC1yb1Dq2UL9Kx0jYk7sZRicOTg23f5GXrX6ozTzm0HG0TosxKz4jitwHtujKhwCFGwiyv4vlRBRxfHZeKBVf4jVtecQNubIdHetIBPUrvpeN86f46tWgyM43AJZ0KTwWOYBSX4EzfsIiID",
                'transaction_id' => "1044205e-099e-4e1f-835c-3000a19a780e",
                'private_money_id' => "79139053-6aaa-4cf8-a06f-919393d2756f",
                'is_modified' => FALSE,
                'transaction_types' => ["expire"],
                'transfer_types' => ["payment", "transfer", "topup"],
                'description' => "4K8plKuk4zON6lsKCXAkk07Q9YuV27x2ZZwJNPJ0aXH1uRWCYsw6VRBfXAF7xeoT0y6lNlDnKEOyMV89HUL5OwvTmfkSpdcLQvsJQRiuvWp"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers11()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'per_page' => 3283,
                'shop_id' => "3ac33395-ad6b-4370-9be8-a5faae16c26e",
                'shop_name' => "qbTr2vHF1iF0Y7dBxe8hiTzwkLtzBfAa7kaQm6vULSy1FKdTtu83N0tnRGbdpbMjOs6NsjUaiDroY6Q3IK7BQ6AmswdAM3IJrwVbs9pMxfMCthiv1a2EE",
                'customer_id' => "f5a2f1c8-cb46-436d-ae9b-dadd692889d1",
                'customer_name' => "4OmJsXraAGliEBPmHrH76ocsr7yZptwOIMGRxZLktLdV7uiWarFr5GP0wp4l70ZsGyPlyZYRURgUMf0P5ozHDn0iOeoWIRRMyR0nQkh8Zz7eaFGoiOPKR0rU",
                'transaction_id' => "736ed62c-0cd7-4c60-b93e-781a48fa5387",
                'private_money_id' => "78798655-b73a-4d96-bbbb-7d3a27c51ffe",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "payment", "expire", "transfer", "exchange"],
                'transfer_types' => ["transfer", "exchange", "cashback", "expire"],
                'description' => "ZuPfABdiNvfS9Anufij6THnocikBJOkD3FvwnaI0WeOGlWmmegc1KGhe3TxnuKac7CS1DK4Gnrr3oBLGMXHrz9mqfRhRmUp8pN9pjtBKEK15Dd3XxCT0Zmu6u7tOxquneNatGolCf6SjeF7SeZXyMS6WkNJ2GvSwQUcru"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers12()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'page' => 8154,
                'per_page' => 2613,
                'shop_id' => "49815448-7a0a-4695-b563-c69f333cc1c3",
                'shop_name' => "w5ExNqh41OXXFwVmaHYw6oEFbK8",
                'customer_id' => "f84c0fae-8671-4045-92fb-a25e36318b3e",
                'customer_name' => "1LlAIi5qYTqeIN9jftsBTkZDKCnQigIBcgyeHE0tecRrYBgXoYNaRDH3xa5ZXl3L94kmDiQZVmfdCV9wGJUROgp1VTNstKsbk2wvZcZmJCZwuee4w9Rkvag9C19xRl1IlJpGXqlhd5uwOg53j3Qic0iyKLnZxaZi9iCa2kj9",
                'transaction_id' => "b8368dc9-3490-4e44-8490-6d93394d4095",
                'private_money_id' => "2934a934-e0c6-4d1a-bccc-945b27afb95d",
                'is_modified' => FALSE,
                'transaction_types' => ["expire", "cashback", "transfer", "payment", "exchange"],
                'transfer_types' => ["exchange", "coupon", "cashback", "expire", "campaign", "topup"],
                'description' => "N856J50"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers13()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'to' => "2023-12-21T04:49:23.000000Z",
                'page' => 1119,
                'per_page' => 2021,
                'shop_id' => "89c66f69-3dc1-462b-9d44-f1022412bbc7",
                'shop_name' => "37eydGENMPuSUGCPNHip0Y3dBWcNdXe1sIjLSVztCspdpKc",
                'customer_id' => "09cc753c-d71f-4ba0-88bd-0afbd70414c4",
                'customer_name' => "U85LATApzQ2dQG1XtK0UfX1fzmKZw4jAX5TdVMZA3FsBWHTaR7q8iHovbTWoPNbCUX3WmvU0lnYW7MWulxJqejEoXiemEzy22TP2wtSY9IoDSrJUA2sSTBsOwjVmr0bTbO79fqhITnnz7WaCAiQd9B8sle88sl7rSWKN9oQjHsNX48VkSyiuzE1L2wv36YuE4jwp0IiR",
                'transaction_id' => "68e727b4-67dc-4f34-94c9-08b5c9fff99e",
                'private_money_id' => "e688c803-8ebc-4dbb-8bcc-dae916da8487",
                'is_modified' => TRUE,
                'transaction_types' => ["cashback", "exchange", "transfer", "expire", "payment"],
                'transfer_types' => ["exchange", "cashback", "expire", "payment"],
                'description' => "xtTGifN6KrraD5uojwDmQdLNOKHIlDiaOh78QfhNbZ3YfGhlbqaOElvScjtjkG1WEjltqaYkhp7caXjUtBcNe9XyY4wthFo0glXBErIUB1p7aPMzXn"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransfers14()
    {
        $client = $this->newClient();
        $request = new Request\ListTransfers(
            [
                'from' => "2020-06-12T02:51:45.000000Z",
                'to' => "2021-08-19T22:25:40.000000Z",
                'page' => 4317,
                'per_page' => 518,
                'shop_id' => "760540d9-4b39-4f5b-82b6-d147937221ee",
                'shop_name' => "0OAQ9xSN0zfKx7ivixiVqjgvBNcsQLQxAtJmVTcXWtKUzkNd35gyuBKlwozbM8BIp6WWFtoNM3mKKWyblmmAHRSYCV0EDw10SY48ZoA8oj9alrEKYDjBWPKCwbirzvScUvjsqVkcSInvOjFPIL9qlVMwg0ANEHCj5eM805Swtsg2NkJBDvuxWoqdLq3QmHRbZpwbPRidVG7B6hajGJrCJBxTKH0YUW",
                'customer_id' => "af29c2de-3a2b-4716-ada3-44dfb9cfbdb8",
                'customer_name' => "iwJJuJPCjlaztijN3vebjT869RjYRPCqvnZ1YzdrhGH7XKNoGDpqqjYUa42NN7jWbTA8sT9CjYdhYyR9ZtWhMAKSZHQ2Tjahc0hASAcEibjku1fdQetgL0O7DlAFrkXVihIdQWu7J4NYirXryPP6taqbm6hsnA9hELkacVB4dzDqQ1Lb",
                'transaction_id' => "7b6a0954-5988-4e79-9614-ab90041a1bc9",
                'private_money_id' => "5524c6e7-2d09-4ed6-9037-6113588e6066",
                'is_modified' => FALSE,
                'transaction_types' => ["transfer", "exchange", "payment", "topup", "expire", "cashback"],
                'transfer_types' => ["campaign"],
                'description' => "P7HPwLX5lwWZKuWWf4n5wNPq2rjN28QfQLnQ9Qr2gs4rAyEVt2ws7WkJzpgGUX4mtxobZ9ZCpNJGZG6LzTWIbd8ZNVrafdiivNn4NbNLXIdoiqtrelImUNmLeKEfXUc2dQExu22E4bXnTsrAuXzcUztcjpDcIzv8TjKb1dIcQKtgPEpt9Ynsu0LI4T"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
