<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListBills extends TestCase
{
    public function testListBills0()
    {
        $client = $this->newClient();
        $request = new Request\ListBills();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills1()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills2()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'upper_limit_amount' => 3996,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills3()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'lower_limit_amount' => 9948,
                'upper_limit_amount' => 9540,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills4()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'shop_id' => "d596c138-f577-4417-84b0-b454c17f6125",
                'lower_limit_amount' => 387,
                'upper_limit_amount' => 2392,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills5()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'shop_name' => "AwbYoIveuOWNz55UcSSl8lGzueuvJgXARAQrLzMUPoRJABgAfunP4CQPGE6uFjikMywLfdPQOnKd57D7Dbs76e4SgXWeYTMkVgw9ImEdzHfkLGLS2Y30mybaRki05",
                'shop_id' => "6ab9421e-567d-4b57-afd1-f819babb8fe6",
                'lower_limit_amount' => 9118,
                'upper_limit_amount' => 1173,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills6()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'created_to' => "2021-09-04T18:16:33.000000+09:00",
                'shop_name' => "wCc9LCZ7C83L4qquXmtfpYHXBMw4CmD3iKYRNZbhWLZKqjgpm3R9r7hQqMu82q7czV3hWB4N7U76i9WMakBHYQwuPL",
                'shop_id' => "3b5ccf8f-48f7-4c2a-b4c8-6aac0939ba8f",
                'lower_limit_amount' => 6432,
                'upper_limit_amount' => 454,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills7()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'created_from' => "2020-03-24T21:42:58.000000+09:00",
                'created_to' => "2023-07-28T17:55:49.000000+09:00",
                'shop_name' => "bPWyiflLn625BIbhyzxSbe5fwqxJBr6KLmOOh3WcEIWfXu4YNcSurT16fnQTxjtiU8qSnQv7IwYgTSO2eIHLe7QB8QQJuktcDnYegHk8OPQkxQU24p0znEFIp2pM1QimIf5A",
                'shop_id' => "69a01ce2-3c66-45fa-953b-4c5adc8be043",
                'lower_limit_amount' => 815,
                'upper_limit_amount' => 1950,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills8()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'description' => "vonoo29B7JMvI5FZt126j3sGZh201II9R6YV1VE4yVfuLi1IwOQB0wR6132YJ8apHSsFnRVMH9KFAVyl3WC4ppfIwX02VNe4owz5LWOudegPltXzUQq3qYb25F",
                'created_from' => "2020-02-15T07:29:02.000000+09:00",
                'created_to' => "2021-11-11T20:03:41.000000+09:00",
                'shop_name' => "SZIIs5E0EPbCfxyV5efYnt6xqz4t6hdEiDcgZLlTY86HUeN3QzdfLVtcnZZJFQGHkTv9Hv2xaZS5MEhN5OcngsVsw4ppTCfDoZSnClUeplIHeSRGoWr1QWyXisccfi6IpvEiWujYUIsguMYqQcxdEjL1jS2KAFsqgd5mpUXqZZM067Kg9wFupOzECB7KIlMDwlXveyi7Ys9g1OYsdM1E8RGCyY8UBm68zADdb6mv",
                'shop_id' => "7844caeb-3856-438f-bdc1-8b70aa1075e3",
                'lower_limit_amount' => 4400,
                'upper_limit_amount' => 527,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills9()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'organization_code' => "V",
                'description' => "Gx40DbDWUERDSuXHRdlyxUoQdYwwfEYFrBOw3DX39pcD8RACl74yDoeYdPNTHBinKjzBtIN12qbKgjDqiLMlAHZOfU5uqSyk9E4xIm004ufQLBEN9Iyx5TrGdQdyTsMnaqokvnjh5l",
                'created_from' => "2023-12-23T16:40:00.000000+09:00",
                'created_to' => "2020-08-19T15:55:22.000000+09:00",
                'shop_name' => "EIhmBliZvJlZBX4mHN628myOtikKDRTfPPfzg2huvHkLNG9wHHFGULJxyTT",
                'shop_id' => "2d528510-ebd4-401a-aa53-df7ba9bd9dc4",
                'lower_limit_amount' => 5430,
                'upper_limit_amount' => 7395,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills10()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'private_money_id' => "70d24975-ddca-4598-a4c9-90f35d38b2fe",
                'organization_code' => "--d1",
                'description' => "btoMjgxczzxQB4cNW9d2iBsZ",
                'created_from' => "2023-12-17T23:03:58.000000+09:00",
                'created_to' => "2021-07-25T17:12:28.000000+09:00",
                'shop_name' => "TVaBNcJmnxgQzA1cmrvBt5Y1FIJavmyW798hiL97cEOYpbQGD6y4DHGIi5DtZav5zFhZgxR2BJ45Ngjnfu9HYEU8WNwzq",
                'shop_id' => "1080456b-9ee6-49e8-af88-1fdd3b2f4ffa",
                'lower_limit_amount' => 388,
                'upper_limit_amount' => 159,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills11()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'bill_id' => "Vr",
                'private_money_id' => "705fb96f-75c6-4ec5-9bf2-7e2b0ccb140d",
                'organization_code' => "3Sph73pZC9-Z",
                'description' => "zyJke8wH4f5p4FioC6hVmssJBZ5KjXblRSJkv6CI1C2JY2Ys2De6m3FRNbPPkkfVq5MMWy1XRor4SKngEO24299nWhrei2iOYGNtwezIrNxS5H5dD3zetw0ss3RyAE9ntYcawEBBUI8t0VNV5Zpa8ATXYFaUFbNqmIt",
                'created_from' => "2021-01-22T14:13:31.000000+09:00",
                'created_to' => "2021-05-16T09:52:38.000000+09:00",
                'shop_name' => "OyV0CoNPkYFMcZTHLtjfYc4MQnumeNepoNVbge1PpOLkP8jLhqUiKP6t0gVXHn9YpSXwdVI51LkAfkNXc58E40Rm4",
                'shop_id' => "3ea37f07-2584-4d89-b69b-6745e6a68bb9",
                'lower_limit_amount' => 2112,
                'upper_limit_amount' => 2591,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills12()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'per_page' => 5594,
                'bill_id' => "NPXsOP7sf",
                'private_money_id' => "33ad7d8b-b1e3-4f46-a83c-fd364f8248af",
                'organization_code' => "",
                'description' => "vwgVS0sUYZfm0vW07qWBNi72C89j6VxSSEfntGB3VEhzvfBtRSg2UxGH5pa7lDaKh3tQu9Rh",
                'created_from' => "2020-05-20T01:29:15.000000+09:00",
                'created_to' => "2023-02-07T20:51:33.000000+09:00",
                'shop_name' => "T5ZR4bBCwUooBETOL1Aqu89Od0rbXc2tNpIaBMJZJgli0YZfYqyQjVdj1zAi3GOuMHiJNrNvxFCxfzFdcKc8Cr3BCWud80d88qifznDAMu6dwhJFvAEuzm8Pq52WpVOVVaXLO6APYKijcWTZQ0Zg36llI87fVSEn0VVxDt5wSBZ3AECr4kBSBpt",
                'shop_id' => "c4689135-5771-4dd2-99a3-5b3497e32d4f",
                'lower_limit_amount' => 6615,
                'upper_limit_amount' => 1446,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills13()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'page' => 8226,
                'per_page' => 1996,
                'bill_id' => "OLvCtN",
                'private_money_id' => "44643953-e060-4f01-b4de-237fa6b2238f",
                'organization_code' => "W3V-dW-IP88j--21",
                'description' => "JpN2mrr7UnfoNKV8qNF5aOfavjA1QuOHfUwfGrQY1s119Tyq1fi26FH21hnxvjlL3R8CYia6FCN5RqMiWqNnW44z7DNrPzL81Tm5OXMHY3W0Q0O69lM4rIDgb8v6dDevyD3wfoY3HcBtDsuH2mDRb7JroDDumjAV0FWLnA5EgKN7AtJ7o1hqE",
                'created_from' => "2022-11-14T04:01:02.000000+09:00",
                'created_to' => "2022-12-15T18:47:34.000000+09:00",
                'shop_name' => "V95nQLowhJke2PbTdTbYxhHf5dr5wiEGin3VM1tjZ24bOIlItnLoeEm9DStGboKdKKQmDXVxXjiu5V6RvbHv3j9oyqS6xLrv6xjeZHmq6xhlJ3K6y",
                'shop_id' => "b04ee0f2-1049-4c93-ba9a-215ded3176c6",
                'lower_limit_amount' => 983,
                'upper_limit_amount' => 5879,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
