<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListBills extends TestCase
{
    public function testListBills0()
    {
        $client = $this->newClient();
        $request = new Request\ListBills();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills1()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills2()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'upper_limit_amount' => 4292,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills3()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'lower_limit_amount' => 9614,
                'upper_limit_amount' => 2895,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills4()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'shop_id' => "36d226a8-ef48-4efc-a985-655891530765",
                'lower_limit_amount' => 2398,
                'upper_limit_amount' => 5490,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills5()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'shop_name' => "mNCchRvQIE2L4CaVcTYJ1U",
                'shop_id' => "d45d833d-bf13-421f-ba22-4d958d0ce507",
                'lower_limit_amount' => 5402,
                'upper_limit_amount' => 950,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills6()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'created_to' => "2020-10-21T23:26:06.000000+09:00",
                'shop_name' => "uyPnK2YBNe58Th2ANby0H3hGO2DnDi1aBAVufQfSU8a9heUT7NyopFGD9L4iGixiOPnGAgOK1uvieVHeByMJSi1FWmROYD0Gp9GQgGfgKt",
                'shop_id' => "f8a8634d-58a6-4103-bde0-b70fcfed2664",
                'lower_limit_amount' => 6184,
                'upper_limit_amount' => 6694,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills7()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'created_from' => "2024-02-11T03:37:28.000000+09:00",
                'created_to' => "2020-02-03T01:38:48.000000+09:00",
                'shop_name' => "n64klEHgG3kUtkEOmOH618GvlU0JyiaxQ35mRfn5oEQK2fWrTdGSPLa4uTWe4Yu6igqBZO2IxfJ1bhgQ5ApjetyFvprLmVndIaewvrnWZrQ0WcllSeAx37KjP",
                'shop_id' => "dab94b64-ce6d-43b4-920b-2d1cc4205c72",
                'lower_limit_amount' => 6181,
                'upper_limit_amount' => 4815,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills8()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'description' => "hsnNxazPo2E3lF7yeASkNhg6Idcru36jWHrZz6cmlZO2q0ThUx0lAoXuEXeIvKnPVSdBcdJSf7HumQNnLDpJDFSGOJGhi79fZJNXzpqVQwnIaVAxFXEtWxmUU",
                'created_from' => "2021-05-18T01:32:10.000000+09:00",
                'created_to' => "2021-06-02T21:13:09.000000+09:00",
                'shop_name' => "oJEb00ixvkvvvID0CPHWd1MFTOZSFSLLS7bz6Ur0uKJUYIFrwYNQx6c71KDMPHS1idVCik7ofL1npeh1amO1dp2y9DuXLAliQCxkO1ox5X00b3WWtzCMLgBo3OSbIRjBUrVbyoPNenSH912PhAhJzzFAANOZmbWhSIsdKXdWu44ydIX7tBnYxkHuD",
                'shop_id' => "9cace83a-661c-41a1-8b66-6586d2484e3a",
                'lower_limit_amount' => 566,
                'upper_limit_amount' => 5523,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills9()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'organization_code' => "w1-7-00I4-1-",
                'description' => "utGMc18iUh9EZwdo8ecMN4N0vJWdtACqKT3EoloTZ7QknmUhm1s3DWcpi750p8TDXrXBjhOVbu9ONdu",
                'created_from' => "2023-11-02T09:21:36.000000+09:00",
                'created_to' => "2020-08-19T03:38:01.000000+09:00",
                'shop_name' => "SxoywJZXy3ivSDcADrqMNd5AecFo0IcD4agW3MXZOwbARm7sWWFAfVcKAmga8F8qwbqyG4axgmo6dxkxT6iwgiQxJjCgpWqaNyqBkro4eZt9pDzmhOvqznuxtEubYpYW4kw8nj9j0bj33FKVY",
                'shop_id' => "a339843f-6a2e-4470-ae71-b9facefd4ed7",
                'lower_limit_amount' => 9514,
                'upper_limit_amount' => 8543,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills10()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'private_money_id' => "d211b1a3-831c-49b5-906d-92f82b07ec39",
                'organization_code' => "-8Xk-e5-A3D-5k-qB-M1-j",
                'description' => "CU8PcWr2",
                'created_from' => "2020-09-18T11:47:33.000000+09:00",
                'created_to' => "2023-05-21T18:45:21.000000+09:00",
                'shop_name' => "FrjZNnu0jOEJCEbBpGHjBvZQop5vQWVVil9v9cssI1JiFvpAnstbeNwrlARtrETwx3Mcm9JDjejqNeXpNakcKRUl92KzzV3i9PNgVX6ySc0KTuf281MXlgE5cFZMiB3cJzvc1yYdiZuH8IntWqxZSiGmXctEIyEtW6hG3ZtsYJr70sguwXvBVUkvV5oL7OE0EzOQBlqCKf05ch6TvsAPgRMbyYMNFo",
                'shop_id' => "6f0c5cd1-dc74-4c08-9e59-85e84879a504",
                'lower_limit_amount' => 1795,
                'upper_limit_amount' => 9886,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills11()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'bill_id' => "7p4MPGdic4",
                'private_money_id' => "7e2f008f-5f69-4011-960d-1a0398d0ab9a",
                'organization_code' => "123a6A--E6BS6T---",
                'description' => "LTyc0qzd1bpnMyhYtChN3r2JZVJXLgOzNEmTrQ7",
                'created_from' => "2023-04-01T23:54:03.000000+09:00",
                'created_to' => "2022-02-22T00:26:06.000000+09:00",
                'shop_name' => "CChykQ",
                'shop_id' => "56d2418c-10fd-463c-a2eb-a01ac47ecaa0",
                'lower_limit_amount' => 8961,
                'upper_limit_amount' => 7886,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills12()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'per_page' => 8719,
                'bill_id' => "Gdi",
                'private_money_id' => "d7a7c4db-8fd6-425b-9e97-42f0a11be5bb",
                'organization_code' => "jFUNVu1Zu8Nydyl--4",
                'description' => "2bJwGUoBypXSNEqb9xYUfVnYvlM12FPntyAyyXgd4aHfnTDpH1htkldLwxkiGRmZAShHb4NDDTcUXfCxaDs2tQuWfG53OwRQKwo9bF2JNLS9e5P0HQgrLCbq4mkWMyveF8EkN9S08JpJEbl49WNEF3dT",
                'created_from' => "2023-01-29T10:52:44.000000+09:00",
                'created_to' => "2023-07-25T08:58:05.000000+09:00",
                'shop_name' => "cyRylUx9xCg56Dmqi9kCmTFg5VBI81TyUPXkjUitkJc",
                'shop_id' => "7e7a703f-b0dc-4ccd-8ff4-af92dc37cb08",
                'lower_limit_amount' => 5321,
                'upper_limit_amount' => 1120,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills13()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'page' => 771,
                'per_page' => 7062,
                'bill_id' => "wcj1F",
                'private_money_id' => "34baf4af-d816-4d45-9d6d-efb2a041d139",
                'organization_code' => "--0NlM-",
                'description' => "EGmGIOu67PwK1d8YqM",
                'created_from' => "2021-11-29T06:06:25.000000+09:00",
                'created_to' => "2021-03-23T04:09:53.000000+09:00",
                'shop_name' => "64nV6CaoB0uBtmVOeHe3JSE0cThVagQpbuSbuXqeyT2UjMATPKDrp81hEGvD0tereaaOwKF0Obim8cRIFgFUUUcrQ3NkbWvGaSESHgJEnBdondQoiJToSs1pyr4Zf9PoiC3i03KTBjCjvFVOjlc4LW3dKG6hfV6jSWJ8ET671VYzGSizmvcvP2X19O9Pbs8ZmpXPFFitq0snr83l0ywgO54",
                'shop_id' => "94135fe0-aac9-49c7-9bb8-a890e428fee6",
                'lower_limit_amount' => 8552,
                'upper_limit_amount' => 9379,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
