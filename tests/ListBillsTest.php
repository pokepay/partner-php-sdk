<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListBills extends TestCase
{
    public function testListBills0()
    {
        $client = $this->newClient();
        $request = new Request\ListBills();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills1()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills2()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'upper_limit_amount' => 304,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills3()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'lower_limit_amount' => 7808,
                'upper_limit_amount' => 1599,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills4()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'shop_id' => "54628e48-cdaa-4a0d-8caa-a5c77681be20",
                'lower_limit_amount' => 599,
                'upper_limit_amount' => 1343,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills5()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'shop_name' => "Qhb71dKx3jDqOkAgZZtcqHeQQCAtAAhYmeXQ8gI4JmU7pn76t1YP35fHhrAH6weRMviuwAns3bMVlGhgDQknHXxyAVCiQKMY02nYyEtja",
                'shop_id' => "0301bd27-c031-4faa-b02c-73889e87c8f0",
                'lower_limit_amount' => 5131,
                'upper_limit_amount' => 419,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills6()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'created_to' => "2021-08-14T18:16:53.000000+09:00",
                'shop_name' => "LySE7NeD4apzwe5umHyKppCBNC0V2Zn30utBTTbSMqRkKBh9lBRGNyHvc3Jsp3KnRy3kj0SOJcINPHMC8rXrkN7gNECbSAZsuUG8OTBGJ6IuyOavocE2HastJYp5vbGDsVolxGEGmKLeP7dpX0a00oPDirtG17DbsmBuIZK5sE6O7q4JWXWlzn2GS29FuzlQjh3OL",
                'shop_id' => "8526ab49-2b57-4a91-aafd-55078532b5bf",
                'lower_limit_amount' => 3120,
                'upper_limit_amount' => 2594,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills7()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'created_from' => "2021-09-26T17:01:31.000000+09:00",
                'created_to' => "2021-06-23T19:17:55.000000+09:00",
                'shop_name' => "58UZzC9pufiqyBz4Mzb6ccsA",
                'shop_id' => "0b1852fe-f0b3-4334-a058-bcafa5aad02d",
                'lower_limit_amount' => 1974,
                'upper_limit_amount' => 7073,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills8()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'description' => "mATLrgDAFdoUE1G8l9qoyhcZojvZIzGMYY7Be2IMMsEJCnC2rosm108mKnq9uL83lB45Z2e5ohu7HEz0Tm8dbgNsSiGAJmElzlUGrxscxXr3d957358gBTwCBuRP7RWIsxuqqcYeA3lRFSC8cekHBIkCe8ZL4PwT16JL59w",
                'created_from' => "2024-01-21T07:13:24.000000+09:00",
                'created_to' => "2022-11-29T12:18:51.000000+09:00",
                'shop_name' => "JFoDULuKN4aJ0WcHth2pCal3IK2t3qZl89qcUboQgcpXapRPgFPnUWqBTYAXl4Tc4LYREiFiTzvLHNJEnKydNUeZdAG9oTE6BAY4yr8zPKq40e7FrFrdGvtIfXa74ZhvDsLjLuakbJ1xMskSPm27ZV1Y5K5iRWKrtGsYMyBWaioY7h7CKblHpvjydQMyZpJXRc5eHTKhgTG",
                'shop_id' => "ce20931e-c853-4939-8b39-fcc3ee2f5ed7",
                'lower_limit_amount' => 2721,
                'upper_limit_amount' => 7435,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills9()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'organization_code' => "w1jh94XSykLmJSlu1f9-YY-",
                'description' => "HYMepxiKvhS62bgrQ5CfUOReEzXwh2HaFG0fBq8bRVYAcUhla4ElhTQ0YeURl1GOjurrZiPGP4H2OIiP27PMShdmrLZn0c2TnxQG65H6H6Zxp3qg97OfVFHKHgi6aFdagyODHh8sDrbd0yYWNOsXPOinl78fGFKiwuhSA5xlXRnixRTF",
                'created_from' => "2022-12-02T11:05:14.000000+09:00",
                'created_to' => "2023-11-03T17:58:52.000000+09:00",
                'shop_name' => "3KnwY5SCeFNeP5coK1w3cE1h",
                'shop_id' => "09d07b12-586b-4b5d-83a8-3b4df7a8296b",
                'lower_limit_amount' => 9336,
                'upper_limit_amount' => 4798,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills10()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'private_money_id' => "fc012206-88b1-4fe4-984a-3bb745c13df7",
                'organization_code' => "r",
                'description' => "c1YzM9FpL65e9uvj6CmwRCBhZL6SZNJwpWif0NoyZTk9zujm1IrzuCvBgJFy",
                'created_from' => "2022-01-01T23:19:01.000000+09:00",
                'created_to' => "2020-01-10T13:58:49.000000+09:00",
                'shop_name' => "inga",
                'shop_id' => "1d875f87-66d0-43c4-ac23-695a4829aa3a",
                'lower_limit_amount' => 5909,
                'upper_limit_amount' => 6604,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills11()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'bill_id' => "JhIS9zlc",
                'private_money_id' => "a2e3114b-3ad2-47cf-91f2-58e66ad9863d",
                'organization_code' => "J9",
                'description' => "qeWCAjJJSpFdzZLYbCiJITNAI1ZlMykCH9InEOpOqp6VQ7PyxI8z8maHrCPmSi0T9nS23Dja",
                'created_from' => "2022-01-30T04:06:18.000000+09:00",
                'created_to' => "2021-08-15T00:54:52.000000+09:00",
                'shop_name' => "y6qaNKxt583zaFQcmz3oFKrFOTHr13ICPhWGDlGgs4j9Eh7FtPL92QOR2syaebY0TWJWOlNphnXKdL27Sscv7bB2qxEOKhWZ4ljrqlYi",
                'shop_id' => "e0fb6a95-6d81-4557-b7e3-d224875a90bd",
                'lower_limit_amount' => 4022,
                'upper_limit_amount' => 1119,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills12()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'per_page' => 4236,
                'bill_id' => "k",
                'private_money_id' => "883e6e83-ddd5-4f2e-8651-61bedf4f9abc",
                'organization_code' => "Bl-7X1L1i-Qka1l-z3N3",
                'description' => "MeC2zhpUcKKKd77Orv3TU8b8TS25mKiIpJiQld3fL8zLNlmNwAQ8Y",
                'created_from' => "2023-05-02T10:14:41.000000+09:00",
                'created_to' => "2022-03-23T11:05:46.000000+09:00",
                'shop_name' => "jNT0qxUB8a4TXFhHLajGYZGg1VAUTwo2npf0DnR1bXwfSfE9CGVpkwmUNwEyeY3SkwUHs36riiRTVUmdIwvoptA0kFtVZVAofWrATt0sgPSLEbYAP9C7Dcuytvk1dwYGRq7yqVWmDGrQmiU2MyeSTh59VcXSYsVWgihmxYyBN4EgSbg0a",
                'shop_id' => "5b319a3e-990b-4e16-b51e-fdfd5d83c329",
                'lower_limit_amount' => 8700,
                'upper_limit_amount' => 4627,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills13()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'page' => 3274,
                'per_page' => 2742,
                'bill_id' => "9p8J00L",
                'private_money_id' => "5f2de08d-103d-4110-ad9b-c387735ff457",
                'organization_code' => "5mMP-Bz-72GH-a4s",
                'description' => "LrV4WevyjRybCzhLgyC6HsvW9eZQCCnbwNN5P9Qd8y0okF9W0",
                'created_from' => "2020-01-15T18:43:23.000000+09:00",
                'created_to' => "2023-07-08T00:07:31.000000+09:00",
                'shop_name' => "mFH5BjVCrMur0k0FQIxBJv8dUNKhUIiv0ZvFy5NBcXR",
                'shop_id' => "6d4aded3-3eb5-4b6a-83ca-3be8f5454422",
                'lower_limit_amount' => 7241,
                'upper_limit_amount' => 3007,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
