<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListBills extends TestCase
{
    public function testListBills0()
    {
        $client = $this->newClient();
        $request = new Request\ListBills();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills1()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills2()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'upper_limit_amount' => 8374,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills3()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'lower_limit_amount' => 414,
                'upper_limit_amount' => 3796,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills4()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'shop_id' => "db454cdb-2563-4ac8-b0e7-d118290fa6e1",
                'lower_limit_amount' => 937,
                'upper_limit_amount' => 3109,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills5()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'shop_name' => "j8ZeP1HDPDTHzzRIdWxHjKy82N74miDUcOuIVqRIEU93kljq1Q8TjukgNdosrcsbqXkWqVhxkWkSbCcQV2KWKaXCJgJ38wW32AKvILX828FihWZQyqSbK0FMXzQI3K0upT8cYY",
                'shop_id' => "94cc5713-2995-4c41-89a2-4575114060c5",
                'lower_limit_amount' => 3553,
                'upper_limit_amount' => 5130,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills6()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'created_to' => "2023-10-09T22:21:55.000000Z",
                'shop_name' => "yo1Pr6ZXG8JSWzel5X6ggilnbIikjMsDtvgyHs8kXaVldBOvstCOu5vNtx3bBib1BS1IIGWD4",
                'shop_id' => "874fa5ed-b7f0-49db-8954-3ad99a1b5897",
                'lower_limit_amount' => 9824,
                'upper_limit_amount' => 8975,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills7()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'created_from' => "2020-04-02T18:45:34.000000Z",
                'created_to' => "2021-04-23T15:02:20.000000Z",
                'shop_name' => "PcbcfJ8JMK49acleVRspcldtQ5tmURvImdniels4ZrQj5DbpL3fJFTwwcn9WP3m8VyuReCX",
                'shop_id' => "fdbe7b8b-788f-4c00-a578-5635ad054457",
                'lower_limit_amount' => 2310,
                'upper_limit_amount' => 5672,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills8()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'description' => "s7Yv5KDLwBcz7zjgazophuiC1VR8XiXW8JGdOuAk94khcXRAwlFr4tlYuwMI02c6YHU8uGe8qGNvTmA6H2tH06f3cp",
                'created_from' => "2020-08-28T22:18:38.000000Z",
                'created_to' => "2022-11-20T18:31:07.000000Z",
                'shop_name' => "GDNNhHR4jcwCrCwplpzKOK41muEKIO2q9f",
                'shop_id' => "f11af890-deb6-4b64-a11b-8551a0684435",
                'lower_limit_amount' => 7259,
                'upper_limit_amount' => 2726,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills9()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'organization_code' => "9-7z-8w3g4i0s-qc68-o8Z-X1I",
                'description' => "0mKrSXl5b4zkBhHXIiOwN14umNbs9HzTMzg2AFGgoFwChMKy",
                'created_from' => "2022-08-08T09:36:18.000000Z",
                'created_to' => "2021-09-29T13:05:19.000000Z",
                'shop_name' => "jnp6NWuVTvukHEJJxjvwAaSkrlPscgFZA7kgmnQGh0g7xEy0gjIfqsy3qqeO2uL3gmJXocI00jDfhi9nkYKzlD45lOs5FqPThDPFGAn6g717B9KAWVHYRkMJaQT0YWfQtgxVhq9RVZQG6j5A2pjVon4uuDqic8AnsoXtmv8Ler",
                'shop_id' => "cdeffdd8-4f1b-4bd1-9f2d-70233a2b1ca4",
                'lower_limit_amount' => 3165,
                'upper_limit_amount' => 4670,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills10()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'private_money_id' => "eac43b3c-974c-496a-8638-e118119cc1d1",
                'organization_code' => "r---Y8Go7-",
                'description' => "CMVyjlRecAjobCopZKVFLb9UiV0XEmtc9iB",
                'created_from' => "2023-06-27T03:44:29.000000Z",
                'created_to' => "2023-09-25T17:59:46.000000Z",
                'shop_name' => "2syyuELfawMoOZtkTktpas3rTKhS7CSUreJUtTC5W6xtdNcZmGzg6LOAwdB03Wi69g5bppku3R9lJVdDaUu8gKI7uxlsX8tJTVN1o4Avhi0fX5dozKzovfXQ3PHUhjHLVEtSI",
                'shop_id' => "08ce28e1-09fb-46f8-9d2f-f55ae957baa9",
                'lower_limit_amount' => 2816,
                'upper_limit_amount' => 5711,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills11()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'bill_id' => "SLz",
                'private_money_id' => "db39cdc7-1a93-4896-b321-119f13b4e6aa",
                'organization_code' => "r1--l0PC2-YF-u9-1n-N-hH17XZ7e",
                'description' => "C9RfQiSpTWZrd0hVSBtTuiSKN3fmfJoVUvvyWz4acD4YN5",
                'created_from' => "2023-11-11T11:34:52.000000Z",
                'created_to' => "2020-04-08T02:23:53.000000Z",
                'shop_name' => "s59xI",
                'shop_id' => "fcb6a957-11c7-4b2c-87bf-1702d83dcc75",
                'lower_limit_amount' => 4067,
                'upper_limit_amount' => 7962,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills12()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'per_page' => 7637,
                'bill_id' => "FFrrXyLyM",
                'private_money_id' => "967b698e-4ccf-4173-a274-e440aeed4465",
                'organization_code' => "e-rUFv-xFCvH54G51-",
                'description' => "t7Q5BMcC1v73v60y8DMLWrlnr061xWZsz",
                'created_from' => "2020-09-12T06:07:45.000000Z",
                'created_to' => "2022-03-16T12:50:50.000000Z",
                'shop_name' => "ogogHitDMic7XGDhIwoiIw8buBfBCDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7",
                'shop_id' => "851944d1-637b-4de0-a2cd-9d8271642a8f",
                'lower_limit_amount' => 5132,
                'upper_limit_amount' => 1439,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills13()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'page' => 7626,
                'per_page' => 7612,
                'bill_id' => "bzCAj1GsSv",
                'private_money_id' => "c24c2166-3189-461c-987e-f204c0bb4a9f",
                'organization_code' => "T1--v-G724-7qs-0fqD1J46-L",
                'description' => "z7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwckpkfwdxwxZ95sfTG55oAI4VCG4sTwcYeFwcP7ZmLygXYRtjxN2aIco6xNkWo0aYr1y1KHCmQGL0IM3EaCDd87kJG01a7GOWj7LV4v5yot",
                'created_from' => "2020-03-03T04:15:12.000000Z",
                'created_to' => "2022-02-09T13:42:21.000000Z",
                'shop_name' => "hlRj2vkjikjfOo5Zy9zD8cfycxdjXF6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4Wo0L4evFZLjpsodOQD43fZ5T5bk20dIuBp2e25agSXyEGickpeze5Yn7vyzhltNB5edjt157B8n6abEccTMUOFUG9Fme9wlEEj2gZC8ckmFOzWRdKb11QTIHM0x5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0VnsFyzfyt6Bg95FB1a7IFTBkW9",
                'shop_id' => "028de0f4-4a0b-499c-9550-af757adb9f62",
                'lower_limit_amount' => 6879,
                'upper_limit_amount' => 3373,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
