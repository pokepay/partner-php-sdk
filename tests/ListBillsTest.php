<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListBills extends TestCase
{
    public function testListBills0()
    {
        $client = $this->newClient();
        $request = new Request\ListBills();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills1()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills2()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'upper_limit_amount' => 650,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills3()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'lower_limit_amount' => 5936,
                'upper_limit_amount' => 9960,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills4()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'shop_id' => "a7050d56-e484-4100-a42a-4981813b44d3",
                'lower_limit_amount' => 3353,
                'upper_limit_amount' => 1702,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills5()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'shop_name' => "tTuiSKN3fmfJoVUvvyWz4acD4YN59s59xIWGujcTxFFrrXyLyMOsteVH8YLvoUoraYyVUvoHuSd144X7ZEq8UGlMat7Q5BMcC1v73v60y8DMLWrlnr061xWZsz1ogogHitDMic7XGDhIwoiIw8buBfBCDG7j4DoWkpZIbqBi9TROGFtlR9rLj2Y1ER9gKdUSrcKHlFd3Ur1MCMIUROIYftW7QMsIbz",
                'shop_id' => "9c7c8b06-66a4-46df-8341-690826631c82",
                'lower_limit_amount' => 6705,
                'upper_limit_amount' => 6957,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills6()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'created_to' => "2020-05-18T17:04:33.000000+09:00",
                'shop_name' => "SvfXjxUW5PMdDuBsMe04PTf8vSsZQwwHu7ykbtkzGPhzROeLpMaUZfjz7mGpF3omDB92rueqlmfnAfu7erS3gFr3FTdQ8rwck",
                'shop_id' => "4d01d318-8970-43eb-8a66-fbdcc7f5a9a8",
                'lower_limit_amount' => 5695,
                'upper_limit_amount' => 3483,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills7()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'created_from' => "2022-11-05T03:07:06.000000+09:00",
                'created_to' => "2025-02-05T23:11:10.000000+09:00",
                'shop_name' => "95sfTG55oAI4VCG4sTwcYeFwcP7ZmLygXYRtjxN2",
                'shop_id' => "08dd8414-3961-4949-a35d-407e79451b96",
                'lower_limit_amount' => 9993,
                'upper_limit_amount' => 6767,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills8()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'description' => "kWo0",
                'created_from' => "2023-05-26T05:02:17.000000+09:00",
                'created_to' => "2021-04-13T01:43:01.000000+09:00",
                'shop_name' => "r1y1KHCmQGL0IM3EaCDd87kJG01a7GOWj7LV4v5yotPxhlRj2vkjikjfOo5Zy9zD8cfycxdjXF6cmwiKvevzAx7rHin0MHYFpvhqZUg2yG4Wo0L4evFZLjpsodOQD43fZ5T5bk20dIuBp2e25agSXyEGickpeze5Yn7vyzhltNB5edj",
                'shop_id' => "35a98674-54b1-4eff-b5b7-49135a97ff9c",
                'lower_limit_amount' => 2816,
                'upper_limit_amount' => 6850,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills9()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'organization_code' => "X-fEK7A3Y-D-C-2-szBl1r1UJny",
                'description' => "5oJQ4O2Nwel4rHJTDGFvqXggC9Tcy7ogKmUw0Vns",
                'created_from' => "2021-01-23T23:23:11.000000+09:00",
                'created_to' => "2023-02-13T17:53:31.000000+09:00",
                'shop_name' => "zfyt6Bg95FB1a7IFTBkW9tPubyeqITUoc54HWI6lY3NxA2Qq6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQRpkGArTGUPugetKJLdESdgB4DMlPhuAgx6J23S5a4KJH2dJnXOeAy8xYgmSSWd6nFdHza9f0TF30iljDxgSpyfoekUtYXnQ6dyRqDXbojqilSXXfgL13r",
                'shop_id' => "5479429e-8624-4549-ba15-ac9f38e14efc",
                'lower_limit_amount' => 6940,
                'upper_limit_amount' => 8625,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills10()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'private_money_id' => "10512deb-d1dd-4622-8d86-91d966799829",
                'organization_code' => "cIqFB-D2n-1J-sq9---AI0y6GlWoL",
                'description' => "8VGfHRzulBqoPAVuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55WYfHfvN0QEBe9OUmuQoNyAxdhT65YfaNVM2xjqlPxxy8RqwFWTQ1hvVt9bN2zIxNZ",
                'created_from' => "2023-10-18T14:58:00.000000+09:00",
                'created_to' => "2024-02-29T06:11:35.000000+09:00",
                'shop_name' => "eE9mHPjq6XCvYjxbcuNA5AOQHru6gAXocPu4UpOUbFxl1xg8SX1voG8Gydqo4fQ7D47J36mgyKf2pLnur36TYPgxIzfeirgwWnuJKugM3OQh2JHBnxbiEM0oFGnnvKX9mW4mLerHweV6yDqMFurm2HyY5rxBRsFTyEvnewbYd4rNZJsCq7m7a",
                'shop_id' => "a5f62a83-32a0-4972-b718-1fb2e5d455ce",
                'lower_limit_amount' => 200,
                'upper_limit_amount' => 9265,
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills11()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'bill_id' => "xHX",
                'private_money_id' => "628ba161-1141-4acf-8671-c2c961a94477",
                'organization_code' => "oRxCrM9Q4RK5ERn1B7y",
                'description' => "B9A32ESqVUKE1GN9JqLEvyRdA5j20ws4Z1pnjZ8xWKeN3WKGyHXCKDfS0S9olxtCG8sS34enFyHhIbteE1tQOMt",
                'created_from' => "2020-03-21T15:23:58.000000+09:00",
                'created_to' => "2021-08-14T22:15:16.000000+09:00",
                'shop_name' => "UhD0OiwEvovxL7L6kZ3KaNub1zwaCdHgj8ik3dmsSURUN",
                'shop_id' => "adafcae1-08d3-4667-a907-82bc520d2136",
                'lower_limit_amount' => 6735,
                'upper_limit_amount' => 8736,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills12()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'per_page' => 8393,
                'bill_id' => "mOeQFO",
                'private_money_id' => "70463688-1eb3-4ccf-b893-38b8dcfa0bf1",
                'organization_code' => "B-63",
                'description' => "zykU4qQWwEl9RBh7Jk",
                'created_from' => "2021-01-24T01:49:03.000000+09:00",
                'created_to' => "2025-08-10T23:09:14.000000+09:00",
                'shop_name' => "Q2DDr8e6Qf8fK7SBxethCuCr4dBSWzD3agMTAvZtCmtviHLHOBHoLHZ5Hyso5u9Osjia9h3ovwp1QqOYhJfTJv94bnDyHKg7jf7TRBDusrb62imeaN035TYhQYVT6897JBIT98Ea3vOiHnJbC3RzxMsGYTRQVbbDGQ3KFvfr7",
                'shop_id' => "25dc6af7-dc02-4a24-a382-3cd4138fb349",
                'lower_limit_amount' => 2455,
                'upper_limit_amount' => 5435,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListBills13()
    {
        $client = $this->newClient();
        $request = new Request\ListBills(
            [
                'page' => 1906,
                'per_page' => 1895,
                'bill_id' => "a8VmM7Lx",
                'private_money_id' => "bbf29019-fa61-4ae1-8606-7b922f41f4e6",
                'organization_code' => "W-Z-arBk66Qpw-B---K4-Pn6n0",
                'description' => "N4p4uCNZaugRp11iMcrfILoN8ZP7287JaoYb8spv1FcaYx8c7c37K2BoQEomxqdvzxKVxdoit0nsRdkY0a6T9IRy95uKnYj6aDVb3qDkr4zFWttvA7t4NS9wkdOXwioDpfXuzoNbRpuKefj9znX2XonFzQcO5QEOmdgUm73I2kFchNQksZB6ByT3l",
                'created_from' => "2025-02-22T12:43:43.000000+09:00",
                'created_to' => "2024-04-12T11:49:51.000000+09:00",
                'shop_name' => "VRQ7O823WFeXCsADfveWv5SetJLuZcB6tdcwibyPvT",
                'shop_id' => "9dba6189-275e-4ac8-98ac-c099aade9593",
                'lower_limit_amount' => 1250,
                'upper_limit_amount' => 2538,
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
