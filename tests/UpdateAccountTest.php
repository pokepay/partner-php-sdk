<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateAccount extends TestCase
{
    public function testUpdateAccount0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateAccount(
            "5613a1c6-1700-4ec3-97c9-d1ceabf40ac1"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateAccount1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateAccount(
            "5613a1c6-1700-4ec3-97c9-d1ceabf40ac1",
            [
                'can_transfer_topup' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateAccount2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateAccount(
            "5613a1c6-1700-4ec3-97c9-d1ceabf40ac1",
            [
                'status' => "suspended",
                'can_transfer_topup' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateAccount3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateAccount(
            "5613a1c6-1700-4ec3-97c9-d1ceabf40ac1",
            [
                'is_suspended' => FALSE,
                'status' => "active",
                'can_transfer_topup' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
