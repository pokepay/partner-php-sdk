<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "640b98cc-dd91-4af6-b9db-4b726146cfd9"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "640b98cc-dd91-4af6-b9db-4b726146cfd9",
            [
                'per_page' => 9555
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "640b98cc-dd91-4af6-b9db-4b726146cfd9",
            [
                'page' => 6996,
                'per_page' => 5340
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "640b98cc-dd91-4af6-b9db-4b726146cfd9",
            [
                'available_to' => "2022-08-06T06:44:53.000000Z",
                'page' => 9681,
                'per_page' => 3661
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "640b98cc-dd91-4af6-b9db-4b726146cfd9",
            [
                'available_from' => "2023-03-29T23:22:07.000000Z",
                'available_to' => "2023-10-12T12:41:31.000000Z",
                'page' => 2392,
                'per_page' => 4734
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "640b98cc-dd91-4af6-b9db-4b726146cfd9",
            [
                'available_shop_name' => "1Vfe",
                'available_from' => "2020-10-01T04:46:44.000000Z",
                'available_to' => "2023-12-30T19:18:10.000000Z",
                'page' => 6962,
                'per_page' => 3401
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "640b98cc-dd91-4af6-b9db-4b726146cfd9",
            [
                'issued_shop_name' => "r4pu5z",
                'available_shop_name' => "bHCqAb",
                'available_from' => "2020-09-21T18:00:28.000000Z",
                'available_to' => "2021-09-06T12:12:46.000000Z",
                'page' => 7159,
                'per_page' => 3774
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "640b98cc-dd91-4af6-b9db-4b726146cfd9",
            [
                'coupon_name' => "aj08T",
                'issued_shop_name' => "AqfU9VC",
                'available_shop_name' => "6cIIeErItI",
                'available_from' => "2023-11-23T16:20:13.000000Z",
                'available_to' => "2020-01-04T16:26:40.000000Z",
                'page' => 4330,
                'per_page' => 1570
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "640b98cc-dd91-4af6-b9db-4b726146cfd9",
            [
                'coupon_id' => "tFd5fw",
                'coupon_name' => "xE",
                'issued_shop_name' => "mAXCuaDk4",
                'available_shop_name' => "OYMd63",
                'available_from' => "2022-10-19T08:38:30.000000Z",
                'available_to' => "2021-02-19T11:26:16.000000Z",
                'page' => 7559,
                'per_page' => 7250
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
