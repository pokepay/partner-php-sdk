<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "f3a243d0-f91c-40e2-ac19-5da28b9d3757"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "f3a243d0-f91c-40e2-ac19-5da28b9d3757",
            [
                'per_page' => 9844
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "f3a243d0-f91c-40e2-ac19-5da28b9d3757",
            [
                'page' => 9195,
                'per_page' => 4716
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "f3a243d0-f91c-40e2-ac19-5da28b9d3757",
            [
                'available_to' => "2023-07-15T22:22:53.000000Z",
                'page' => 3704,
                'per_page' => 1319
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "f3a243d0-f91c-40e2-ac19-5da28b9d3757",
            [
                'available_from' => "2020-12-29T05:48:51.000000Z",
                'available_to' => "2022-06-27T02:40:23.000000Z",
                'page' => 7550,
                'per_page' => 8759
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "f3a243d0-f91c-40e2-ac19-5da28b9d3757",
            [
                'available_shop_name' => "l5fjzCH",
                'available_from' => "2021-04-20T15:05:35.000000Z",
                'available_to' => "2023-12-31T09:46:24.000000Z",
                'page' => 6021,
                'per_page' => 1157
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "f3a243d0-f91c-40e2-ac19-5da28b9d3757",
            [
                'issued_shop_name' => "4",
                'available_shop_name' => "A",
                'available_from' => "2024-09-22T11:07:02.000000Z",
                'available_to' => "2020-10-23T11:15:17.000000Z",
                'page' => 6568,
                'per_page' => 3182
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "f3a243d0-f91c-40e2-ac19-5da28b9d3757",
            [
                'coupon_name' => "ehgiDu",
                'issued_shop_name' => "605X",
                'available_shop_name' => "bVsN",
                'available_from' => "2022-05-08T18:21:29.000000Z",
                'available_to' => "2024-04-14T02:46:26.000000Z",
                'page' => 9439,
                'per_page' => 1814
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "f3a243d0-f91c-40e2-ac19-5da28b9d3757",
            [
                'coupon_id' => "Vd",
                'coupon_name' => "DyaVdH",
                'issued_shop_name' => "VHz0uIF",
                'available_shop_name' => "KJ",
                'available_from' => "2020-05-07T06:49:03.000000Z",
                'available_to' => "2022-09-17T08:57:19.000000Z",
                'page' => 2885,
                'per_page' => 9560
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
