<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "18048d18-15c3-4ea1-971e-b173ad9c27a9"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "18048d18-15c3-4ea1-971e-b173ad9c27a9",
            [
                'per_page' => 6715
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "18048d18-15c3-4ea1-971e-b173ad9c27a9",
            [
                'page' => 8318,
                'per_page' => 4501
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "18048d18-15c3-4ea1-971e-b173ad9c27a9",
            [
                'available_to' => "2022-03-13T20:10:07.000000+09:00",
                'page' => 1523,
                'per_page' => 6970
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "18048d18-15c3-4ea1-971e-b173ad9c27a9",
            [
                'available_from' => "2020-07-27T12:59:26.000000+09:00",
                'available_to' => "2022-02-01T03:50:14.000000+09:00",
                'page' => 5888,
                'per_page' => 9240
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "18048d18-15c3-4ea1-971e-b173ad9c27a9",
            [
                'available_shop_name' => "n73rAl7GJ",
                'available_from' => "2023-10-16T13:42:24.000000+09:00",
                'available_to' => "2022-08-24T16:24:25.000000+09:00",
                'page' => 3964,
                'per_page' => 2049
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "18048d18-15c3-4ea1-971e-b173ad9c27a9",
            [
                'issued_shop_name' => "w",
                'available_shop_name' => "7Ug2H",
                'available_from' => "2022-02-16T13:42:32.000000+09:00",
                'available_to' => "2021-06-29T07:32:31.000000+09:00",
                'page' => 998,
                'per_page' => 4983
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "18048d18-15c3-4ea1-971e-b173ad9c27a9",
            [
                'coupon_name' => "HslvmGffrb",
                'issued_shop_name' => "Ysj",
                'available_shop_name' => "dFsyRaZo9",
                'available_from' => "2023-05-24T08:48:05.000000+09:00",
                'available_to' => "2023-06-26T08:32:59.000000+09:00",
                'page' => 6283,
                'per_page' => 5511
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "18048d18-15c3-4ea1-971e-b173ad9c27a9",
            [
                'coupon_id' => "TjmIA",
                'coupon_name' => "q",
                'issued_shop_name' => "6ioNV",
                'available_shop_name' => "6sntzUd",
                'available_from' => "2020-02-04T15:08:46.000000+09:00",
                'available_to' => "2022-08-18T14:26:51.000000+09:00",
                'page' => 9960,
                'per_page' => 4289
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
