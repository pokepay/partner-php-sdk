<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "ac165cc5-39f9-4f24-a146-a2552fd272cc"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "ac165cc5-39f9-4f24-a146-a2552fd272cc",
            [
                'per_page' => 1836
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "ac165cc5-39f9-4f24-a146-a2552fd272cc",
            [
                'page' => 5736,
                'per_page' => 4463
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "ac165cc5-39f9-4f24-a146-a2552fd272cc",
            [
                'available_to' => "2022-10-07T17:46:45.000000+09:00",
                'page' => 6848,
                'per_page' => 1908
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "ac165cc5-39f9-4f24-a146-a2552fd272cc",
            [
                'available_from' => "2022-07-17T18:46:07.000000+09:00",
                'available_to' => "2020-08-02T16:07:33.000000+09:00",
                'page' => 2955,
                'per_page' => 5517
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "ac165cc5-39f9-4f24-a146-a2552fd272cc",
            [
                'available_shop_name' => "WA",
                'available_from' => "2020-10-11T21:09:41.000000+09:00",
                'available_to' => "2023-07-16T04:39:49.000000+09:00",
                'page' => 5532,
                'per_page' => 8175
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "ac165cc5-39f9-4f24-a146-a2552fd272cc",
            [
                'issued_shop_name' => "zoLKhC",
                'available_shop_name' => "zty8a",
                'available_from' => "2020-02-27T17:38:13.000000+09:00",
                'available_to' => "2020-10-26T07:40:32.000000+09:00",
                'page' => 6352,
                'per_page' => 7696
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "ac165cc5-39f9-4f24-a146-a2552fd272cc",
            [
                'coupon_name' => "3K59DN",
                'issued_shop_name' => "mrR8US8R",
                'available_shop_name' => "Y0dKXb",
                'available_from' => "2020-08-15T21:04:59.000000+09:00",
                'available_to' => "2020-06-27T16:30:40.000000+09:00",
                'page' => 9925,
                'per_page' => 4779
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "ac165cc5-39f9-4f24-a146-a2552fd272cc",
            [
                'coupon_id' => "8bEIlyS",
                'coupon_name' => "8n",
                'issued_shop_name' => "waZ8",
                'available_shop_name' => "LvLqyVL",
                'available_from' => "2022-06-06T02:47:54.000000+09:00",
                'available_to' => "2020-07-19T20:04:31.000000+09:00",
                'page' => 1380,
                'per_page' => 2949
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
