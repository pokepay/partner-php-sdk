<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "dc217f26-4deb-4a29-8c3e-96db0cd002f7"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "dc217f26-4deb-4a29-8c3e-96db0cd002f7",
            [
                'per_page' => 1136
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "dc217f26-4deb-4a29-8c3e-96db0cd002f7",
            [
                'page' => 4692,
                'per_page' => 6987
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "dc217f26-4deb-4a29-8c3e-96db0cd002f7",
            [
                'available_to' => "2020-06-06T07:13:47.000000Z",
                'page' => 6056,
                'per_page' => 2293
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "dc217f26-4deb-4a29-8c3e-96db0cd002f7",
            [
                'available_from' => "2021-10-01T05:50:40.000000Z",
                'available_to' => "2023-05-18T17:47:03.000000Z",
                'page' => 5883,
                'per_page' => 4412
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "dc217f26-4deb-4a29-8c3e-96db0cd002f7",
            [
                'available_shop_name' => "g",
                'available_from' => "2020-12-20T06:53:14.000000Z",
                'available_to' => "2021-04-01T00:49:49.000000Z",
                'page' => 5789,
                'per_page' => 8382
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "dc217f26-4deb-4a29-8c3e-96db0cd002f7",
            [
                'issued_shop_name' => "S",
                'available_shop_name' => "sj",
                'available_from' => "2020-01-18T23:21:39.000000Z",
                'available_to' => "2023-06-02T03:19:09.000000Z",
                'page' => 7634,
                'per_page' => 5240
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "dc217f26-4deb-4a29-8c3e-96db0cd002f7",
            [
                'coupon_name' => "MEx",
                'issued_shop_name' => "C1w6",
                'available_shop_name' => "fl9ZUstqj7",
                'available_from' => "2023-10-17T12:11:47.000000Z",
                'available_to' => "2020-09-20T09:15:20.000000Z",
                'page' => 7115,
                'per_page' => 7602
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "dc217f26-4deb-4a29-8c3e-96db0cd002f7",
            [
                'coupon_id' => "azd0M0QE8",
                'coupon_name' => "si7",
                'issued_shop_name' => "ktomTSIs",
                'available_shop_name' => "sss0",
                'available_from' => "2021-09-27T07:12:19.000000Z",
                'available_to' => "2021-01-14T23:41:37.000000Z",
                'page' => 9981,
                'per_page' => 929
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
