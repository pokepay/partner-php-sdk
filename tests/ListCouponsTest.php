<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "a6b15bb7-5638-4c99-9738-8fe9399d52a1"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
            [
                'per_page' => 5485
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
            [
                'page' => 2145,
                'per_page' => 4061
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
            [
                'available_to' => "2024-01-11T13:13:31.000000Z",
                'page' => 6061,
                'per_page' => 5678
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
            [
                'available_from' => "2024-11-10T14:43:52.000000Z",
                'available_to' => "2025-06-19T01:49:43.000000Z",
                'page' => 3798,
                'per_page' => 7026
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
            [
                'available_shop_name' => "zLy9",
                'available_from' => "2023-10-31T04:30:48.000000Z",
                'available_to' => "2023-08-22T22:03:54.000000Z",
                'page' => 3065,
                'per_page' => 5692
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
            [
                'issued_shop_name' => "4h",
                'available_shop_name' => "bOAXXYVgV",
                'available_from' => "2021-11-08T21:38:50.000000Z",
                'available_to' => "2021-07-28T11:30:37.000000Z",
                'page' => 1818,
                'per_page' => 2043
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
            [
                'coupon_name' => "hmxuYV6",
                'issued_shop_name' => "qe5o2",
                'available_shop_name' => "2Ol",
                'available_from' => "2024-06-06T10:27:30.000000Z",
                'available_to' => "2021-01-11T11:41:00.000000Z",
                'page' => 1710,
                'per_page' => 1574
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "a6b15bb7-5638-4c99-9738-8fe9399d52a1",
            [
                'coupon_id' => "dk5kJbuw4",
                'coupon_name' => "uJbyUdwtwe",
                'issued_shop_name' => "akD",
                'available_shop_name' => "g0TFsZujDl",
                'available_from' => "2024-10-27T07:48:57.000000Z",
                'available_to' => "2022-09-10T05:04:20.000000Z",
                'page' => 8642,
                'per_page' => 5517
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
