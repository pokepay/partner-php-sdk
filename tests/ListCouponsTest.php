<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "0f9ef370-53b2-4379-b271-4dab0406c646"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "0f9ef370-53b2-4379-b271-4dab0406c646",
            [
                'per_page' => 9150
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "0f9ef370-53b2-4379-b271-4dab0406c646",
            [
                'page' => 2580,
                'per_page' => 9418
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "0f9ef370-53b2-4379-b271-4dab0406c646",
            [
                'available_to' => "2023-04-15T20:22:52.000000+09:00",
                'page' => 895,
                'per_page' => 2741
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "0f9ef370-53b2-4379-b271-4dab0406c646",
            [
                'available_from' => "2022-03-16T20:58:04.000000+09:00",
                'available_to' => "2020-11-27T10:53:41.000000+09:00",
                'page' => 6251,
                'per_page' => 6974
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "0f9ef370-53b2-4379-b271-4dab0406c646",
            [
                'available_shop_name' => "o",
                'available_from' => "2023-04-26T02:32:54.000000+09:00",
                'available_to' => "2021-05-07T08:35:46.000000+09:00",
                'page' => 60,
                'per_page' => 5562
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "0f9ef370-53b2-4379-b271-4dab0406c646",
            [
                'issued_shop_name' => "UGD4i",
                'available_shop_name' => "6Y3J",
                'available_from' => "2021-09-25T21:47:26.000000+09:00",
                'available_to' => "2023-12-23T16:25:19.000000+09:00",
                'page' => 5435,
                'per_page' => 6361
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "0f9ef370-53b2-4379-b271-4dab0406c646",
            [
                'coupon_name' => "hI5MgtT",
                'issued_shop_name' => "7LQeWc71V",
                'available_shop_name' => "qe0TiiPc",
                'available_from' => "2022-11-08T18:39:12.000000+09:00",
                'available_to' => "2023-10-05T12:57:57.000000+09:00",
                'page' => 4511,
                'per_page' => 3553
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "0f9ef370-53b2-4379-b271-4dab0406c646",
            [
                'coupon_id' => "0mWRMRn",
                'coupon_name' => "PGX3t9D",
                'issued_shop_name' => "dv9T",
                'available_shop_name' => "aeq",
                'available_from' => "2021-08-07T09:26:58.000000+09:00",
                'available_to' => "2020-05-30T18:39:15.000000+09:00",
                'page' => 7916,
                'per_page' => 3035
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
