<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "5bb7994f-58c0-470e-96b6-64de82359936"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "5bb7994f-58c0-470e-96b6-64de82359936",
            [
                'per_page' => 9609
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "5bb7994f-58c0-470e-96b6-64de82359936",
            [
                'page' => 3951,
                'per_page' => 918
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "5bb7994f-58c0-470e-96b6-64de82359936",
            [
                'available_to' => "2023-03-16T00:44:22.000000+09:00",
                'page' => 1462,
                'per_page' => 9885
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "5bb7994f-58c0-470e-96b6-64de82359936",
            [
                'available_from' => "2022-03-01T17:06:18.000000+09:00",
                'available_to' => "2020-10-17T09:21:57.000000+09:00",
                'page' => 4245,
                'per_page' => 4612
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "5bb7994f-58c0-470e-96b6-64de82359936",
            [
                'available_shop_name' => "RFBl4jl",
                'available_from' => "2021-12-12T00:47:53.000000+09:00",
                'available_to' => "2024-02-14T14:15:35.000000+09:00",
                'page' => 3158,
                'per_page' => 321
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "5bb7994f-58c0-470e-96b6-64de82359936",
            [
                'issued_shop_name' => "PH4dp",
                'available_shop_name' => "4K",
                'available_from' => "2021-09-28T14:41:21.000000+09:00",
                'available_to' => "2023-03-18T12:32:14.000000+09:00",
                'page' => 1153,
                'per_page' => 2625
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "5bb7994f-58c0-470e-96b6-64de82359936",
            [
                'coupon_name' => "BOSJ",
                'issued_shop_name' => "xQ8Wdf1i",
                'available_shop_name' => "Ek7",
                'available_from' => "2021-08-25T11:29:08.000000+09:00",
                'available_to' => "2022-06-10T19:50:35.000000+09:00",
                'page' => 1832,
                'per_page' => 3612
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "5bb7994f-58c0-470e-96b6-64de82359936",
            [
                'coupon_id' => "cq3BdHRSF",
                'coupon_name' => "JB5X0K7Uw",
                'issued_shop_name' => "m",
                'available_shop_name' => "E3",
                'available_from' => "2022-08-28T11:50:03.000000+09:00",
                'available_to' => "2021-04-18T12:14:05.000000+09:00",
                'page' => 1817,
                'per_page' => 8922
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
