<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "087b53df-6336-4461-bf04-ea20829b94bb"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "087b53df-6336-4461-bf04-ea20829b94bb",
            [
                'per_page' => 1791
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "087b53df-6336-4461-bf04-ea20829b94bb",
            [
                'page' => 5301,
                'per_page' => 3509
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "087b53df-6336-4461-bf04-ea20829b94bb",
            [
                'available_to' => "2023-03-08T12:16:38.000000Z",
                'page' => 9175,
                'per_page' => 7262
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "087b53df-6336-4461-bf04-ea20829b94bb",
            [
                'available_from' => "2022-04-19T06:06:25.000000Z",
                'available_to' => "2022-12-02T00:59:50.000000Z",
                'page' => 8830,
                'per_page' => 4865
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "087b53df-6336-4461-bf04-ea20829b94bb",
            [
                'available_shop_name' => "Et",
                'available_from' => "2023-09-19T12:19:17.000000Z",
                'available_to' => "2021-07-30T00:02:15.000000Z",
                'page' => 3343,
                'per_page' => 697
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "087b53df-6336-4461-bf04-ea20829b94bb",
            [
                'issued_shop_name' => "bTpd0PiIw",
                'available_shop_name' => "54q6",
                'available_from' => "2020-07-16T08:21:39.000000Z",
                'available_to' => "2022-01-07T09:42:39.000000Z",
                'page' => 2822,
                'per_page' => 5726
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "087b53df-6336-4461-bf04-ea20829b94bb",
            [
                'coupon_name' => "WkvfusE3m",
                'issued_shop_name' => "agR",
                'available_shop_name' => "X",
                'available_from' => "2021-11-29T02:34:42.000000Z",
                'available_to' => "2022-05-31T06:28:06.000000Z",
                'page' => 9889,
                'per_page' => 5594
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "087b53df-6336-4461-bf04-ea20829b94bb",
            [
                'coupon_id' => "Q",
                'coupon_name' => "11diTIPMyl",
                'issued_shop_name' => "P78XJ",
                'available_shop_name' => "2fkoYuaeWP",
                'available_from' => "2023-07-25T02:22:18.000000Z",
                'available_to' => "2023-10-16T13:14:07.000000Z",
                'page' => 5410,
                'per_page' => 8238
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
