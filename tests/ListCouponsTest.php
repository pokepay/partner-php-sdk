<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "b369ca49-cb16-4318-8c81-b9b3476e6801"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "b369ca49-cb16-4318-8c81-b9b3476e6801",
            [
                'per_page' => 4036
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "b369ca49-cb16-4318-8c81-b9b3476e6801",
            [
                'page' => 2610,
                'per_page' => 3564
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "b369ca49-cb16-4318-8c81-b9b3476e6801",
            [
                'available_to' => "2022-10-30T15:41:29.000000Z",
                'page' => 1343,
                'per_page' => 5852
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "b369ca49-cb16-4318-8c81-b9b3476e6801",
            [
                'available_from' => "2022-07-23T12:05:11.000000Z",
                'available_to' => "2023-12-25T11:20:15.000000Z",
                'page' => 4692,
                'per_page' => 6987
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "b369ca49-cb16-4318-8c81-b9b3476e6801",
            [
                'available_shop_name' => "t",
                'available_from' => "2022-09-20T11:42:56.000000Z",
                'available_to' => "2020-10-04T03:55:03.000000Z",
                'page' => 177,
                'per_page' => 6137
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "b369ca49-cb16-4318-8c81-b9b3476e6801",
            [
                'issued_shop_name' => "zgZ3SAsj",
                'available_shop_name' => "A",
                'available_from' => "2022-11-23T12:41:58.000000Z",
                'available_to' => "2021-11-05T17:31:33.000000Z",
                'page' => 849,
                'per_page' => 7307
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "b369ca49-cb16-4318-8c81-b9b3476e6801",
            [
                'coupon_name' => "wO",
                'issued_shop_name' => "MEx",
                'available_shop_name' => "C1w6",
                'available_from' => "2023-07-14T05:00:25.000000Z",
                'available_to' => "2021-01-18T09:29:10.000000Z",
                'page' => 826,
                'per_page' => 1755
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "b369ca49-cb16-4318-8c81-b9b3476e6801",
            [
                'coupon_id' => "stqj7j",
                'coupon_name' => "J1Xazd0M0",
                'issued_shop_name' => "E8",
                'available_shop_name' => "si7",
                'available_from' => "2021-03-21T03:47:10.000000Z",
                'available_to' => "2022-02-22T01:50:15.000000Z",
                'page' => 2183,
                'per_page' => 7920
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
