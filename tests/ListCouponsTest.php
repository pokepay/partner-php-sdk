<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "95bdf2e1-f71a-4438-aa77-f1d87095212f"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "95bdf2e1-f71a-4438-aa77-f1d87095212f",
            [
                'per_page' => 9399
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "95bdf2e1-f71a-4438-aa77-f1d87095212f",
            [
                'page' => 7306,
                'per_page' => 3038
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "95bdf2e1-f71a-4438-aa77-f1d87095212f",
            [
                'available_to' => "2022-11-30T16:24:06.000000+09:00",
                'page' => 6442,
                'per_page' => 6349
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "95bdf2e1-f71a-4438-aa77-f1d87095212f",
            [
                'available_from' => "2021-03-13T10:38:59.000000+09:00",
                'available_to' => "2023-12-02T01:37:06.000000+09:00",
                'page' => 4064,
                'per_page' => 92
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "95bdf2e1-f71a-4438-aa77-f1d87095212f",
            [
                'available_shop_name' => "Xl",
                'available_from' => "2020-08-06T12:54:14.000000+09:00",
                'available_to' => "2022-06-26T06:53:46.000000+09:00",
                'page' => 5638,
                'per_page' => 6979
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "95bdf2e1-f71a-4438-aa77-f1d87095212f",
            [
                'issued_shop_name' => "az",
                'available_shop_name' => "CE1h",
                'available_from' => "2022-12-31T01:00:45.000000+09:00",
                'available_to' => "2023-11-22T14:46:56.000000+09:00",
                'page' => 9288,
                'per_page' => 4231
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "95bdf2e1-f71a-4438-aa77-f1d87095212f",
            [
                'coupon_name' => "2",
                'issued_shop_name' => "EkkP2VIP",
                'available_shop_name' => "7HW7Ee7skB",
                'available_from' => "2021-12-28T04:59:37.000000+09:00",
                'available_to' => "2024-01-31T20:06:18.000000+09:00",
                'page' => 3617,
                'per_page' => 4873
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "95bdf2e1-f71a-4438-aa77-f1d87095212f",
            [
                'coupon_id' => "BB1",
                'coupon_name' => "YNClE0n87",
                'issued_shop_name' => "30",
                'available_shop_name' => "vspNWH9",
                'available_from' => "2022-06-23T00:15:04.000000+09:00",
                'available_to' => "2022-11-11T10:14:13.000000+09:00",
                'page' => 4527,
                'per_page' => 6325
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
