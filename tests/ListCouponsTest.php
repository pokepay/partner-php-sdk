<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "c2a5d4da-b3a7-409c-8e65-a6ad3b7d2ec4"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "c2a5d4da-b3a7-409c-8e65-a6ad3b7d2ec4",
            [
                'per_page' => 1692
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "c2a5d4da-b3a7-409c-8e65-a6ad3b7d2ec4",
            [
                'page' => 8399,
                'per_page' => 1457
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "c2a5d4da-b3a7-409c-8e65-a6ad3b7d2ec4",
            [
                'available_to' => "2023-10-07T06:53:48.000000+09:00",
                'page' => 4060,
                'per_page' => 5226
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "c2a5d4da-b3a7-409c-8e65-a6ad3b7d2ec4",
            [
                'available_from' => "2021-08-16T04:24:52.000000+09:00",
                'available_to' => "2022-06-13T18:02:18.000000+09:00",
                'page' => 7102,
                'per_page' => 5329
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "c2a5d4da-b3a7-409c-8e65-a6ad3b7d2ec4",
            [
                'available_shop_name' => "WAQf",
                'available_from' => "2023-06-24T20:11:31.000000+09:00",
                'available_to' => "2022-06-18T07:33:29.000000+09:00",
                'page' => 4810,
                'per_page' => 4727
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "c2a5d4da-b3a7-409c-8e65-a6ad3b7d2ec4",
            [
                'issued_shop_name' => "NtAbly87N",
                'available_shop_name' => "jLdwWwen5v",
                'available_from' => "2022-04-24T16:04:52.000000+09:00",
                'available_to' => "2022-02-01T07:48:59.000000+09:00",
                'page' => 641,
                'per_page' => 4462
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "c2a5d4da-b3a7-409c-8e65-a6ad3b7d2ec4",
            [
                'coupon_name' => "HJjDbB",
                'issued_shop_name' => "Ec6EBxH",
                'available_shop_name' => "efqE",
                'available_from' => "2020-10-26T00:47:48.000000+09:00",
                'available_to' => "2022-05-24T04:52:21.000000+09:00",
                'page' => 2566,
                'per_page' => 4970
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "c2a5d4da-b3a7-409c-8e65-a6ad3b7d2ec4",
            [
                'coupon_id' => "YrNXo",
                'coupon_name' => "NcpmxZtEX",
                'issued_shop_name' => "5DpwJFFSn",
                'available_shop_name' => "jD",
                'available_from' => "2022-06-10T10:41:09.000000+09:00",
                'available_to' => "2021-06-19T04:51:07.000000+09:00",
                'page' => 4680,
                'per_page' => 4995
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
