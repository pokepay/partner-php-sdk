<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "efa64114-1df6-4222-8073-dc263dd15410"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "efa64114-1df6-4222-8073-dc263dd15410",
            [
                'per_page' => 7462
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "efa64114-1df6-4222-8073-dc263dd15410",
            [
                'page' => 6740,
                'per_page' => 9146
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "efa64114-1df6-4222-8073-dc263dd15410",
            [
                'available_to' => "2022-03-01T14:30:51.000000+09:00",
                'page' => 8446,
                'per_page' => 8257
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "efa64114-1df6-4222-8073-dc263dd15410",
            [
                'available_from' => "2020-11-09T17:02:41.000000+09:00",
                'available_to' => "2021-10-25T11:47:55.000000+09:00",
                'page' => 9288,
                'per_page' => 6396
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "efa64114-1df6-4222-8073-dc263dd15410",
            [
                'available_shop_name' => "q",
                'available_from' => "2022-03-14T13:23:45.000000+09:00",
                'available_to' => "2020-10-05T22:13:07.000000+09:00",
                'page' => 6952,
                'per_page' => 8279
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "efa64114-1df6-4222-8073-dc263dd15410",
            [
                'issued_shop_name' => "Yf8oDeasiS",
                'available_shop_name' => "v3ny",
                'available_from' => "2020-08-08T12:58:50.000000+09:00",
                'available_to' => "2022-05-22T13:26:34.000000+09:00",
                'page' => 7196,
                'per_page' => 1756
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "efa64114-1df6-4222-8073-dc263dd15410",
            [
                'coupon_name' => "hk80DAP",
                'issued_shop_name' => "oX",
                'available_shop_name' => "6uhaQYSBED",
                'available_from' => "2022-10-26T03:03:44.000000+09:00",
                'available_to' => "2022-03-11T21:58:03.000000+09:00",
                'page' => 211,
                'per_page' => 9197
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "efa64114-1df6-4222-8073-dc263dd15410",
            [
                'coupon_id' => "HJTlAlx",
                'coupon_name' => "avE5SZ",
                'issued_shop_name' => "jw5m",
                'available_shop_name' => "N",
                'available_from' => "2023-05-04T00:56:33.000000+09:00",
                'available_to' => "2020-06-11T09:34:24.000000+09:00",
                'page' => 9262,
                'per_page' => 1625
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
