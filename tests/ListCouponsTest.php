<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "52493982-dc4b-41e8-807e-bdba6a18365f"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "52493982-dc4b-41e8-807e-bdba6a18365f",
            [
                'per_page' => 3786
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "52493982-dc4b-41e8-807e-bdba6a18365f",
            [
                'page' => 7305,
                'per_page' => 375
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "52493982-dc4b-41e8-807e-bdba6a18365f",
            [
                'available_to' => "2020-04-19T08:20:24.000000+09:00",
                'page' => 4292,
                'per_page' => 6495
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "52493982-dc4b-41e8-807e-bdba6a18365f",
            [
                'available_from' => "2020-10-08T06:21:47.000000+09:00",
                'available_to' => "2023-09-29T20:39:08.000000+09:00",
                'page' => 9128,
                'per_page' => 8860
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "52493982-dc4b-41e8-807e-bdba6a18365f",
            [
                'available_shop_name' => "YzA2n3n94G",
                'available_from' => "2020-05-29T06:51:03.000000+09:00",
                'available_to' => "2023-01-03T05:50:35.000000+09:00",
                'page' => 9044,
                'per_page' => 3203
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "52493982-dc4b-41e8-807e-bdba6a18365f",
            [
                'issued_shop_name' => "EOhgLkMtu",
                'available_shop_name' => "AFRLshvBM",
                'available_from' => "2021-10-05T20:19:53.000000+09:00",
                'available_to' => "2021-12-31T09:31:36.000000+09:00",
                'page' => 5438,
                'per_page' => 4949
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "52493982-dc4b-41e8-807e-bdba6a18365f",
            [
                'coupon_name' => "5KadDYlA1",
                'issued_shop_name' => "Jia5ob4",
                'available_shop_name' => "JGsXwUjk",
                'available_from' => "2021-03-21T15:23:41.000000+09:00",
                'available_to' => "2023-06-04T16:28:47.000000+09:00",
                'page' => 3083,
                'per_page' => 1286
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "52493982-dc4b-41e8-807e-bdba6a18365f",
            [
                'coupon_id' => "jBxe",
                'coupon_name' => "Rh0EANm",
                'issued_shop_name' => "Hq",
                'available_shop_name' => "gP6Te",
                'available_from' => "2022-12-09T13:06:45.000000+09:00",
                'available_to' => "2023-10-23T16:14:32.000000+09:00",
                'page' => 4325,
                'per_page' => 2579
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
