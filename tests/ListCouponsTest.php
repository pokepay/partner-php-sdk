<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "378f22fc-0ae3-4592-9712-8c42179828a4"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "378f22fc-0ae3-4592-9712-8c42179828a4",
            [
                'per_page' => 7845
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "378f22fc-0ae3-4592-9712-8c42179828a4",
            [
                'page' => 8370,
                'per_page' => 8846
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "378f22fc-0ae3-4592-9712-8c42179828a4",
            [
                'available_to' => "2024-06-20T19:54:44.000000+09:00",
                'page' => 4867,
                'per_page' => 4272
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "378f22fc-0ae3-4592-9712-8c42179828a4",
            [
                'available_from' => "2025-09-19T03:29:53.000000+09:00",
                'available_to' => "2025-02-09T04:52:46.000000+09:00",
                'page' => 1636,
                'per_page' => 5458
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "378f22fc-0ae3-4592-9712-8c42179828a4",
            [
                'available_shop_name' => "t",
                'available_from' => "2020-06-05T20:01:32.000000+09:00",
                'available_to' => "2021-08-28T02:33:10.000000+09:00",
                'page' => 6060,
                'per_page' => 8061
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "378f22fc-0ae3-4592-9712-8c42179828a4",
            [
                'issued_shop_name' => "C",
                'available_shop_name' => "ATbfETgM8K",
                'available_from' => "2023-06-14T21:54:24.000000+09:00",
                'available_to' => "2022-04-19T05:49:17.000000+09:00",
                'page' => 5695,
                'per_page' => 3440
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "378f22fc-0ae3-4592-9712-8c42179828a4",
            [
                'coupon_name' => "tS8z",
                'issued_shop_name' => "1f",
                'available_shop_name' => "c4bmpd",
                'available_from' => "2025-03-13T22:51:22.000000+09:00",
                'available_to' => "2025-07-17T20:03:07.000000+09:00",
                'page' => 4121,
                'per_page' => 2372
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "378f22fc-0ae3-4592-9712-8c42179828a4",
            [
                'coupon_id' => "Tfj",
                'coupon_name' => "GK",
                'issued_shop_name' => "RSuRp80JIG",
                'available_shop_name' => "fZb0zQJuId",
                'available_from' => "2023-06-21T12:57:18.000000+09:00",
                'available_to' => "2021-12-03T07:17:43.000000+09:00",
                'page' => 5715,
                'per_page' => 6840
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
