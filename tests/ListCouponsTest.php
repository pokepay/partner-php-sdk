<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "224f3f58-a451-449b-9763-ab6c8c3916ff"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "224f3f58-a451-449b-9763-ab6c8c3916ff",
            [
                'per_page' => 1173
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "224f3f58-a451-449b-9763-ab6c8c3916ff",
            [
                'page' => 3692,
                'per_page' => 1525
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "224f3f58-a451-449b-9763-ab6c8c3916ff",
            [
                'available_to' => "2020-08-18T03:21:18.000000+09:00",
                'page' => 7065,
                'per_page' => 2160
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "224f3f58-a451-449b-9763-ab6c8c3916ff",
            [
                'available_from' => "2023-08-05T12:26:02.000000+09:00",
                'available_to' => "2022-04-18T12:00:22.000000+09:00",
                'page' => 9177,
                'per_page' => 9635
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "224f3f58-a451-449b-9763-ab6c8c3916ff",
            [
                'available_shop_name' => "3Y",
                'available_from' => "2022-03-11T09:08:50.000000+09:00",
                'available_to' => "2021-10-03T21:14:05.000000+09:00",
                'page' => 9409,
                'per_page' => 216
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "224f3f58-a451-449b-9763-ab6c8c3916ff",
            [
                'issued_shop_name' => "FPQ5Q",
                'available_shop_name' => "ppSnCsge",
                'available_from' => "2023-01-16T11:54:17.000000+09:00",
                'available_to' => "2022-09-12T12:46:19.000000+09:00",
                'page' => 4836,
                'per_page' => 9933
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "224f3f58-a451-449b-9763-ab6c8c3916ff",
            [
                'coupon_name' => "cPdbx8i",
                'issued_shop_name' => "RlO",
                'available_shop_name' => "QRQVe08t",
                'available_from' => "2022-12-01T08:28:00.000000+09:00",
                'available_to' => "2021-07-20T01:34:54.000000+09:00",
                'page' => 7264,
                'per_page' => 818
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "224f3f58-a451-449b-9763-ab6c8c3916ff",
            [
                'coupon_id' => "XH3cqxw",
                'coupon_name' => "lDzMf62z",
                'issued_shop_name' => "sHIWc",
                'available_shop_name' => "hB1WyS",
                'available_from' => "2020-01-21T23:51:48.000000+09:00",
                'available_to' => "2022-05-15T15:18:10.000000+09:00",
                'page' => 523,
                'per_page' => 4165
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
