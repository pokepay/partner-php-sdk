<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "975c35cc-07d1-4c6e-8038-ad5ebc0b8793"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "975c35cc-07d1-4c6e-8038-ad5ebc0b8793",
            [
                'per_page' => 88
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "975c35cc-07d1-4c6e-8038-ad5ebc0b8793",
            [
                'page' => 1496,
                'per_page' => 5812
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "975c35cc-07d1-4c6e-8038-ad5ebc0b8793",
            [
                'available_to' => "2023-08-31T14:51:39.000000+09:00",
                'page' => 1518,
                'per_page' => 3118
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "975c35cc-07d1-4c6e-8038-ad5ebc0b8793",
            [
                'available_from' => "2023-06-06T00:39:16.000000+09:00",
                'available_to' => "2023-03-05T02:28:10.000000+09:00",
                'page' => 6069,
                'per_page' => 6758
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "975c35cc-07d1-4c6e-8038-ad5ebc0b8793",
            [
                'available_shop_name' => "c",
                'available_from' => "2021-04-26T00:39:17.000000+09:00",
                'available_to' => "2024-01-23T08:31:11.000000+09:00",
                'page' => 1611,
                'per_page' => 9531
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "975c35cc-07d1-4c6e-8038-ad5ebc0b8793",
            [
                'issued_shop_name' => "mTr626o",
                'available_shop_name' => "4",
                'available_from' => "2023-03-07T09:35:20.000000+09:00",
                'available_to' => "2022-02-22T04:07:23.000000+09:00",
                'page' => 7385,
                'per_page' => 8491
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "975c35cc-07d1-4c6e-8038-ad5ebc0b8793",
            [
                'coupon_name' => "2rICXA",
                'issued_shop_name' => "hNDPH",
                'available_shop_name' => "c5nbxE6dO",
                'available_from' => "2021-02-19T05:14:59.000000+09:00",
                'available_to' => "2020-06-04T04:42:05.000000+09:00",
                'page' => 3494,
                'per_page' => 9016
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "975c35cc-07d1-4c6e-8038-ad5ebc0b8793",
            [
                'coupon_id' => "bk",
                'coupon_name' => "sxe",
                'issued_shop_name' => "RrdV1gQ",
                'available_shop_name' => "duyB3Z9uL",
                'available_from' => "2024-02-16T14:13:40.000000+09:00",
                'available_to' => "2021-01-20T04:04:27.000000+09:00",
                'page' => 382,
                'per_page' => 7919
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
