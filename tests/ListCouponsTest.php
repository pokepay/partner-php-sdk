<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "058bd53c-2f9f-4dcf-9614-04fd1b70f74b"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "058bd53c-2f9f-4dcf-9614-04fd1b70f74b",
            [
                'per_page' => 3071
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "058bd53c-2f9f-4dcf-9614-04fd1b70f74b",
            [
                'page' => 6641,
                'per_page' => 4305
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "058bd53c-2f9f-4dcf-9614-04fd1b70f74b",
            [
                'available_to' => "2020-08-12T10:28:28.000000+09:00",
                'page' => 3579,
                'per_page' => 69
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "058bd53c-2f9f-4dcf-9614-04fd1b70f74b",
            [
                'available_from' => "2016-05-09T05:41:30.000000+09:00",
                'available_to' => "2018-05-20T04:24:45.000000+09:00",
                'page' => 1573,
                'per_page' => 1311
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "058bd53c-2f9f-4dcf-9614-04fd1b70f74b",
            [
                'available_shop_name' => "3VaVg5lQ",
                'available_from' => "2020-09-03T10:24:34.000000+09:00",
                'available_to' => "2017-08-26T09:53:13.000000+09:00",
                'page' => 6030,
                'per_page' => 7956
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "058bd53c-2f9f-4dcf-9614-04fd1b70f74b",
            [
                'issued_shop_name' => "rhrBQImBbF",
                'available_shop_name' => "Gr24v",
                'available_from' => "2024-07-04T07:05:24.000000+09:00",
                'available_to' => "2023-06-02T18:37:23.000000+09:00",
                'page' => 561,
                'per_page' => 3362
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "058bd53c-2f9f-4dcf-9614-04fd1b70f74b",
            [
                'coupon_name' => "1KmKqNh",
                'issued_shop_name' => "u",
                'available_shop_name' => "1AS4I",
                'available_from' => "2021-10-09T05:18:02.000000+09:00",
                'available_to' => "2022-03-08T02:40:00.000000+09:00",
                'page' => 92,
                'per_page' => 1351
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "058bd53c-2f9f-4dcf-9614-04fd1b70f74b",
            [
                'coupon_id' => "PG",
                'coupon_name' => "aTF",
                'issued_shop_name' => "6gXtd3nJy",
                'available_shop_name' => "Ne74Q2bvFt",
                'available_from' => "2016-04-05T19:29:11.000000+09:00",
                'available_to' => "2023-02-09T08:06:33.000000+09:00",
                'page' => 3878,
                'per_page' => 8549
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
