<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCoupons extends TestCase
{
    public function testListCoupons0()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "2b2fd0ab-a663-4c71-ae56-96b2c603b45b"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons1()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "2b2fd0ab-a663-4c71-ae56-96b2c603b45b",
            [
                'per_page' => 500
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons2()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "2b2fd0ab-a663-4c71-ae56-96b2c603b45b",
            [
                'page' => 1735,
                'per_page' => 2508
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons3()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "2b2fd0ab-a663-4c71-ae56-96b2c603b45b",
            [
                'available_to' => "2021-01-05T16:40:02.000000+09:00",
                'page' => 5419,
                'per_page' => 8888
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons4()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "2b2fd0ab-a663-4c71-ae56-96b2c603b45b",
            [
                'available_from' => "2022-09-20T01:12:00.000000+09:00",
                'available_to' => "2023-09-03T02:02:09.000000+09:00",
                'page' => 5483,
                'per_page' => 346
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons5()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "2b2fd0ab-a663-4c71-ae56-96b2c603b45b",
            [
                'available_shop_name' => "x3gTJKy6",
                'available_from' => "2023-06-22T10:16:44.000000+09:00",
                'available_to' => "2021-08-15T20:42:01.000000+09:00",
                'page' => 5733,
                'per_page' => 3724
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons6()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "2b2fd0ab-a663-4c71-ae56-96b2c603b45b",
            [
                'issued_shop_name' => "b3y",
                'available_shop_name' => "YYVRZ4jd",
                'available_from' => "2023-04-08T08:23:56.000000+09:00",
                'available_to' => "2021-12-17T01:53:47.000000+09:00",
                'page' => 4231,
                'per_page' => 2580
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons7()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "2b2fd0ab-a663-4c71-ae56-96b2c603b45b",
            [
                'coupon_name' => "YQa0QPCC",
                'issued_shop_name' => "60H",
                'available_shop_name' => "399N8",
                'available_from' => "2021-01-28T01:00:20.000000+09:00",
                'available_to' => "2022-05-13T16:44:24.000000+09:00",
                'page' => 5022,
                'per_page' => 8352
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCoupons8()
    {
        $client = $this->newClient();
        $request = new Request\ListCoupons(
            "2b2fd0ab-a663-4c71-ae56-96b2c603b45b",
            [
                'coupon_id' => "oSQFYDUU0",
                'coupon_name' => "uG332kYdR",
                'issued_shop_name' => "QC39nZ",
                'available_shop_name' => "BUv4F",
                'available_from' => "2022-10-03T21:16:28.000000+09:00",
                'available_to' => "2022-08-08T00:00:56.000000+09:00",
                'page' => 3808,
                'per_page' => 4100
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
