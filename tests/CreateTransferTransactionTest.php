<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransferTransaction extends TestCase
{
    public function testCreateTransferTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "cba8d59d-166a-44c6-8984-e931a30088b8",
            "d9ca9bef-21bf-467d-bf12-dcc043405e52",
            "21bb9112-bdf0-40e7-83c0-da1db0fea319",
            4628.0
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "cba8d59d-166a-44c6-8984-e931a30088b8",
            "d9ca9bef-21bf-467d-bf12-dcc043405e52",
            "21bb9112-bdf0-40e7-83c0-da1db0fea319",
            4628.0,
            [
                'request_id' => "316f749f-02af-4cef-8469-1d01853a8cbd"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "cba8d59d-166a-44c6-8984-e931a30088b8",
            "d9ca9bef-21bf-467d-bf12-dcc043405e52",
            "21bb9112-bdf0-40e7-83c0-da1db0fea319",
            4628.0,
            [
                'description' => "EOfsuO3LMtzPm5pmHiztzTLcjSeNyveotr1SbLY9f",
                'request_id' => "12477edf-1c9c-4684-b9d2-ef7ff9221d4d"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "cba8d59d-166a-44c6-8984-e931a30088b8",
            "d9ca9bef-21bf-467d-bf12-dcc043405e52",
            "21bb9112-bdf0-40e7-83c0-da1db0fea319",
            4628.0,
            [
                'metadata' => "{\"key\":\"value\"}",
                'description' => "h2SXQaAm6iMSYVoPQWfV62UhTGJS1L9KLOsA2Q2Z23Mwd98ipOldTUQCXPcZtLDZ6t1d7NhS3tIbiaQ9UqJHQZFkEmVia7WMZwoONY9mYcjUD3BWfN3hpObBbd0WPCuqh90wnUEefdvvGn56xgqcINC0MaOVTzOYUS4YiFzadS1dG4VhCAXd",
                'request_id' => "d257b7a1-aa3e-47e0-b6ae-c69cf643d34c"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
