<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransferTransaction extends TestCase
{
    public function testCreateTransferTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "52f8252d-f94c-4fc1-82ab-f98fc7c85bbe",
            "50cc933e-1efa-488e-94cc-cc031b84ad53",
            "f5e2edb5-db1c-46c1-bebf-d6a4e02c5fe7",
            5548.0
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "52f8252d-f94c-4fc1-82ab-f98fc7c85bbe",
            "50cc933e-1efa-488e-94cc-cc031b84ad53",
            "f5e2edb5-db1c-46c1-bebf-d6a4e02c5fe7",
            5548.0,
            [
                'request_id' => "fd39a31b-ed3e-4f2d-a9ee-bdec301a1fbb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "52f8252d-f94c-4fc1-82ab-f98fc7c85bbe",
            "50cc933e-1efa-488e-94cc-cc031b84ad53",
            "f5e2edb5-db1c-46c1-bebf-d6a4e02c5fe7",
            5548.0,
            [
                'description' => "SJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09",
                'request_id' => "a4fed5c2-6304-495b-a996-e74ff9277b02"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "52f8252d-f94c-4fc1-82ab-f98fc7c85bbe",
            "50cc933e-1efa-488e-94cc-cc031b84ad53",
            "f5e2edb5-db1c-46c1-bebf-d6a4e02c5fe7",
            5548.0,
            [
                'metadata' => "{\"key\":\"value\"}",
                'description' => "TrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4d",
                'request_id' => "5287b28d-fe04-4e01-82cc-77bf308ad1e4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
