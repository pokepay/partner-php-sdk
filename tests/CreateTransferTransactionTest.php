<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransferTransaction extends TestCase
{
    public function testCreateTransferTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "9c68abcb-c211-477f-8e00-69df4169df80",
            "29c1371e-e22d-44c3-8e79-39e277a0f1ed",
            "90298810-c341-476c-8d8f-f36b19b5d961",
            7328.0
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "9c68abcb-c211-477f-8e00-69df4169df80",
            "29c1371e-e22d-44c3-8e79-39e277a0f1ed",
            "90298810-c341-476c-8d8f-f36b19b5d961",
            7328.0,
            [
                'request_id' => "afd92ace-45ca-4369-a94f-f90c92f0b0f6"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "9c68abcb-c211-477f-8e00-69df4169df80",
            "29c1371e-e22d-44c3-8e79-39e277a0f1ed",
            "90298810-c341-476c-8d8f-f36b19b5d961",
            7328.0,
            [
                'description' => "RswwQSmiJco3KwhjqpMqyENnno",
                'request_id' => "eaabfe74-0124-461b-8acb-a74ef40db4a5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "9c68abcb-c211-477f-8e00-69df4169df80",
            "29c1371e-e22d-44c3-8e79-39e277a0f1ed",
            "90298810-c341-476c-8d8f-f36b19b5d961",
            7328.0,
            [
                'metadata' => "{\"key\":\"value\"}",
                'description' => "2DvQSu06FE8juzeNINZktFZU0JpHpSrpNbF8O3WzYFSGY9bWV5jbNBEz14f9BIpTXI2luGWaGy1CoC",
                'request_id' => "7cd2c5aa-6d59-462f-afd9-e01a7bbac46d"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
