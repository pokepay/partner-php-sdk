<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransferTransaction extends TestCase
{
    public function testCreateTransferTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "7f20ddbd-3ff7-44f5-9f2e-3d0bc292b27c",
            "4e3ab2d6-df9f-403d-a8b7-0e937949a4e6",
            "76bbb9cd-4b51-44fb-8a96-7de15aa74eff",
            1596.0
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "7f20ddbd-3ff7-44f5-9f2e-3d0bc292b27c",
            "4e3ab2d6-df9f-403d-a8b7-0e937949a4e6",
            "76bbb9cd-4b51-44fb-8a96-7de15aa74eff",
            1596.0,
            [
                'request_id' => "d4d72b58-ccd3-4ac0-b742-4b110a904cc0"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "7f20ddbd-3ff7-44f5-9f2e-3d0bc292b27c",
            "4e3ab2d6-df9f-403d-a8b7-0e937949a4e6",
            "76bbb9cd-4b51-44fb-8a96-7de15aa74eff",
            1596.0,
            [
                'description' => "0oVIoTXjySuPmn4rNibUK92Qqy7sKf3hqZUX7Skq9SukmUctc6P5K0uekbgxcUECgBxAbxBYnRW5SUZM94OQMhatTeuxJBDoNrxtEzfGVY3gf2HytudF8xFFrx6suwvWMWSVNOU1Ehz8XYPGnUIBIuhUrsqjUw23WSoBg62l5NPW9hO3KqiUmkXZfFs",
                'request_id' => "ef1eaa64-1b93-4a29-8348-1bedf9e3fe99"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "7f20ddbd-3ff7-44f5-9f2e-3d0bc292b27c",
            "4e3ab2d6-df9f-403d-a8b7-0e937949a4e6",
            "76bbb9cd-4b51-44fb-8a96-7de15aa74eff",
            1596.0,
            [
                'metadata' => "{\"key\":\"value\"}",
                'description' => "TuYpXeVkuS7DiOMeHQqDexZXrNLFSRDkdSMhhRtBAX4Bi42RcWBD4zwQfbiedNTOmBDDS5aHinBzNQorLWDBDmnPy9NHSGrZs2nn5f",
                'request_id' => "803fb9ef-c4ac-4c47-9d88-106623c195ff"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
