<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransferTransaction extends TestCase
{
    public function testCreateTransferTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "2b4a49c7-f836-4803-8da6-d22837d6948c",
            "bce6e143-65da-4c53-b15b-7810092c583b",
            "6dcf6ad0-acd6-4504-a5b5-35cc96a1ef3d",
            9340.0
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "2b4a49c7-f836-4803-8da6-d22837d6948c",
            "bce6e143-65da-4c53-b15b-7810092c583b",
            "6dcf6ad0-acd6-4504-a5b5-35cc96a1ef3d",
            9340.0,
            [
                'request_id' => "1b4ddfaf-1f0c-400c-995a-adfc7d5ce78a"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "2b4a49c7-f836-4803-8da6-d22837d6948c",
            "bce6e143-65da-4c53-b15b-7810092c583b",
            "6dcf6ad0-acd6-4504-a5b5-35cc96a1ef3d",
            9340.0,
            [
                'description' => "zi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P",
                'request_id' => "df52aba1-5233-44bb-bc64-34af0023f1f8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "2b4a49c7-f836-4803-8da6-d22837d6948c",
            "bce6e143-65da-4c53-b15b-7810092c583b",
            "6dcf6ad0-acd6-4504-a5b5-35cc96a1ef3d",
            9340.0,
            [
                'metadata' => "{\"key\":\"value\"}",
                'description' => "Djrt4CFESWJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2MgyW6z149JBRZmQUgzecqWdDVSstoEtPVoykbtA6l7WDayqQLAKXyhWYdlIHf",
                'request_id' => "9b6e9053-f0fe-48c2-824b-0349c4730331"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
