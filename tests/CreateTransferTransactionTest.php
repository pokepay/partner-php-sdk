<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransferTransaction extends TestCase
{
    public function testCreateTransferTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "50ad6c95-04d9-4a6e-a848-d4d5d147af4b",
            "f9f730e1-1baa-4f5e-9a58-3c9699f3c4f6",
            "2cf52fc3-64c2-4e29-be80-837ab59ccb7d",
            6022.0
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "50ad6c95-04d9-4a6e-a848-d4d5d147af4b",
            "f9f730e1-1baa-4f5e-9a58-3c9699f3c4f6",
            "2cf52fc3-64c2-4e29-be80-837ab59ccb7d",
            6022.0,
            [
                'request_id' => "6ad4fabf-08a2-48c7-b1c1-5506e4022f33"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "50ad6c95-04d9-4a6e-a848-d4d5d147af4b",
            "f9f730e1-1baa-4f5e-9a58-3c9699f3c4f6",
            "2cf52fc3-64c2-4e29-be80-837ab59ccb7d",
            6022.0,
            [
                'description' => "7ygQsJl2OPR7eHsIGak40PopHKHnK3gw6HSeCcuXZDhmj6o8XQXok",
                'request_id' => "2f257733-0f75-4c98-be79-ffcac4a6563c"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "50ad6c95-04d9-4a6e-a848-d4d5d147af4b",
            "f9f730e1-1baa-4f5e-9a58-3c9699f3c4f6",
            "2cf52fc3-64c2-4e29-be80-837ab59ccb7d",
            6022.0,
            [
                'metadata' => "{\"key\":\"value\"}",
                'description' => "6dyDb60GaJ7gA",
                'request_id' => "62517452-833e-4c21-94c8-e298943859e5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
