<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransferTransaction extends TestCase
{
    public function testCreateTransferTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "58bb1480-3a4f-42e3-bd50-5f35b83a342e",
            "036301c5-8d65-4f59-9b19-f2cefc6de880",
            "18e2f4f6-0681-44c2-8966-83353f7b4dd2",
            2946.0
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "58bb1480-3a4f-42e3-bd50-5f35b83a342e",
            "036301c5-8d65-4f59-9b19-f2cefc6de880",
            "18e2f4f6-0681-44c2-8966-83353f7b4dd2",
            2946.0,
            [
                'request_id' => "f055acf7-9d2e-4a10-9b87-ada329d2c197"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "58bb1480-3a4f-42e3-bd50-5f35b83a342e",
            "036301c5-8d65-4f59-9b19-f2cefc6de880",
            "18e2f4f6-0681-44c2-8966-83353f7b4dd2",
            2946.0,
            [
                'description' => "R551Nutt0NJTScR8azGMYgknhihe2KbRynd2YdVhwE3kPH8U",
                'request_id' => "0fbb4649-6906-4cd4-a165-2e6d1cde4a7a"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "58bb1480-3a4f-42e3-bd50-5f35b83a342e",
            "036301c5-8d65-4f59-9b19-f2cefc6de880",
            "18e2f4f6-0681-44c2-8966-83353f7b4dd2",
            2946.0,
            [
                'metadata' => "{\"key\":\"value\"}",
                'description' => "5hvZQDsVcEmtE3BkGAShxM14eXxBg2nD3dnR0gWdqeDd6Aykn5v5JDwioJ351S857HtFRZzTYsjzuGN9OjyfLn5t8LeXTekNhobGgrUb6TgsnaqU7pn2TmJXREWbgdwqmn2GUVsyENn8XQ14x9Pu2OCBnwQWleXCZr0",
                'request_id' => "e8ade908-aef6-41a1-b599-8810764ecb8f"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
