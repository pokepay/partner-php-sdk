<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransferTransaction extends TestCase
{
    public function testCreateTransferTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "6f1a17c9-bdcf-4ab6-a68f-9cb9ba153987",
            "57bbd708-b905-44bd-bd72-c4387e54e569",
            "b1a80f4c-1385-49a8-9c35-b5809ea496d5",
            5238.0
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "6f1a17c9-bdcf-4ab6-a68f-9cb9ba153987",
            "57bbd708-b905-44bd-bd72-c4387e54e569",
            "b1a80f4c-1385-49a8-9c35-b5809ea496d5",
            5238.0,
            [
                'request_id' => "fef9370a-0828-4540-a1d0-4f3754f2f301"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "6f1a17c9-bdcf-4ab6-a68f-9cb9ba153987",
            "57bbd708-b905-44bd-bd72-c4387e54e569",
            "b1a80f4c-1385-49a8-9c35-b5809ea496d5",
            5238.0,
            [
                'description' => "C3iVchBIVB6vOf2R",
                'request_id' => "383a889f-a05a-4f68-bd64-c31aac7779cf"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "6f1a17c9-bdcf-4ab6-a68f-9cb9ba153987",
            "57bbd708-b905-44bd-bd72-c4387e54e569",
            "b1a80f4c-1385-49a8-9c35-b5809ea496d5",
            5238.0,
            [
                'metadata' => "{\"key\":\"value\"}",
                'description' => "xPunvzLUMh2kJERJmxNMTGWhCw4EPpVxFrIoN8aZEeAKybhUK3YIb973mV2l8zOBRhxZyUACm3Wk1T6T8LuFXfZJPlAeumiEXh5ll0SrPwnxqxRNeAjvXLulNcCvs33XRWlchybaHRyZTnafgrh5tGjtUQCO9DH8baIzRRFCc4W0x2wWVyJkuVFmBxWd9d7CI",
                'request_id' => "29fe0e93-9417-4da1-9129-1c454c209c18"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
