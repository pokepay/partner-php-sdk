<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateTransferTransaction extends TestCase
{
    public function testCreateTransferTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "b820fda7-038a-4541-a7c5-c0a7ae5ffc12",
            "1a888925-5c1c-4bed-adf5-8f3d0977300d",
            "03c8a684-aca4-4b55-8c1d-1d8109b12d36",
            4976
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "b820fda7-038a-4541-a7c5-c0a7ae5ffc12",
            "1a888925-5c1c-4bed-adf5-8f3d0977300d",
            "03c8a684-aca4-4b55-8c1d-1d8109b12d36",
            4976,
            [
                'request_id' => "4ed094e2-2037-4eb6-84b1-c7c9fec5220a"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "b820fda7-038a-4541-a7c5-c0a7ae5ffc12",
            "1a888925-5c1c-4bed-adf5-8f3d0977300d",
            "03c8a684-aca4-4b55-8c1d-1d8109b12d36",
            4976,
            [
                'description' => "S7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6tQ3vZwFKRF7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1",
                'request_id' => "5958b0d6-729e-4530-b235-819c27fce8c3"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateTransferTransaction3()
    {
        $client = $this->newClient();
        $request = new Request\CreateTransferTransaction(
            "b820fda7-038a-4541-a7c5-c0a7ae5ffc12",
            "1a888925-5c1c-4bed-adf5-8f3d0977300d",
            "03c8a684-aca4-4b55-8c1d-1d8109b12d36",
            4976,
            [
                'metadata' => "{\"key\":\"value\"}",
                'description' => "HRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxms",
                'request_id' => "a3daba12-97f2-48da-8a19-c950aaae2126"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
