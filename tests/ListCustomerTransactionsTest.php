<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9f14c540-3a35-43aa-9732-e4bfa250df56"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9f14c540-3a35-43aa-9732-e4bfa250df56",
            [
                'per_page' => 6098
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9f14c540-3a35-43aa-9732-e4bfa250df56",
            [
                'page' => 7220,
                'per_page' => 3709
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9f14c540-3a35-43aa-9732-e4bfa250df56",
            [
                'to' => "2022-01-16T04:09:34.000000+09:00",
                'page' => 8455,
                'per_page' => 1085
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9f14c540-3a35-43aa-9732-e4bfa250df56",
            [
                'from' => "2020-06-18T04:20:27.000000+09:00",
                'to' => "2021-03-16T10:54:44.000000+09:00",
                'page' => 1600,
                'per_page' => 8714
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9f14c540-3a35-43aa-9732-e4bfa250df56",
            [
                'is_modified' => TRUE,
                'from' => "2022-11-29T20:43:03.000000+09:00",
                'to' => "2022-03-13T13:24:00.000000+09:00",
                'page' => 7912,
                'per_page' => 5471
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9f14c540-3a35-43aa-9732-e4bfa250df56",
            [
                'type' => "cashback",
                'is_modified' => TRUE,
                'from' => "2022-07-01T03:00:02.000000+09:00",
                'to' => "2020-08-07T07:45:28.000000+09:00",
                'page' => 7075,
                'per_page' => 2865
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9f14c540-3a35-43aa-9732-e4bfa250df56",
            [
                'receiver_customer_id' => "1af29e24-63a1-4a3e-bd3e-f6287e45921a",
                'type' => "payment",
                'is_modified' => FALSE,
                'from' => "2020-02-24T03:21:50.000000+09:00",
                'to' => "2021-04-30T19:40:24.000000+09:00",
                'page' => 3342,
                'per_page' => 6249
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9f14c540-3a35-43aa-9732-e4bfa250df56",
            [
                'sender_customer_id' => "59bca0d0-b49c-4f68-bd25-3e4686cba24b",
                'receiver_customer_id' => "2c6462b8-4bed-46d5-b771-6bdea0b556bb",
                'type' => "exchange",
                'is_modified' => TRUE,
                'from' => "2023-09-22T14:35:32.000000+09:00",
                'to' => "2022-03-23T21:36:51.000000+09:00",
                'page' => 3624,
                'per_page' => 8679
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
