<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "41e851a0-30de-46e6-a84e-739bdbc90d51"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "41e851a0-30de-46e6-a84e-739bdbc90d51",
            [
                'per_page' => 1092
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "41e851a0-30de-46e6-a84e-739bdbc90d51",
            [
                'page' => 1696,
                'per_page' => 6257
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "41e851a0-30de-46e6-a84e-739bdbc90d51",
            [
                'to' => "2022-02-26T17:52:31.000000+09:00",
                'page' => 5983,
                'per_page' => 1221
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "41e851a0-30de-46e6-a84e-739bdbc90d51",
            [
                'from' => "2022-10-25T13:26:41.000000+09:00",
                'to' => "2021-01-15T04:47:16.000000+09:00",
                'page' => 4993,
                'per_page' => 3458
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "41e851a0-30de-46e6-a84e-739bdbc90d51",
            [
                'is_modified' => FALSE,
                'from' => "2020-10-02T01:07:56.000000+09:00",
                'to' => "2020-08-14T04:01:13.000000+09:00",
                'page' => 7441,
                'per_page' => 2342
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "41e851a0-30de-46e6-a84e-739bdbc90d51",
            [
                'type' => "payment",
                'is_modified' => TRUE,
                'from' => "2020-12-05T02:12:49.000000+09:00",
                'to' => "2021-02-14T20:59:34.000000+09:00",
                'page' => 7217,
                'per_page' => 571
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "41e851a0-30de-46e6-a84e-739bdbc90d51",
            [
                'receiver_customer_id' => "55553a15-df89-4ed6-a0d7-28675def5e24",
                'type' => "payment",
                'is_modified' => FALSE,
                'from' => "2023-01-22T17:34:53.000000+09:00",
                'to' => "2020-08-03T21:58:08.000000+09:00",
                'page' => 8784,
                'per_page' => 2134
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "41e851a0-30de-46e6-a84e-739bdbc90d51",
            [
                'sender_customer_id' => "b8d934bc-34b1-46dc-b473-0364b9d28450",
                'receiver_customer_id' => "5bb11adb-373e-4efb-bea4-83d642b02e39",
                'type' => "expire",
                'is_modified' => FALSE,
                'from' => "2021-12-03T20:54:38.000000+09:00",
                'to' => "2022-11-27T10:10:10.000000+09:00",
                'page' => 9248,
                'per_page' => 722
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
