<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
            [
                'per_page' => 5064
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
            [
                'page' => 1347,
                'per_page' => 3974
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
            [
                'to' => "2021-01-20T13:42:04.000000+09:00",
                'page' => 6902,
                'per_page' => 1255
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
            [
                'from' => "2018-02-21T16:33:11.000000+09:00",
                'to' => "2022-12-23T09:50:02.000000+09:00",
                'page' => 3648,
                'per_page' => 8655
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
            [
                'is_modified' => FALSE,
                'from' => "2016-11-13T21:18:26.000000+09:00",
                'to' => "2016-09-01T13:40:05.000000+09:00",
                'page' => 834,
                'per_page' => 1391
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
            [
                'type' => "fij6TH",
                'is_modified' => TRUE,
                'from' => "2017-10-31T06:31:08.000000+09:00",
                'to' => "2018-10-16T18:50:12.000000+09:00",
                'page' => 2538,
                'per_page' => 5612
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
            [
                'receiver_customer_id' => "dfc5a242-9910-4e02-8acf-8107b715e8eb",
                'type' => "D3FvwnaI0",
                'is_modified' => FALSE,
                'from' => "2017-08-06T21:12:03.000000+09:00",
                'to' => "2016-04-09T13:38:01.000000+09:00",
                'page' => 688,
                'per_page' => 1429
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0c4ae0e3-20a6-452b-ae04-d73b75bac4a1",
            [
                'sender_customer_id' => "36c35690-a157-4c23-9214-cf5b523ae08d",
                'receiver_customer_id' => "af934892-343c-4a8a-90ed-9c6d61dbfaa8",
                'type' => "gc1KGh",
                'is_modified' => FALSE,
                'from' => "2023-11-16T02:30:13.000000+09:00",
                'to' => "2024-02-20T03:41:55.000000+09:00",
                'page' => 1532,
                'per_page' => 4949
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
