<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
            [
                'per_page' => 7230
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
            [
                'page' => 8126,
                'per_page' => 3761
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
            [
                'to' => "2022-09-20T17:58:40.000000Z",
                'page' => 3013,
                'per_page' => 5760
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
            [
                'from' => "2024-02-21T14:04:56.000000Z",
                'to' => "2023-09-20T00:36:01.000000Z",
                'page' => 9065,
                'per_page' => 5172
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
            [
                'is_modified' => FALSE,
                'from' => "2020-10-22T23:31:16.000000Z",
                'to' => "2021-05-13T16:08:43.000000Z",
                'page' => 6860,
                'per_page' => 1972
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
            [
                'type' => "expire",
                'is_modified' => FALSE,
                'from' => "2022-02-09T05:00:48.000000Z",
                'to' => "2023-07-11T23:03:57.000000Z",
                'page' => 4460,
                'per_page' => 2624
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
            [
                'receiver_customer_id' => "b28d2b38-3a16-4384-ad36-9ac34c384bec",
                'type' => "expire",
                'is_modified' => TRUE,
                'from' => "2024-07-09T20:44:32.000000Z",
                'to' => "2020-09-27T00:50:45.000000Z",
                'page' => 8852,
                'per_page' => 1401
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "80ccf0e2-b363-43b4-a8f7-e85d3882f8ec",
            [
                'sender_customer_id' => "88b15035-4c8d-4ac3-85f7-dc35bb3de47e",
                'receiver_customer_id' => "95bba404-1c12-49b8-b33c-80cae6f8f332",
                'type' => "expire",
                'is_modified' => TRUE,
                'from' => "2023-11-30T16:04:38.000000Z",
                'to' => "2021-10-28T10:36:00.000000Z",
                'page' => 9592,
                'per_page' => 3713
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
