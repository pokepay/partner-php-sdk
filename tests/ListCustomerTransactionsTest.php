<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "42a7f23a-a42e-4869-a4e0-dabd55d62134"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "42a7f23a-a42e-4869-a4e0-dabd55d62134",
            [
                'per_page' => 6682
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "42a7f23a-a42e-4869-a4e0-dabd55d62134",
            [
                'page' => 2920,
                'per_page' => 1691
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "42a7f23a-a42e-4869-a4e0-dabd55d62134",
            [
                'to' => "2017-09-30T02:37:25.000000+09:00",
                'page' => 1125,
                'per_page' => 747
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "42a7f23a-a42e-4869-a4e0-dabd55d62134",
            [
                'from' => "2023-05-18T03:40:36.000000+09:00",
                'to' => "2025-04-14T20:11:52.000000+09:00",
                'page' => 98,
                'per_page' => 8628
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "42a7f23a-a42e-4869-a4e0-dabd55d62134",
            [
                'is_modified' => TRUE,
                'from' => "2021-05-12T05:18:14.000000+09:00",
                'to' => "2021-02-27T19:37:59.000000+09:00",
                'page' => 7447,
                'per_page' => 4269
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "42a7f23a-a42e-4869-a4e0-dabd55d62134",
            [
                'type' => "topup",
                'is_modified' => FALSE,
                'from' => "2021-02-15T02:30:12.000000+09:00",
                'to' => "2023-12-12T11:19:50.000000+09:00",
                'page' => 1288,
                'per_page' => 283
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "42a7f23a-a42e-4869-a4e0-dabd55d62134",
            [
                'receiver_customer_id' => "1aaaf571-248c-4eaf-ae2c-a86678cae4fb",
                'type' => "transfer",
                'is_modified' => TRUE,
                'from' => "2024-12-22T13:32:09.000000+09:00",
                'to' => "2021-11-03T13:00:23.000000+09:00",
                'page' => 5364,
                'per_page' => 7149
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "42a7f23a-a42e-4869-a4e0-dabd55d62134",
            [
                'sender_customer_id' => "f290a3bc-a992-4dd0-a7aa-68923b828150",
                'receiver_customer_id' => "52e615af-620f-49e4-b435-1612eae3cae2",
                'type' => "expire",
                'is_modified' => TRUE,
                'from' => "2017-12-09T16:48:06.000000+09:00",
                'to' => "2019-07-28T18:05:32.000000+09:00",
                'page' => 9079,
                'per_page' => 8006
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
