<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "85f2802d-1ea0-4254-9b70-0ef4263d63a9"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "85f2802d-1ea0-4254-9b70-0ef4263d63a9",
            [
                'per_page' => 7478
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "85f2802d-1ea0-4254-9b70-0ef4263d63a9",
            [
                'page' => 3114,
                'per_page' => 449
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "85f2802d-1ea0-4254-9b70-0ef4263d63a9",
            [
                'to' => "2020-05-01T18:03:41.000000+09:00",
                'page' => 7071,
                'per_page' => 1301
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "85f2802d-1ea0-4254-9b70-0ef4263d63a9",
            [
                'from' => "2022-04-02T07:02:11.000000+09:00",
                'to' => "2016-08-07T11:40:56.000000+09:00",
                'page' => 3187,
                'per_page' => 5197
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "85f2802d-1ea0-4254-9b70-0ef4263d63a9",
            [
                'is_modified' => TRUE,
                'from' => "2018-03-28T06:03:19.000000+09:00",
                'to' => "2024-06-25T05:59:04.000000+09:00",
                'page' => 7848,
                'per_page' => 8786
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "85f2802d-1ea0-4254-9b70-0ef4263d63a9",
            [
                'type' => "topup",
                'is_modified' => TRUE,
                'from' => "2017-05-03T06:19:33.000000+09:00",
                'to' => "2017-06-28T17:46:43.000000+09:00",
                'page' => 2271,
                'per_page' => 7433
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "85f2802d-1ea0-4254-9b70-0ef4263d63a9",
            [
                'receiver_customer_id' => "c187255b-6216-4b0a-ae54-5c8a681de4ec",
                'type' => "payment",
                'is_modified' => FALSE,
                'from' => "2025-01-05T19:16:17.000000+09:00",
                'to' => "2023-05-21T22:56:04.000000+09:00",
                'page' => 1142,
                'per_page' => 192
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "85f2802d-1ea0-4254-9b70-0ef4263d63a9",
            [
                'sender_customer_id' => "5d9ba4dc-7383-4a62-b7e9-cdaa36c77ba0",
                'receiver_customer_id' => "a1056562-96e3-4b40-b5f5-9c1610a6c8c7",
                'type' => "payment",
                'is_modified' => FALSE,
                'from' => "2021-08-15T02:50:09.000000+09:00",
                'to' => "2016-06-26T22:13:03.000000+09:00",
                'page' => 3567,
                'per_page' => 9133
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
