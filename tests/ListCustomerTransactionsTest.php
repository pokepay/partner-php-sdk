<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "7eea259d-4107-4aa6-80cd-d03fd1b06a3f"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "7eea259d-4107-4aa6-80cd-d03fd1b06a3f",
            [
                'per_page' => 8097
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "7eea259d-4107-4aa6-80cd-d03fd1b06a3f",
            [
                'page' => 7997,
                'per_page' => 3260
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "7eea259d-4107-4aa6-80cd-d03fd1b06a3f",
            [
                'to' => "2022-02-02T12:15:47.000000+09:00",
                'page' => 2410,
                'per_page' => 1599
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "7eea259d-4107-4aa6-80cd-d03fd1b06a3f",
            [
                'from' => "2016-04-20T12:10:31.000000+09:00",
                'to' => "2021-10-27T15:27:07.000000+09:00",
                'page' => 5400,
                'per_page' => 7264
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "7eea259d-4107-4aa6-80cd-d03fd1b06a3f",
            [
                'is_modified' => TRUE,
                'from' => "2021-08-16T22:58:15.000000+09:00",
                'to' => "2025-04-22T06:58:26.000000+09:00",
                'page' => 2373,
                'per_page' => 3280
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "7eea259d-4107-4aa6-80cd-d03fd1b06a3f",
            [
                'type' => "exchange",
                'is_modified' => FALSE,
                'from' => "2020-02-05T04:36:26.000000+09:00",
                'to' => "2019-09-29T18:31:53.000000+09:00",
                'page' => 1612,
                'per_page' => 3229
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "7eea259d-4107-4aa6-80cd-d03fd1b06a3f",
            [
                'receiver_customer_id' => "6bedb4f8-dd1e-4784-9476-8000c5ceed8a",
                'type' => "payment",
                'is_modified' => TRUE,
                'from' => "2017-08-03T01:29:15.000000+09:00",
                'to' => "2020-02-06T19:48:00.000000+09:00",
                'page' => 5382,
                'per_page' => 8628
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "7eea259d-4107-4aa6-80cd-d03fd1b06a3f",
            [
                'sender_customer_id' => "9e3fa055-29a6-4d57-a5d3-36fac9126a86",
                'receiver_customer_id' => "b53022ad-d5db-404b-83da-ba7796b48d76",
                'type' => "exchange",
                'is_modified' => FALSE,
                'from' => "2024-01-05T23:24:44.000000+09:00",
                'to' => "2017-02-27T04:35:29.000000+09:00",
                'page' => 8070,
                'per_page' => 3408
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
