<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "06b350da-aa39-498e-9f28-d521eb89a999"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "06b350da-aa39-498e-9f28-d521eb89a999",
            [
                'per_page' => 8238
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "06b350da-aa39-498e-9f28-d521eb89a999",
            [
                'page' => 4915,
                'per_page' => 3255
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "06b350da-aa39-498e-9f28-d521eb89a999",
            [
                'to' => "2025-06-29T09:34:29.000000+09:00",
                'page' => 2173,
                'per_page' => 7803
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "06b350da-aa39-498e-9f28-d521eb89a999",
            [
                'from' => "2020-08-27T11:12:46.000000+09:00",
                'to' => "2022-07-11T16:29:31.000000+09:00",
                'page' => 3757,
                'per_page' => 4796
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "06b350da-aa39-498e-9f28-d521eb89a999",
            [
                'is_modified' => TRUE,
                'from' => "2024-04-29T02:07:58.000000+09:00",
                'to' => "2024-08-20T12:48:23.000000+09:00",
                'page' => 3282,
                'per_page' => 92
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "06b350da-aa39-498e-9f28-d521eb89a999",
            [
                'type' => "transfer",
                'is_modified' => FALSE,
                'from' => "2024-09-27T10:34:39.000000+09:00",
                'to' => "2024-04-26T14:59:33.000000+09:00",
                'page' => 3168,
                'per_page' => 1866
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "06b350da-aa39-498e-9f28-d521eb89a999",
            [
                'receiver_customer_id' => "ac12662e-370a-4178-b73f-f5861b95ec7f",
                'type' => "topup",
                'is_modified' => FALSE,
                'from' => "2020-11-13T12:18:48.000000+09:00",
                'to' => "2024-07-24T18:41:52.000000+09:00",
                'page' => 8427,
                'per_page' => 2445
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "06b350da-aa39-498e-9f28-d521eb89a999",
            [
                'sender_customer_id' => "4d44197d-c3d1-462a-8cd7-3cad2f857fb3",
                'receiver_customer_id' => "747b760b-580a-41ca-9115-8ac155879c08",
                'type' => "cashback",
                'is_modified' => FALSE,
                'from' => "2021-04-02T07:43:37.000000+09:00",
                'to' => "2022-06-18T14:13:01.000000+09:00",
                'page' => 8088,
                'per_page' => 2652
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
