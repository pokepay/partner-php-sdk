<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "33a91921-d3f2-4acf-a72d-1bd52c075aec"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "33a91921-d3f2-4acf-a72d-1bd52c075aec",
            [
                'per_page' => 8758
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "33a91921-d3f2-4acf-a72d-1bd52c075aec",
            [
                'page' => 7673,
                'per_page' => 9876
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "33a91921-d3f2-4acf-a72d-1bd52c075aec",
            [
                'to' => "2023-06-20T21:18:06.000000+09:00",
                'page' => 1435,
                'per_page' => 2230
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "33a91921-d3f2-4acf-a72d-1bd52c075aec",
            [
                'from' => "2022-12-19T20:39:32.000000+09:00",
                'to' => "2021-02-23T10:32:15.000000+09:00",
                'page' => 7371,
                'per_page' => 8437
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "33a91921-d3f2-4acf-a72d-1bd52c075aec",
            [
                'is_modified' => FALSE,
                'from' => "2022-10-02T09:58:02.000000+09:00",
                'to' => "2023-09-01T00:08:56.000000+09:00",
                'page' => 2604,
                'per_page' => 5894
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "33a91921-d3f2-4acf-a72d-1bd52c075aec",
            [
                'type' => "transfer",
                'is_modified' => TRUE,
                'from' => "2020-04-27T15:39:15.000000+09:00",
                'to' => "2023-06-05T01:56:10.000000+09:00",
                'page' => 5413,
                'per_page' => 8665
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "33a91921-d3f2-4acf-a72d-1bd52c075aec",
            [
                'receiver_customer_id' => "670e6007-4cdd-4814-893c-fc6a53a594b7",
                'type' => "transfer",
                'is_modified' => TRUE,
                'from' => "2023-03-21T12:58:43.000000+09:00",
                'to' => "2022-05-08T23:57:23.000000+09:00",
                'page' => 8583,
                'per_page' => 3522
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "33a91921-d3f2-4acf-a72d-1bd52c075aec",
            [
                'sender_customer_id' => "c237779c-72c7-4ab2-8071-01f9eeb16511",
                'receiver_customer_id' => "88d45632-35b1-475c-be77-874ab2843227",
                'type' => "topup",
                'is_modified' => TRUE,
                'from' => "2020-08-01T08:51:39.000000+09:00",
                'to' => "2023-12-05T13:43:19.000000+09:00",
                'page' => 3050,
                'per_page' => 1527
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
