<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "819bf434-af03-4a40-8804-5264b88b8484"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "819bf434-af03-4a40-8804-5264b88b8484",
            [
                'per_page' => 7343
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "819bf434-af03-4a40-8804-5264b88b8484",
            [
                'page' => 9552,
                'per_page' => 7609
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "819bf434-af03-4a40-8804-5264b88b8484",
            [
                'to' => "2024-09-20T10:53:55.000000+09:00",
                'page' => 5958,
                'per_page' => 1442
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "819bf434-af03-4a40-8804-5264b88b8484",
            [
                'from' => "2017-11-29T20:43:11.000000+09:00",
                'to' => "2020-05-30T15:52:42.000000+09:00",
                'page' => 1053,
                'per_page' => 3349
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "819bf434-af03-4a40-8804-5264b88b8484",
            [
                'is_modified' => TRUE,
                'from' => "2025-02-24T04:54:25.000000+09:00",
                'to' => "2019-12-01T13:38:41.000000+09:00",
                'page' => 5983,
                'per_page' => 6393
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "819bf434-af03-4a40-8804-5264b88b8484",
            [
                'type' => "payment",
                'is_modified' => FALSE,
                'from' => "2020-07-02T14:49:07.000000+09:00",
                'to' => "2019-08-29T20:35:46.000000+09:00",
                'page' => 7932,
                'per_page' => 5630
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "819bf434-af03-4a40-8804-5264b88b8484",
            [
                'receiver_customer_id' => "3993cd9a-11d3-4104-9fca-a2d88e375a31",
                'type' => "payment",
                'is_modified' => TRUE,
                'from' => "2018-11-20T04:50:09.000000+09:00",
                'to' => "2016-06-28T12:28:35.000000+09:00",
                'page' => 5166,
                'per_page' => 3158
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "819bf434-af03-4a40-8804-5264b88b8484",
            [
                'sender_customer_id' => "a787810d-87e2-4623-8a99-ec71932d38c8",
                'receiver_customer_id' => "9d76b908-ed3a-472c-9dd8-8d11e30abff5",
                'type' => "transfer",
                'is_modified' => FALSE,
                'from' => "2016-12-09T06:48:17.000000+09:00",
                'to' => "2020-11-06T00:17:22.000000+09:00",
                'page' => 5123,
                'per_page' => 7722
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
