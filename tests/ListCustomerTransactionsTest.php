<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "05d4da0c-f8ac-43e9-a1a8-54df0786da2d"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "05d4da0c-f8ac-43e9-a1a8-54df0786da2d",
            [
                'per_page' => 3721
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "05d4da0c-f8ac-43e9-a1a8-54df0786da2d",
            [
                'page' => 1673,
                'per_page' => 8569
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "05d4da0c-f8ac-43e9-a1a8-54df0786da2d",
            [
                'to' => "2020-06-09T08:43:25.000000+09:00",
                'page' => 2641,
                'per_page' => 1403
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "05d4da0c-f8ac-43e9-a1a8-54df0786da2d",
            [
                'from' => "2023-08-31T11:35:24.000000+09:00",
                'to' => "2021-11-27T00:17:30.000000+09:00",
                'page' => 6128,
                'per_page' => 9468
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "05d4da0c-f8ac-43e9-a1a8-54df0786da2d",
            [
                'is_modified' => TRUE,
                'from' => "2021-10-15T20:46:20.000000+09:00",
                'to' => "2023-11-14T17:02:46.000000+09:00",
                'page' => 8406,
                'per_page' => 1440
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "05d4da0c-f8ac-43e9-a1a8-54df0786da2d",
            [
                'type' => "transfer",
                'is_modified' => TRUE,
                'from' => "2022-03-30T21:58:48.000000+09:00",
                'to' => "2024-01-29T17:38:21.000000+09:00",
                'page' => 786,
                'per_page' => 2848
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "05d4da0c-f8ac-43e9-a1a8-54df0786da2d",
            [
                'receiver_customer_id' => "476067c0-5180-472f-9748-fbe19e693314",
                'type' => "cashback",
                'is_modified' => TRUE,
                'from' => "2020-07-04T11:49:13.000000+09:00",
                'to' => "2020-10-22T23:48:51.000000+09:00",
                'page' => 4783,
                'per_page' => 8752
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "05d4da0c-f8ac-43e9-a1a8-54df0786da2d",
            [
                'sender_customer_id' => "d2869b53-2e22-4d40-bc23-f9d272cd44e5",
                'receiver_customer_id' => "03a89a91-73ea-4831-99d4-32f7b9069362",
                'type' => "exchange",
                'is_modified' => FALSE,
                'from' => "2020-01-13T05:00:34.000000+09:00",
                'to' => "2020-03-01T04:56:22.000000+09:00",
                'page' => 5098,
                'per_page' => 7841
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
