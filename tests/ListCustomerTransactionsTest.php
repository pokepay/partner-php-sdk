<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "44528fed-aaec-4a06-ae67-5f9c1b26c1d3"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "44528fed-aaec-4a06-ae67-5f9c1b26c1d3",
            [
                'per_page' => 2677
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "44528fed-aaec-4a06-ae67-5f9c1b26c1d3",
            [
                'page' => 2979,
                'per_page' => 7920
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "44528fed-aaec-4a06-ae67-5f9c1b26c1d3",
            [
                'to' => "2022-12-09T22:48:23.000000+09:00",
                'page' => 1959,
                'per_page' => 4063
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "44528fed-aaec-4a06-ae67-5f9c1b26c1d3",
            [
                'from' => "2023-11-29T06:42:21.000000+09:00",
                'to' => "2021-05-06T20:31:01.000000+09:00",
                'page' => 2526,
                'per_page' => 634
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "44528fed-aaec-4a06-ae67-5f9c1b26c1d3",
            [
                'is_modified' => TRUE,
                'from' => "2021-01-07T17:44:31.000000+09:00",
                'to' => "2022-01-11T21:52:49.000000+09:00",
                'page' => 857,
                'per_page' => 6317
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "44528fed-aaec-4a06-ae67-5f9c1b26c1d3",
            [
                'type' => "topup",
                'is_modified' => TRUE,
                'from' => "2023-05-03T17:55:55.000000+09:00",
                'to' => "2020-09-05T21:55:13.000000+09:00",
                'page' => 7299,
                'per_page' => 1132
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "44528fed-aaec-4a06-ae67-5f9c1b26c1d3",
            [
                'receiver_customer_id' => "6b81687d-79f8-4372-be4e-dbcbbfa436e8",
                'type' => "expire",
                'is_modified' => FALSE,
                'from' => "2023-10-18T22:52:02.000000+09:00",
                'to' => "2023-07-07T03:43:19.000000+09:00",
                'page' => 1468,
                'per_page' => 4713
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "44528fed-aaec-4a06-ae67-5f9c1b26c1d3",
            [
                'sender_customer_id' => "4572e02a-3ba5-4f67-9b52-e11f741bbc55",
                'receiver_customer_id' => "4aee126b-ad11-48bb-89a4-1ece84d19fd7",
                'type' => "exchange",
                'is_modified' => FALSE,
                'from' => "2023-09-28T09:33:24.000000+09:00",
                'to' => "2020-09-04T16:35:04.000000+09:00",
                'page' => 9484,
                'per_page' => 150
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
