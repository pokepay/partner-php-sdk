<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9b876907-d8e9-4775-9339-f3262024ff81"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9b876907-d8e9-4775-9339-f3262024ff81",
            [
                'per_page' => 6162
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9b876907-d8e9-4775-9339-f3262024ff81",
            [
                'page' => 3254,
                'per_page' => 7581
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9b876907-d8e9-4775-9339-f3262024ff81",
            [
                'to' => "2020-10-29T00:58:20.000000+09:00",
                'page' => 3777,
                'per_page' => 5704
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9b876907-d8e9-4775-9339-f3262024ff81",
            [
                'from' => "2022-08-06T13:21:04.000000+09:00",
                'to' => "2021-08-20T10:35:04.000000+09:00",
                'page' => 8338,
                'per_page' => 271
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9b876907-d8e9-4775-9339-f3262024ff81",
            [
                'is_modified' => FALSE,
                'from' => "2020-11-05T16:40:17.000000+09:00",
                'to' => "2022-12-12T20:33:42.000000+09:00",
                'page' => 1316,
                'per_page' => 2399
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9b876907-d8e9-4775-9339-f3262024ff81",
            [
                'type' => "cashback",
                'is_modified' => TRUE,
                'from' => "2022-02-13T00:36:19.000000+09:00",
                'to' => "2021-06-12T02:29:48.000000+09:00",
                'page' => 2168,
                'per_page' => 2145
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9b876907-d8e9-4775-9339-f3262024ff81",
            [
                'receiver_customer_id' => "7c69c318-f50c-4bb9-b1af-515cdcc69f86",
                'type' => "exchange",
                'is_modified' => FALSE,
                'from' => "2023-12-05T09:40:34.000000+09:00",
                'to' => "2024-02-23T20:59:13.000000+09:00",
                'page' => 3037,
                'per_page' => 9183
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "9b876907-d8e9-4775-9339-f3262024ff81",
            [
                'sender_customer_id' => "615470a9-9e50-4fb6-b18a-c6a06e1400f5",
                'receiver_customer_id' => "30dabd22-f192-4a45-8389-e08f8dfbe424",
                'type' => "payment",
                'is_modified' => TRUE,
                'from' => "2021-04-20T02:53:29.000000+09:00",
                'to' => "2022-11-28T19:07:01.000000+09:00",
                'page' => 9076,
                'per_page' => 1753
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
