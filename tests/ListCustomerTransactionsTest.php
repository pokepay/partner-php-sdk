<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "86c3664b-e50d-4724-bd4a-ac75b8598991"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "86c3664b-e50d-4724-bd4a-ac75b8598991",
            [
                'per_page' => 2195
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "86c3664b-e50d-4724-bd4a-ac75b8598991",
            [
                'page' => 1583,
                'per_page' => 7505
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "86c3664b-e50d-4724-bd4a-ac75b8598991",
            [
                'to' => "2021-06-29T22:46:37.000000Z",
                'page' => 9986,
                'per_page' => 5020
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "86c3664b-e50d-4724-bd4a-ac75b8598991",
            [
                'from' => "2023-01-30T07:54:11.000000Z",
                'to' => "2023-01-13T03:50:03.000000Z",
                'page' => 5920,
                'per_page' => 7957
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "86c3664b-e50d-4724-bd4a-ac75b8598991",
            [
                'is_modified' => FALSE,
                'from' => "2021-10-31T16:53:27.000000Z",
                'to' => "2020-08-28T01:39:11.000000Z",
                'page' => 8501,
                'per_page' => 377
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "86c3664b-e50d-4724-bd4a-ac75b8598991",
            [
                'type' => "expire",
                'is_modified' => TRUE,
                'from' => "2024-01-28T15:51:48.000000Z",
                'to' => "2021-06-10T03:45:45.000000Z",
                'page' => 4637,
                'per_page' => 8364
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "86c3664b-e50d-4724-bd4a-ac75b8598991",
            [
                'receiver_customer_id' => "adda7660-557a-491a-a56c-9888103f5578",
                'type' => "expire",
                'is_modified' => TRUE,
                'from' => "2020-04-26T04:18:59.000000Z",
                'to' => "2021-07-19T20:03:51.000000Z",
                'page' => 9596,
                'per_page' => 7027
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "86c3664b-e50d-4724-bd4a-ac75b8598991",
            [
                'sender_customer_id' => "c8dd41ae-0a04-4ce5-8e4d-d25356c9c581",
                'receiver_customer_id' => "1dea5adb-bc3a-4b7f-ad3d-e0ee5be50599",
                'type' => "transfer",
                'is_modified' => FALSE,
                'from' => "2021-07-05T03:03:05.000000Z",
                'to' => "2024-03-11T02:49:23.000000Z",
                'page' => 6711,
                'per_page' => 6254
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
