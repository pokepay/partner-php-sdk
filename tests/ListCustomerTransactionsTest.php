<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "ec30906c-a4c4-4703-b5df-0ca652008481"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "ec30906c-a4c4-4703-b5df-0ca652008481",
            [
                'per_page' => 8256
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "ec30906c-a4c4-4703-b5df-0ca652008481",
            [
                'page' => 2206,
                'per_page' => 7490
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "ec30906c-a4c4-4703-b5df-0ca652008481",
            [
                'to' => "2020-01-20T01:11:03.000000Z",
                'page' => 9694,
                'per_page' => 9903
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "ec30906c-a4c4-4703-b5df-0ca652008481",
            [
                'from' => "2020-02-01T11:11:06.000000Z",
                'to' => "2020-11-08T11:23:32.000000Z",
                'page' => 5385,
                'per_page' => 4709
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "ec30906c-a4c4-4703-b5df-0ca652008481",
            [
                'is_modified' => TRUE,
                'from' => "2022-10-29T14:50:22.000000Z",
                'to' => "2021-04-30T22:35:59.000000Z",
                'page' => 7609,
                'per_page' => 8380
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "ec30906c-a4c4-4703-b5df-0ca652008481",
            [
                'type' => "expire",
                'is_modified' => FALSE,
                'from' => "2021-08-04T03:54:08.000000Z",
                'to' => "2022-10-12T21:59:05.000000Z",
                'page' => 8858,
                'per_page' => 4413
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "ec30906c-a4c4-4703-b5df-0ca652008481",
            [
                'receiver_customer_id' => "9087f23e-f2a7-441c-b433-8d14b39040e8",
                'type' => "payment",
                'is_modified' => TRUE,
                'from' => "2020-10-31T17:38:56.000000Z",
                'to' => "2020-10-11T05:03:35.000000Z",
                'page' => 5983,
                'per_page' => 6393
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "ec30906c-a4c4-4703-b5df-0ca652008481",
            [
                'sender_customer_id' => "1e6c77d7-74a1-40cb-b0a5-1af95b4f3dbc",
                'receiver_customer_id' => "81f23c66-355d-4806-bbfd-cd9a8c0411d3",
                'type' => "cashback",
                'is_modified' => FALSE,
                'from' => "2021-06-10T12:34:18.000000Z",
                'to' => "2022-06-18T07:50:48.000000Z",
                'page' => 6706,
                'per_page' => 1232
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
