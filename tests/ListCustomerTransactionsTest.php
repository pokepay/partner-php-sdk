<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "11dfe319-e889-4b75-bcc8-f7aa6b9bbe56"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "11dfe319-e889-4b75-bcc8-f7aa6b9bbe56",
            [
                'per_page' => 5015
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "11dfe319-e889-4b75-bcc8-f7aa6b9bbe56",
            [
                'page' => 2065,
                'per_page' => 4696
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "11dfe319-e889-4b75-bcc8-f7aa6b9bbe56",
            [
                'to' => "2023-02-25T18:24:58.000000+09:00",
                'page' => 91,
                'per_page' => 4700
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "11dfe319-e889-4b75-bcc8-f7aa6b9bbe56",
            [
                'from' => "2020-06-29T21:21:39.000000+09:00",
                'to' => "2023-11-30T09:15:09.000000+09:00",
                'page' => 8237,
                'per_page' => 1238
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "11dfe319-e889-4b75-bcc8-f7aa6b9bbe56",
            [
                'is_modified' => TRUE,
                'from' => "2021-03-20T23:50:18.000000+09:00",
                'to' => "2021-01-25T07:39:22.000000+09:00",
                'page' => 9494,
                'per_page' => 4015
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "11dfe319-e889-4b75-bcc8-f7aa6b9bbe56",
            [
                'type' => "expire",
                'is_modified' => FALSE,
                'from' => "2021-01-20T00:33:59.000000+09:00",
                'to' => "2023-06-21T07:55:19.000000+09:00",
                'page' => 5185,
                'per_page' => 5819
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "11dfe319-e889-4b75-bcc8-f7aa6b9bbe56",
            [
                'receiver_customer_id' => "6f900075-6ac9-4293-ac19-9ad6369ef3c7",
                'type' => "transfer",
                'is_modified' => FALSE,
                'from' => "2022-04-10T00:42:20.000000+09:00",
                'to' => "2020-11-11T12:07:01.000000+09:00",
                'page' => 9838,
                'per_page' => 2002
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "11dfe319-e889-4b75-bcc8-f7aa6b9bbe56",
            [
                'sender_customer_id' => "d5cf7cf3-6e37-40ec-9720-e9dbd3b69001",
                'receiver_customer_id' => "27ba6cc8-e7ab-45ac-a637-9b24eac8d24c",
                'type' => "transfer",
                'is_modified' => FALSE,
                'from' => "2020-04-11T22:00:43.000000+09:00",
                'to' => "2022-03-29T14:27:51.000000+09:00",
                'page' => 5120,
                'per_page' => 9598
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
