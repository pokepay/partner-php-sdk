<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "8e2d5bff-7bec-4166-ba19-f37eacf99684"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "8e2d5bff-7bec-4166-ba19-f37eacf99684",
            [
                'per_page' => 4502
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "8e2d5bff-7bec-4166-ba19-f37eacf99684",
            [
                'page' => 9620,
                'per_page' => 5767
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "8e2d5bff-7bec-4166-ba19-f37eacf99684",
            [
                'to' => "2021-06-26T19:37:50.000000+09:00",
                'page' => 5763,
                'per_page' => 6394
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "8e2d5bff-7bec-4166-ba19-f37eacf99684",
            [
                'from' => "2022-01-31T21:32:40.000000+09:00",
                'to' => "2023-09-28T19:44:36.000000+09:00",
                'page' => 6087,
                'per_page' => 8581
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "8e2d5bff-7bec-4166-ba19-f37eacf99684",
            [
                'is_modified' => FALSE,
                'from' => "2023-08-18T23:51:51.000000+09:00",
                'to' => "2021-03-02T14:17:45.000000+09:00",
                'page' => 8588,
                'per_page' => 4501
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "8e2d5bff-7bec-4166-ba19-f37eacf99684",
            [
                'type' => "cashback",
                'is_modified' => FALSE,
                'from' => "2023-01-19T14:31:46.000000+09:00",
                'to' => "2022-04-01T23:58:07.000000+09:00",
                'page' => 7003,
                'per_page' => 3455
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "8e2d5bff-7bec-4166-ba19-f37eacf99684",
            [
                'receiver_customer_id' => "f9e97a7f-a6d4-4362-abe4-2497f815508e",
                'type' => "cashback",
                'is_modified' => TRUE,
                'from' => "2021-04-25T05:47:08.000000+09:00",
                'to' => "2020-04-16T17:26:52.000000+09:00",
                'page' => 999,
                'per_page' => 5411
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "8e2d5bff-7bec-4166-ba19-f37eacf99684",
            [
                'sender_customer_id' => "384deab0-391e-44e2-a14e-87cef2bf6fbd",
                'receiver_customer_id' => "804dbd10-358d-4836-b181-7e685d22a166",
                'type' => "exchange",
                'is_modified' => FALSE,
                'from' => "2023-04-17T17:21:15.000000+09:00",
                'to' => "2020-03-14T23:23:28.000000+09:00",
                'page' => 9223,
                'per_page' => 571
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
