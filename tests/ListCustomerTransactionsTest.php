<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "72902854-4e5c-4131-b882-a208fe413d28"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "72902854-4e5c-4131-b882-a208fe413d28",
            [
                'per_page' => 1917
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "72902854-4e5c-4131-b882-a208fe413d28",
            [
                'page' => 1705,
                'per_page' => 3943
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "72902854-4e5c-4131-b882-a208fe413d28",
            [
                'to' => "2021-12-18T06:15:40.000000+09:00",
                'page' => 4910,
                'per_page' => 3622
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "72902854-4e5c-4131-b882-a208fe413d28",
            [
                'from' => "2017-02-12T04:01:01.000000+09:00",
                'to' => "2025-02-28T01:11:45.000000+09:00",
                'page' => 606,
                'per_page' => 5666
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "72902854-4e5c-4131-b882-a208fe413d28",
            [
                'is_modified' => TRUE,
                'from' => "2025-02-21T13:33:47.000000+09:00",
                'to' => "2021-06-21T20:38:42.000000+09:00",
                'page' => 5242,
                'per_page' => 8010
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "72902854-4e5c-4131-b882-a208fe413d28",
            [
                'type' => "topup",
                'is_modified' => FALSE,
                'from' => "2022-06-03T13:47:37.000000+09:00",
                'to' => "2023-11-30T20:57:47.000000+09:00",
                'page' => 5317,
                'per_page' => 119
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "72902854-4e5c-4131-b882-a208fe413d28",
            [
                'receiver_customer_id' => "18859557-4c3d-4189-a76e-8cd4f6340d52",
                'type' => "exchange",
                'is_modified' => FALSE,
                'from' => "2022-04-18T01:39:18.000000+09:00",
                'to' => "2022-09-16T21:10:45.000000+09:00",
                'page' => 9202,
                'per_page' => 7306
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "72902854-4e5c-4131-b882-a208fe413d28",
            [
                'sender_customer_id' => "9ead9e1f-76a1-4054-ad00-d5a13a25789f",
                'receiver_customer_id' => "9f6323fd-57b8-4918-a2d9-3017bcb51332",
                'type' => "topup",
                'is_modified' => TRUE,
                'from' => "2019-01-21T02:39:53.000000+09:00",
                'to' => "2021-10-03T20:37:25.000000+09:00",
                'page' => 4732,
                'per_page' => 2065
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
