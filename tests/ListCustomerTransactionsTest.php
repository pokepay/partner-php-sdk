<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "c545adae-8c62-4ad7-96b5-386a4a9810e2"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "c545adae-8c62-4ad7-96b5-386a4a9810e2",
            [
                'per_page' => 8796
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "c545adae-8c62-4ad7-96b5-386a4a9810e2",
            [
                'page' => 5636,
                'per_page' => 8896
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "c545adae-8c62-4ad7-96b5-386a4a9810e2",
            [
                'to' => "2023-08-25T07:54:53.000000+09:00",
                'page' => 1543,
                'per_page' => 9361
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "c545adae-8c62-4ad7-96b5-386a4a9810e2",
            [
                'from' => "2017-01-19T09:08:30.000000+09:00",
                'to' => "2021-10-18T06:12:09.000000+09:00",
                'page' => 3815,
                'per_page' => 4419
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "c545adae-8c62-4ad7-96b5-386a4a9810e2",
            [
                'is_modified' => FALSE,
                'from' => "2022-08-28T02:43:40.000000+09:00",
                'to' => "2016-08-23T02:31:01.000000+09:00",
                'page' => 6893,
                'per_page' => 7880
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "c545adae-8c62-4ad7-96b5-386a4a9810e2",
            [
                'type' => "aGy1CoCY",
                'is_modified' => FALSE,
                'from' => "2020-02-16T23:34:49.000000+09:00",
                'to' => "2021-03-26T09:14:17.000000+09:00",
                'page' => 149,
                'per_page' => 3315
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "c545adae-8c62-4ad7-96b5-386a4a9810e2",
            [
                'receiver_customer_id' => "d2a52131-0cc2-4c07-9fde-078b4f498ecc",
                'type' => "dgsrsB7nf3",
                'is_modified' => TRUE,
                'from' => "2019-03-02T16:59:58.000000+09:00",
                'to' => "2016-09-07T21:37:18.000000+09:00",
                'page' => 6712,
                'per_page' => 9655
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "c545adae-8c62-4ad7-96b5-386a4a9810e2",
            [
                'sender_customer_id' => "ea44fecf-1e59-4271-8c2a-58dad1f57c29",
                'receiver_customer_id' => "e1ff0268-3de4-41ab-b205-20d64d90785d",
                'type' => "Z1YQAtf2",
                'is_modified' => FALSE,
                'from' => "2020-10-08T19:15:36.000000+09:00",
                'to' => "2016-03-07T14:03:44.000000+09:00",
                'page' => 5724,
                'per_page' => 7654
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
