<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0b4dfbde-bd7c-4d41-8cce-d391caf69db8"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0b4dfbde-bd7c-4d41-8cce-d391caf69db8",
            [
                'per_page' => 2782
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0b4dfbde-bd7c-4d41-8cce-d391caf69db8",
            [
                'page' => 5035,
                'per_page' => 2783
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0b4dfbde-bd7c-4d41-8cce-d391caf69db8",
            [
                'to' => "2023-06-29T21:14:39.000000+09:00",
                'page' => 7116,
                'per_page' => 4679
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0b4dfbde-bd7c-4d41-8cce-d391caf69db8",
            [
                'from' => "2018-03-10T23:08:22.000000+09:00",
                'to' => "2021-10-19T12:41:27.000000+09:00",
                'page' => 9554,
                'per_page' => 1384
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0b4dfbde-bd7c-4d41-8cce-d391caf69db8",
            [
                'is_modified' => FALSE,
                'from' => "2022-06-07T08:04:15.000000+09:00",
                'to' => "2019-07-30T08:40:21.000000+09:00",
                'page' => 3001,
                'per_page' => 4446
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0b4dfbde-bd7c-4d41-8cce-d391caf69db8",
            [
                'type' => "payment",
                'is_modified' => TRUE,
                'from' => "2023-03-10T13:28:27.000000+09:00",
                'to' => "2016-07-13T17:05:01.000000+09:00",
                'page' => 9811,
                'per_page' => 2418
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0b4dfbde-bd7c-4d41-8cce-d391caf69db8",
            [
                'receiver_customer_id' => "476345b6-b0a8-4dbe-b72a-a5a970984756",
                'type' => "cashback",
                'is_modified' => TRUE,
                'from' => "2020-05-31T14:37:47.000000+09:00",
                'to' => "2020-05-23T00:51:58.000000+09:00",
                'page' => 8910,
                'per_page' => 1364
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "0b4dfbde-bd7c-4d41-8cce-d391caf69db8",
            [
                'sender_customer_id' => "857aa692-a126-477a-bf37-fb86853ba86b",
                'receiver_customer_id' => "c10796f6-0a4f-40cd-9b7f-be28b641d85b",
                'type' => "cashback",
                'is_modified' => TRUE,
                'from' => "2025-04-26T22:29:53.000000+09:00",
                'to' => "2015-11-03T23:03:59.000000+09:00",
                'page' => 5382,
                'per_page' => 3197
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
