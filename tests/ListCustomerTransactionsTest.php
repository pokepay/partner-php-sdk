<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "4ccce7aa-20a7-4f51-ab80-5881d8c043e8"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
            [
                'per_page' => 3769
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
            [
                'page' => 5727,
                'per_page' => 546
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
            [
                'to' => "2022-03-28T00:00:35.000000+09:00",
                'page' => 5419,
                'per_page' => 1275
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
            [
                'from' => "2022-10-10T10:15:09.000000+09:00",
                'to' => "2017-11-18T23:55:30.000000+09:00",
                'page' => 3942,
                'per_page' => 4322
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
            [
                'is_modified' => TRUE,
                'from' => "2019-03-09T19:38:07.000000+09:00",
                'to' => "2024-10-26T06:14:47.000000+09:00",
                'page' => 6676,
                'per_page' => 2346
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
            [
                'type' => "0rU",
                'is_modified' => TRUE,
                'from' => "2024-05-30T20:29:53.000000+09:00",
                'to' => "2017-09-30T20:15:42.000000+09:00",
                'page' => 1622,
                'per_page' => 5756
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
            [
                'receiver_customer_id' => "d783a8bb-7d3a-4ffe-a0d4-81e00c4ae0e3",
                'type' => "nGDBsZu",
                'is_modified' => TRUE,
                'from' => "2018-02-21T16:33:11.000000+09:00",
                'to' => "2022-12-23T09:50:02.000000+09:00",
                'page' => 3648,
                'per_page' => 8655
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "4ccce7aa-20a7-4f51-ab80-5881d8c043e8",
            [
                'sender_customer_id' => "ed0e598d-4ef6-4f00-a9e6-459dd79243d3",
                'receiver_customer_id' => "ee2103b9-4341-47bc-aef5-d5e6d749657b",
                'type' => "ij",
                'is_modified' => FALSE,
                'from' => "2021-07-08T16:22:22.000000+09:00",
                'to' => "2024-12-16T19:43:12.000000+09:00",
                'page' => 6877,
                'per_page' => 1042
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
