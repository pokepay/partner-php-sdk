<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "422ed98d-62d2-4517-8531-10711846fb87"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "422ed98d-62d2-4517-8531-10711846fb87",
            [
                'per_page' => 3210
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "422ed98d-62d2-4517-8531-10711846fb87",
            [
                'page' => 6031,
                'per_page' => 8401
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "422ed98d-62d2-4517-8531-10711846fb87",
            [
                'to' => "2019-11-20T02:14:38.000000+09:00",
                'page' => 4763,
                'per_page' => 7717
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "422ed98d-62d2-4517-8531-10711846fb87",
            [
                'from' => "2023-04-06T22:20:35.000000+09:00",
                'to' => "2015-11-28T02:32:52.000000+09:00",
                'page' => 2030,
                'per_page' => 6273
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "422ed98d-62d2-4517-8531-10711846fb87",
            [
                'is_modified' => FALSE,
                'from' => "2020-10-20T09:05:15.000000+09:00",
                'to' => "2024-08-07T01:15:21.000000+09:00",
                'page' => 625,
                'per_page' => 769
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "422ed98d-62d2-4517-8531-10711846fb87",
            [
                'type' => "khaasWI8",
                'is_modified' => TRUE,
                'from' => "2017-10-05T13:18:59.000000+09:00",
                'to' => "2016-02-28T04:44:44.000000+09:00",
                'page' => 595,
                'per_page' => 9627
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "422ed98d-62d2-4517-8531-10711846fb87",
            [
                'receiver_customer_id' => "d84a35b6-54b2-4adf-8703-78078f35232b",
                'type' => "e0ne6pcNR",
                'is_modified' => FALSE,
                'from' => "2021-02-21T22:29:24.000000+09:00",
                'to' => "2016-05-20T21:53:53.000000+09:00",
                'page' => 5835,
                'per_page' => 8049
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "422ed98d-62d2-4517-8531-10711846fb87",
            [
                'sender_customer_id' => "442c42a5-23a6-41f2-a62f-0f46a7a56e44",
                'receiver_customer_id' => "72c26cdd-99be-480a-b407-2bb7a1fc6e7f",
                'type' => "gNL9",
                'is_modified' => TRUE,
                'from' => "2019-12-31T16:11:29.000000+09:00",
                'to' => "2022-02-04T22:57:25.000000+09:00",
                'page' => 394,
                'per_page' => 8404
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
