<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e00a1e40-8596-42fb-b0d9-51fb98f4420d"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e00a1e40-8596-42fb-b0d9-51fb98f4420d",
            [
                'per_page' => 5003
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e00a1e40-8596-42fb-b0d9-51fb98f4420d",
            [
                'page' => 2409,
                'per_page' => 6012
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e00a1e40-8596-42fb-b0d9-51fb98f4420d",
            [
                'to' => "2022-06-11T08:13:43.000000+09:00",
                'page' => 7143,
                'per_page' => 4389
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e00a1e40-8596-42fb-b0d9-51fb98f4420d",
            [
                'from' => "2021-11-28T01:12:31.000000+09:00",
                'to' => "2022-08-13T05:52:31.000000+09:00",
                'page' => 3783,
                'per_page' => 9720
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e00a1e40-8596-42fb-b0d9-51fb98f4420d",
            [
                'is_modified' => FALSE,
                'from' => "2023-05-05T08:16:12.000000+09:00",
                'to' => "2020-07-06T06:20:36.000000+09:00",
                'page' => 2738,
                'per_page' => 3261
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e00a1e40-8596-42fb-b0d9-51fb98f4420d",
            [
                'type' => "exchange",
                'is_modified' => FALSE,
                'from' => "2021-06-08T18:41:51.000000+09:00",
                'to' => "2021-11-20T22:58:04.000000+09:00",
                'page' => 3930,
                'per_page' => 1955
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e00a1e40-8596-42fb-b0d9-51fb98f4420d",
            [
                'receiver_customer_id' => "8375dca1-7660-4a65-991b-d12d508af5ca",
                'type' => "cashback",
                'is_modified' => TRUE,
                'from' => "2024-02-15T23:42:39.000000+09:00",
                'to' => "2021-02-26T23:07:47.000000+09:00",
                'page' => 5052,
                'per_page' => 918
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e00a1e40-8596-42fb-b0d9-51fb98f4420d",
            [
                'sender_customer_id' => "62f3421b-89b0-4df1-a8a6-33f7ed28a6ff",
                'receiver_customer_id' => "2953247f-ad92-4287-aa1f-608c1f29ac08",
                'type' => "transfer",
                'is_modified' => FALSE,
                'from' => "2022-04-13T05:25:15.000000+09:00",
                'to' => "2020-07-31T06:47:48.000000+09:00",
                'page' => 4945,
                'per_page' => 1343
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
