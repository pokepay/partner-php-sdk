<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "334c77f0-7cc3-4f70-890a-307a86dc273c"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "334c77f0-7cc3-4f70-890a-307a86dc273c",
            [
                'per_page' => 280
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "334c77f0-7cc3-4f70-890a-307a86dc273c",
            [
                'page' => 1243,
                'per_page' => 6527
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "334c77f0-7cc3-4f70-890a-307a86dc273c",
            [
                'to' => "2018-05-24T01:20:13.000000+09:00",
                'page' => 622,
                'per_page' => 4868
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "334c77f0-7cc3-4f70-890a-307a86dc273c",
            [
                'from' => "2020-06-09T03:03:26.000000+09:00",
                'to' => "2020-10-10T17:42:15.000000+09:00",
                'page' => 8648,
                'per_page' => 1595
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "334c77f0-7cc3-4f70-890a-307a86dc273c",
            [
                'is_modified' => FALSE,
                'from' => "2023-12-02T13:37:37.000000+09:00",
                'to' => "2023-05-09T11:23:05.000000+09:00",
                'page' => 8917,
                'per_page' => 2538
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "334c77f0-7cc3-4f70-890a-307a86dc273c",
            [
                'type' => "7OUK0vKQ",
                'is_modified' => FALSE,
                'from' => "2020-02-18T11:43:25.000000+09:00",
                'to' => "2016-03-02T07:20:01.000000+09:00",
                'page' => 1217,
                'per_page' => 3985
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "334c77f0-7cc3-4f70-890a-307a86dc273c",
            [
                'receiver_customer_id' => "94b385a8-f766-4987-8fb1-0651a70f5b24",
                'type' => "AIUc",
                'is_modified' => FALSE,
                'from' => "2016-06-18T03:01:27.000000+09:00",
                'to' => "2016-10-25T09:18:09.000000+09:00",
                'page' => 2957,
                'per_page' => 2835
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "334c77f0-7cc3-4f70-890a-307a86dc273c",
            [
                'sender_customer_id' => "caece5d3-5a15-4a4c-aa22-33f5ff66369c",
                'receiver_customer_id' => "fce2f748-ea07-4fd9-a17a-f181dd8f4d06",
                'type' => "u2Ra1",
                'is_modified' => TRUE,
                'from' => "2023-08-24T21:59:26.000000+09:00",
                'to' => "2024-01-26T17:56:56.000000+09:00",
                'page' => 4734,
                'per_page' => 7073
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
