<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "3ba1b855-9468-40a0-aae8-00217256829f"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "3ba1b855-9468-40a0-aae8-00217256829f",
            [
                'per_page' => 4896
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "3ba1b855-9468-40a0-aae8-00217256829f",
            [
                'page' => 5043,
                'per_page' => 123
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "3ba1b855-9468-40a0-aae8-00217256829f",
            [
                'to' => "2021-07-31T19:11:56.000000+09:00",
                'page' => 6022,
                'per_page' => 9282
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "3ba1b855-9468-40a0-aae8-00217256829f",
            [
                'from' => "2020-01-05T04:17:09.000000+09:00",
                'to' => "2020-04-10T01:16:48.000000+09:00",
                'page' => 1403,
                'per_page' => 3343
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "3ba1b855-9468-40a0-aae8-00217256829f",
            [
                'is_modified' => TRUE,
                'from' => "2021-09-01T12:40:42.000000+09:00",
                'to' => "2022-07-08T01:42:17.000000+09:00",
                'page' => 1027,
                'per_page' => 361
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "3ba1b855-9468-40a0-aae8-00217256829f",
            [
                'type' => "topup",
                'is_modified' => FALSE,
                'from' => "2023-05-03T20:51:37.000000+09:00",
                'to' => "2022-05-20T01:09:16.000000+09:00",
                'page' => 1692,
                'per_page' => 8780
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "3ba1b855-9468-40a0-aae8-00217256829f",
            [
                'receiver_customer_id' => "cd8df686-ea18-4342-a597-0273af8d9427",
                'type' => "cashback",
                'is_modified' => FALSE,
                'from' => "2020-02-23T01:38:35.000000+09:00",
                'to' => "2020-07-28T15:26:00.000000+09:00",
                'page' => 6693,
                'per_page' => 5635
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "3ba1b855-9468-40a0-aae8-00217256829f",
            [
                'sender_customer_id' => "2b838d71-9933-4dce-82ca-25be930cbcb8",
                'receiver_customer_id' => "205e7bf1-3f15-4fa9-8a83-c8152d81d7d5",
                'type' => "payment",
                'is_modified' => FALSE,
                'from' => "2023-03-29T04:09:18.000000+09:00",
                'to' => "2020-07-13T00:28:03.000000+09:00",
                'page' => 6442,
                'per_page' => 5258
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
