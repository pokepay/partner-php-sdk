<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "29b20b46-4675-473b-a6a3-aa47123680b5"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "29b20b46-4675-473b-a6a3-aa47123680b5",
            [
                'per_page' => 4407
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "29b20b46-4675-473b-a6a3-aa47123680b5",
            [
                'page' => 629,
                'per_page' => 9936
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "29b20b46-4675-473b-a6a3-aa47123680b5",
            [
                'to' => "2022-09-01T14:54:32.000000+09:00",
                'page' => 6204,
                'per_page' => 2778
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "29b20b46-4675-473b-a6a3-aa47123680b5",
            [
                'from' => "2024-10-11T14:44:16.000000+09:00",
                'to' => "2019-12-24T05:26:42.000000+09:00",
                'page' => 7693,
                'per_page' => 6074
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "29b20b46-4675-473b-a6a3-aa47123680b5",
            [
                'is_modified' => FALSE,
                'from' => "2020-07-10T12:06:06.000000+09:00",
                'to' => "2020-08-15T15:39:08.000000+09:00",
                'page' => 1797,
                'per_page' => 5491
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "29b20b46-4675-473b-a6a3-aa47123680b5",
            [
                'type' => "exchange",
                'is_modified' => TRUE,
                'from' => "2020-10-29T00:22:01.000000+09:00",
                'to' => "2016-07-27T17:05:32.000000+09:00",
                'page' => 9758,
                'per_page' => 2467
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "29b20b46-4675-473b-a6a3-aa47123680b5",
            [
                'receiver_customer_id' => "46f38768-fb34-4a1a-837f-7a3c255aec2b",
                'type' => "payment",
                'is_modified' => FALSE,
                'from' => "2019-11-22T08:58:14.000000+09:00",
                'to' => "2016-06-17T03:53:08.000000+09:00",
                'page' => 4005,
                'per_page' => 2722
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "29b20b46-4675-473b-a6a3-aa47123680b5",
            [
                'sender_customer_id' => "3f5e8f50-d253-42b2-90c4-a99f72921c18",
                'receiver_customer_id' => "06033495-2c1d-4666-a3cc-be28ea946508",
                'type' => "exchange",
                'is_modified' => FALSE,
                'from' => "2023-11-16T15:07:45.000000+09:00",
                'to' => "2022-11-19T09:35:55.000000+09:00",
                'page' => 5348,
                'per_page' => 701
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
