<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "fbf34e5c-b131-4778-8208-3d289e0d477c"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "fbf34e5c-b131-4778-8208-3d289e0d477c",
            [
                'per_page' => 1705
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "fbf34e5c-b131-4778-8208-3d289e0d477c",
            [
                'page' => 3943,
                'per_page' => 2309
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "fbf34e5c-b131-4778-8208-3d289e0d477c",
            [
                'to' => "2022-02-22T06:42:36.000000+09:00",
                'page' => 4910,
                'per_page' => 3622
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "fbf34e5c-b131-4778-8208-3d289e0d477c",
            [
                'from' => "2020-09-17T07:45:03.000000+09:00",
                'to' => "2021-02-15T21:51:48.000000+09:00",
                'page' => 5516,
                'per_page' => 2876
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "fbf34e5c-b131-4778-8208-3d289e0d477c",
            [
                'is_modified' => FALSE,
                'from' => "2021-05-27T16:30:20.000000+09:00",
                'to' => "2022-05-15T11:26:21.000000+09:00",
                'page' => 5666,
                'per_page' => 5023
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "fbf34e5c-b131-4778-8208-3d289e0d477c",
            [
                'type' => "transfer",
                'is_modified' => TRUE,
                'from' => "2022-07-15T16:04:22.000000+09:00",
                'to' => "2020-10-11T01:56:26.000000+09:00",
                'page' => 1575,
                'per_page' => 5242
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "fbf34e5c-b131-4778-8208-3d289e0d477c",
            [
                'receiver_customer_id' => "5ff1fa3b-b242-4f49-9085-9d71f75a9164",
                'type' => "transfer",
                'is_modified' => FALSE,
                'from' => "2021-06-14T09:43:26.000000+09:00",
                'to' => "2021-11-27T10:53:29.000000+09:00",
                'page' => 5317,
                'per_page' => 119
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "fbf34e5c-b131-4778-8208-3d289e0d477c",
            [
                'sender_customer_id' => "18859557-4c3d-4189-a76e-8cd4f6340d52",
                'receiver_customer_id' => "93051b76-fff2-4c8b-a9be-caa0c3ca72cd",
                'type' => "cashback",
                'is_modified' => FALSE,
                'from' => "2020-01-13T01:47:09.000000+09:00",
                'to' => "2020-01-16T02:05:37.000000+09:00",
                'page' => 7306,
                'per_page' => 7712
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
