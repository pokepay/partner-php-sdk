<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e0ca8138-0fae-4671-85d2-defb9754a25e"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e0ca8138-0fae-4671-85d2-defb9754a25e",
            [
                'per_page' => 2879
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e0ca8138-0fae-4671-85d2-defb9754a25e",
            [
                'page' => 8104,
                'per_page' => 1970
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e0ca8138-0fae-4671-85d2-defb9754a25e",
            [
                'to' => "2019-12-01T21:52:13.000000+09:00",
                'page' => 9887,
                'per_page' => 3010
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e0ca8138-0fae-4671-85d2-defb9754a25e",
            [
                'from' => "2018-07-22T13:06:16.000000+09:00",
                'to' => "2019-05-15T08:37:19.000000+09:00",
                'page' => 11,
                'per_page' => 6078
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e0ca8138-0fae-4671-85d2-defb9754a25e",
            [
                'is_modified' => FALSE,
                'from' => "2019-02-24T04:06:35.000000+09:00",
                'to' => "2021-12-09T06:29:53.000000+09:00",
                'page' => 5746,
                'per_page' => 9625
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e0ca8138-0fae-4671-85d2-defb9754a25e",
            [
                'type' => "IN9jft",
                'is_modified' => FALSE,
                'from' => "2018-05-09T18:11:41.000000+09:00",
                'to' => "2023-01-11T05:41:47.000000+09:00",
                'page' => 9541,
                'per_page' => 8004
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e0ca8138-0fae-4671-85d2-defb9754a25e",
            [
                'receiver_customer_id' => "ce9f946e-9fde-4551-a9df-36678da4c0c9",
                'type' => "cgy",
                'is_modified' => FALSE,
                'from' => "2020-04-22T00:37:44.000000+09:00",
                'to' => "2022-08-29T17:20:58.000000+09:00",
                'page' => 7770,
                'per_page' => 8515
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "e0ca8138-0fae-4671-85d2-defb9754a25e",
            [
                'sender_customer_id' => "152e3c67-bc1f-4f58-a711-f288a8993fef",
                'receiver_customer_id' => "6a586f2a-5b59-4e0a-8e2c-18e1c33eb352",
                'type' => "DH3xa5Z",
                'is_modified' => TRUE,
                'from' => "2017-02-16T09:15:28.000000+09:00",
                'to' => "2021-05-02T08:25:48.000000+09:00",
                'page' => 1101,
                'per_page' => 1978
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
