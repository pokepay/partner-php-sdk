<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCustomerTransactions extends TestCase
{
    public function testListCustomerTransactions0()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "40e8f0f0-0260-43d0-b484-0e593e7dceb6"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions1()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "40e8f0f0-0260-43d0-b484-0e593e7dceb6",
            [
                'per_page' => 2987
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions2()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "40e8f0f0-0260-43d0-b484-0e593e7dceb6",
            [
                'page' => 9627,
                'per_page' => 9347
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions3()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "40e8f0f0-0260-43d0-b484-0e593e7dceb6",
            [
                'to' => "2022-03-31T09:39:19.000000+09:00",
                'page' => 4724,
                'per_page' => 630
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions4()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "40e8f0f0-0260-43d0-b484-0e593e7dceb6",
            [
                'from' => "2023-10-27T20:31:37.000000+09:00",
                'to' => "2023-09-15T07:19:12.000000+09:00",
                'page' => 5375,
                'per_page' => 2229
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions5()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "40e8f0f0-0260-43d0-b484-0e593e7dceb6",
            [
                'is_modified' => TRUE,
                'from' => "2023-09-25T09:50:16.000000+09:00",
                'to' => "2020-11-14T18:13:18.000000+09:00",
                'page' => 5861,
                'per_page' => 983
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions6()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "40e8f0f0-0260-43d0-b484-0e593e7dceb6",
            [
                'type' => "exchange",
                'is_modified' => FALSE,
                'from' => "2021-10-05T07:18:16.000000+09:00",
                'to' => "2021-06-12T20:38:14.000000+09:00",
                'page' => 5581,
                'per_page' => 340
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions7()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "40e8f0f0-0260-43d0-b484-0e593e7dceb6",
            [
                'receiver_customer_id' => "5d9ec355-5b38-47f0-abca-5acb4c39b114",
                'type' => "expire",
                'is_modified' => FALSE,
                'from' => "2022-04-02T15:13:03.000000+09:00",
                'to' => "2023-04-18T01:45:30.000000+09:00",
                'page' => 6684,
                'per_page' => 6905
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCustomerTransactions8()
    {
        $client = $this->newClient();
        $request = new Request\ListCustomerTransactions(
            "40e8f0f0-0260-43d0-b484-0e593e7dceb6",
            [
                'sender_customer_id' => "83e48727-735c-49b8-bbd8-b2978959d442",
                'receiver_customer_id' => "b1806c5a-6c09-46d3-a156-31e766a5d355",
                'type' => "expire",
                'is_modified' => FALSE,
                'from' => "2023-07-13T15:10:15.000000+09:00",
                'to' => "2021-07-16T07:59:39.000000+09:00",
                'page' => 4585,
                'per_page' => 7194
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
