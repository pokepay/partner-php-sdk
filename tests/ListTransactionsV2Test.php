<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 793
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "94aa58c4-ffd6-4cca-94f0-a415788c0559",
                'per_page' => 851
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "74a0a2a1-0b5b-4903-8dd2-0ed063dd599c",
                'prev_page_cursor_id' => "2e59d8e1-d25e-4a4a-8b5c-16e8590c7d54",
                'per_page' => 798
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2023-06-21T17:51:49.000000+09:00",
                'next_page_cursor_id' => "cad6ec92-49b6-4467-b5cd-552a011b45e8",
                'prev_page_cursor_id' => "3cf8ef0b-6f02-4a56-b27e-fb476cf139fe",
                'per_page' => 982
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2020-08-05T14:33:49.000000+09:00",
                'to' => "2022-12-18T13:02:53.000000+09:00",
                'next_page_cursor_id' => "d7585084-c736-4f7c-963a-bf9befcb21d0",
                'prev_page_cursor_id' => "9a7af03b-1a64-4a4b-8f68-2ba3dc13dde5",
                'per_page' => 84
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["exchange_inflow", "topup", "exchange_outflow"],
                'from' => "2023-11-08T22:33:34.000000+09:00",
                'to' => "2020-03-22T12:11:52.000000+09:00",
                'next_page_cursor_id' => "46fd9013-c551-4788-84f2-f0e3d9a30870",
                'prev_page_cursor_id' => "34a121bf-cd31-4e4e-8f94-23436bd7c71b",
                'per_page' => 884
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "payment", "expire", "cashback", "exchange_outflow", "topup"],
                'from' => "2020-06-05T03:32:28.000000+09:00",
                'to' => "2020-10-18T11:04:30.000000+09:00",
                'next_page_cursor_id' => "08ca0ceb-cf56-45c1-b74e-e2f52a76b34f",
                'prev_page_cursor_id' => "e80ff932-9134-4262-b97d-16bfad1cc219",
                'per_page' => 577
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "HpW79RksM",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_outflow", "exchange_inflow"],
                'from' => "2023-01-15T02:35:08.000000+09:00",
                'to' => "2022-07-14T02:24:54.000000+09:00",
                'next_page_cursor_id' => "b6dbfde7-7a67-455a-bc38-c622a935c20b",
                'prev_page_cursor_id' => "79d510d7-fcca-4b07-835c-e5059f470eec",
                'per_page' => 178
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "hFoCeoyCUpf8itGhvQ6fNLqTEHhYKyidLHr4eIdCfk2GTmxS",
                'transaction_id' => "tBlI3OVU",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_inflow", "expire", "cashback", "exchange_outflow", "payment"],
                'from' => "2023-07-22T13:55:22.000000+09:00",
                'to' => "2021-04-15T01:24:23.000000+09:00",
                'next_page_cursor_id' => "56b1e4eb-191b-4da7-8c2b-afe3c1b98369",
                'prev_page_cursor_id' => "a835c6f6-f8a9-4a9c-bfc5-bb43c418addb",
                'per_page' => 623
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "pmxttMaO1sFwwGrE0vKWCou17gkhsTpPUQUz8tl5R7VCxqyLjBfhAKQBkenvZTdMqtWA9QXHjuOdaZ8zrRzT9E9VilBDnmE2kEZnwP7zS5tDtunNkqzBNEVVyMBmMtwYa6kO4SGw2l649W34KRK3ZA2XTTBztMMinTSyW1",
                'description' => "My68bGfsYNEAdnSQ1DNrwqwVLaaj0bhpepjsEJGjPkx6Omm54TluTLylMuriaxoqsk59eYmagOyY6Tkm49pvkR6KAulOohTbCzUf",
                'transaction_id' => "1X2iLlGg",
                'is_modified' => FALSE,
                'types' => ["expire", "payment", "exchange_outflow"],
                'from' => "2022-10-01T02:43:08.000000+09:00",
                'to' => "2024-01-04T11:25:55.000000+09:00",
                'next_page_cursor_id' => "52296f43-8a94-4594-9518-1f9e7977d3ae",
                'prev_page_cursor_id' => "fb34fda8-ff50-42b8-8cfa-ba4bba5f58a0",
                'per_page' => 311
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "966d13a6-91d2-4ba3-a3b7-cd670865391c",
                'customer_name' => "yxeX2PgPYdOaTIrlQqBOu87zvjWIZgXm34srUMPgpSFQeunKLeUyHuAkl5YRt6D4ioPBRrrdCejV6G8tmYYrir7sFpU1S5YNowZcRmyFzBSBrr2odrNPu8bjHbHZOmXtJhixdlZNd70G84kY0AU5259MF",
                'description' => "UxtkEGXqDTrfrCjDfACswRm",
                'transaction_id' => "IoHj",
                'is_modified' => TRUE,
                'types' => ["payment", "expire", "cashback", "topup"],
                'from' => "2022-09-04T06:36:17.000000+09:00",
                'to' => "2022-08-11T23:38:40.000000+09:00",
                'next_page_cursor_id' => "72d969f1-3b4c-4ea9-9baa-f7cf302bff30",
                'prev_page_cursor_id' => "afda582c-cdb9-4890-bf3b-be6f2591fd77",
                'per_page' => 291
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "5ecd1c74-d0ec-4529-9b74-525e75b2d9bf",
                'customer_id' => "15acb680-a0b8-473c-9a9a-a9c37f236ed3",
                'customer_name' => "aBopxBjMn3hVcaNjevhZtyuunkRP1bYcdJIlQDyKrGWvprYEteR25rtoiKr4JQ3lYOA1WPxKCivkwbvQ0hWGo5CieQJ9P7sWQY8r6VZRmKDK52bnHCX3WCu",
                'description' => "eEqqC6Fj3LlwS2g4RVClUjLqZMU7HS7icgrwnXvG2Qe16qHKUFMFJ4jUkWWU92vxNsRgTPsnFCwEGTrwUCE3s1mAUgkk4nUTJVdeGZC0ZKyApa2F79C06HZbh",
                'transaction_id' => "M",
                'is_modified' => FALSE,
                'types' => ["expire"],
                'from' => "2022-02-13T05:18:33.000000+09:00",
                'to' => "2021-02-22T21:10:47.000000+09:00",
                'next_page_cursor_id' => "b7d9c22c-8831-436a-a02f-ef3ebd97f509",
                'prev_page_cursor_id' => "2329b82e-f923-4f67-9125-8d14a6e1734f",
                'per_page' => 658
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "ebc36092-a61b-4cfa-8bee-ca16b75701b9",
                'terminal_id' => "399ccf05-9fec-4188-9a06-b909fe3054ab",
                'customer_id' => "5327c86b-2a77-452a-bb22-f7e5a1770241",
                'customer_name' => "cisFkzxvVwuxRFbgXqL",
                'description' => "2itsCTjpLdbsbbdLzvX8VsYVZj6wRfrBbqP5cZWG5gjyWl940hZC90Fq7TaMhavfxPX3clVMLXQb4Dn4W1UUsHx2Sa5uvWgJXfy1n29M50xSbeJoFQXs8jmIHbHrGTp0CJB1UIg8FiAUExQzXLS1DccFMWe8uJbuYvhxUawuPEUk7xZyzyJOywtJ28LLrZALU6Mk",
                'transaction_id' => "ef",
                'is_modified' => FALSE,
                'types' => ["expire", "cashback", "exchange_inflow", "topup", "payment"],
                'from' => "2021-06-05T22:31:12.000000+09:00",
                'to' => "2020-10-14T16:52:01.000000+09:00",
                'next_page_cursor_id' => "8fafe139-84d9-458b-aa48-a852f601a59d",
                'prev_page_cursor_id' => "c6309e46-56da-433a-bec5-20314bdd952b",
                'per_page' => 52
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "x1ooz4-lRzuKf5",
                'shop_id' => "6668bbf7-25e9-48b4-983f-5130fbf7b156",
                'terminal_id' => "25d43226-ec5c-401a-8d7d-bc4e353cf5ce",
                'customer_id' => "edd29016-0151-4899-9c2d-3878d7fe9058",
                'customer_name' => "RZVWc3Wty9wCvWjON46G4E9waCijRx1xN7zLoaOpc2T1E3LjD63ZXG6PjR13DrXkAFxue25NVbYhJBRiZfrnefmrz0dGICgeX4s7c3zS0iWvYNfXxoLrnXbolDXRfL3ypX5Q0TOhA7Uibu5iFASXdPsaoP6myMMdcaSsmxPjtz4aE85HMRZD5s7Oc",
                'description' => "WPkBH1EGcGDQQAA3hkLaYE1ElkcOhJbism4MubwvC4knXfv4kQKOb",
                'transaction_id' => "UI44rUg3k",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "cashback", "expire", "topup"],
                'from' => "2022-12-10T04:38:15.000000+09:00",
                'to' => "2021-02-17T07:26:31.000000+09:00",
                'next_page_cursor_id' => "41525f30-3a78-44bc-ac1f-720b0d5b180c",
                'prev_page_cursor_id' => "b1c9fd1d-c069-4422-90f3-ac744c63a17c",
                'per_page' => 826
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "0c3f6291-8b91-44c6-9fb7-9f24bbd70791",
                'organization_code' => "vumTx4om7-1KOj-0-U-e6-nEFW5G-07r",
                'shop_id' => "c15908c4-9bf6-418f-b23d-841f1ee9b5f7",
                'terminal_id' => "e31f3675-2105-43a8-a5c2-8c7ac360ace5",
                'customer_id' => "8cc08ea4-fe87-4366-86e9-b62c7d42af97",
                'customer_name' => "CP0EyUX0S298JF90NQOm8DGOIjSYgKmrkelBqGsDxJwHwLHSNid7TVDcUKNrsn4Z7DFKx2R83fhc3gqUUMIMiOCQCy0aBVPM377ijlmSMcmFyWguvkpoVhjtxWh3K9XyWnjAA4vsZRIcvq4aT5v1vydpaFJY68CzVKAtiXSypBghlRR7Y1l",
                'description' => "q3W9joCJYRuUl8uNpXZTUZSRtiqnGVSrwO6GscGZgoUTRLcUMolO74p9fZivAd9OaKQM9YmqpKeCZzaFOKbbuV",
                'transaction_id' => "XRecP7",
                'is_modified' => TRUE,
                'types' => ["cashback", "exchange_outflow", "topup", "payment", "expire", "exchange_inflow"],
                'from' => "2021-06-13T20:06:08.000000+09:00",
                'to' => "2021-07-08T15:18:04.000000+09:00",
                'next_page_cursor_id' => "6e4a2c1e-93de-4c75-b86c-28ba1c788a15",
                'prev_page_cursor_id' => "16a1906f-35d1-410a-b9af-343e0d73c683",
                'per_page' => 623
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
