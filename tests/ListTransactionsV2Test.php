<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 653
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "97b1a518-3f31-4af0-9ea6-86230d0a0bbd",
                'per_page' => 19
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "a336c023-b4d7-4117-bfc4-d063b58d43d6",
                'prev_page_cursor_id' => "505c87f9-84c5-4f48-bc2a-392e1679533f",
                'per_page' => 49
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2024-01-08T03:55:04.000000Z",
                'next_page_cursor_id' => "0eb7cfbb-e351-4629-8676-2619951cf6be",
                'prev_page_cursor_id' => "8ea7329f-590b-48d0-84c3-1cd2d9574f7b",
                'per_page' => 694
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2020-05-27T08:52:25.000000Z",
                'to' => "2023-02-28T00:45:00.000000Z",
                'next_page_cursor_id' => "420fa59f-7807-4580-a0a1-c659f77259bc",
                'prev_page_cursor_id' => "58606c5a-493f-4fe8-bbd8-747d946d7b37",
                'per_page' => 396
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["expire"],
                'from' => "2022-12-25T18:29:43.000000Z",
                'to' => "2021-01-22T12:30:53.000000Z",
                'next_page_cursor_id' => "f54afdea-375e-4bd7-8806-38f4024ef7c7",
                'prev_page_cursor_id' => "c324a222-93ba-4b73-b3e2-5eb80f70cf0c",
                'per_page' => 311
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => TRUE,
                'types' => ["cashback", "exchange_outflow", "topup"],
                'from' => "2021-04-20T23:38:53.000000Z",
                'to' => "2023-03-26T18:24:47.000000Z",
                'next_page_cursor_id' => "34cb2605-e98c-4b7b-880e-e08895753838",
                'prev_page_cursor_id' => "4c0ee7ea-fea4-4097-b2be-4b096e64bfe6",
                'per_page' => 675
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "P",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "exchange_inflow", "expire", "topup", "payment", "cashback"],
                'from' => "2020-11-13T13:13:56.000000Z",
                'to' => "2021-02-08T10:41:26.000000Z",
                'next_page_cursor_id' => "5d688559-3de4-43ef-a88b-e0a210ed2d44",
                'prev_page_cursor_id' => "96254252-9478-401b-9d63-ac655023169f",
                'per_page' => 31
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "psSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFh",
                'transaction_id' => "A",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "topup", "payment"],
                'from' => "2023-10-18T05:20:37.000000Z",
                'to' => "2022-03-06T18:42:56.000000Z",
                'next_page_cursor_id' => "702d90b9-3ef2-4781-b296-c4d27037028a",
                'prev_page_cursor_id' => "f4c30796-b698-4142-a5e1-9bc20706164f",
                'per_page' => 46
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "dWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mo",
                'description' => "yloW0gLyNig5qU771SYwG9bLF",
                'transaction_id' => "HIbs98V",
                'is_modified' => FALSE,
                'types' => ["topup", "cashback"],
                'from' => "2021-11-01T21:13:07.000000Z",
                'to' => "2023-01-30T09:23:34.000000Z",
                'next_page_cursor_id' => "7fc77008-cb38-4170-bcae-0c5398d4869b",
                'prev_page_cursor_id' => "409113b7-c2d7-4495-9d95-7e9d21bcd75a",
                'per_page' => 267
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "2d6b2f87-f014-45f5-ad0d-10e0b5367189",
                'customer_name' => "uB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5V",
                'description' => "BpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2",
                'transaction_id' => "JncUb",
                'is_modified' => TRUE,
                'types' => ["topup"],
                'from' => "2024-03-14T04:24:51.000000Z",
                'to' => "2021-10-16T10:34:46.000000Z",
                'next_page_cursor_id' => "597f7907-c354-4719-beeb-675a6bd89bbe",
                'prev_page_cursor_id' => "d2abd54c-1b23-4d10-bb0d-d0640cbcc922",
                'per_page' => 250
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "740466b8-af96-4ea1-82dc-5f9d38f40ab9",
                'customer_id' => "8144be57-8e57-4771-bd91-82ce44d9d572",
                'customer_name' => "VXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6Y",
                'description' => "YkiFEIISprQ3cmpI6bh8YrVsWGSghDCw1Un7nnaTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur",
                'transaction_id' => "lrAgR",
                'is_modified' => TRUE,
                'types' => ["payment", "expire", "exchange_outflow", "topup", "exchange_inflow", "cashback"],
                'from' => "2024-01-21T19:12:21.000000Z",
                'to' => "2021-01-10T18:58:33.000000Z",
                'next_page_cursor_id' => "c7b3c8dc-0ae0-4312-8543-6cc47f989efc",
                'prev_page_cursor_id' => "9d55c712-30f0-4312-98b8-ba0201a288ce",
                'per_page' => 682
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "c13d55f9-6e22-465c-bb37-5845aebb53f8",
                'terminal_id' => "2b8b8db4-8c7a-4d26-9ccc-b0798d3a473f",
                'customer_id' => "46242823-365e-4d2c-bd0c-b0acb53b605c",
                'customer_name' => "mVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNA",
                'description' => "Up6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsv",
                'transaction_id' => "Q",
                'is_modified' => TRUE,
                'types' => ["payment", "topup", "expire", "exchange_inflow", "cashback", "exchange_outflow"],
                'from' => "2023-04-30T13:50:19.000000Z",
                'to' => "2021-04-26T12:13:02.000000Z",
                'next_page_cursor_id' => "de4aaed8-5b77-41c0-b4bf-7f2e7a32ff50",
                'prev_page_cursor_id' => "6385eb40-9ae6-4027-9f3e-31cbdf6f8c88",
                'per_page' => 194
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "ZgPolr77LuET-----gizz6u",
                'shop_id' => "ed2904e4-23df-4046-a63d-39b000bd405e",
                'terminal_id' => "95f56e59-fb8a-4731-9bca-2b167cad46cf",
                'customer_id' => "1d21542d-b288-4810-846f-27427e0ef468",
                'customer_name' => "EJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6tQ3vZwFKRF",
                'description' => "7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA",
                'transaction_id' => "Va",
                'is_modified' => TRUE,
                'types' => ["payment", "exchange_outflow", "cashback", "topup", "expire"],
                'from' => "2020-04-12T18:56:58.000000Z",
                'to' => "2020-01-09T10:00:20.000000Z",
                'next_page_cursor_id' => "ec88c98d-3119-4a37-8838-28767dafce26",
                'prev_page_cursor_id' => "39a18535-c6cf-4e59-988e-6781ef8fa632",
                'per_page' => 451
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "1b05a49a-8e5d-42fd-a28d-234047c47a37",
                'organization_code' => "u69-xrU--0eU11U-Ik",
                'shop_id' => "4c4dce85-93d0-441a-beac-2002d088577c",
                'terminal_id' => "51c604ba-4958-4855-b94a-5f82c0d80f7d",
                'customer_id' => "820096b1-b0d6-429e-b072-8135e4b9819c",
                'customer_name' => "HRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrcG4cF",
                'description' => "x",
                'transaction_id' => "90D5go4dBL",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_inflow", "expire", "exchange_outflow", "payment", "topup"],
                'from' => "2022-08-20T00:15:35.000000Z",
                'to' => "2022-09-21T22:50:13.000000Z",
                'next_page_cursor_id' => "2051d1a1-7343-49d3-9a8d-45a3aba0c4bc",
                'prev_page_cursor_id' => "a3428956-0382-45e4-9f34-ede39e0d30a3",
                'per_page' => 862
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
