<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 415
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "f09229ce-66ae-4d0b-945c-c18de13fc5d7",
                'per_page' => 573
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "55bfa498-21c7-4734-8ed7-625d11682bce",
                'prev_page_cursor_id' => "effe40dd-b79c-435a-9140-9e58eafe7788",
                'per_page' => 408
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2022-12-25T12:45:37.000000+09:00",
                'next_page_cursor_id' => "d94f27b8-084c-4b5a-bec9-b619efebb835",
                'prev_page_cursor_id' => "e3abfb41-c180-4150-99d7-f8219043ac8f",
                'per_page' => 539
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2020-05-13T08:52:16.000000+09:00",
                'to' => "2023-06-09T12:41:15.000000+09:00",
                'next_page_cursor_id' => "9c3e3cd3-2d64-49c0-ab4b-c2e56e467002",
                'prev_page_cursor_id' => "a7adbdc5-0493-4325-b2f3-cc0b63d24fe5",
                'per_page' => 248
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["payment", "exchange_inflow", "expire", "exchange_outflow", "topup"],
                'from' => "2023-07-28T00:50:13.000000+09:00",
                'to' => "2023-07-07T07:14:12.000000+09:00",
                'next_page_cursor_id' => "d6ceca50-3f96-4ef2-9426-5823c948ca88",
                'prev_page_cursor_id' => "652c3586-b36b-43b0-ba4d-c7cb06e2f00a",
                'per_page' => 68
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "exchange_outflow"],
                'from' => "2023-03-03T10:36:34.000000+09:00",
                'to' => "2022-06-12T11:40:33.000000+09:00",
                'next_page_cursor_id' => "4598bd08-09b9-4f7f-97c2-9cbf4cfc11e2",
                'prev_page_cursor_id' => "cc608131-9052-4b1a-ac71-b2386ba7b844",
                'per_page' => 363
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "X",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_outflow", "exchange_inflow"],
                'from' => "2023-03-17T15:16:26.000000+09:00",
                'to' => "2023-08-03T13:14:02.000000+09:00",
                'next_page_cursor_id' => "7e419650-4399-430b-9b96-c3d2ff202fb5",
                'prev_page_cursor_id' => "180f6a1f-3dab-49fc-be75-c2d5a3828746",
                'per_page' => 940
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "vWg0IGp9dIckvJeBRMivLNEi7zJSG8xo1HTT8VQpNOCA6Q5t3PhblYfp9qKqE",
                'transaction_id' => "1iMpF",
                'is_modified' => FALSE,
                'types' => ["payment"],
                'from' => "2022-10-27T01:59:10.000000+09:00",
                'to' => "2023-11-19T22:01:59.000000+09:00",
                'next_page_cursor_id' => "93f6e2b8-cb2b-45a8-948e-8cd3822f515a",
                'prev_page_cursor_id' => "bb541069-fb77-43cf-8ad2-0b6266c82571",
                'per_page' => 752
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "nfIGno7LVUeSJ6h6xo6OEanEylZSVDY4pWqglAvt61mCdvwFG7J0Ql3Bkqf7J0gAe7PbF2mspG5xZJLiqYSWQkb9XUtClxeXnR5sZMigNh3uS0ljY4aTw2yAtEopf6Zfc3QHbpvNPL3yR",
                'description' => "kU5xH2nIsH7C0xTKXFUdP8dY14poE8PM2lmnyplYzwxXLqWij7bzbgpEkEclk7KfxXYCeKomfbQyoUF7oKxgJG2SywhqEtni1P0bYUm7X1zdvdhWCyL94nkyL7wGqqhxQo5LZ6C2ytN0",
                'transaction_id' => "bu4oNAO",
                'is_modified' => TRUE,
                'types' => ["payment", "exchange_outflow", "expire", "cashback", "exchange_inflow", "topup"],
                'from' => "2023-01-14T15:01:37.000000+09:00",
                'to' => "2023-11-22T00:37:13.000000+09:00",
                'next_page_cursor_id' => "c9b9e038-1437-47f6-8b33-d8c45e16b8c3",
                'prev_page_cursor_id' => "ff3c6e41-04a3-4df4-bc0e-fda00f55f7b2",
                'per_page' => 573
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "18f0b3ca-0d28-4061-adaf-ec56195a1c23",
                'customer_name' => "5u5jCCeLFzdpkGxkRq3pkbGWJKrOlJStfNxlUcaHvmt28i5bgK5wj7hIAuQmVYEk0gr1gj9RBHEi27dkEID8BslDhH10inSiA5gwVTjB4Y0A38vKN4tkHa9I4wdm6lPCSwAnve3kVMV36G6tWIxIsG94bL5zkG2UZkLFKfVZijYVMGc28rCwHz3pbr4HEUUs9AIi1TyzqNz1LccykrLhQSOdH1vpJvn1OuJUW4tE5AB",
                'description' => "ti57aIVvl5wiSaTbELBGpSkmkFMKHySJ",
                'transaction_id' => "NJV6f",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_inflow"],
                'from' => "2024-01-08T16:52:46.000000+09:00",
                'to' => "2021-08-19T20:41:23.000000+09:00",
                'next_page_cursor_id' => "35dabe16-cd3b-4800-ba1d-32ab2aad68bf",
                'prev_page_cursor_id' => "9491426d-b69b-431e-b4d4-6f560c7f460b",
                'per_page' => 40
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "87832931-0c7b-422a-929c-e203965673fe",
                'customer_id' => "86495d8c-3a38-43d1-bb31-4ec4e589e0b1",
                'customer_name' => "OK3iMqKEMX4CJERO2i7BMZIZ6Iq00pzUQyq13b347vLzSheJkcC57TAR71M4DcQTgFQ1RdFLdka8lB7p7B8wsvOLoPCyXYpDQXkcMrkqXOm8ZHdweewZoblb0rQmzjdIB2DLTtCFt6c7RpYJGczm5OA7tNulADnCBZV3vmf9qr31gSoegeyRT6FooHUTbLcTqu7MNK62u",
                'description' => "0kREV4fbQvPfWOZ66sEaDhXvuVVQO4WJnU7cgycyQrpuLOXy7197noi24bgYhd0VTn5j6YThwke28tvywAYYayde0z9UB3rwiIV4bAYu1pKpEl0mYH8tUbWtq1NOnIWg5Bg3YNgJUouqSoO1wvFapf5PN1XN0kVsV2qeU2Oz",
                'transaction_id' => "n5nyz0",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_inflow", "cashback", "payment", "expire"],
                'from' => "2022-04-23T17:22:48.000000+09:00",
                'to' => "2022-08-12T20:00:24.000000+09:00",
                'next_page_cursor_id' => "ebcbbc5c-1813-4bd1-8098-d7ac128d3b88",
                'prev_page_cursor_id' => "27d6a80c-1894-4ad8-bec5-446a4978ed04",
                'per_page' => 518
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "38022596-8efb-4092-9f8c-a215e39691be",
                'terminal_id' => "0d9dfd1f-a737-4ea8-b31b-bf5243d6bfea",
                'customer_id' => "70fd0dce-0a48-4848-8861-0774dd83fd34",
                'customer_name' => "IpDQOMch8qMKgM2Fzao4SF1aRo8yCfKPJRMkRJ25xCsNR0k2HOWP5qOfQjjmjND6",
                'description' => "p7SpXilhyc94iw8WH8Krd8xOzwemEEWCSgA7qPX45CBHVcWXasOH9SVtONMYWtpomxqO3gnYakZOYLrqUMKbjdqiUolsrvQAptXCVojoBsYWwqAg4I0ZJ7KE13Gc3s3bud4bPqEE4yj3L4U7a2bcQQdkoTadJOmmeUgn",
                'transaction_id' => "xlmLrSvUXk",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "topup", "payment", "cashback", "expire", "exchange_inflow"],
                'from' => "2021-03-15T18:09:31.000000+09:00",
                'to' => "2020-07-04T12:14:33.000000+09:00",
                'next_page_cursor_id' => "b9bcd4c0-f562-408c-bbf9-9bf2b841003e",
                'prev_page_cursor_id' => "778a4f96-d725-4c0d-9a37-80df87494733",
                'per_page' => 141
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "4d-uN63tzF9V---sr-",
                'shop_id' => "142f6b04-e6e9-4347-a01d-0729f5f018b3",
                'terminal_id' => "7bb9cd49-edbb-458d-a937-5f28089254c2",
                'customer_id' => "c20f1edc-cc1d-42bf-811e-381b2459bcdc",
                'customer_name' => "0i1B266XOt3Q3kMPOSrOiC9HOpoTUTOqOnKcgkeToy0mqBTcGnrZ9FPmHixP8RBGF0x6OixE00TtMIe0QNVLGOsLzNTrJBUrKg4zHp4iRBCmJGSw90YrtVJ2gRwzqvbAHWEs6V0usZSPIX",
                'description' => "Xzbi6QiSlojUqcwiZrqZdN",
                'transaction_id' => "1NwLrMUyvT",
                'is_modified' => FALSE,
                'types' => ["expire", "topup", "payment", "exchange_inflow", "exchange_outflow", "cashback"],
                'from' => "2020-09-24T21:38:38.000000+09:00",
                'to' => "2022-08-08T15:44:01.000000+09:00",
                'next_page_cursor_id' => "21632b01-130b-4e82-90af-53de76755a6f",
                'prev_page_cursor_id' => "d7e583c7-d912-4adc-b67e-02b3a8453074",
                'per_page' => 210
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "88c9fda4-1155-40bf-b810-a2245dcbbc64",
                'organization_code' => "306lbFWZ0",
                'shop_id' => "ab09dd7b-ff6b-49bc-81b6-8df0c4e3c28c",
                'terminal_id' => "b48353d8-ebaf-433b-a45c-a473f49dce52",
                'customer_id' => "4b7e4d24-8e90-4f62-8c35-ab084f18b94d",
                'customer_name' => "ZcwE0hFPUZrwQAvdg5Pp",
                'description' => "8wG8W8APHij5eXATpBw2Y176evr6K4z1rOVqszQWOPI8n67NydsIylceBX8fjHTBIvFIecOyEd5kdbTH9UqhMChLKfMzqGk0PJjKoawcy8rXFhA21HnMzryYbuDRwiGDAuqtAfV8mybLbP4MxmdhjkvL2yrREvkYT0sDQlT5v",
                'transaction_id' => "4uro",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "topup"],
                'from' => "2021-10-09T16:13:46.000000+09:00",
                'to' => "2020-10-25T03:48:26.000000+09:00",
                'next_page_cursor_id' => "ca89c4a9-c61b-404a-85f2-bfca73bc7364",
                'prev_page_cursor_id' => "4c95ba68-4739-42e8-9b16-b1e7497eac2e",
                'per_page' => 920
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
