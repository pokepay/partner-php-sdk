<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 658
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "e676160a-a575-47b7-8a61-508a1833c390",
                'per_page' => 168
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "3e27fdcd-6c38-4f8a-b376-cc62a8a969ad",
                'prev_page_cursor_id' => "48246dc9-0766-4f54-ac1e-677dcbf5a1a6",
                'per_page' => 763
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2020-08-30T02:00:45.000000+09:00",
                'next_page_cursor_id' => "ae2c7c9c-8265-438d-9b90-84cbeaa509c0",
                'prev_page_cursor_id' => "841602b9-9984-4ca9-93cc-e8fbe3e7d858",
                'per_page' => 600
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2021-06-05T08:11:18.000000+09:00",
                'to' => "2023-04-24T05:12:37.000000+09:00",
                'next_page_cursor_id' => "b6e312ca-079b-42fa-a429-6a5f0782d963",
                'prev_page_cursor_id' => "1d19e96a-41ef-4e2b-a6a1-6faba0bdfbcd",
                'per_page' => 74
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["exchange_outflow", "exchange_inflow", "payment", "expire"],
                'from' => "2022-08-01T15:56:26.000000+09:00",
                'to' => "2024-01-08T15:54:22.000000+09:00",
                'next_page_cursor_id' => "78a9daf1-5d7b-4351-add7-654f6b54ae63",
                'prev_page_cursor_id' => "585079b5-c287-4dd0-8620-32d7b99ec0f9",
                'per_page' => 675
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_inflow", "exchange_outflow"],
                'from' => "2023-03-08T12:59:27.000000+09:00",
                'to' => "2020-06-14T09:01:02.000000+09:00",
                'next_page_cursor_id' => "93fadfd9-a994-4d7f-b210-36a514564be3",
                'prev_page_cursor_id' => "f5cb7064-bdca-4221-987d-013267abb77a",
                'per_page' => 495
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "RVjlf27498",
                'is_modified' => TRUE,
                'types' => ["expire"],
                'from' => "2020-04-03T01:38:07.000000+09:00",
                'to' => "2020-10-08T23:13:39.000000+09:00",
                'next_page_cursor_id' => "630773e0-9579-44f7-8072-170b106de6f8",
                'prev_page_cursor_id' => "461cabee-ad00-461a-b08b-1ea667da085d",
                'per_page' => 7
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "juwk27JKndKG9XdcjmgunDDFVH64kgKwuBu7AfIVJFOqdS698iodq2jUYyRRSWtyrnmZAT9pLVdekxRt2hKKIRggOdsyntf4ZkZL1xnX3DF7UdnUGhUczJi1z8uxFZ1FTpPwAyusU81jkPQPdYYx07GHKCCz",
                'transaction_id' => "ipjJvZ",
                'is_modified' => FALSE,
                'types' => ["expire", "topup", "exchange_inflow"],
                'from' => "2023-06-25T16:42:25.000000+09:00",
                'to' => "2023-09-27T07:45:19.000000+09:00",
                'next_page_cursor_id' => "081daf07-de9f-44ed-a22b-24c778a871e8",
                'prev_page_cursor_id' => "3da3c044-4125-46ff-883a-b6a6f69bf76c",
                'per_page' => 551
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "EXJz3NkZXjyU8S2jcRWmgmpCNeZPvjKfdrN1YZUF7lAI4pZwbQrTazuCvEbvBNt",
                'description' => "x8JK7KHqWBfRq9xjFRCjIDbi88hf4xxPWRVtbZVA8t29jUuFKj6W9yrFszpG0gYZ3OP0iDJrusCTOBNflbEYDt8gOB7oXJGdRMQj28DbBtPizJh0b",
                'transaction_id' => "zR4HOnBsT",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "cashback"],
                'from' => "2020-07-29T12:34:35.000000+09:00",
                'to' => "2021-12-22T06:54:49.000000+09:00",
                'next_page_cursor_id' => "4d6d12e7-1d13-4145-bf7c-ebe1d6722c71",
                'prev_page_cursor_id' => "7d53c8f4-19a3-4fab-895c-9382b53314b9",
                'per_page' => 443
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "9ad0e0ff-263a-4a14-99d3-c2da8f2675c2",
                'customer_name' => "kHPDjx35FtIuhxZqZyF8RbmOVNay4QQh4B2NuLuLXGYyox0bxdQeZnV9moDpKZNKUP2mRbAGFyyh8uM7Pi3LEZjZNy9bPbf5mEaXY0o",
                'description' => "7ldwKjcHC8iJh0rF1siU0j4hRa3ASoIkuVxlQQZgVhI6JBF2OGteeLoReMeQuwPYuPMxlRTvR7GdIYyBE7",
                'transaction_id' => "Jv",
                'is_modified' => TRUE,
                'types' => ["topup", "cashback", "exchange_inflow", "expire"],
                'from' => "2021-05-22T20:06:59.000000+09:00",
                'to' => "2023-04-16T11:19:36.000000+09:00",
                'next_page_cursor_id' => "817e0209-b068-4cf9-8141-0a2ca9a84b49",
                'prev_page_cursor_id' => "478ae8c4-b956-46ad-b5fa-0913164a5b4e",
                'per_page' => 176
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "0ca96052-c3f7-4c5f-ab1c-5d8d9f17ffff",
                'customer_id' => "14fbb725-ae9c-4f1e-b665-cbadf7cd750c",
                'customer_name' => "OnDalJQHfabscSNfBzxC0C9VkDYDsyLO2wqho6KVxHg2dwR8ZR83VusQja",
                'description' => "6bDitkzJDRUGnTKzELLJDm7on1wejgvoI86Iy5FqY6OU7nAC7LzFEiqvlufqA0sk5sf8AHrpDTSOidr2CssWLHtv8Szgh",
                'transaction_id' => "V7tVQ",
                'is_modified' => TRUE,
                'types' => ["topup", "cashback", "expire", "payment", "exchange_outflow", "exchange_inflow"],
                'from' => "2023-05-08T21:43:10.000000+09:00",
                'to' => "2020-01-02T21:30:59.000000+09:00",
                'next_page_cursor_id' => "3c87de3f-7b43-4857-b9da-85fd2d73a0e6",
                'prev_page_cursor_id' => "4a4efc58-9886-41ad-b96a-78d4594e39a9",
                'per_page' => 127
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "b27459ef-05ac-4d2b-90ce-00d3ba9dcd5b",
                'terminal_id' => "9d6f6179-eff3-4211-83d5-a2114bcdde92",
                'customer_id' => "ce3f55f1-be19-4408-ba38-564ee91e3d5a",
                'customer_name' => "Ydc9c5Z7mdUJTjKHhAhybrH8c8G8SewMOQCue0rmtwhv71VPpxVLv6EepGisCpAw5Q0AOWmLRbSnDBkmPFNwkJL4HaZSu1mISEX0pI5jLiHTKj5PikfwMdE7BzMM2y41H26KC99ollyUW6jjczoElb",
                'description' => "VVeliOnkiJJuhiMOziHGPsBLYPJvgPe6PaOjV0BCRgOanGMOIacSMsk4bUFADzVihOgg99l0HAZjbkRi30M99CfvmMlKBcPGpjiDIigh2elWHYDZbp",
                'transaction_id' => "wU5LWWcT",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "exchange_outflow", "topup", "payment", "cashback"],
                'from' => "2022-02-21T19:49:09.000000+09:00",
                'to' => "2022-12-14T00:24:13.000000+09:00",
                'next_page_cursor_id' => "63042df1-0443-45ea-ba86-7c4b3a2d50d9",
                'prev_page_cursor_id' => "a6acff41-7f14-41b0-b37f-7e9be1b01767",
                'per_page' => 650
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "f-LIy2-gvz7Q-j3-oXC--b-n9--O",
                'shop_id' => "721958be-3bd4-4e86-bc66-694845b4c02e",
                'terminal_id' => "0c62e14d-9142-4975-85f1-5f6e252b5d27",
                'customer_id' => "149bc608-53ce-4ee0-8e9c-01bf94115562",
                'customer_name' => "2cEqGAjfUQ32acL2y5T0Gdrj3XXWCu7rXIXJqJLR0Bc7F9ZAWls3rOdVSuht1HHGwzJgQDjLGmpGtCdOYEJIGWEAqVt1yY9La9j0J1lQwA3nrqVpEGzwGdsOMgOWntEaNnQj3MT4m1mjzQDWWH42zs3gmKv3cKB4KtMbF3NxFonU93c7BOXx8ws",
                'description' => "Ejy44q9SlbSR1qIzFcdSg7QbvAoQrbl2RbUfSgAUmI27bqhKH0zlIrpAxneaT8U7L9VX5mJC1uGftLP6YyfBYUfYpuyNrBQol7S5iYEelQsHRP3vwHLr8xJnasEwbj7d8Fqf0Ep0Y0VIXrUQC0ikrKJhBJdJxHU7kgJ1ljkj3VQkEifkl9GR8liRxSIyg",
                'transaction_id' => "s2",
                'is_modified' => FALSE,
                'types' => ["expire", "topup"],
                'from' => "2022-07-13T21:23:24.000000+09:00",
                'to' => "2022-08-29T03:11:03.000000+09:00",
                'next_page_cursor_id' => "41c51cce-9423-47d0-93a3-1bb65f43c85c",
                'prev_page_cursor_id' => "14ac83ce-e032-4424-9682-886f893f610b",
                'per_page' => 533
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "3985f7e6-0499-4ca2-bcad-3a605263d788",
                'organization_code' => "0q-xj--5yg-I---wbo-",
                'shop_id' => "4e8d3b42-27fb-438c-accd-9b15668305ed",
                'terminal_id' => "c34edd2b-7f40-4b58-9c95-d0fab62fc205",
                'customer_id' => "d58dc235-8772-4909-87a2-5ba8073c85bf",
                'customer_name' => "qHn9fGCkB6fqVPPmf4RRpdiBNbmRcV5x3pIJeAVg8j8nXVnM6MuEYiQJmv9sknAikZnB0bxnfhZWBwMIyVu8uHLjFElQPc0KkzryU2GjOF7uuvq05pLKKIxkwPQ2NqMqBFICgIPLsL0q4XLVCm5EoomRM2",
                'description' => "8eM9BqeAsELSwglSmy0EnV2AKa0a9jUbZYDd3PkPcW06XMwCWuzkFVrB05fdyTmQ6v",
                'transaction_id' => "OlNv",
                'is_modified' => TRUE,
                'types' => ["topup"],
                'from' => "2022-02-23T05:27:04.000000+09:00",
                'to' => "2020-04-22T02:42:14.000000+09:00",
                'next_page_cursor_id' => "a1014224-b353-4a8e-8278-7399545e4afc",
                'prev_page_cursor_id' => "49612eb9-7688-449c-98a7-1fe9d2faae6c",
                'per_page' => 356
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
