<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 515
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "01a288ce-86a9-45f9-a25c-24fb20e7a337",
                'per_page' => 70
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "aebb53f8-8db4-4c7a-a6dc-f0cc65d2b079",
                'prev_page_cursor_id' => "8d3a473f-2823-465e-acfd-450c5315b0ac",
                'per_page' => 93
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2022-11-10T16:42:01.000000Z",
                'next_page_cursor_id' => "47d51d1c-7d7d-4eed-8f26-2a2b344a5456",
                'prev_page_cursor_id' => "58ef04fd-d975-4375-b71d-2c52ab07695a",
                'per_page' => 747
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2024-12-02T16:14:21.000000Z",
                'to' => "2024-06-09T17:54:46.000000Z",
                'next_page_cursor_id' => "985c2180-8c40-4753-8f21-2766712bd439",
                'prev_page_cursor_id' => "054b129a-6230-46c9-8c4c-84680a7074ba",
                'per_page' => 562
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["expire"],
                'from' => "2022-06-05T12:01:23.000000Z",
                'to' => "2023-03-04T12:20:00.000000Z",
                'next_page_cursor_id' => "10e4a5c3-bb76-4eb1-ba02-5721ddf7118f",
                'prev_page_cursor_id' => "5aa24321-e825-4213-b4c9-e23a309164cc",
                'per_page' => 212
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => FALSE,
                'types' => ["cashback", "topup", "expire", "payment", "exchange_outflow", "exchange_inflow"],
                'from' => "2023-04-20T08:04:40.000000Z",
                'to' => "2024-04-06T18:16:52.000000Z",
                'next_page_cursor_id' => "f06def02-1d81-4ae3-8e2c-f1039aeee37c",
                'prev_page_cursor_id' => "86770697-e978-4707-8723-20e2bc00efb1",
                'per_page' => 296
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "w0",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow"],
                'from' => "2024-05-31T16:45:00.000000Z",
                'to' => "2022-05-17T00:35:30.000000Z",
                'next_page_cursor_id' => "ecda8963-adff-47d3-a1a6-004553a8a936",
                'prev_page_cursor_id' => "7fa83d28-d8fa-49a2-a791-f7359340cfd1",
                'per_page' => 904
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "SLVITcWyXkWwNeThL",
                'transaction_id' => "K",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_outflow", "exchange_inflow", "topup"],
                'from' => "2021-12-04T22:13:49.000000Z",
                'to' => "2022-07-18T19:15:02.000000Z",
                'next_page_cursor_id' => "c624f552-688a-4949-97cd-5dddc9461ad9",
                'prev_page_cursor_id' => "5bcaf4e0-94b7-4074-b0a3-c47563f1607e",
                'per_page' => 393
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "9Tu",
                'description' => "4ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4",
                'transaction_id' => "Uw",
                'is_modified' => TRUE,
                'types' => ["topup", "payment", "exchange_outflow"],
                'from' => "2022-09-06T17:01:47.000000Z",
                'to' => "2025-01-07T08:11:52.000000Z",
                'next_page_cursor_id' => "991edf29-a69b-4ece-a6dc-e8a1551ea22a",
                'prev_page_cursor_id' => "f46cc625-8afd-4664-bff9-1c2084e2d03e",
                'per_page' => 546
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "602a6bf4-fbeb-44af-9c84-85b1cf275f99",
                'customer_name' => "inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5o6UqQsbMF41dYUnemzRdROKbGph7rDrumGN6",
                'description' => "Q3vZwFKRF7w",
                'transaction_id' => "plclcWB9",
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_inflow", "expire", "cashback", "payment", "exchange_outflow"],
                'from' => "2025-03-18T23:39:01.000000Z",
                'to' => "2023-01-23T11:08:24.000000Z",
                'next_page_cursor_id' => "52f8252d-f94c-4fc1-82ab-f98fc7c85bbe",
                'prev_page_cursor_id' => "50cc933e-1efa-488e-94cc-cc031b84ad53",
                'per_page' => 438
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "5591db1c-46c1-4dbe-bfa4-5fe75f863813",
                'customer_id' => "34dc55ac-a31b-4d3e-ad69-82ee07a1bdec",
                'customer_name' => "SJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFL",
                'description' => "ghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62",
                'transaction_id' => "8FNzaDe",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "topup", "expire", "payment", "exchange_inflow"],
                'from' => "2021-07-15T02:21:32.000000Z",
                'to' => "2020-08-18T18:44:41.000000Z",
                'next_page_cursor_id' => "28ed6bca-7154-4a36-9fd8-8fd9b6e23b7b",
                'prev_page_cursor_id' => "3b702882-1133-443e-9459-489d623d4cb3",
                'per_page' => 150
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "9f351484-c991-4333-855d-c59732654165",
                'terminal_id' => "1068ba0e-ffeb-44db-bafb-db0f25acd5b4",
                'customer_id' => "616664a7-590e-48a5-a680-3be15b55e700",
                'customer_name' => "hxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4dBLdUCSZVd4cTqnNfSRiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0ipuLt3IQKQQHb6fikVg8U3XBigR3jya01cL",
                'description' => "edhmrVi5NIsblUeDquiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnNKINI7vj8qEDPsdJ8JkL6K4fbUtzmymsdzvhUXmrc210VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQuG198o4cE",
                'transaction_id' => "ye8xiCptr",
                'is_modified' => TRUE,
                'types' => ["payment", "topup", "expire"],
                'from' => "2021-03-23T04:18:28.000000Z",
                'to' => "2025-08-03T09:21:23.000000Z",
                'next_page_cursor_id' => "d296a933-1423-4911-be4f-fe210219c8d1",
                'prev_page_cursor_id' => "b17cfe53-f624-4d0a-a77d-66734f88b581",
                'per_page' => 780
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "d6-8-4tkX-83ZTJ--e6i3CzSB5",
                'shop_id' => "c3f9458b-8da7-4e1e-90be-680ec274044e",
                'terminal_id' => "6cf24dc7-586b-4d5d-8565-8dbc74651c9f",
                'customer_id' => "9ee13ad2-1979-445a-8378-8744ff3f6ff7",
                'customer_name' => "yuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy",
                'description' => "2qiGNeSDJueWNAF2i",
                'transaction_id' => "LhkB0",
                'is_modified' => TRUE,
                'types' => ["expire", "payment", "exchange_inflow", "cashback"],
                'from' => "2024-06-20T05:25:25.000000Z",
                'to' => "2022-04-12T16:41:10.000000Z",
                'next_page_cursor_id' => "cc6f73f7-d93c-4eac-a334-38d98eac5466",
                'prev_page_cursor_id' => "eb83cc8f-73ee-4e13-ba2b-97b5bd45e765",
                'per_page' => 993
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "d0faeb33-8f62-4f3e-aa81-8bd825b010ad",
                'organization_code' => "-o8H-0-u-0-",
                'shop_id' => "81621e2e-9109-421e-842c-95441ae7eb0f",
                'terminal_id' => "0a86fd81-1245-481a-aa75-1824bfaeb0fa",
                'customer_id' => "f231997e-4553-420f-bced-7e0f8e55afba",
                'customer_name' => "ETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVNlOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0mDRGqd8jGihF2zo2G",
                'description' => "N3QYDG6CZS1PVe5LZzi2NmWBlu",
                'transaction_id' => "rzflOytNd",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow"],
                'from' => "2023-01-06T11:28:46.000000Z",
                'to' => "2025-03-13T19:47:50.000000Z",
                'next_page_cursor_id' => "bd78fb2c-657f-451c-8148-c8eea0f06d90",
                'prev_page_cursor_id' => "c0f73958-3233-4c0b-934c-9a4f50feb4f3",
                'per_page' => 823
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
