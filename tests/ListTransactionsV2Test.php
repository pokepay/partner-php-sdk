<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 48
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "8b47e96d-0a23-4a82-8338-f192f07e27a2",
                'per_page' => 376
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "87c0b8f8-b79c-451a-8875-108f02cfa2be",
                'prev_page_cursor_id' => "eb3e0261-eec7-4f99-905e-e144b11eb7e4",
                'per_page' => 590
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2021-11-01T11:06:22.000000+09:00",
                'next_page_cursor_id' => "b3284f7a-8eed-42b6-bbdc-7ce0ede0c079",
                'prev_page_cursor_id' => "6e632b2b-32d1-498e-ac13-86ee8867ee7b",
                'per_page' => 406
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2023-10-29T01:14:46.000000+09:00",
                'to' => "2020-10-10T14:34:19.000000+09:00",
                'next_page_cursor_id' => "74391145-fd31-40dc-9031-e96b4a13e362",
                'prev_page_cursor_id' => "589ec964-6f09-4bde-ae06-dabc679e59e8",
                'per_page' => 999
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["topup", "expire", "exchange_inflow", "payment", "cashback"],
                'from' => "2021-05-15T01:10:54.000000+09:00",
                'to' => "2023-10-16T15:33:39.000000+09:00",
                'next_page_cursor_id' => "b5ca9113-2025-4e74-b989-08ed6b98fd99",
                'prev_page_cursor_id' => "5435adc4-55ac-4f67-a0fb-e31bb3e20251",
                'per_page' => 216
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => FALSE,
                'types' => ["expire", "payment", "cashback"],
                'from' => "2021-10-29T07:00:06.000000+09:00",
                'to' => "2021-04-16T13:34:12.000000+09:00",
                'next_page_cursor_id' => "9452fffc-e32c-4f9e-ba0b-1cd31f450935",
                'prev_page_cursor_id' => "eb018f34-4d6e-4841-8632-afee4d849323",
                'per_page' => 46
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "zyuG",
                'is_modified' => FALSE,
                'types' => ["expire", "topup", "exchange_inflow", "cashback"],
                'from' => "2024-01-21T17:33:13.000000+09:00",
                'to' => "2021-05-03T06:17:27.000000+09:00",
                'next_page_cursor_id' => "0b65e73e-2a1b-4674-a29b-fb4436c90256",
                'prev_page_cursor_id' => "0e7fdf02-f5c8-4ff3-b3b0-373581d49178",
                'per_page' => 570
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "Kd7tMEXY9Tc7Qb2RXbcwzy4kPkANGN4T40V81JMC4jGWrRZ0n6ILPniY2sJ9CiWnIOCjG5pnmA7hIJEiFW8aM4SH3uLhHWj6aMIIaPHB0QdcGk0X5jfOMA0Oh4vO",
                'transaction_id' => "I",
                'is_modified' => TRUE,
                'types' => ["expire", "payment", "exchange_outflow"],
                'from' => "2022-06-20T18:45:46.000000+09:00",
                'to' => "2020-04-29T06:05:55.000000+09:00",
                'next_page_cursor_id' => "26389470-a0ec-4be9-abb9-9a4fc2ad7485",
                'prev_page_cursor_id' => "51f5deee-863b-44d0-9509-f098de400359",
                'per_page' => 597
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "NWLtPBnOPKsQFEd64YFlVNGFsyJYwCusvoXtCmg4hqZ8NUnwzd0K2EoHkB1yyYD6G9sgc9peRa4AbcT41Yr9GBEt2eHiw3KwCA1sAnljo31Gx9w5NThwj7kiuQ4exeg231paCU3B5iRBMmcoBKgjR5mpSDB4jFdWnEJAR4B8Z4M5aMpWK0c5UR4pfUyP",
                'description' => "CzvQ6a5gLRz1Qc9wRphqTjDmtDIpMAoXf465QNQOSxTHMEEY06WdmKt4zNFuxBqNQHBoEy7amqxOnvg5xBYieKKPSPhwDVAeiw19IHt2oPjSe8xZ35dxvYbrEOdb9ILgjLVkrDXyB3TelpaMUlKUMYcoVSNOpnPtHVdU",
                'transaction_id' => "vBwEV0",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "topup"],
                'from' => "2020-05-21T15:13:40.000000+09:00",
                'to' => "2022-02-23T02:49:31.000000+09:00",
                'next_page_cursor_id' => "5734fe45-3df6-4296-8f70-5c3fe584e5cc",
                'prev_page_cursor_id' => "94315018-d84f-4d5c-aa6f-806819c1c157",
                'per_page' => 874
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "3715cc20-cad2-46bf-a359-ae660d7a9628",
                'customer_name' => "gaXYMikWxZv2qFAp9JURZxIES4l5as0mL7xUivcI4KESUWIpOTCjyhnuRsT81UdWIvBWxiQlFQMgbPEKCCapn4uJfRYoxv7tG1qm4iafwK4eaZJbpthycHNDOTtZsKcB6eg1XNLWsLwmz4Zv5c61KcvcHfVEXmHGtYF5HXuSGWXZ6aMuCzR7WtzQ2tvzaV3S4",
                'description' => "T8os5ebEs17SVhFvWpoih4BrEFzhv1W8327t4CZtzvTkZ43kZincTY3l4s57cmnxMJMcutAozVMvoR1RLxw7DOs4TJ87zuWoWgDGNIpxPKknjQyXO5D3btpFPvCoYr0gtniqKll5DO8wRilWnbQHhZpno",
                'transaction_id' => "s",
                'is_modified' => TRUE,
                'types' => ["expire"],
                'from' => "2021-07-02T22:11:21.000000+09:00",
                'to' => "2020-09-18T06:18:07.000000+09:00",
                'next_page_cursor_id' => "9d84d371-a3c7-4c6a-869c-26310e574282",
                'prev_page_cursor_id' => "a1900fa8-ea40-476a-b715-5e31a6d43b1b",
                'per_page' => 365
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "19fadb13-ecc5-448f-9210-07b7f1be93b4",
                'customer_id' => "be6de49e-16de-4cc4-9899-109ac33dc42f",
                'customer_name' => "tiwc3rBMahDBd",
                'description' => "bgRK9C5Jy9ChO9BuoupuxbBBjgrzxTA1uBofTzsMozLsR0z2L0ZIWgsxeBERXXN8mapNmScMp1N5dUXhyclmwf75CqV86xoNrICSb9VOC29gWfcKX2Tg",
                'transaction_id' => "NCyupPc",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "cashback", "payment"],
                'from' => "2021-01-28T04:19:07.000000+09:00",
                'to' => "2021-08-31T23:07:33.000000+09:00",
                'next_page_cursor_id' => "db23b959-8fba-4c89-85a5-fa88a0e90b71",
                'prev_page_cursor_id' => "babea048-1f6b-456e-8ab7-944eddeb4305",
                'per_page' => 225
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "2cca91d5-adbd-40c4-87b9-a3b2799c5189",
                'terminal_id' => "a81f1c44-6c62-40b3-beee-3e0dc1db325d",
                'customer_id' => "957cfd7c-eb81-4dee-8565-3462002d1c10",
                'customer_name' => "SusJZAJPMuU6cdnuAXcaWAfsPTLlXyAU0nM4h1i2X27Q7btRQFm76BTo8VFLoWAnARPXwmVGvDbysoDOOHhif5pgtsmRAUtb4NhsKq1yS7XSlf4WDMCiv5ITij65e0ehg6NlaSobgzSC0FI98e0MLcPZW1iBGGm9ti71kAK04AZSnsFT9DNWjzc64Kdtx8n",
                'description' => "alEcrTiliJZC9mt3DZSDIvQTqVBpj1yWiXEN8UDThW08GoRgQp8b1MIVAU3vRwVJQyxl3QYUtYx0iOzEu5GLMJh",
                'transaction_id' => "pBVv5yK",
                'is_modified' => TRUE,
                'types' => ["expire", "topup", "cashback", "payment", "exchange_outflow"],
                'from' => "2021-05-24T07:38:25.000000+09:00",
                'to' => "2022-08-30T12:38:25.000000+09:00",
                'next_page_cursor_id' => "8c22aac8-a05e-47b2-ab36-639f26971aac",
                'prev_page_cursor_id' => "09d963fe-8d13-4cce-a02e-bb94a99e9507",
                'per_page' => 640
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "kG-PLNP-7j-q---55-",
                'shop_id' => "2174dc67-faef-47b7-aa03-625d54637d59",
                'terminal_id' => "dc3f8a90-d5a0-471d-87a4-f4240cbdd01a",
                'customer_id' => "72249190-0e63-45d1-a045-0dff8c2cd04c",
                'customer_name' => "2eJL8l2Nuhl4RIjG0rYvube3IYbw4aWoZbHlgCzs82VNC4tU5mOICODcI2FzuInuW5B9t9aJRJO0NDmzlR9xuZd02ePJARBgoE73jLh3pYgjVkkbrYEqV64Obr6GWrpx4n9HsXB1IshAMIZ83W5pK36iEBN08hEDIgtiSgZQCJBatXM0OlxB1X",
                'description' => "PF9NVspIGAALrbTyyUPWQ1G1G0zETS7hxhj92562eunimJm2H9i9mxYHZZc5rXYEBsyjpf1OmKhDPgwxTJNYBx0oROSYnaGuA6BzxxTi2O4gslCTkIBaqecDPviRTcnGJiWesHKBi0J8B0jajojwNkD1Q71wtY0Kl8lCs1idPJ",
                'transaction_id' => "1ov",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "cashback"],
                'from' => "2021-10-27T10:50:11.000000+09:00",
                'to' => "2022-11-21T06:36:10.000000+09:00",
                'next_page_cursor_id' => "b110a95f-78d0-4bca-a731-62c50138313d",
                'prev_page_cursor_id' => "c2e875a3-83d8-43bb-8386-39dbe3235911",
                'per_page' => 967
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "3550e970-fd5c-4b14-a34e-8ded80e8c02b",
                'organization_code' => "0---pqfSnI-N-U-93Q-Ac1--I2-dZ",
                'shop_id' => "e98e772c-64c0-4bc6-b0e4-466415b92179",
                'terminal_id' => "e81980ca-3a86-4072-baa7-165a7f9038d1",
                'customer_id' => "3e387d28-b398-4872-bfc1-35d31e3620de",
                'customer_name' => "hCIXHCHvOuGjvdmxZhLhiIQP6js4JsGEJqZJ",
                'description' => "R722ZJSQoNVOIKtJceMEPah5aPpP5NUOpl6Gja9MuehhgDl49mdm6xXeVo6fWNVsZHJkz5L4YRPVxmL2V38N6VsLGRgjQZU3oVNHr9YU4akkcHdRaBPKvd3U8nyNz97EUpk73avlzAz5FXCvEjOsNCTSNtwKfExtxFrE6sbrS6fH6NhgnQK9R7RJC3",
                'transaction_id' => "wqyQLjviG",
                'is_modified' => TRUE,
                'types' => ["cashback"],
                'from' => "2022-09-12T00:39:39.000000+09:00",
                'to' => "2022-11-12T08:34:17.000000+09:00",
                'next_page_cursor_id' => "8010fa87-8233-4912-84f0-2f191aeef94b",
                'prev_page_cursor_id' => "a5a6636d-420a-4dad-9718-120ceb4c6222",
                'per_page' => 488
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
