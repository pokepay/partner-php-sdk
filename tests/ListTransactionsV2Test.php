<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'per_page' => 26
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'prev_page_cursor_id' => "45f30174-50b4-441b-ac48-3d1f73c373b9",
                'per_page' => 72
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'next_page_cursor_id' => "adbf8432-9551-47d2-8159-39d02dbd935f",
                'prev_page_cursor_id' => "0ba457f9-6511-43fe-ade5-bf527dca1782",
                'per_page' => 24
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'to' => "2025-06-11T03:28:46.000000+09:00",
                'next_page_cursor_id' => "815ff1a8-4fc6-4481-8f48-5707cca091fc",
                'prev_page_cursor_id' => "48f5e9f3-d6bd-49d0-9605-509ec9081efd",
                'per_page' => 99
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'from' => "2021-11-28T07:27:34.000000+09:00",
                'to' => "2021-05-12T22:25:46.000000+09:00",
                'next_page_cursor_id' => "c01b02a4-58d0-4c7f-af9b-0e15e2a78d22",
                'prev_page_cursor_id' => "83fdbf09-9263-4b9b-a608-fe592d0f7cf8",
                'per_page' => 65
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'types' => ["payment"],
                'from' => "2018-09-18T16:13:45.000000+09:00",
                'to' => "2024-06-11T21:27:20.000000+09:00",
                'next_page_cursor_id' => "3294b38d-946f-4901-9188-860a792c76e1",
                'prev_page_cursor_id' => "1036e685-9fac-4c3b-9f35-c923852acdbe",
                'per_page' => 12
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'is_modified' => FALSE,
                'types' => ["payment", "cashback"],
                'from' => "2017-09-10T08:37:00.000000+09:00",
                'to' => "2016-05-03T06:25:06.000000+09:00",
                'next_page_cursor_id' => "3da66e37-cc29-4708-8fd5-2ae258c2d2e4",
                'prev_page_cursor_id' => "98e34a27-a036-4d81-a4a5-c599a53d9c45",
                'per_page' => 93
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'transaction_id' => "b2e383a5-cf92-40c9-95ec-b0ed794e5de6",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "topup"],
                'from' => "2018-02-05T18:59:42.000000+09:00",
                'to' => "2020-05-12T21:02:01.000000+09:00",
                'next_page_cursor_id' => "3b7ec431-ccbe-4203-ac3c-d168bb673b22",
                'prev_page_cursor_id' => "871826fd-fb3c-441c-b3de-2ce18e09ee81",
                'per_page' => 78
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'description' => "MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEE",
                'transaction_id' => "71605e46-1e72-4176-b084-bb86a05737f0",
                'is_modified' => FALSE,
                'types' => [],
                'from' => "2017-02-08T18:45:22.000000+09:00",
                'to' => "2022-05-22T12:49:31.000000+09:00",
                'next_page_cursor_id' => "fd10b7c9-4d05-41cb-8d58-1a59874f8050",
                'prev_page_cursor_id' => "638c32f8-a7e5-464b-9d5b-41972dd38c63",
                'per_page' => 55
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'customer_name' => "3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8UYapgA4DXNtjsg9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEg",
                'description' => "5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lI",
                'transaction_id' => "736bc575-1ee9-474f-8c1e-c2ac4393a286",
                'is_modified' => TRUE,
                'types' => [],
                'from' => "2016-06-02T16:11:11.000000+09:00",
                'to' => "2019-02-01T23:45:46.000000+09:00",
                'next_page_cursor_id' => "bdd7effd-94c4-493b-b0ac-1e0a0c8c4bbb",
                'prev_page_cursor_id' => "85135a5f-d475-41fc-bbe1-c282423c04ec",
                'per_page' => 37
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'customer_id' => "709f1555-f113-4bfb-a6cd-5272f317a531",
                'customer_name' => "aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtK",
                'description' => "DRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCD",
                'transaction_id' => "b59cb597-c346-447d-aa5e-abd741577908",
                'is_modified' => TRUE,
                'types' => ["cashback", "topup", "payment"],
                'from' => "2024-11-24T10:44:11.000000+09:00",
                'to' => "2021-01-05T02:43:12.000000+09:00",
                'next_page_cursor_id' => "05f6ad36-e5c4-457f-a4b9-3996339f25d8",
                'prev_page_cursor_id' => "c6009908-4b5a-450d-a3e6-acef34cb2605",
                'per_page' => 13
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'terminal_id' => "1b12eb7b-c388-4a0e-8838-e7eaec42fea4",
                'customer_id' => "5bc02097-ed32-4dbe-89e6-fea2b2e608fc",
                'customer_name' => "PJCGzVYdohDRxcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFh",
                'description' => "AU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5D",
                'transaction_id' => "c512e76c-40fc-4937-9a21-5cfed5a9d92d",
                'is_modified' => TRUE,
                'types' => ["topup", "payment", "exchange_outflow", "cashback"],
                'from' => "2017-07-11T12:18:22.000000+09:00",
                'to' => "2017-07-17T12:43:03.000000+09:00",
                'next_page_cursor_id' => "3f48e8f2-1eca-4f0c-8cbc-83e467422ef7",
                'prev_page_cursor_id' => "3853e632-aa6e-4db2-b4d1-473bda0390e6",
                'per_page' => 40
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'shop_id' => "29de6f7b-aa40-4d8d-9819-709de539eb72",
                'terminal_id' => "a5a06c30-ec37-4eb8-bcf9-4c577b7c3c5f",
                'customer_id' => "090c2a95-3ff2-46f0-ba8a-c9fdd405bf4b",
                'customer_name' => "IJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqYOFtqhMLy1fSrOZfnZ2mwTe",
                'description' => "B7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9",
                'transaction_id' => "9dffeae2-944c-40be-86e6-9348fc5285c9",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "payment", "cashback", "topup", "exchange_inflow"],
                'from' => "2022-01-15T21:45:09.000000+09:00",
                'to' => "2017-03-19T18:10:32.000000+09:00",
                'next_page_cursor_id' => "ab3f5867-04a3-49bb-ad88-c58f0213e999",
                'prev_page_cursor_id' => "33747763-ab96-4008-b870-adfc6b6b29ae",
                'per_page' => 84
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "2f89887a-34d3-4b8f-bb0f-85ef0554db01",
            [
                'organization_code' => "tRV-11-TW61hV--G--j-cYx-bt-",
                'shop_id' => "c233420e-9eab-4f7b-a634-fda6a578d57c",
                'terminal_id' => "afefa87d-d3d0-43ac-8c95-c5e1ca9530bf",
                'customer_id' => "3b45eb53-9cc2-462c-9bc5-b7dcb3f7e630",
                'customer_name' => "hobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3Ke",
                'description' => "ptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXV",
                'transaction_id' => "9a6590a9-0e05-4b0e-98a9-e7bc9844c5c9",
                'is_modified' => FALSE,
                'types' => [],
                'from' => "2022-03-24T22:05:14.000000+09:00",
                'to' => "2019-11-26T10:06:09.000000+09:00",
                'next_page_cursor_id' => "1e012cde-c398-43fa-9686-d03ceb1a2f3f",
                'prev_page_cursor_id' => "9705f224-b9bb-452c-88f3-58e12aa7d520",
                'per_page' => 67
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
