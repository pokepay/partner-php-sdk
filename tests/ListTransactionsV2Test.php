<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 56
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "6ec3602b-16ed-49ef-b318-6ef96409f313",
                'per_page' => 417
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "9682b023-856c-436f-8c5b-a6575dd512bc",
                'prev_page_cursor_id' => "30d42930-3212-421a-a74c-c179fcf65080",
                'per_page' => 396
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2020-11-29T14:24:30.000000Z",
                'next_page_cursor_id' => "c4915b4e-4f7e-4b69-a78a-ebb5ec6ddaf1",
                'prev_page_cursor_id' => "febc69d5-0bb7-4f11-b7b1-2b7dc90a06d3",
                'per_page' => 509
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2022-02-23T20:34:33.000000Z",
                'to' => "2020-06-11T13:58:15.000000Z",
                'next_page_cursor_id' => "6da1dac7-dc2c-4104-b9e2-944c31a1c0be",
                'prev_page_cursor_id' => "ca60b746-6ce6-4348-8983-cf6200f09690",
                'per_page' => 531
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["exchange_inflow", "exchange_outflow"],
                'from' => "2023-06-25T00:31:44.000000Z",
                'to' => "2022-01-11T20:40:47.000000Z",
                'next_page_cursor_id' => "ab3f5867-04a3-49bb-ad88-c58f0213e999",
                'prev_page_cursor_id' => "33747763-ab96-4008-b870-adfc6b6b29ae",
                'per_page' => 84
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => FALSE,
                'types' => ["expire", "exchange_inflow", "payment", "topup", "exchange_outflow"],
                'from' => "2021-10-28T01:03:49.000000Z",
                'to' => "2022-10-30T14:30:05.000000Z",
                'next_page_cursor_id' => "9709490d-10e0-4189-a5a6-de5c36c6d29f",
                'prev_page_cursor_id' => "e5c7cdf5-bcfb-4fc2-bc32-e8d49958981c",
                'per_page' => 139
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "cJ",
                'is_modified' => FALSE,
                'types' => ["topup", "expire", "payment", "cashback", "exchange_outflow"],
                'from' => "2022-05-02T21:17:01.000000Z",
                'to' => "2023-01-05T16:53:50.000000Z",
                'next_page_cursor_id' => "19df89b1-1bfe-477e-aec1-52b746eb81b9",
                'prev_page_cursor_id' => "bc91d8d3-1149-4aba-bcd6-861e8790a206",
                'per_page' => 703
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZG",
                'transaction_id' => "pE19g89r",
                'is_modified' => FALSE,
                'types' => ["expire", "cashback", "topup", "payment", "exchange_outflow"],
                'from' => "2022-01-06T20:16:17.000000Z",
                'to' => "2021-01-11T22:53:10.000000Z",
                'next_page_cursor_id' => "755335b8-2131-4ba4-a02a-377d66f09793",
                'prev_page_cursor_id' => "96786e14-9368-4711-af8e-62b613576ee6",
                'per_page' => 467
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghDCw1Un7nnaTSFczRArCskatg",
                'description' => "SAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1",
                'transaction_id' => "nEv5pCv",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "exchange_inflow", "payment", "cashback"],
                'from' => "2020-04-20T06:48:44.000000Z",
                'to' => "2023-02-26T19:52:11.000000Z",
                'next_page_cursor_id' => "09dbf574-b78b-4a07-b131-3e057d13bf3b",
                'prev_page_cursor_id' => "d6351118-2b24-4094-8281-5ae38811514e",
                'per_page' => 301
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "2766f103-e37c-4697-b807-7407b7017723",
                'customer_name' => "1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXw",
                'description' => "tPfKAW4UwDxtqXzHNdytk1inQrWiktMK0FHLyLnvzTdFf0Y1JODoBhEEJFs7RURiJHf6mnglgKA3t551AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT",
                'transaction_id' => "jmF3",
                'is_modified' => TRUE,
                'types' => ["expire", "exchange_inflow", "exchange_outflow", "payment"],
                'from' => "2023-03-19T14:31:09.000000Z",
                'to' => "2023-10-06T13:10:04.000000Z",
                'next_page_cursor_id' => "f2905bb5-4b6f-425b-b619-de211f09e655",
                'prev_page_cursor_id' => "0c2d729b-5df1-4351-b3e2-51904775b593",
                'per_page' => 789
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "0b72d74d-4746-40a7-a834-0331c693385b",
                'customer_id' => "a92fcce4-237e-422d-9988-ff9de450ef59",
                'customer_name' => "UnemzRdROKbGph7rDrumGN6tQ3vZwFKRF7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21EzYv53e8C68gL6nh3hboA1VaXQqYz47H8v5OYX2Bb7kgjpYtpWxkJ26TN1VktFjJy",
                'description' => "7P4SbKkoz4u4vqNtkYjPXUyJ1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWog",
                'transaction_id' => "xJNEf",
                'is_modified' => TRUE,
                'types' => ["expire", "payment", "topup", "exchange_outflow", "exchange_inflow", "cashback"],
                'from' => "2022-02-14T02:07:44.000000Z",
                'to' => "2022-04-14T22:36:42.000000Z",
                'next_page_cursor_id' => "046ecadf-cff8-4325-8b36-3688c4b817b2",
                'prev_page_cursor_id' => "f9b0a39d-2d66-4a04-b8c6-f3ce2fdcd824",
                'per_page' => 635
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "1405e00e-41dc-4d61-aa2e-c644530c2dde",
                'terminal_id' => "fd911c65-54ec-48b7-b219-846f216e4c3e",
                'customer_id' => "004fdcff-868e-477e-97b4-baac1cd8db7e",
                'customer_name' => "JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrcG4cFx990D5go4dBLdUCSZVd4cTqnNfSRiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0ipuLt3IQKQQHb6fikVg8U3XBigR3",
                'description' => "a01cL7edhmrVi5NIsblUeDquiQL8YRreNoLAWMJdywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnNKINI7vj8qEDPsdJ8JkL6K4fbUtzmymsdzvhUXmrc",
                'transaction_id' => "10V",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "topup", "expire", "payment"],
                'from' => "2022-01-28T22:26:50.000000Z",
                'to' => "2024-07-08T05:08:04.000000Z",
                'next_page_cursor_id' => "0b55d70c-3509-4322-8e02-6477d2c2cafc",
                'prev_page_cursor_id' => "1e04ee52-1d39-44db-9dbf-734750fe391d",
                'per_page' => 615
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "01-q---Ii-0W-2-2O1H-j-uOY4",
                'shop_id' => "3e46d0e3-1045-4438-b965-948ecd13622e",
                'terminal_id' => "5cfa8838-7805-4fbb-b824-e1e9ad2f9e23",
                'customer_id' => "5d9cc243-1d70-4974-b240-677ea3ea2e99",
                'customer_name' => "X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt92YjeNGkeRy",
                'description' => "CxDwnyuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21Mao0iMx72McbAtuQfbwPK5Ol2Udeu5ClBnNsqGtwvAjO8SQr",
                'transaction_id' => "T",
                'is_modified' => TRUE,
                'types' => ["cashback", "payment", "exchange_inflow", "exchange_outflow"],
                'from' => "2022-07-30T13:12:06.000000Z",
                'to' => "2022-12-07T10:05:29.000000Z",
                'next_page_cursor_id' => "36968778-cd24-47b6-b699-e8447c2bc3bc",
                'prev_page_cursor_id' => "9887a933-2cc2-425c-8454-8eeea473aa82",
                'per_page' => 32
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "2df6c314-68a9-4aa6-8ee3-fc6190413dc9",
                'organization_code' => "22jpm8L3yO-",
                'shop_id' => "97561118-b881-426f-9d5d-41538867dc45",
                'terminal_id' => "5449caa6-73f7-493c-aca3-f5344b5338d9",
                'customer_id' => "8eac5466-cc8f-43ee-93fa-8d2b1eeb97b5",
                'customer_name' => "3bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2aiyvcn73",
                'description' => "2KUYpvpwWJTv2DUcm",
                'transaction_id' => "sWBT",
                'is_modified' => FALSE,
                'types' => ["payment", "cashback", "expire", "exchange_outflow", "topup"],
                'from' => "2021-07-29T07:10:06.000000Z",
                'to' => "2020-06-15T07:14:52.000000Z",
                'next_page_cursor_id' => "ede25bbf-cc95-4fcf-8ee8-004edb94a50f",
                'prev_page_cursor_id' => "a88ee06f-c452-4985-9569-02ef037dece5",
                'per_page' => 227
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
