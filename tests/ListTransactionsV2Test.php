<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 55
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "5a507b4a-50aa-4b94-b203-14b3e2612bcd",
                'per_page' => 566
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "98f9d7e2-a10d-4c16-9e26-b9c0d7be9d4e",
                'prev_page_cursor_id' => "d1b43522-66f8-44c2-9afb-36d8da935979",
                'per_page' => 848
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2022-01-15T15:45:35.000000+09:00",
                'next_page_cursor_id' => "89e935b6-1026-4b3b-be7e-5d12a54af43a",
                'prev_page_cursor_id' => "2521d965-53f8-434e-a8ac-a2c5ed8b1a2d",
                'per_page' => 984
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2020-12-19T03:04:54.000000+09:00",
                'to' => "2023-05-17T22:55:13.000000+09:00",
                'next_page_cursor_id' => "133570d4-048a-48b8-84e7-7b3bbd15fd11",
                'prev_page_cursor_id' => "43b020d9-7c0b-4c79-854b-3d9290582a37",
                'per_page' => 967
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["cashback"],
                'from' => "2023-02-07T19:19:30.000000+09:00",
                'to' => "2022-12-28T10:26:21.000000+09:00",
                'next_page_cursor_id' => "43d015f6-b36a-4e44-9843-17906127e00f",
                'prev_page_cursor_id' => "30f5eb1e-e339-4b46-a498-1fe78e3b40f8",
                'per_page' => 831
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_outflow"],
                'from' => "2022-05-04T13:54:34.000000+09:00",
                'to' => "2023-03-30T10:11:01.000000+09:00",
                'next_page_cursor_id' => "11c59a9a-4ad2-468d-9af6-2fee3768580d",
                'prev_page_cursor_id' => "ff97c97f-0808-40d8-af52-25bd8894e745",
                'per_page' => 398
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "rT",
                'is_modified' => TRUE,
                'types' => ["expire", "topup"],
                'from' => "2021-11-13T06:49:34.000000+09:00",
                'to' => "2023-11-05T08:28:30.000000+09:00",
                'next_page_cursor_id' => "9fb9e576-ed34-451a-beb6-ca3fad74de66",
                'prev_page_cursor_id' => "cac2fda1-dcdf-4654-a771-d88c0c4b07e8",
                'per_page' => 635
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "wdwT47dPPv9nI",
                'transaction_id' => "peL6",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "payment", "expire", "topup", "cashback"],
                'from' => "2021-07-18T12:59:05.000000+09:00",
                'to' => "2020-10-18T07:18:13.000000+09:00",
                'next_page_cursor_id' => "f38b8c98-6dfa-4d7b-8c3b-eab9bd85a280",
                'prev_page_cursor_id' => "0222650a-f673-469d-98f1-a1be6e7195e0",
                'per_page' => 477
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "3i0IX",
                'description' => "110aLUb2YHUiISedzWr2vsLSn",
                'transaction_id' => "9S8CR6W0Y",
                'is_modified' => FALSE,
                'types' => ["topup", "expire", "exchange_inflow", "payment", "exchange_outflow"],
                'from' => "2022-07-07T17:02:28.000000+09:00",
                'to' => "2022-01-23T11:33:37.000000+09:00",
                'next_page_cursor_id' => "2bc17db7-4b96-4667-828e-4d6324ab4350",
                'prev_page_cursor_id' => "88f6e200-c8bc-43ff-950b-5f464f84b280",
                'per_page' => 734
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "1a37ede9-47ea-4916-a11f-f0a83ef44e22",
                'customer_name' => "GvsEp3EgwktG8jmkAeQt7Uyi6xHIIvLUILXkpymHmW7xiOKQtlGJclR5G0WgnIhmgyjfWPnagPGAScgtTBVyhUeb57DkjIFAA4HWFAI172MkwUoVifKtLe94HS6vWXy7MEfKwvpwoC401LQsBxUKxIhLTKzZey9531aIkobdnKakIGaCp5vDtVVgsLSllHFJO5kV3RzukfsPMD295XbA9MHFFgtToFvUU5etmxixCqCg",
                'description' => "zR1A1WEmOjz0s0KiLRnbVrmrFYubk2EhoGS6K5FK81eAMs2l8KeOMucXYgzu9ZTHRHcA9eJPa3",
                'transaction_id' => "kRoNSYSht",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow"],
                'from' => "2021-06-29T02:54:26.000000+09:00",
                'to' => "2023-04-11T09:26:35.000000+09:00",
                'next_page_cursor_id' => "ad7a17b0-eb40-4ffb-99fe-f9c1f0de5548",
                'prev_page_cursor_id' => "3dd53c26-f1cb-4ecb-9458-664fde9cf0f2",
                'per_page' => 921
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "f798102c-ffed-4ea7-bea9-6c36a8cbfaf2",
                'customer_id' => "aac081f3-9365-4c64-bec0-6d02ba7a6cca",
                'customer_name' => "F1",
                'description' => "zmvC7tPqtlonTWcjr5YMCCAcacvCXMKit3xcMfkKILYN",
                'transaction_id' => "UImVQ6Cqj",
                'is_modified' => FALSE,
                'types' => ["payment"],
                'from' => "2020-05-14T22:32:35.000000+09:00",
                'to' => "2021-11-03T22:19:46.000000+09:00",
                'next_page_cursor_id' => "90baf653-a559-4f6b-892b-aa6769d4e438",
                'prev_page_cursor_id' => "95a36e43-139a-454f-8b87-cbb0f19b01e5",
                'per_page' => 821
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "c1482ff4-700f-4797-b54d-b699b44c91fc",
                'terminal_id' => "d2c6dcba-1104-4a7d-b881-cf07e98066ef",
                'customer_id' => "8d07df77-9ac0-4032-a578-33ddcfdb8cac",
                'customer_name' => "rBLRxrEFcnPiJlQqKJ7eItdRnShm80v24wn4WBHT59LBy5peNt3jPBk5",
                'description' => "Ul5vaUZWllfzgg9k8Fb8eVYhhkakrvcKseMH3Lw8NwLEOFF0gU8ddSjCt0oECYFl88NCxHG0ugK1AvCVArvWJvMMb8jabPmFNiEIJO7lQ4c7GtDldz8n37gWFIsNl4OACCmU5gpewPQHlMWLUdEI48K0nTxyQ0dP0WdKMq55v9gE1Hvo",
                'transaction_id' => "pJ0w",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "expire", "payment", "cashback", "topup", "exchange_outflow"],
                'from' => "2022-09-06T15:45:35.000000+09:00",
                'to' => "2022-01-04T05:14:53.000000+09:00",
                'next_page_cursor_id' => "bc6bcefe-4693-4080-9b3c-287b4612ef0f",
                'prev_page_cursor_id' => "d0c6457d-eb20-433b-9ab2-b2b9c8d8b5fc",
                'per_page' => 444
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "o-ov",
                'shop_id' => "7abd3bda-9fc1-4aec-8bd2-4a624bcddf48",
                'terminal_id' => "0c0f2e9a-2080-4eaf-a8e6-b26a8ae33d42",
                'customer_id' => "e5c55cef-73fd-4e78-8f1c-f63f37b310b7",
                'customer_name' => "izxOHNcqsLDYE59IPkVHSSZejOrxpX7F3LX2u02jFZCSkEu36paemUiSrFLBN0MPbPS7xS1EPzsPgzAD3AQxHHGBltleAgvB4hbXjghrp1PfrPqrqzsSRJXBnru3j2DYOfycNkscOBAex3OsEI60LL89WIMJQYQoaghRz78v",
                'description' => "pa6x1iwpSbKzxUNJqYl35HFcAF1HiC1nmScQrccmvV9GURWvFBg0YaOHomHFHY0e9OOlw1VjaA3I7n7M8IEoUAW1s0Yhgo56Uwrz9Nh6EIVcV4A5T",
                'transaction_id' => "d1C27",
                'is_modified' => TRUE,
                'types' => ["expire", "payment", "cashback", "topup", "exchange_outflow"],
                'from' => "2020-10-24T00:26:53.000000+09:00",
                'to' => "2023-11-27T12:16:07.000000+09:00",
                'next_page_cursor_id' => "fcf78969-aade-4259-b14e-c2f72b856b39",
                'prev_page_cursor_id' => "ae5bde0e-a60d-4862-b24c-547cba9bffbe",
                'per_page' => 528
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "814566f0-af9a-43df-ae6b-f7905218626c",
                'organization_code' => "Q--26-cXr46Y4-sL9wS--zI---",
                'shop_id' => "03760fe4-e71b-488b-9ce8-05fc2d319098",
                'terminal_id' => "b71627e6-440d-4c24-a881-98e16b46cbca",
                'customer_id' => "0fc008fd-ba80-4a7d-b725-fde90f9be508",
                'customer_name' => "URbOLm3k0kZTt7m2BuW9g9otn7K040dEXyCGft27Ye6DA139",
                'description' => "wZ",
                'transaction_id' => "BrO",
                'is_modified' => TRUE,
                'types' => ["expire", "topup", "cashback"],
                'from' => "2021-10-17T20:47:00.000000+09:00",
                'to' => "2021-01-08T20:31:31.000000+09:00",
                'next_page_cursor_id' => "20ec112e-850c-49d5-a4bb-b2758d691d38",
                'prev_page_cursor_id' => "cff247c2-4318-422d-981a-2ecd8f106e8b",
                'per_page' => 628
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
