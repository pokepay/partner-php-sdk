<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'per_page' => 31
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'prev_page_cursor_id' => "8304e27e-4ff2-4829-9999-3ed25d80a0bc",
                'per_page' => 28
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'next_page_cursor_id' => "232f3a16-b2e1-4355-a134-0174b10513f3",
                'prev_page_cursor_id' => "0de0e74e-bf7e-497d-afa7-260fb5874171",
                'per_page' => 1
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'to' => "2016-02-02T01:12:15.000000+09:00",
                'next_page_cursor_id' => "1e82ab11-d6a2-4155-b468-c32bbc38b1d9",
                'prev_page_cursor_id' => "47550302-d89b-4b53-bbf8-f91f99c19d53",
                'per_page' => 16
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'from' => "2022-10-18T23:04:09.000000+09:00",
                'to' => "2024-12-27T07:58:53.000000+09:00",
                'next_page_cursor_id' => "47061571-4f09-4022-9913-81e68624af60",
                'prev_page_cursor_id' => "9463b027-744b-4563-a4f0-2145571a14a2",
                'per_page' => 20
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'types' => ["payment"],
                'from' => "2022-04-12T21:49:43.000000+09:00",
                'to' => "2020-05-18T00:29:42.000000+09:00",
                'next_page_cursor_id' => "ce06a0e7-820f-40d1-be38-60ca98403923",
                'prev_page_cursor_id' => "31ccdc0b-8328-44d4-b78e-c0ee90992697",
                'per_page' => 11
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "cashback", "topup"],
                'from' => "2021-10-31T16:16:04.000000+09:00",
                'to' => "2015-12-06T12:23:58.000000+09:00",
                'next_page_cursor_id' => "247f4a7f-acd3-432e-a73c-24389febac71",
                'prev_page_cursor_id' => "6671c3fa-4465-4305-87a6-7e8ab033cbca",
                'per_page' => 4
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'transaction_id' => "a4b065c0-930b-4993-a08e-f57d1ca5859d",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow"],
                'from' => "2022-06-08T08:08:29.000000+09:00",
                'to' => "2017-03-08T18:24:22.000000+09:00",
                'next_page_cursor_id' => "54c3f084-da8f-447b-8601-5fd031451448",
                'prev_page_cursor_id' => "d1b2a277-8324-4831-959c-565438b97fea",
                'per_page' => 14
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'description' => "1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKj",
                'transaction_id' => "12e677d9-c215-4e1e-9741-01c1a349e10a",
                'is_modified' => TRUE,
                'types' => ["payment"],
                'from' => "2022-11-18T02:03:04.000000+09:00",
                'to' => "2018-09-21T16:09:47.000000+09:00",
                'next_page_cursor_id' => "317ebd0a-d3ff-44e6-91f8-644b3e4e52d2",
                'prev_page_cursor_id' => "1d178a22-abf6-45c5-8b73-e30e461a3cfa",
                'per_page' => 38
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'customer_name' => "3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFiv",
                'description' => "jA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjY",
                'transaction_id' => "7d2d5eec-c63b-4142-b4a3-7132849a373a",
                'is_modified' => TRUE,
                'types' => ["cashback"],
                'from' => "2019-09-25T14:23:46.000000+09:00",
                'to' => "2025-06-30T13:42:00.000000+09:00",
                'next_page_cursor_id' => "c224c0bf-9779-46ec-b006-6eedfece7a94",
                'prev_page_cursor_id' => "067233ac-e3dd-470b-9bc6-3d4f4caa26ae",
                'per_page' => 68
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'customer_id' => "725424e4-419f-44a4-bf3e-21825c53fc14",
                'customer_name' => "PABZdrgh98RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2ino",
                'description' => "Qmoszz",
                'transaction_id' => "fcdce77a-0bea-433e-9c16-d9b720c65c22",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "payment", "cashback"],
                'from' => "2019-05-18T20:02:41.000000+09:00",
                'to' => "2023-11-13T12:09:48.000000+09:00",
                'next_page_cursor_id' => "393215c0-5405-44fd-855d-b6e3f2ed105a",
                'prev_page_cursor_id' => "64e48f52-2111-489c-aac7-c3344c71e0b9",
                'per_page' => 91
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'terminal_id' => "b5dd4df9-1304-42c5-bd39-2fe4301147bc",
                'customer_id' => "ef1e3a2f-ffc0-49c2-bdb8-ea40f2e96a66",
                'customer_name' => "GfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0Qv",
                'description' => "PCR5IiYZhX71qxxCDFjWtGssb8",
                'transaction_id' => "0f70cf0c-ad36-45c4-bfa4-0fb9aceb3996",
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_inflow", "payment", "cashback", "exchange_outflow"],
                'from' => "2024-12-12T19:18:40.000000+09:00",
                'to' => "2022-11-12T08:06:40.000000+09:00",
                'next_page_cursor_id' => "4c0ee7ea-fea4-4097-b2be-4b096e64bfe6",
                'prev_page_cursor_id' => "2ee7fea2-08fc-4390-9010-4c02e8ca124a",
                'per_page' => 64
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'shop_id' => "2bc8087f-a043-4f5f-aac7-71853d45427a",
                'terminal_id' => "a1a2a594-3456-4559-a4ef-68e8403cbd8b",
                'customer_id' => "8c31e0a2-2d44-4252-b81b-d7dda590c063",
                'customer_name' => "psSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbG",
                'description' => "UILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD",
                'transaction_id' => "c6e3a6b5-3f44-492f-b743-528e605ba694",
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_inflow", "cashback", "exchange_outflow", "payment"],
                'from' => "2019-09-19T05:02:13.000000+09:00",
                'to' => "2024-03-28T17:00:34.000000+09:00",
                'next_page_cursor_id' => "e6c37cd8-e470-497f-99a2-3f61b32bf95c",
                'prev_page_cursor_id' => "b255f26c-10bb-4e68-947d-4e10bef5cadf",
                'per_page' => 97
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            "87d69bf1-dee4-4740-a13e-b9f1346792fe",
            [
                'organization_code' => "A-r6l",
                'shop_id' => "d0d65bd5-d43d-4b83-8c74-e827e9efb944",
                'terminal_id' => "135623d8-10ed-4837-ad7e-67c764e40671",
                'customer_id' => "3e29469a-17b2-46b0-8943-ea20a9463aa8",
                'customer_name' => "cqYOFtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmk",
                'description' => "sA1MuW1A79SIV4QucaCTI",
                'transaction_id' => "7b0ed2af-570c-4aa2-b518-71fc49941777",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_outflow", "payment"],
                'from' => "2021-07-14T10:57:07.000000+09:00",
                'to' => "2023-07-31T08:30:38.000000+09:00",
                'next_page_cursor_id' => "afefa87d-d3d0-43ac-8c95-c5e1ca9530bf",
                'prev_page_cursor_id' => "3b45eb53-9cc2-462c-9bc5-b7dcb3f7e630",
                'per_page' => 82
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
