<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 121
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "e80c519a-fcb9-46be-b15b-ac59df78c0b9",
                'per_page' => 785
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "792038eb-aa42-49b8-abd6-2ec44c118a3d",
                'prev_page_cursor_id' => "dfe17a71-35ca-4a85-88cd-be075bc1e9ea",
                'per_page' => 639
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2021-09-15T08:53:31.000000Z",
                'next_page_cursor_id' => "4111ccf9-2c36-4ef2-8398-72e6a0b69e34",
                'prev_page_cursor_id' => "8dc6da2c-687c-44c3-a66c-bc2d3b62caff",
                'per_page' => 685
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2023-08-21T09:37:14.000000Z",
                'to' => "2024-02-24T03:34:11.000000Z",
                'next_page_cursor_id' => "528ad471-b3b8-4384-95c8-ede4cde32aa7",
                'prev_page_cursor_id' => "a7ffcf27-9dfd-4947-bd59-2f3909419c63",
                'per_page' => 823
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["payment", "topup", "cashback", "exchange_inflow", "exchange_outflow"],
                'from' => "2021-08-01T06:45:02.000000Z",
                'to' => "2024-05-23T02:09:21.000000Z",
                'next_page_cursor_id' => "c2e974ed-4eef-463b-8bf3-707aff0b73fa",
                'prev_page_cursor_id' => "fcdce77a-0bea-433e-9c16-d9b720c65c22",
                'per_page' => 872
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => TRUE,
                'types' => ["cashback"],
                'from' => "2024-06-20T13:56:21.000000Z",
                'to' => "2020-11-08T11:15:41.000000Z",
                'next_page_cursor_id' => "e79ab6e3-105a-4f52-919c-e6eaf39098c7",
                'prev_page_cursor_id' => "efdcc334-e0b9-45da-b904-e2c54f506bbd",
                'per_page' => 826
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "B8fCG",
                'is_modified' => TRUE,
                'types' => ["expire", "topup", "exchange_outflow"],
                'from' => "2021-09-27T21:05:33.000000Z",
                'to' => "2020-10-30T22:40:15.000000Z",
                'next_page_cursor_id' => "3df1d30f-3f0c-4ef9-af2a-651ec3a11583",
                'prev_page_cursor_id' => "f34ffa5d-356c-476a-b425-15ebd30519e6",
                'per_page' => 1
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "e2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxC",
                'transaction_id' => "FjWtG",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "cashback", "expire", "topup", "payment"],
                'from' => "2023-03-04T00:17:58.000000Z",
                'to' => "2020-03-21T07:48:20.000000Z",
                'next_page_cursor_id' => "01efb57f-7ea4-4fb9-96d8-9908d2c64b5a",
                'prev_page_cursor_id' => "7273850d-3ca3-4ee6-af05-e98c1b12eb7b",
                'per_page' => 905
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "8j2fPJCGzVYdohD",
                'description' => "xcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU",
                'transaction_id' => "5vig",
                'is_modified' => TRUE,
                'types' => ["topup", "payment", "expire", "exchange_inflow", "exchange_outflow"],
                'from' => "2022-06-16T03:06:49.000000Z",
                'to' => "2023-06-15T13:21:50.000000Z",
                'next_page_cursor_id' => "7527e91e-7f11-412d-b5ea-301cf02da7d8",
                'prev_page_cursor_id' => "3a214a90-47c1-4e35-9196-c7780f416a8d",
                'per_page' => 715
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "a6ef7b40-c5d0-43bc-bbe2-d482f20c9ee2",
                'customer_name' => "GkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mGq20CccqY",
                'description' => "FtqhMLy1fSrOZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZ",
                'transaction_id' => "umuB2TNJcJ",
                'is_modified' => FALSE,
                'types' => ["topup", "expire", "payment", "cashback", "exchange_outflow"],
                'from' => "2022-05-02T21:17:01.000000Z",
                'to' => "2023-01-05T16:53:50.000000Z",
                'next_page_cursor_id' => "19df89b1-1bfe-477e-aec1-52b746eb81b9",
                'prev_page_cursor_id' => "bc91d8d3-1149-4aba-bcd6-861e8790a206",
                'per_page' => 703
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "01680cab-7591-4634-a7d1-f4f509f35f97",
                'customer_id' => "51ab29e3-c6e1-4726-ab43-abd4b7c97449",
                'customer_name' => "uwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV",
                'description' => "1h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRTqwqzVsahBGWwps3iARDJTRZkOOEQFC19Wtss23YjQBhHozeYJjV02y90GWowMI3ASCsApxBJptaJJRDQ6YTYkiFEIISprQ3cmpI6bh8YrVsWGSghDCw1Un7nnaTSF",
                'transaction_id' => "zRAr",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "cashback"],
                'from' => "2020-10-01T05:12:01.000000Z",
                'to' => "2023-08-02T13:24:58.000000Z",
                'next_page_cursor_id' => "4d5b4282-7ce7-4454-8853-f14176a64c6b",
                'prev_page_cursor_id' => "8dab7933-e2e1-4c88-b889-cc1f27f5c4ad",
                'per_page' => 801
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "6d021994-10e0-4ed4-a388-19d433b19db0",
                'terminal_id' => "9a3600a5-9232-444a-b668-49bca79330e0",
                'customer_id' => "b6be8efa-7d91-4e1b-b9df-727e229a6141",
                'customer_name' => "vEGRwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5QHSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR5",
                'description' => "ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scUcryj4GBWTbDzAVeKXVTyNRuvNAUp6ljdawfubjQ03lDRu1dHypEu4pqRk9KXyywxfAsvQQw8eNXwtPfKAW4",
                'transaction_id' => "Uw",
                'is_modified' => TRUE,
                'types' => ["topup", "payment", "exchange_outflow"],
                'from' => "2022-09-06T17:01:47.000000Z",
                'to' => "2023-12-21T20:27:58.000000Z",
                'next_page_cursor_id' => "8dc39a26-e8dc-48a1-aa25-8afd6d3f9664",
                'prev_page_cursor_id' => "4d9814bf-cdf9-4c20-be21-6bf4618efbeb",
                'per_page' => 176
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "ug091-6-Ie-8F6-iX59876-O7---",
                'shop_id' => "6995b305-a4aa-4f9b-ac07-559276284c16",
                'terminal_id' => "4dc49fbb-e1e7-4ccb-81b3-b424135b5f74",
                'customer_id' => "a83c2d1d-6bb5-4a1e-a78c-37bce1e0cf0e",
                'customer_name' => "51AWYy2EKxgIvudVQKM3ivlyVYA6fe68jtm2G7nC3SW8MPeFKTYT7eEYLwvHQFKDImV0W8uMWRziTXMumFeaEHdh8PePoMZwnAEmuUL6pb761IWS7zT3jmF3XMzgKDKO5o6Uq",
                'description' => "sbMF41dYUnemzRdROKbGph7rDrumGN6tQ3vZwFKRF7w7plclcWB9bNRwQ0LABzLS5AginlSJbgCOpN21Ez",
                'transaction_id' => "v53e8C68gL",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow"],
                'from' => "2023-08-03T22:51:20.000000Z",
                'to' => "2023-07-22T07:47:43.000000Z",
                'next_page_cursor_id' => "aca1ad62-ee6f-4141-b1ba-759ba1b5f9d6",
                'prev_page_cursor_id' => "ebd695aa-a161-43d8-9171-36de95669123",
                'per_page' => 474
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "33acd091-527c-437a-a3b4-c98de9263119",
                'organization_code' => "-4-5sWco",
                'shop_id' => "5fce9b2d-8bb1-4456-ab5c-f5dfa86ff15c",
                'terminal_id' => "f2ae5ef4-f6c6-495e-86ea-469d907f89ca",
                'customer_id' => "c72052f9-ec9b-4718-9cb7-03d083245c11",
                'customer_name' => "4SbKkoz4u4vqNt",
                'description' => "YjPXUyJ1V0r5CHRNT2ecfLdc33OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2b",
                'transaction_id' => "nLruRc9c",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "topup", "expire", "exchange_outflow", "cashback"],
                'from' => "2024-04-01T09:30:31.000000Z",
                'to' => "2022-11-04T21:59:35.000000Z",
                'next_page_cursor_id' => "f80253ab-f79b-42ad-b004-49f5c4030e1f",
                'prev_page_cursor_id' => "74d4b1b7-5069-4657-a208-a780e58040b0",
                'per_page' => 553
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
