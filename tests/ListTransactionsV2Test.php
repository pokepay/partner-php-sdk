<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 758
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "cb228d19-1b7b-4ce9-b027-5df83ced129d",
                'per_page' => 776
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "3153c786-7f34-45aa-8119-bba332240adf",
                'prev_page_cursor_id' => "bd26907a-4df5-4995-8afb-7c6bde1647a2",
                'per_page' => 626
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2020-01-05T03:16:47.000000+09:00",
                'next_page_cursor_id' => "da55c4b0-1b92-40af-b61f-66290492e377",
                'prev_page_cursor_id' => "a5687afa-8215-4eba-a28f-a4855d86882a",
                'per_page' => 669
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2024-06-02T14:27:13.000000+09:00",
                'to' => "2024-05-30T08:40:12.000000+09:00",
                'next_page_cursor_id' => "af0b6ca7-696e-42e1-8624-c9f03676c188",
                'prev_page_cursor_id' => "5e4c85ab-f6b0-4ee4-9d7b-97b85f1e3897",
                'per_page' => 463
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["payment"],
                'from' => "2025-07-18T14:49:04.000000+09:00",
                'to' => "2016-06-13T11:27:45.000000+09:00",
                'next_page_cursor_id' => "5edb11f7-b077-4850-950f-74e6fe240dbb",
                'prev_page_cursor_id' => "5f5ab50f-dc6d-4fd9-8724-1f95e8d009c5",
                'per_page' => 855
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "cashback", "expire", "payment"],
                'from' => "2017-11-25T15:28:30.000000+09:00",
                'to' => "2020-09-07T06:52:26.000000+09:00",
                'next_page_cursor_id' => "ae12f44d-c487-4847-a25c-bfaa79f3471f",
                'prev_page_cursor_id' => "53dcb283-ba84-4aaa-a42f-bb80d4d90d78",
                'per_page' => 406
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "kBMFBNKh",
                'is_modified' => TRUE,
                'types' => ["cashback", "exchange_inflow", "topup"],
                'from' => "2019-02-16T18:07:36.000000+09:00",
                'to' => "2017-04-06T18:15:53.000000+09:00",
                'next_page_cursor_id' => "9f2630a0-5ad6-4a8f-9dee-f5907ad188fa",
                'prev_page_cursor_id' => "1ec23bb7-fce4-4257-b1cc-651c0ff3fbde",
                'per_page' => 422
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "5JRcqWGZoB7J2SLBuVTFPFKYeglUQAESlFenRvUgW2C0Pk55puUaBmR66mDvQf3SzEAz6sFhOXUyleHUBygYLLJFfbbjnOxn",
                'transaction_id' => "Ii",
                'is_modified' => FALSE,
                'types' => ["cashback", "exchange_outflow"],
                'from' => "2021-09-22T00:03:53.000000+09:00",
                'to' => "2017-03-18T14:03:10.000000+09:00",
                'next_page_cursor_id' => "25a1b673-3f5f-40a3-914a-98fc7e5cba0a",
                'prev_page_cursor_id' => "e3566da9-311c-4e37-916b-d3b6fa03dae4",
                'per_page' => 921
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "6L13ja9VovumOjMgFfs83kBzSot4H9G2QRAYPymeRfFOHsPVjb9UCbPcYx5YXiYOW0oa5SUOR88F7Ubd6",
                'description' => "EIlmfbIWBjq1h3aM3MFSn6Z9Xp0dYAIwKPnm62HiK775FUjJKUwWsCFULHC5xu9xwKzEEFrv0p5VC2XFSxIKMXYPxeKc6v3uyZaCEMZ2Ju8UbXHSU9E0Qlg3gebvAwjzG8",
                'transaction_id' => "YapgA4",
                'is_modified' => TRUE,
                'types' => ["topup", "expire", "cashback", "exchange_outflow", "payment", "exchange_inflow"],
                'from' => "2025-07-15T23:02:39.000000+09:00",
                'to' => "2018-10-07T14:01:48.000000+09:00",
                'next_page_cursor_id' => "7596ce51-70eb-4d58-b1d9-8a9c66e5df50",
                'prev_page_cursor_id' => "1080f69c-2c29-4b0c-be11-f56e49232d5c",
                'per_page' => 530
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "898d437c-7f2d-4ead-b426-cea8d001e164",
                'customer_name' => "GIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcdpEzIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGAkTKdkwDZEgx5wET5OvQdZofRUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWng",
                'description' => "PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98RslDBuoJS",
                'transaction_id' => "FUrTRne91u",
                'is_modified' => TRUE,
                'types' => ["topup", "exchange_inflow"],
                'from' => "2016-02-02T18:59:59.000000+09:00",
                'to' => "2022-12-17T05:15:12.000000+09:00",
                'next_page_cursor_id' => "939e6b43-ad01-4ee3-8a7b-280565fd4ee5",
                'prev_page_cursor_id' => "421b1160-f6b6-4323-8e3b-0d2e937e73ad",
                'per_page' => 526
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "c74b9f3d-b526-4167-a558-06ed3832f04d",
                'customer_id' => "bebbeb36-6053-4355-b83f-f12df0237c6d",
                'customer_name' => "T9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0",
                'description' => "ZYNIFrYHkTuOzrywGRNkA",
                'transaction_id' => "SHinr7",
                'is_modified' => FALSE,
                'types' => ["topup", "payment", "exchange_inflow"],
                'from' => "2020-09-28T23:30:25.000000+09:00",
                'to' => "2021-12-21T07:52:33.000000+09:00",
                'next_page_cursor_id' => "d69b0d5c-11a6-40f9-a9fd-71a9e896b3a7",
                'prev_page_cursor_id' => "06107b38-2d98-47cb-9fbd-3eb64a221eac",
                'per_page' => 819
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "b3ba35ad-141d-4718-b65a-f8640ba2ce60",
                'terminal_id' => "9d49a197-218f-4d0b-8963-53802a07b03d",
                'customer_id' => "7840701e-897a-43f8-a87a-d47b58e5897f",
                'customer_name' => "DF7OzztIRdIBCYTSHrtKwDRbFJx9qY9kB8kVDqJMjy6rf4CluMJ3q8UHdGY9c6av2inoQmoszzzj",
                'description' => "7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti",
                'transaction_id' => "0SO07EXHC",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_outflow", "payment"],
                'from' => "2019-01-27T20:33:09.000000+09:00",
                'to' => "2024-05-26T14:26:29.000000+09:00",
                'next_page_cursor_id' => "31d47a8c-a518-4f31-b09e-2ba61aea8623",
                'prev_page_cursor_id' => "0d0a0bbd-b012-4023-9717-643f7e053dc4",
                'per_page' => 100
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "mdx7gh3-8weWi35i8kx92q",
                'shop_id' => "acd12850-5c10-4c02-8abf-087f75eba043",
                'terminal_id' => "7296cf5f-9e2a-41c7-857a-a594c2153456",
                'customer_id' => "5d688559-3de4-43ef-a88b-e0a210ed2d44",
                'customer_name' => "xcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zTEtm8AaIiuGx9L9HalOMU",
                'description' => "5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5",
                'transaction_id' => "7CpKj",
                'is_modified' => FALSE,
                'types' => ["expire", "payment", "topup", "cashback", "exchange_inflow", "exchange_outflow"],
                'from' => "2024-04-16T03:28:32.000000+09:00",
                'to' => "2019-08-02T05:28:41.000000+09:00",
                'next_page_cursor_id' => "f558e5a2-3f61-495c-acbb-8e68013fd794",
                'prev_page_cursor_id' => "1bbc5b7d-4e10-4adf-b760-31af5eaa6735",
                'per_page' => 518
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "5205678c-6d65-46f5-b04f-cb2bd7595353",
                'organization_code' => "8-Du-yXHSj-i---Z-4-8",
                'shop_id' => "923612f1-8ce8-4a5d-9fa4-994d4451164c",
                'terminal_id' => "941a419c-cb79-4fb1-a69f-ab2798fbf624",
                'customer_id' => "7f9332de-6453-40a0-b2cf-2e8343ba613b",
                'customer_name' => "ZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN3Em7q1SjNjatjjDZX7RIKgDX3b9oA142xL",
                'description' => "kpis0qy5MfISyoLqEQKhMnAGBrL3KeptreugpuZPDhn3kvKQdinTisU7JGahMN0pspm5VBpWaMfH3OlTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNr",
                'transaction_id' => "VXI1wRTqw",
                'is_modified' => FALSE,
                'types' => ["topup", "exchange_inflow", "cashback", "expire"],
                'from' => "2021-05-27T05:25:23.000000+09:00",
                'to' => "2016-03-09T03:56:48.000000+09:00",
                'next_page_cursor_id' => "204c58e1-d520-4168-8247-89bd8ff5d0a8",
                'prev_page_cursor_id' => "4b44060f-1a8a-4bd7-b7f0-1df33143db33",
                'per_page' => 129
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
