<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 50
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "0d5bccbe-5203-4e2c-bc68-3b22871826fd",
                'per_page' => 829
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "25cdd41c-d1b3-43de-a181-b0cdfb355833",
                'prev_page_cursor_id' => "ba561d3f-444d-41c6-ac0b-5153fdaa47ee",
                'per_page' => 311
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2024-11-24T20:43:14.000000+09:00",
                'next_page_cursor_id' => "723e7139-539d-4cfe-afd8-5198e210f85b",
                'prev_page_cursor_id' => "b2d00103-db70-4630-bae4-a60b204c7059",
                'per_page' => 450
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2019-12-14T02:16:49.000000+09:00",
                'to' => "2022-10-28T16:40:39.000000+09:00",
                'next_page_cursor_id' => "d3f4776e-2aed-40b6-bbb2-cc97372e71c8",
                'prev_page_cursor_id' => "3a8fca69-a00e-4b2f-8c1e-754bb23030ba",
                'per_page' => 824
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["expire", "payment"],
                'from' => "2019-04-28T23:20:29.000000+09:00",
                'to' => "2019-11-24T00:06:41.000000+09:00",
                'next_page_cursor_id' => "3ccb5e96-1c9b-42f3-833f-24138fbf65c6",
                'prev_page_cursor_id' => "9d3ae8ad-ae55-4acc-8048-b5c3d3d03f11",
                'per_page' => 694
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => FALSE,
                'types' => ["topup", "cashback", "payment", "exchange_inflow", "exchange_outflow", "expire"],
                'from' => "2022-11-13T16:24:33.000000+09:00",
                'to' => "2020-07-27T22:15:44.000000+09:00",
                'next_page_cursor_id' => "f4811381-2f77-4f4b-babb-5245bc500d45",
                'prev_page_cursor_id' => "71605e46-1e72-4176-b084-bb86a05737f0",
                'per_page' => 694
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "C2XFSxI",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "payment", "topup", "exchange_outflow", "cashback"],
                'from' => "2020-05-23T08:19:55.000000+09:00",
                'to' => "2021-08-05T15:56:52.000000+09:00",
                'next_page_cursor_id' => "70eb8275-bb9c-4579-9a10-14617e9b3e26",
                'prev_page_cursor_id' => "42e4cdc3-1e45-494d-95da-a09004b70893",
                'per_page' => 691
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "u8UbXHSU9E0Qlg3gebv",
                'transaction_id' => "wj",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow"],
                'from' => "2020-07-20T16:07:06.000000+09:00",
                'to' => "2018-08-17T11:34:52.000000+09:00",
                'next_page_cursor_id' => "5c460b70-1604-41ae-9de7-ecbb51915b97",
                'prev_page_cursor_id' => "af8fe7c1-fc25-4534-8458-99cec1300774",
                'per_page' => 491
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "g9PgQkXqYPn4dGIxCAVXu8wPFdMI0g8RX9GwTm1EaeDH0runisLVA8D7RtvLwRN8QmXijHIyMGxrgTxrmP2c2b7AqdqrRaU4tsNqOUthYSxSa5qYfKcd",
                'description' => "zIZoGgQ8JT7nM2XSRS8qzeJVaYua2WPHw1UTjf1quigD2l2JnK33Y2PKkmhgdj1RbwEdGA",
                'transaction_id' => "KdkwD",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "exchange_inflow", "payment", "topup", "expire"],
                'from' => "2020-07-18T15:55:06.000000+09:00",
                'to' => "2020-06-10T05:06:53.000000+09:00",
                'next_page_cursor_id' => "36f2b5dc-61aa-4392-9488-4fb5516d64cf",
                'prev_page_cursor_id' => "cb5a5ba9-eb12-4484-b6bf-138e237a2404",
                'per_page' => 594
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "a11be964-42a4-4ea5-9a9f-225fd2da3f6f",
                'customer_name' => "RUOUAciXVcpzKCMcrOD6Emk2wkp2iXzqZDQWG9JIPYO9QhKjYAAaWngq9PQfQxKRvEszf3mWAEHwNafuFelOU7xCAyi0eUz4xXH5OLhVoB1lIuiOfxpiSD0ualUMr1aiXbRr0Yt6Ont0eqhymEV4KDx3FmD9kbbli1vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrg",
                'description' => "h98RslDBuoJSIFUrTRne91u8KmONYXCce6NgXmM6SU8mT9N7YdoyhvIOK96oQgvpt3OE4bGWfPwqWxwC3DU0ZYNIFrYHkTuOzrywGRNkAeSHinr7X7r9y8K62vZdczxzKDF7OzztIRdIBCYTSH",
                'transaction_id' => "tKw",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "expire"],
                'from' => "2021-07-15T10:43:26.000000+09:00",
                'to' => "2024-08-02T23:54:58.000000+09:00",
                'next_page_cursor_id' => "e80c519a-fcb9-46be-b15b-ac59df78c0b9",
                'prev_page_cursor_id' => "65bd5f10-38eb-4a42-b86b-24d65cf22ec4",
                'per_page' => 574
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "dfe17a71-35ca-4a85-88cd-be075bc1e9ea",
                'customer_id' => "15821e7e-d38b-4cf9-b6f2-fe035426b798",
                'customer_name' => "4CluMJ3q8UHdGY9c6av2inoQmoszzzj7gjncZRjG49ZyE9dB8fCGfTM2Oyolj4kfEe2uvMtiKxUivt9MIJ97msI3tBe6ti0SO07EXHC5hQ61pWDcVyEH0QvPCR5IiYZhX71qxxCDFjWtGssb86D9XZfo8j2fPJCGzVYdohDRxcepsSsdecspEcH6zAIM8ju98Xf3eDqYA5vYg7TRPpd99WNI7yrXSKnnTIb76zT",
                'description' => "tm8AaIiuGx9L9HalOMU5vigXX7Icn5jXA5QxJPbbGkUILhTXtRtmknLVk7hQOvzRC9zFhAU2LnJOGL09rrRBaBOdWWGJsxArgIuumMVdl31leH5Dl7ZUHzS51rJLdw2n2tQfnXr078yWrpzKRIJrBD5D7CpKjeG53Xpalhw5eupOSaoLetupiLJGKA08kULtDXm7mG",
                'transaction_id' => "20",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "payment", "exchange_outflow", "cashback", "expire", "topup"],
                'from' => "2017-07-03T05:32:16.000000+09:00",
                'to' => "2017-09-20T22:07:28.000000+09:00",
                'next_page_cursor_id' => "fa9de85f-d7a4-494d-8c9c-cb79c773cfb1",
                'prev_page_cursor_id' => "50482f66-ed9f-4b27-a4de-64536fe160a0",
                'per_page' => 499
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "2b1ca2cf-2e83-413b-a711-2207d10f2627",
                'terminal_id' => "4df4117e-0612-4887-897e-e12b4b8efaa6",
                'customer_id' => "7610c305-2cda-461c-a6dd-3c18a7b4d2a1",
                'customer_name' => "nZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU771SYwG9bLFfHIbs98VpOgmc8pS7WZiumuB2TNJcJGvSmksA1MuW1A79SIV4QucaCTIuwp4PaSBE0QhobjzNQVW3hP0Ve0rN",
                'description' => "Em7q1SjNjatjjDZX7RIKgDX3b9oA142xLkpis0qy5MfISyoLqEQK",
                'transaction_id' => "MnAGBrL3K",
                'is_modified' => TRUE,
                'types' => ["expire", "exchange_outflow", "cashback", "exchange_inflow", "topup", "payment"],
                'from' => "2022-01-01T09:42:20.000000+09:00",
                'to' => "2018-09-14T23:42:18.000000+09:00",
                'next_page_cursor_id' => "a7482ca0-6be5-4bc0-b589-cf19795b1067",
                'prev_page_cursor_id' => "58ac09f0-32f5-4ca1-87da-6f8961f1a80a",
                'per_page' => 209
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "-n2V",
                'shop_id' => "667248d6-1040-4042-a470-4957819b7d3a",
                'terminal_id' => "1a6d4861-5ecd-4017-8b66-15c8e601a360",
                'customer_id' => "a6b15714-06b3-4681-bbfc-18074635484f",
                'customer_name' => "lTb5uoxVylmhf3ESdF0EHZGgpE19g89rUgV81h6fR4XXAReVSL8MjPf2nDJncUb7prKqWXHoSFTkZLdy8B9WWqNrXVXI1wRT",
                'description' => "wqzVsahBGWwps3iARDJTRZkOOEQFC",
                'transaction_id' => "19Wtss2",
                'is_modified' => FALSE,
                'types' => [],
                'from' => "2021-03-05T07:15:32.000000+09:00",
                'to' => "2021-08-31T05:41:04.000000+09:00",
                'next_page_cursor_id' => "c2bed1a4-556f-427a-ab5c-1465d75d99d9",
                'prev_page_cursor_id' => "522a064a-5211-4e9c-a36a-d4150f829256",
                'per_page' => 925
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "08fe0e30-5423-43b2-94f9-8ca08195aa85",
                'organization_code' => "P0b54-WAzlGJ-T8sA--5jb-qW8z03kXh",
                'shop_id' => "ca0c4553-9604-4fe7-a8c4-202b85b15d28",
                'terminal_id' => "e6e68094-5943-425f-b731-5a249797c287",
                'customer_id' => "00aa78af-22d5-49ee-b71a-56ee1477e95e",
                'customer_name' => "naTSFczRArCskatgTSAk3a8TcT02JvhzyAvEGRwH1gqt79bzapcrIrLur4lrAgRY4qmYCDpX8Ny7Ex4zLyYmVuuwRZjnfSOf90ILh1FnEv5pCv1ztILSktq1cNxb1w0fAXCRcSE6z5Q",
                'description' => "HSLVITcWyXkWwNeThLpKI1N6RIMY7t0u9TuR54ZsbCHGDImjW34z4jE8W9hhkpYWEzZLn5uyvbNkfkqdGOYba42tK1ETZVrimXQx2toEzw7Z1gM6fgx4uEjyIUvTVKqmlOa23scU",
                'transaction_id' => "ryj4",
                'is_modified' => FALSE,
                'types' => ["expire", "cashback", "exchange_inflow", "exchange_outflow", "payment", "topup"],
                'from' => "2019-07-31T03:05:38.000000+09:00",
                'to' => "2019-05-12T09:53:03.000000+09:00",
                'next_page_cursor_id' => "661dbbd4-fd04-4762-847a-a8c172eb3c2c",
                'prev_page_cursor_id' => "4e318c93-ff56-4413-a54b-ef93ee90f458",
                'per_page' => 782
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
