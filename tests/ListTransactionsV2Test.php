<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 919
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "0f19c88e-bcf5-4e80-9015-00d3445bf4e4",
                'per_page' => 561
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "920c69ea-8178-42da-9add-9273b27ec467",
                'prev_page_cursor_id' => "33329979-47f4-4d15-9113-12235cf8381b",
                'per_page' => 485
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2022-08-04T02:31:52.000000+09:00",
                'next_page_cursor_id' => "80cf05b9-7bfb-4d5f-9d57-542b13852756",
                'prev_page_cursor_id' => "87d29e06-d7c0-48dd-b0aa-6dbe7ef99577",
                'per_page' => 612
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2022-05-31T05:52:09.000000+09:00",
                'to' => "2022-08-15T02:24:36.000000+09:00",
                'next_page_cursor_id' => "3aeeb747-1e2a-45e2-9ad2-852e27399db5",
                'prev_page_cursor_id' => "ca81f41c-f511-4cdb-ad63-69801a4e7ea3",
                'per_page' => 542
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["exchange_outflow", "payment", "expire", "exchange_inflow", "topup", "cashback"],
                'from' => "2020-02-24T00:44:47.000000+09:00",
                'to' => "2023-08-11T14:12:20.000000+09:00",
                'next_page_cursor_id' => "165d6db1-cb5f-4fc6-8925-16d713996b39",
                'prev_page_cursor_id' => "6666f306-8440-476a-8dd8-2a95b5c4d7ab",
                'per_page' => 712
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "cashback", "expire", "payment", "exchange_outflow", "topup"],
                'from' => "2021-12-25T20:57:40.000000+09:00",
                'to' => "2024-02-01T23:48:28.000000+09:00",
                'next_page_cursor_id' => "473b72c1-e122-4ff9-a300-6bfe3b25cba3",
                'prev_page_cursor_id' => "ae874ed3-5d19-45bc-96b4-0ddf51691d67",
                'per_page' => 156
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "oNz",
                'is_modified' => TRUE,
                'types' => ["cashback", "payment", "exchange_outflow", "topup", "expire", "exchange_inflow"],
                'from' => "2020-03-05T04:10:12.000000+09:00",
                'to' => "2021-11-21T21:06:53.000000+09:00",
                'next_page_cursor_id' => "72ebe6f4-ea49-4c59-816d-3fc1cb9f340d",
                'prev_page_cursor_id' => "95aa6e27-cac3-49a9-8b18-f76286ab5db8",
                'per_page' => 10
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "6jZYYG4AQEE7Yl",
                'transaction_id' => "d",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "topup", "cashback", "exchange_outflow", "expire", "payment"],
                'from' => "2022-04-15T10:27:02.000000+09:00",
                'to' => "2021-01-12T21:22:43.000000+09:00",
                'next_page_cursor_id' => "e1490986-3d78-4b78-a349-bf417f0acabe",
                'prev_page_cursor_id' => "bb1127e6-4df9-4b3a-b665-07516e37df35",
                'per_page' => 977
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "mlpTaUM",
                'description' => "0LabSmPeA8j5vHTq9eUYBocTzKamwg0Ik7yMpdZS4EovQkEBQmyGJ2IA2mmm9PWoLaWBjyMKnNrvqFd7Bg4ZZu1Cg6cI8OqqzDclIHxJ4kYp5Y1GrAV4hfinhcHTlnLR",
                'transaction_id' => "FWZGkaygUJ",
                'is_modified' => TRUE,
                'types' => ["exchange_inflow", "topup", "exchange_outflow", "expire"],
                'from' => "2022-06-18T06:47:26.000000+09:00",
                'to' => "2020-12-25T20:35:24.000000+09:00",
                'next_page_cursor_id' => "6cbd6f17-4968-4f40-b249-c12c3f9055d6",
                'prev_page_cursor_id' => "f2447d42-a4be-493c-83ee-497441c4019f",
                'per_page' => 536
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "474c6954-bbef-4e59-9940-cbbe7db2a666",
                'customer_name' => "hLHYxlMI48p8PqiqKHU7q35Va7x52D8zAMS5dpsSXrrhcwu9y84v0KIozYmNqMU4j4f180fP5c1L5nGfS00wrDtFm6jbMqVAxCFSfj1txkrXIWBmRcHBKdL8v3HnQPr0adtOcms",
                'description' => "DhIgxkOgBGf2G4wIjrclsbDSrRpMr6g1byJ6zLQH6XRXfjWfobqzBBH6GPQv6F6elMe4dfdTB4gKnewjIgxNyfmb",
                'transaction_id' => "hGmJJM",
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "expire"],
                'from' => "2021-03-01T18:08:40.000000+09:00",
                'to' => "2023-08-27T15:08:37.000000+09:00",
                'next_page_cursor_id' => "42eb32e3-f72c-475c-8057-390a19d1b87e",
                'prev_page_cursor_id' => "b073a123-5dd9-4d72-ad27-86342f5498cb",
                'per_page' => 232
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "bd6bbffa-752a-4b4b-9823-433b2e72a72a",
                'customer_id' => "8dfcff41-c7fa-4318-9ce0-5fb43ad4a68b",
                'customer_name' => "l9QicZCCJ0A05jBfSeBTBvHCxU1NvYfVESMB97pRR1FDoaYRXkvCXPPl24Azknf4IW4knrGHl0TR1xxEjRkzP55FkN9KaqhLJYNFjdQdDPcKYswz1KGIIQxemmGSBfFVG7yS1x9e65CkFUPSZdnC8Nbd0GAMDtpExjAOL9",
                'description' => "vBDq74Zcv4lxbZkZAsxqjGZZnD30rTzVwJllk7AmnUWAZFPyOt3pktOJBQNvyxNd81mETXBAwcDbgRS83ISSTE08jfX2Omd3NMjFlRLJvC6KKEtPK2YiWIn9h",
                'transaction_id' => "lpuWkv",
                'is_modified' => FALSE,
                'types' => ["topup", "cashback", "payment", "expire", "exchange_inflow"],
                'from' => "2023-12-09T23:22:39.000000+09:00",
                'to' => "2023-08-05T01:16:02.000000+09:00",
                'next_page_cursor_id' => "75910815-ebce-4139-9e67-93159e325947",
                'prev_page_cursor_id' => "2a98bc07-6a1c-4ad2-bd89-6627233cc3eb",
                'per_page' => 435
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "631658b8-0c0e-42f8-a1ad-b81c076cc9c2",
                'terminal_id' => "32925fae-1d4e-4067-b23e-c3b177b39092",
                'customer_id' => "dbf955a1-0242-4351-9613-88fb1753e66b",
                'customer_name' => "qs5IR1sBGXi6YlkUDHHbRk8fI6wbpNh1friFqDo6JGjFLLOGZO0oAllJiZr4re6LWLgSkk2ZDUPdz1BhJvWNhb1UlY8gVa2hXfzW4DNhu8v9wZu0fWkZyfAZKnUDFE99Mnwnu5OtOf4ilY3NpmdcwanlDlu0IrmsH8EsDeezi4jYkSH918X0jGAYz0AuaoOoyLPqw51DmjCWv",
                'description' => "MDES09bsjDJFkIb5xAqDpTjFMPKMQ13CORng41h3amcuul1yByCRpmXDgHNBQaoIMR9zPGyYm63xUyy5Lv7oTqtem0CnZ3EEZw55Gboo5hpfF1Hpb0RbR7D8yvhSwIzpaQ4KzL2meWNVVwDgpJqef1CpLupibRMoXLp8MHMfUv2FJIgMo7",
                'transaction_id' => "4Xde",
                'is_modified' => FALSE,
                'types' => ["topup", "expire", "cashback"],
                'from' => "2021-11-27T21:38:48.000000+09:00",
                'to' => "2021-12-12T00:29:57.000000+09:00",
                'next_page_cursor_id' => "2e6c65c4-d83a-4e77-90ab-80cc7d574765",
                'prev_page_cursor_id' => "818c99e5-d95b-4a4c-b5a5-2f6ee37fd445",
                'per_page' => 708
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "3WI4sTJ--G7EI4k8-GQMc8PB",
                'shop_id' => "e40a2523-abca-487a-bbcf-e39c37c261de",
                'terminal_id' => "6cec1e95-d06e-45aa-a3ab-81e986393c74",
                'customer_id' => "e42ddd95-e9ed-41e2-975c-0da7bed12f0d",
                'customer_name' => "Prz6dz37AZYeiF76ZwhFQ3FAy9yso4lFSwRswxdTAQ9WC0cvkqgXkReqrS2qSixBY4zqc",
                'description' => "tNfEWqigHAndAuzv3GkWfbEr5omA7L0OesKnaA2925CICFc9YiFhnHuxZx0kErjYhFF8L0s3HmTbCv0vs46AUUu2pfmS3y8rWkeGY78TmLpJkbnvg7derUWKSNpuLl7xZYDZsabSpc0uKpcBQAXHmzjFH8x6CDzw9SQwogUY2",
                'transaction_id' => "ji",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "payment", "cashback", "exchange_inflow", "expire", "topup"],
                'from' => "2022-07-14T08:25:49.000000+09:00",
                'to' => "2024-01-09T15:15:19.000000+09:00",
                'next_page_cursor_id' => "de7c19c8-9c61-4379-98ad-933a819ca1a4",
                'prev_page_cursor_id' => "688045fa-4e38-4d0b-9987-cbad0e6722bd",
                'per_page' => 280
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "215615f9-17ab-4f2d-8c16-36b815f6f28d",
                'organization_code' => "8m8",
                'shop_id' => "d03dfb40-42d4-4451-ba18-c37b4aa5ef8f",
                'terminal_id' => "a7cf257a-a601-456c-9790-0abe96aec540",
                'customer_id' => "2b13afe8-c3f1-4a2e-a5c1-f5556598a544",
                'customer_name' => "LyUjiL5h79b8Mq1iCGeBaSpQPD6dBfbbaTLCXXwtnmblF81hLyHqrkno1IRdYmotXWqYy5cWhC8K9hq9NVk78eiqBVcclwSkXzM6GujXAvYOrdjeYiaUNpzopQa6AXRwrFPi8ZnQow3jmOnSTVflnP2oKpAkp8PiItR1sKyYoCMNif5QP3KXDpCVGLWGO",
                'description' => "EzapKvNXPC1CkiwHqFmPHg1nDo4oueFOj023vS0mewatHnea0dCU94sWp47O7C5wT4wYrVN",
                'transaction_id' => "K9",
                'is_modified' => FALSE,
                'types' => ["payment"],
                'from' => "2022-08-22T17:47:08.000000+09:00",
                'to' => "2020-01-16T14:06:09.000000+09:00",
                'next_page_cursor_id' => "275b96ea-0e73-41a0-ba86-2f692c24bf13",
                'prev_page_cursor_id' => "3662c3f2-8d09-43b5-9d3a-d04379ede3f1",
                'per_page' => 970
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
