<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 602
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "4baa4cd8-2a8e-4781-b2c2-a49a0bf28e5d",
                'per_page' => 766
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "03537762-6a8d-4340-b7eb-92677ff85692",
                'prev_page_cursor_id' => "688c0b6a-249e-472c-b0bc-022de4be1608",
                'per_page' => 346
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2020-05-27T22:57:01.000000+09:00",
                'next_page_cursor_id' => "2bb013f4-6fe0-4970-97bc-0a06955e5b78",
                'prev_page_cursor_id' => "0cc7275f-d79b-4e2b-98a7-a10faf260c26",
                'per_page' => 31
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2021-09-22T21:58:03.000000+09:00",
                'to' => "2022-04-07T05:55:22.000000+09:00",
                'next_page_cursor_id' => "b90e2715-4a1c-4932-9d36-3e10f6991b1f",
                'prev_page_cursor_id' => "94cb77a2-f454-495b-8e2d-8bb108995456",
                'per_page' => 876
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["cashback", "expire", "exchange_outflow"],
                'from' => "2020-07-24T18:25:33.000000+09:00",
                'to' => "2020-04-06T17:45:46.000000+09:00",
                'next_page_cursor_id' => "c72052f9-ec9b-4718-9cb7-03d083245c11",
                'prev_page_cursor_id' => "58063d0d-565c-4634-9353-7862423a574b",
                'per_page' => 108
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => FALSE,
                'types' => ["exchange_outflow", "payment", "topup", "exchange_inflow", "expire"],
                'from' => "2020-02-20T22:00:45.000000+09:00",
                'to' => "2024-10-06T22:11:42.000000+09:00",
                'next_page_cursor_id' => "3c1d0c74-826b-46d9-a814-f3ea4c4dce85",
                'prev_page_cursor_id' => "235393d0-041a-4d3e-ac02-577c51c604ba",
                'per_page' => 345
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "yJ1V0r",
                'is_modified' => FALSE,
                'types' => ["cashback"],
                'from' => "2021-06-25T11:35:26.000000+09:00",
                'to' => "2020-11-07T03:28:18.000000+09:00",
                'next_page_cursor_id' => "d1da81ce-4f98-43d4-9232-305fa740a7e5",
                'prev_page_cursor_id' => "3bc5a67d-7be3-40e6-abcc-8de425a88fe3",
                'per_page' => 606
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "3OSn94wpSCBGnb27KI1Ko9Ro9P2UOPHKcZd7kJ0a09BOfpTrIxahzBDxgf0eAPjokEVHRFLghiMn2sJjV2bGnLruRc9c27Gpu7iWb08UbIXfazIWogjdxJNEfM7ZphEzx62f8FNzaDel7ro4JT6XY3Y33ek4ahxmsrZJPb5B1K9ZLJjlQzrc",
                'transaction_id' => "4cFx990D",
                'is_modified' => FALSE,
                'types' => ["expire", "topup", "cashback", "exchange_inflow", "payment"],
                'from' => "2024-10-02T17:12:33.000000+09:00",
                'to' => "2023-04-08T08:48:02.000000+09:00",
                'next_page_cursor_id' => "35ecf8cc-77bf-41e4-970a-6fdfb69dcd96",
                'prev_page_cursor_id' => "709e5b2b-b655-46a7-a5a1-734335d7a9d3",
                'per_page' => 731
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "Vd4cTqnNfSRiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0ipuLt3IQKQQHb6fikVg8U3XBigR3jya01cL7edhmrVi5NIsblUeDquiQL8YRreNoLAWMJ",
                'description' => "dywYSICtYcbHl2ktF16gpa54attROZcBbejZS9wdnnNKINI7vj8qEDPsdJ8J",
                'transaction_id' => "L6K4",
                'is_modified' => TRUE,
                'types' => ["cashback", "exchange_inflow", "payment"],
                'from' => "2020-10-16T03:35:09.000000+09:00",
                'to' => "2021-03-10T23:23:54.000000+09:00",
                'next_page_cursor_id' => "4017c803-1f79-4f19-8499-6a20643cae6d",
                'prev_page_cursor_id' => "81750f73-e519-4764-95fa-6fa3c7967340",
                'per_page' => 678
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "9c5f16f6-af7d-43e8-9dd5-5b99aff6b858",
                'customer_name' => "mrc21",
                'description' => "VozYCz4wR9Gfv1ooHMcqzJF0zVNZ8zHF5mnetJol0g7uhhZVwBBSB9NQuG198o4cE8ye8xiCptr8X3OQSs9cvMVMzYpfEHHq4AVCPhpFJVl2NE9OohrFLhvABt92YjeNGkeRyZCxDwnyuzPdWfYw482S6oHFsZh9ksnqTSKQYaLtgBF21",
                'transaction_id' => "o0",
                'is_modified' => FALSE,
                'types' => ["cashback", "payment", "topup", "exchange_inflow", "exchange_outflow", "expire"],
                'from' => "2022-06-07T11:28:56.000000+09:00",
                'to' => "2020-12-16T18:55:46.000000+09:00",
                'next_page_cursor_id' => "16a8fbcd-1daf-4f8e-a3a4-8562da3f505d",
                'prev_page_cursor_id' => "7ed0479a-7109-4441-b40a-35f50011a1d1",
                'per_page' => 921
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "84caefdb-93e6-48e2-b750-b9cbd590963d",
                'customer_id' => "96f0d3b5-fd4f-44ec-bf09-0d86efb4cba2",
                'customer_name' => "Udeu5ClBnNsqGtwvAjO8SQrjpTlUKU7ix6vD3BTnNcaIv4Cy2qiGNeSDJueWNAF2iLhkB08mWoSEw4Yfnz5e3bjXKldANGzSZe49qKV1rholLnfHAgpNJKDDEjuzSmETPUL6TDRxNmjKWPDEzen9VEh9JKwUlzsxb9tQKSZdMATJHlP3s2a",
                'description' => "yvcn732KUYpvpwWJTv2DUcmsWBTf3SfgLVN",
                'transaction_id' => "OhNoRU",
                'is_modified' => FALSE,
                'types' => ["expire", "exchange_inflow"],
                'from' => "2020-12-25T07:04:15.000000+09:00",
                'to' => "2023-04-05T14:24:47.000000+09:00",
                'next_page_cursor_id' => "54e9768e-cf9d-4d04-a89c-e50590381bee",
                'prev_page_cursor_id' => "7e8e7cf9-60ce-485a-b519-1f51d6bfe59b",
                'per_page' => 444
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "ae07df37-1016-4837-8fd5-90abd67b2b98",
                'terminal_id' => "29fa1a30-bbb4-47e1-acde-b890bc290525",
                'customer_id' => "89ee572d-fda9-4a17-8c11-9273ef9d6201",
                'customer_name' => "4hmy4C28WnCRfz2leovb1R7",
                'description' => "QOgboW2zpcaLxa2QZma6CRo8nyJO9Y3f9djMgk8QSZwJ1udEIb7zDJ6KZTEk0mDRGqd8jGihF2zo2GN3QYDG6CZS1PVe5LZzi2NmWBluHrzflOytNd3ROmH9nMfAHnX3LOs6P3dxLhDjrt4CFESWJnPCLUxGLtrgoghS3pPHE574eeX1ksH4R2M",
                'transaction_id' => "gyW6z149JB",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow"],
                'from' => "2021-10-06T07:05:16.000000+09:00",
                'to' => "2020-01-08T16:36:14.000000+09:00",
                'next_page_cursor_id' => "b0a0dd22-ca18-4594-9587-1a9182b0a411",
                'prev_page_cursor_id' => "4fbc9ae7-261c-4d97-ba65-bf7c71b30fe3",
                'per_page' => 626
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "MHl1lEAi-h-1E-mb94V-g-29",
                'shop_id' => "c4730331-55cb-4c90-916c-d28d0e7e0fb4",
                'terminal_id' => "4328a863-d14b-49a9-9d36-b39927c16cc8",
                'customer_id' => "d413844c-71dc-4ea6-a5f3-ae9330a914ef",
                'customer_name' => "N7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dzqDm",
                'description' => "xXKufPIjjJpzSXKPSRMVYMVxniANdM0yy6srRZNC9bYJUFWp4SJDd9Vw0ghvUwHY4GPMgqa4p3NBV6jnDEmNinmBAkCQlWqd4VgtaT7nx9nCCSGOYqsqY3PQB7j8S1LcJM99jV6h5DQ4TL9sXbFiutZ4wFjGxBLsRpo",
                'transaction_id' => "6uXLc6he8",
                'is_modified' => FALSE,
                'types' => ["expire", "payment", "cashback"],
                'from' => "2022-01-15T06:05:46.000000+09:00",
                'to' => "2020-04-25T20:15:12.000000+09:00",
                'next_page_cursor_id' => "4f397461-9bbb-41bb-805a-99b89ea97398",
                'prev_page_cursor_id' => "62a930c9-6d8b-4b36-8ac1-5df8742ee5e9",
                'per_page' => 378
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "d77c2ebb-468d-4c62-8955-ab64a52346ea",
                'organization_code' => "0q2-OvMDYKKE84X--DHZb4Nbq55-5Nb",
                'shop_id' => "a1019578-9706-4e5b-b5bc-e4b537b16919",
                'terminal_id' => "eaea0068-447a-4cb8-8184-f1f1d8eed3ac",
                'customer_id' => "7a87ea82-0af5-4548-b838-ed0e04639fe7",
                'customer_name' => "YqQC45YQseyms9QyHVorEq6zLZyg3cEPs9bN7e1DJRmWCvXV5f7NFxRTTWOKh4cp2t8rtdj0F82hhuu2d72PSRBNNGTP71wcJLJGkIvTZnRNAv7oeQjUez1G0bwCFurxmaLHHuXDOcuycPW2WYY40yWZt9ZjH",
                'description' => "KqLir6qmCF3zfoEN4hG6jzrPFiN4YTSJ9o4hVc0u6tzaZ3sbYKCNybmAlkaNJiOv",
                'transaction_id' => "RswwQS",
                'is_modified' => FALSE,
                'types' => ["payment", "exchange_inflow", "topup", "expire"],
                'from' => "2024-12-28T00:37:18.000000+09:00",
                'to' => "2020-04-22T12:04:27.000000+09:00",
                'next_page_cursor_id' => "0fc268f7-322a-40e8-aa6a-06bb9bd1b91d",
                'prev_page_cursor_id' => "37b30ef1-07f0-49cd-b179-65c5e7ae684e",
                'per_page' => 751
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
