<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListTransactionsV2 extends TestCase
{
    public function testListTransactionsV20()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2();
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV21()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'per_page' => 233
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV22()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'prev_page_cursor_id' => "ce8cd739-ac56-42c4-a004-7cfe2af7eb58",
                'per_page' => 317
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV23()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'next_page_cursor_id' => "1c526794-583f-44b3-8e45-a26879c3f073",
                'prev_page_cursor_id' => "5421384f-cd3c-478b-81b0-7cf2734b62ea",
                'per_page' => 328
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV24()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'to' => "2020-05-14T11:11:29.000000+09:00",
                'next_page_cursor_id' => "0404c1e7-e48f-4dcf-89a3-fc0d07edefaf",
                'prev_page_cursor_id' => "99b300d1-9e9d-4f36-9b0b-eafc8b7c2b78",
                'per_page' => 411
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV25()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'from' => "2020-12-05T23:01:00.000000+09:00",
                'to' => "2023-01-10T00:53:44.000000+09:00",
                'next_page_cursor_id' => "0220a424-150e-4b39-b3d3-7f06ca8464db",
                'prev_page_cursor_id' => "2a90ab3a-9b9f-4e82-a6ac-05f5d02df130",
                'per_page' => 527
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV26()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'types' => ["exchange_outflow", "payment", "topup", "expire", "exchange_inflow", "cashback"],
                'from' => "2020-09-13T10:43:48.000000+09:00",
                'to' => "2023-11-27T03:30:11.000000+09:00",
                'next_page_cursor_id' => "6297dcee-15e9-445d-bca3-1f2e6b2e1e54",
                'prev_page_cursor_id' => "558e09b7-4f72-4120-890b-5717a94d2fe2",
                'per_page' => 497
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV27()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'is_modified' => TRUE,
                'types' => ["payment", "cashback"],
                'from' => "2021-02-05T08:35:48.000000+09:00",
                'to' => "2022-07-01T09:17:31.000000+09:00",
                'next_page_cursor_id' => "b909c71f-8446-4f15-a7b8-b76a9ca79d9f",
                'prev_page_cursor_id' => "b355a908-838b-49fa-8ce0-36a0ae4180cc",
                'per_page' => 811
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV28()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'transaction_id' => "07kGwmRZR",
                'is_modified' => TRUE,
                'types' => ["payment", "expire", "exchange_inflow", "cashback", "exchange_outflow"],
                'from' => "2022-10-15T17:17:11.000000+09:00",
                'to' => "2023-08-21T10:21:13.000000+09:00",
                'next_page_cursor_id' => "c7e2d3ca-1185-498e-847e-2e268b51451f",
                'prev_page_cursor_id' => "ea417379-0aba-4565-9d90-e3d14ef66dc3",
                'per_page' => 623
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV29()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'description' => "rhi7qh3KP4T37Wi9g9nZZhOiq9TM1kLnMOaPoayQ1",
                'transaction_id' => "L4Lw",
                'is_modified' => TRUE,
                'types' => ["cashback", "payment", "exchange_outflow", "exchange_inflow"],
                'from' => "2022-10-16T18:36:45.000000+09:00",
                'to' => "2024-01-10T06:26:58.000000+09:00",
                'next_page_cursor_id' => "d5f4173c-12f5-4307-b9f5-e4e18871f0fa",
                'prev_page_cursor_id' => "41faf49e-f371-4912-a42b-68832100cca3",
                'per_page' => 251
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV210()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_name' => "pngLk90ZBFe71DIECbUavopCer6amUqWii2uDVrmTki6pqO0f8cnptMkBRjmpnnbeCg4xumOoxK0oT4F795unttA065Yr03Qzj1SYSblk7QSMdkkKPrtzfsCSKaR3OFn1WKJz5hhBZBCZgSERTDaoK9IqITw9RXh5VLaBXSS3EzsrMpj8GBIyJaRyweuGKy2nXN4UBP",
                'description' => "GQ9mhvxLr7QQxCiR4LJ0VAGQ0LknXBVXV6IePzMvb8rIAKhBAUImOpB9NJd0FGb0jOdIa2VbV1E7pIBf60ZOpXb0uUTjEzrW5FEq6VpVqu1DpFd0JaBsPBEj",
                'transaction_id' => "xsN82",
                'is_modified' => TRUE,
                'types' => ["expire", "exchange_inflow", "cashback", "topup", "payment"],
                'from' => "2021-02-13T12:44:06.000000+09:00",
                'to' => "2020-06-22T23:44:59.000000+09:00",
                'next_page_cursor_id' => "3b5f4be8-513b-49b6-bd9a-c080b884bccd",
                'prev_page_cursor_id' => "c8320a5e-9d98-4182-96e3-f66c7e28db46",
                'per_page' => 461
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV211()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'customer_id' => "e11b8b73-4103-4feb-b081-6a2ded464256",
                'customer_name' => "JhF8OvhWGp3gTZC60RTw4fZ8zWBqSC3vDIMcnooU2vsEkhF",
                'description' => "zbMP7H4x70jy8CyXSjsNQfhm4JdiSR8LU0sAxVpKo9Pr8tnCR4b3VVcnR7ySaTJSLXaRbjFaOCY9HY0faJMcRsZ3tfn14pqdpY2gOVzxC2AMFcqtkzhdfPKiy9SERDVnpaYhOvVB8b8Y5rPTIoQa",
                'transaction_id' => "vlfkuyB",
                'is_modified' => FALSE,
                'types' => ["exchange_inflow", "expire", "exchange_outflow"],
                'from' => "2020-04-09T02:16:29.000000+09:00",
                'to' => "2021-07-04T13:04:29.000000+09:00",
                'next_page_cursor_id' => "938c7fea-f14f-420c-880d-c4d65a12c2c6",
                'prev_page_cursor_id' => "a819a5e6-3a13-4eba-9561-e5416b4342df",
                'per_page' => 238
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV212()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'terminal_id' => "6f305f19-0e77-456f-907e-f423b0fa6d0b",
                'customer_id' => "eb5627dd-e5e9-45d5-a515-1e148f0770c6",
                'customer_name' => "2qGGZk77FXigkPx1NC7bcdhHDyq2BmegmNcooOzsV0UAnFDq2j42XbKSjWX0mczdG92I3EQWa6MviKhzgN1WE1E9QE8I1WOtKGTOoDsggK2zVvIrNmjPyMt7JZTknlcSLOAfgHki7iEUUEZsYB8I8w6YX9AjYRSoiU1BYQYTGkBMdZ9gxwOlUDOeBSRiyqeameMaY0bgN8gTUkelv3hkGmk4iWQZAVafOlabiOcEnloh2DXft8ZR",
                'description' => "ZIT5H8aSOl3MDXnG9yHqEAThwDuq1zewsMIx1hpzHiKxcCexEPrWNcD1BCJ2Q7A3yxMyBqUSnmfmyMf158jbodxUJxcIS6QwIFvAWCZsB1EYOxuNXsb8K4XyQ60l6nZCLpElUd6iH1X66E0nqBBGmKnZ6uDIn3iuFQrrgeXzyNXNrNkeWa9h",
                'transaction_id' => "sLSo6Rhl",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow", "payment", "cashback"],
                'from' => "2021-01-05T03:13:49.000000+09:00",
                'to' => "2022-10-30T06:54:32.000000+09:00",
                'next_page_cursor_id' => "816533cd-9a5c-43e1-9374-5d110d0cde83",
                'prev_page_cursor_id' => "feb333ac-9800-4310-b98f-d944fb40b710",
                'per_page' => 344
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV213()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'shop_id' => "92192731-0332-4f73-bf91-3a0e6f29cdb5",
                'terminal_id' => "2b10db9f-b43f-40d3-8b73-9fe4ea9c3db0",
                'customer_id' => "d748dabc-3f14-4036-a659-5b07e0a852c8",
                'customer_name' => "a9pHdUJ2NkpD9XRln1g4q1AmzenaBAIYsPX5BEVEkSwN7Jl7UfMqNeIWxDQ5mYkDBp76iPlz0WyF7I2Snzg812cd0lMhCHFE2kwBpeHriIaXxYmUfeD23BKTCZPKhRk3w9r2MS5qnBpeG29hBWbNKIGuoyWD3BHeU5bcdtREmG3PoPoU",
                'description' => "nVURoRDP0303M0EUzCR0XC7UBINwESq7hPy7a3F5MBC2C7VfANu3p62KDWO8TDrLXiDq8ZM4HpSJ7ezaoKVM6PG4nVxadlDXYh8F3jX5Rw62VEObOlMsiJRl1b2ESaJKCDCVaIjvXY9buv1PGDaqp",
                'transaction_id' => "NAcB7XJ2P",
                'is_modified' => TRUE,
                'types' => ["expire", "payment"],
                'from' => "2024-01-13T23:49:59.000000+09:00",
                'to' => "2023-12-08T02:24:01.000000+09:00",
                'next_page_cursor_id' => "208e9e9d-b1b7-43dd-ad22-a0dc03eb57ac",
                'prev_page_cursor_id' => "5206de4d-7ec3-43a7-b86c-5d03a53f11fa",
                'per_page' => 362
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV214()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'organization_code' => "CCxX04l7X-271-6pi-K-Rxg6A1XZ4--",
                'shop_id' => "a4005455-8b8a-4d7c-b606-4ba90e2b4409",
                'terminal_id' => "33439bda-78d5-471d-a815-d8249cd8d072",
                'customer_id' => "ec5da292-cbff-47cf-a007-7f99d6254488",
                'customer_name' => "p80a47LYIcD579HHiydYwYbStQsIHShYuqMOfry8huKLaun9q8fRCMt2pzYekawpUouvYHKlj0GUL0Fcnz7fEngR6pF3m54VmwYrgFgT3RyUt1Kexb2ZIYN08OgDDQYpUk9QvTpwbva",
                'description' => "X3fUufQzzx2hzebS68SpNEGkfmS3Uyy5Zn41VzLKUg3om1YNfeeK",
                'transaction_id' => "dFE8",
                'is_modified' => TRUE,
                'types' => ["exchange_outflow"],
                'from' => "2021-07-14T16:48:02.000000+09:00",
                'to' => "2021-03-12T23:43:56.000000+09:00",
                'next_page_cursor_id' => "6c334b98-1b91-4bf6-b12a-e141b114b4db",
                'prev_page_cursor_id' => "22bd014a-b773-4342-ba33-db6cca2a48b6",
                'per_page' => 472
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListTransactionsV215()
    {
        $client = $this->newClient();
        $request = new Request\ListTransactionsV2(
            [
                'private_money_id' => "97806d85-f2ff-4e36-b939-afd00031bb51",
                'organization_code' => "m--68o11O--17H-WH",
                'shop_id' => "5a916396-52a8-4401-9b4e-261a688c3a61",
                'terminal_id' => "4c1003dd-e09c-4854-a3b3-48146d899a41",
                'customer_id' => "486be008-9cb0-4b1e-b8bb-858f6cbe29a2",
                'customer_name' => "Oic61u1yVQPNCQEFIkbwhO9RJiR7mxn7kYGzShazSiZH6DDfNqfsVRi3zxzsVzVJLxpF9uCjOUSNMH9fWh27PiOpr3HMMXsb4Lh4b0Gko8iE0P3Cu0AOaTlKzyVFYYoK00acoGlEqYYGWZUMgU5LJ8nedbEkL6VCbZlYCZFu0YjXrvick1kbCzvMElblaTUskxDWTi4syFdijXYZ6Fkp0v2rObj5KP7CaX5",
                'description' => "R9O7hnOQMfDj4u8or1Z5ajnFBytvfCWU5lvasIan6Df8qsq2k3ETquM3SQujWFDE153B47G8gAIFr9zY1ABG4Q6S1AZ81",
                'transaction_id' => "e9F1za",
                'is_modified' => TRUE,
                'types' => ["cashback", "exchange_inflow", "exchange_outflow", "topup", "expire", "payment"],
                'from' => "2024-01-09T00:43:51.000000+09:00",
                'to' => "2021-12-22T18:31:12.000000+09:00",
                'next_page_cursor_id' => "9830d072-5cd2-4d5e-9d74-93d0b4721af0",
                'prev_page_cursor_id' => "532e0c5b-71da-4b67-9afa-de927747404f",
                'per_page' => 350
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
