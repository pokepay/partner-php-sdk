<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateShop extends TestCase
{
    public function testUpdateShop0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "ff4fb407-4fd8-4579-893d-269031de657e"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "ff4fb407-4fd8-4579-893d-269031de657e",
            [
                'status' => "active"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "ff4fb407-4fd8-4579-893d-269031de657e",
            [
                'can_topup_private_money_ids' => ["abc76f62-ee47-4575-af4a-8be870bcf46f", "cd7895c3-1267-4cb0-8a98-b343676511d3", "c27ef4a2-c267-416d-8599-0a809d49f022", "c6e231c6-0323-45ed-ad86-70b85dab3bb4"],
                'status' => "disabled"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "ff4fb407-4fd8-4579-893d-269031de657e",
            [
                'private_money_ids' => [],
                'can_topup_private_money_ids' => ["d5af2fae-44ad-44a8-b50d-b62cba9ecc24", "5bd13f45-516a-40a1-ab0f-b07ec403e24e", "029db2aa-952c-42a6-ad8c-59fbdd347dfe", "68def99b-5743-44e5-888c-b4a5d080d9a5", "a63fc80b-b96d-45e8-a39d-2e0e054fd9b6", "8159826f-f22f-4b07-b411-5321dcbcb7fb", "088c7aa5-f872-436a-9303-d5838c18eb63", "159c9a1b-4f3e-4bd4-96bc-e750728aae78", "8219780e-6566-419b-87dd-e20e044e6566"],
                'status' => "active"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "ff4fb407-4fd8-4579-893d-269031de657e",
            [
                'external_id' => "6cT6",
                'private_money_ids' => ["53ad7764-d910-4d8e-a39d-a3d3144e48dd", "8acd097b-ed0b-4435-9b87-29f0e2346916", "5a36c445-77ca-4bf6-9502-e56bba741c28", "be067c8d-7542-434f-bfe6-4ea370ebe24a", "f64b1634-e6e3-47e7-ab57-76e6a8c31a12", "e6bc9a10-a363-4a73-b4f2-9ab3ff26ac48", "f39920ec-a345-45bb-b1c1-febfd7980b55", "3679ffd6-4f44-4968-b8e3-73fd6fc0fca4", "45156909-8d97-4911-af07-836458d58800"],
                'can_topup_private_money_ids' => ["48a7de2d-1fc9-4301-b44f-05089f2b8d99", "6d471bed-2efb-4c8c-ba66-6074d609f0ac", "d04c355f-c2c4-40bc-be89-c5e79664d998", "626f6615-3df9-4282-a81f-09c2df0f1ffe"],
                'status' => "active"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "ff4fb407-4fd8-4579-893d-269031de657e",
            [
                'email' => "m0zaCyweWj@CILv.com",
                'external_id' => "aOGAIexGZP",
                'private_money_ids' => ["7d684f3c-da5f-4509-8ccd-ee33d676bb5f"],
                'can_topup_private_money_ids' => ["f1e63427-d2b8-422c-ac01-c8de3e0f2463", "8786abae-a61e-4f14-a900-a65a536ae1ae", "2e607d08-4fa5-4325-87b1-9bd81e76e050", "72c14c0d-9401-434e-a3da-8998e95799e8", "86cba441-ec27-42e2-a94b-696a049bd1af", "e35d0f70-62ec-43a5-9d8e-03dc8a5fc366", "f789f0e2-c418-4b3e-a1b8-1b38b4309e93"],
                'status' => "disabled"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "ff4fb407-4fd8-4579-893d-269031de657e",
            [
                'tel' => "02078790592",
                'email' => "S66UvjVwmQ@Pqv8.com",
                'external_id' => "totXIqikSwhvuo61EjDPNrJBo7iOtwKgS3",
                'private_money_ids' => ["25a4359e-f456-46fe-8c50-26de26346980", "5f9ee318-1830-4ce2-91f1-4a2b51f5dae8", "2b676414-1565-4ea0-aa5e-c1ac63878ac3", "8f86123e-3a72-4549-bf1a-5aad778784d0", "cd9b46f9-6efc-4a56-9085-cd63935a848c", "1c9d283c-d5d4-4c43-9987-8ced3ca86d05", "597de758-c439-4bc0-b5c7-ab3d39a62cbd", "d978d3ad-43ee-46c9-8660-2cc0e01586ce"],
                'can_topup_private_money_ids' => ["96f224b0-3c27-4c03-9b93-b559b78dc5b6", "3174ea9c-ea72-43d8-bba7-ae411a88e60c"],
                'status' => "active"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "ff4fb407-4fd8-4579-893d-269031de657e",
            [
                'address' => "YO3ZTqQm9Gdwx3nNaRQna1mMdj4q7jrfsnAkJuzP6VQsmUb7zl7Kzx71DyAYHtPohcEgvNSXEszRzQuv3CEcRDhW8kOybpJVNd6Zq5u6LhTb4nfR1Pg2Z",
                'tel' => "02-292856",
                'email' => "NUw8adoqeU@zcgp.com",
                'external_id' => "pJLVqTb6JI66AGJFtM",
                'private_money_ids' => ["ca6f7f2a-dffb-4aaf-b21f-d09d8f42838a"],
                'can_topup_private_money_ids' => ["ca6ca1da-14f6-488e-a40e-bcd83590110e", "8bf3f4e1-7f34-48d3-962f-0ed4cba2a8ac", "eb9b2960-3b9b-44e3-9ef0-0080c75603aa", "fc844970-844e-4b0c-b246-ca4f2a4a2d91", "facf613b-43c9-4a43-a2cd-da040a32bd54", "c44b0273-db27-4424-b78c-f19ff240035a", "54532306-28f9-43a3-9871-ceda5d35de53", "c1c5ff30-206e-405c-9463-26031bc7f194"],
                'status' => "active"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "ff4fb407-4fd8-4579-893d-269031de657e",
            [
                'postal_code' => "9061354",
                'address' => "NMmZc1OQGD7o77EwaLksiq4Q27cIJLVLHMGlKxkHnYFOG0akayoH3azTTAFtviVJ6w4sTFj",
                'tel' => "092-43-9375",
                'email' => "r6axnIjwcw@mpby.com",
                'external_id' => "pMGGZDjA4XTcf14m0m4E93AW89RvxiF0",
                'private_money_ids' => ["8b3a67d6-32c7-4e6f-af68-6af21827d3de", "9b2d42f5-8b73-4dee-9126-508bfadebfc5"],
                'can_topup_private_money_ids' => ["747e3c4a-18ad-4fb8-bb6b-c211715ef10a", "f3ff65c0-f289-4b28-83c7-48c500ba613c"],
                'status' => "active"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "ff4fb407-4fd8-4579-893d-269031de657e",
            [
                'name' => "e4XhWBj3QM8OInc1mXpP6ru7Nm0NcznMGNHInVCiOgbb5nPlyUbVf0m7O9AQcnn3PvpaY90Zohkl6suTsU6C5fTclsee8M2yCMA56zYj891SdJ3FQPYEmKUwWlUgxkOh3FjfEYjjq9C8rJzbQtulHNxFIj6Up5GYSaDoRf3mK4EUpnw2W7fdwGblbL38AOzfA1BgPiTmIOHkGQQvAdDVVLTzI5",
                'postal_code' => "8551683",
                'address' => "VDp25Db4E9pxg2le1FbbDOrDSCUf4ZkkFwhcJjsKA6v3LFHRZ1YGG43AuGPcgJmTXnMfe551lEr3lGQzDSBBBrAQ1IcqNXpiuOhusjWetEv8blvJtOGEk136lMoCYimk0GkvviNKRKnKVUJCsTJmgCx4UjVBNJw6uLQBMW9Bq6jT243SVWVrCDQIBiHYmKY25i4MRsYkebC1mGC1HEyM4IgdZtQLunXqinzlD3k",
                'tel' => "0443-6008-801",
                'email' => "dfmJcqUyv1@OiOS.com",
                'external_id' => "WUW0c9QLb7OsFH",
                'private_money_ids' => ["029b95ab-394d-40af-9aad-37488cc4048e", "d488baf3-a348-4cbf-b93b-fc541cadfbe4", "135c4c1f-3144-495f-abd6-67366e473c5e", "3090a4d0-4e90-4a65-8a42-64a4ee1092a6", "2c438927-10a8-40dc-9b67-0ec58f566084", "6d59959a-1b91-4fd2-8108-ac54d3bcfcc1", "9cc7d9e6-2206-4d8b-be22-44b91bba5c3f", "52eb4602-1bb7-40d1-97a3-b548b5bd1587", "10031787-d06d-410a-8833-9434ea1faf19"],
                'can_topup_private_money_ids' => ["b0fa6b5a-4ff8-4e4f-9a29-06b7e9657fe4", "7c281c16-112d-4ce7-af78-9456ce0613fa"],
                'status' => "disabled"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
