<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateShop extends TestCase
{
    public function testUpdateShop0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "0d940d78-a233-4878-8222-358bd8e2c81a"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "0d940d78-a233-4878-8222-358bd8e2c81a",
            [
                'status' => "active"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "0d940d78-a233-4878-8222-358bd8e2c81a",
            [
                'can_topup_private_money_ids' => ["30811d20-9040-42d2-b5e2-1e4cf4f36c4a", "859d712b-e250-4f28-9268-b0c863b0f633", "b1a7e4c6-b423-4f17-8591-3fabf542b19e"],
                'status' => "active"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "0d940d78-a233-4878-8222-358bd8e2c81a",
            [
                'private_money_ids' => ["6bcb5484-4908-47be-a7fc-b91d02734efa", "12c04be2-fc2b-4211-8066-a4553a86323b", "48376d3a-8cb4-491a-a311-1cc4477297b6"],
                'can_topup_private_money_ids' => ["da461ded-aac1-4ce5-a0a0-4af1fce3732b", "5fe1f6ee-af67-43db-a9e6-5eea0189ea4e", "ab6b3e69-1398-446b-ac71-16444babd57e"],
                'status' => "disabled"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "0d940d78-a233-4878-8222-358bd8e2c81a",
            [
                'external_id' => "3OudXp",
                'private_money_ids' => ["cd4e6704-0784-4b59-a82f-10ce1e6444f7", "6f037446-f8d7-4355-81cb-00cfaebfae3c", "08b7f0ee-45d7-40ec-a8ee-a30c85d32afc", "f3221ce1-44a9-4a30-ac11-135e8794dd59", "0dde3703-82ce-472d-8d51-f11f8aa8d80d"],
                'can_topup_private_money_ids' => ["5ebdddc5-f87d-475e-ae62-9e2c85238ba7", "67f5fd7b-dfe0-444d-af56-2593fdd0fe11"],
                'status' => "active"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "0d940d78-a233-4878-8222-358bd8e2c81a",
            [
                'email' => "bi9G5aE3q4@gTN9.com",
                'external_id' => "3gHJA1F",
                'private_money_ids' => ["2c8ba6ab-be06-446e-a182-f52bdedc0865", "1a7d6858-901f-44fe-86d9-a5d2c9c20656", "a719208d-20a2-4bb1-86a5-2bc238ced075", "9948dd39-7bdb-46d6-b1f7-56ed6486cbcb", "1d6b0985-a6b2-4cdb-9e88-ae212f059f51", "4a6cf805-6557-4ffb-a727-6a2b7f0194c5"],
                'can_topup_private_money_ids' => ["44354feb-ace1-41c9-bf90-3127f73955eb", "9bd24d1c-8b12-40b3-8e66-2b338972d5b0", "75b081b4-df9f-4f1f-97c1-a2651142c452", "86f1696f-e64d-47df-82a1-347f97f63dee", "3ef745fe-8e19-4f87-998b-2152f7e65da6", "33f47da5-000d-47f2-8896-29e065230afe", "092dd5c3-dfa3-4934-a963-1158c4b26b74", "fff0204b-1251-4494-9bb0-3f406712c789", "0454397c-f907-468a-a101-aa346dd382a6", "0f4cf328-71cf-46a8-9f2e-3ddd18812301"],
                'status' => "active"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "0d940d78-a233-4878-8222-358bd8e2c81a",
            [
                'tel' => "011842276",
                'email' => "5RM4SYyWPQ@4b5E.com",
                'external_id' => "FhF0JaiWpiphXqNgzf5XFTYAH",
                'private_money_ids' => ["dbbefe4a-ab64-48de-86e5-5a0d8467f1c7", "b78a95da-5d90-4969-a0b1-258e9df56aca", "986fca13-5b49-49e1-9b39-e5ce1048732f", "791bab2f-5b2d-459b-8054-6418f6311583", "70558772-486b-4c99-8d65-765d1ce71041", "498e60ac-7da6-4360-85cb-5b983e1c99ce", "1ed88b18-cf55-41ac-96fb-54dedde26117"],
                'can_topup_private_money_ids' => ["e1383425-d5b2-4c7c-830b-935fd9ef008f", "8640a98e-5795-4b91-bca1-b620a0fc238f", "5bb19801-fb71-48ce-8daf-1617924a619c", "8236b04d-00f2-4a1d-90f7-63342614624a", "e5952fdc-8be1-45f9-89de-6e320d38fe9f", "4a3b748b-2ad9-4715-be89-2c42e8c75108", "c6a7a0cf-f117-45e6-87f5-1eec8e7f8c0f"],
                'status' => "disabled"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "0d940d78-a233-4878-8222-358bd8e2c81a",
            [
                'address' => "IFK5T7Dc8oOst1MM9PmjRDk75J779k3qO5Tt2uQGKA",
                'tel' => "0475-1688401",
                'email' => "peDNVXLZhD@HmMP.com",
                'external_id' => "Pl8jvZE0kmWyBR",
                'private_money_ids' => ["c8ce0eee-cb1f-4898-9ea1-85a193fcad76", "b751f21b-bff4-485e-bd63-d40f222cfdaf", "7e30a252-fb13-4468-af7d-f5c1b10384e6", "ce82faf9-b166-4cd0-9b1a-d705e9f25e76", "8e421271-e7e2-4d67-a21b-d3c08d01636b"],
                'can_topup_private_money_ids' => ["f5f408fb-03e7-443e-9612-fe7980d0fa02", "ab16cd98-e41e-4545-be42-f6a5b33fea5c"],
                'status' => "disabled"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "0d940d78-a233-4878-8222-358bd8e2c81a",
            [
                'postal_code' => "8088324",
                'address' => "p5fON6g3h5b1QYmVCtk78JxdSgtNZkgpDcQrvPvYu9rBGsdWvnLspaw0X1BOuUcrgAIrlVAxUxxoJ3m2cOYFN3fJYwkLiuasNI3TQ4Ubb8U4LoGEUFzMVQ4l9WdfwN1GBXrbSDIYZlYLO",
                'tel' => "035-2258250",
                'email' => "E243Lt7Q0C@kQGl.com",
                'external_id' => "HLmFUomkHrvNClWFSWTgMn5wd60p6qorRSF",
                'private_money_ids' => ["c569b84e-fada-4dc1-9480-4bed550859e8", "dd6248f1-3094-4c6f-9826-e49c3f15a22b", "6fb99657-5581-42ed-a69c-b2059f4d1c40", "3bdf5e9f-7851-4f2a-bfe2-0f138dc93701", "a17b9754-a830-4c20-80ad-f63942b6983d", "7fdeeecc-f89b-49f0-9d36-94b6f08a3235", "dabebe2b-5572-4e9c-a77b-81061c456fdc", "c9f8d797-b4b0-4e5b-9505-14645590d6ff", "7e5d6837-1684-46e5-bcbd-cdaf500f5347"],
                'can_topup_private_money_ids' => ["e676e954-a774-4889-896b-c7ecb4cd628e", "40b0e910-31a1-4ceb-99a7-b8c62235397d", "206d4bd4-0bcf-4729-b74f-8ca2dbbc8024", "537467ca-f309-491e-a5b9-c292f1395264", "c2533fd3-17c5-494f-8792-e57e0b4dfbde", "ad00bd7c-ed41-4d4c-8e91-9db8d5b1f053", "d743ba7c-8add-492e-995c-d3aa8d288ade", "a54380b7-027a-46aa-a8b1-9bcb95da72a1", "3591d246-b482-4e22-bf6f-39f23722fedb"],
                'status' => "disabled"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateShop9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateShop(
            "0d940d78-a233-4878-8222-358bd8e2c81a",
            [
                'name' => "Qgwx8oosJL",
                'postal_code' => "5218796",
                'address' => "XMpZGMSz7kvOMHYRjzAZw05Ty0nenwzHOaIVwMTjPFMGevwVMeZt8EqIvyxvlj5KalqxA7HuqvdSNveWzWI5L6stQvZvRJLln3CmVmPz2bcH2xVBHTbiOHYbzW7EYCf76ToHcl8dtzcqD6rqwGDVRdojGjigHpZl8InHQBhMIrdZJ",
                'tel' => "08-817-763",
                'email' => "ElkSct56tB@3QvY.com",
                'external_id' => "y8mUgDyXQYOSshpGMC",
                'private_money_ids' => ["a7c4cdb1-d8b0-443c-9be6-b7c124258720", "be6f61f0-760b-4215-a399-d1a04825f44b", "3da1468b-f9a9-4f6a-ad22-3f1433e6eac2", "8da320a5-4dc8-41fc-ae2c-fdc153068fed", "29b7b364-546c-45cb-bf91-2a69c11e435c"],
                'can_topup_private_money_ids' => ["9157551d-f66a-4c82-88b9-7cca2d082371", "3a6d0569-4efb-4f16-bc02-5622571c1f61", "bb680fa0-61ee-4a0c-8914-14aab04c775c", "a1bc5a7e-c500-4a0c-bc05-7cb84509ce25", "5910bbc6-ba89-46f1-8958-e5f16a7adafa"],
                'status' => "disabled"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
