<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "8b4e383e-9111-42d8-8b79-b97f894f9f84",
            "ea8ae27d-f4bd-4960-a8a8-9cff4726ec90",
            "a2198f27-3357-441e-91d9-dfe46732aa93",
            109
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "8b4e383e-9111-42d8-8b79-b97f894f9f84",
            "ea8ae27d-f4bd-4960-a8a8-9cff4726ec90",
            "a2198f27-3357-441e-91d9-dfe46732aa93",
            109,
            [
                'request_id' => "b14d8bdc-e501-4906-892e-5c944cfd12a1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "8b4e383e-9111-42d8-8b79-b97f894f9f84",
            "ea8ae27d-f4bd-4960-a8a8-9cff4726ec90",
            "a2198f27-3357-441e-91d9-dfe46732aa93",
            109,
            [
                'description' => "HfSBBKI1KQl4cK6HLesoN7AsxjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSF",
                'request_id' => "cd47278a-4595-4ff9-a381-8a4ea02a779c"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
