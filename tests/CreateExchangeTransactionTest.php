<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "26ab2eaa-fc16-4cd8-b07f-5a99f558e5a2",
            "e9a63f61-f95c-426c-bb68-d7941bbc5b7d",
            "da714e10-cadf-4bf7-a0af-6735387ade05",
            9974
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "26ab2eaa-fc16-4cd8-b07f-5a99f558e5a2",
            "e9a63f61-f95c-426c-bb68-d7941bbc5b7d",
            "da714e10-cadf-4bf7-a0af-6735387ade05",
            9974,
            [
                'request_id' => "3fa2e6f0-7c4f-4b2b-9314-0f878dd01561"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "26ab2eaa-fc16-4cd8-b07f-5a99f558e5a2",
            "e9a63f61-f95c-426c-bb68-d7941bbc5b7d",
            "da714e10-cadf-4bf7-a0af-6735387ade05",
            9974,
            [
                'description' => "etup",
                'request_id' => "31174ae9-45cc-4407-a24a-b547ffbce94b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
