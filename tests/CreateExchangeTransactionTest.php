<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "9e705acd-df2a-40c9-8599-a694036c02a4",
            "aee3d4cb-0f89-42b2-8420-e53a3d2ffcdf",
            "ddd65d6b-7b23-4628-a212-cbbbe16cd65f",
            130
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "9e705acd-df2a-40c9-8599-a694036c02a4",
            "aee3d4cb-0f89-42b2-8420-e53a3d2ffcdf",
            "ddd65d6b-7b23-4628-a212-cbbbe16cd65f",
            130,
            [
                'request_id' => "381d1aec-d516-45d3-bbec-800ccbb332a5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "9e705acd-df2a-40c9-8599-a694036c02a4",
            "aee3d4cb-0f89-42b2-8420-e53a3d2ffcdf",
            "ddd65d6b-7b23-4628-a212-cbbbe16cd65f",
            130,
            [
                'description' => "ZCRRyNsbPdvrQch7pIdXl3efh",
                'request_id' => "8c6a106d-d5ca-4070-a461-9b14cb3e3b75"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
