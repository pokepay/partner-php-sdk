<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "a3a3a397-2b0a-4fdf-962b-b65524f446a7",
            "451fb425-d1a1-4343-93da-4b8d5acb45a3",
            "aba0c4bc-8956-4382-a45f-5434bc75ede3",
            3570.0
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "a3a3a397-2b0a-4fdf-962b-b65524f446a7",
            "451fb425-d1a1-4343-93da-4b8d5acb45a3",
            "aba0c4bc-8956-4382-a45f-5434bc75ede3",
            3570.0,
            [
                'request_id' => "4d70948e-0eee-4106-8e8d-bc6649c47b53"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "a3a3a397-2b0a-4fdf-962b-b65524f446a7",
            "451fb425-d1a1-4343-93da-4b8d5acb45a3",
            "aba0c4bc-8956-4382-a45f-5434bc75ede3",
            3570.0,
            [
                'description' => "RiXLw6IXxof4N3bX72yEerLNEKMYsRf9vriYiP8HndtLKgFWIeB413C8zcpa0a0",
                'request_id' => "2b803869-f1aa-4ebc-b0f5-daad85ca0acc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
