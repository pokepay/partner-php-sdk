<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "0be2928e-c4d1-4475-870b-6b3ce73cf57f",
            "29a2963b-d109-4587-9494-d531b4d31dae",
            "0af0e039-05b8-490e-af0b-3c3ec707c134",
            4324
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "0be2928e-c4d1-4475-870b-6b3ce73cf57f",
            "29a2963b-d109-4587-9494-d531b4d31dae",
            "0af0e039-05b8-490e-af0b-3c3ec707c134",
            4324,
            [
                'request_id' => "5b8c1045-7438-4e79-a58e-622e5cfa8838"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "0be2928e-c4d1-4475-870b-6b3ce73cf57f",
            "29a2963b-d109-4587-9494-d531b4d31dae",
            "0af0e039-05b8-490e-af0b-3c3ec707c134",
            4324,
            [
                'description' => "xiCptr",
                'request_id' => "a3a15640-677e-4e99-b82b-e8a868cdd958"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
