<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "06a5d2f3-24ff-4667-bc8c-65ce1140d986",
            "da109100-e2fa-4783-9783-8f2f87ea64e6",
            "f970404d-f9bd-4e3e-8b56-45d980d67ece",
            6534
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "06a5d2f3-24ff-4667-bc8c-65ce1140d986",
            "da109100-e2fa-4783-9783-8f2f87ea64e6",
            "f970404d-f9bd-4e3e-8b56-45d980d67ece",
            6534,
            [
                'request_id' => "367806f4-330f-45a5-9195-2ba133f57846"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "06a5d2f3-24ff-4667-bc8c-65ce1140d986",
            "da109100-e2fa-4783-9783-8f2f87ea64e6",
            "f970404d-f9bd-4e3e-8b56-45d980d67ece",
            6534,
            [
                'description' => "ORiCKaN1GSBkTmsnETZgON7wI25X",
                'request_id' => "87cb461b-ae44-4a7e-b4cc-0117b77b58c4"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
