<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "98a442a3-312c-492a-9fd5-c763b100611b",
            "edb6b66d-8f03-49ad-8c10-70f333c32ed7",
            "48a13a0e-9242-4854-bb09-b466ad6bdfb3",
            4411.0
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "98a442a3-312c-492a-9fd5-c763b100611b",
            "edb6b66d-8f03-49ad-8c10-70f333c32ed7",
            "48a13a0e-9242-4854-bb09-b466ad6bdfb3",
            4411.0,
            [
                'request_id' => "473e070e-a1e6-4467-8c88-5408de0e9a56"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "98a442a3-312c-492a-9fd5-c763b100611b",
            "edb6b66d-8f03-49ad-8c10-70f333c32ed7",
            "48a13a0e-9242-4854-bb09-b466ad6bdfb3",
            4411.0,
            [
                'description' => "lOhNoRUioebBno3HZhnyNZ5Q77U04aLs4hmy4C28WnCRfz2leovb1R7O6QOgboW2zpcaLxa2QZma6CR",
                'request_id' => "4ee1cfef-643a-49b8-91ee-f1f9375b689a"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
