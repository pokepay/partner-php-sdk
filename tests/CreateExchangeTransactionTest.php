<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "a7ce657c-f8cb-4268-8818-8608d66e6829",
            "d3cbb6bd-cd61-4670-9a94-e9d5b5d6786c",
            "6f0de247-eccb-4836-ae41-12e4f3c645be",
            5311
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "a7ce657c-f8cb-4268-8818-8608d66e6829",
            "d3cbb6bd-cd61-4670-9a94-e9d5b5d6786c",
            "6f0de247-eccb-4836-ae41-12e4f3c645be",
            5311,
            [
                'request_id' => "35f081db-78d6-4a53-a675-5411ed447d22"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "a7ce657c-f8cb-4268-8818-8608d66e6829",
            "d3cbb6bd-cd61-4670-9a94-e9d5b5d6786c",
            "6f0de247-eccb-4836-ae41-12e4f3c645be",
            5311,
            [
                'description' => "NRvkQDqQyfbYx3gZkoJmFbE7IwGQAXumt4TYBnTYocgLaCvNLdfQm2C877PZfFXFvMCPfX4FUbJ7Z0wLyp",
                'request_id' => "dc5bfc98-f6e1-4caf-a6cc-58b0b58e92f5"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
