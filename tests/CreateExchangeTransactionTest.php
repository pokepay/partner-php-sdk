<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "832b55cb-dc90-46d1-ac8d-0fb44328a863",
            "6b9cd14b-99a9-4b9d-b699-6cc8d413844c",
            "d78c71dc-2ea6-45e5-b393-14ef4aa76aa3",
            7119
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "832b55cb-dc90-46d1-ac8d-0fb44328a863",
            "6b9cd14b-99a9-4b9d-b699-6cc8d413844c",
            "d78c71dc-2ea6-45e5-b393-14ef4aa76aa3",
            7119,
            [
                'request_id' => "1b5df037-569f-4d41-870e-c6f3d935f829"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "832b55cb-dc90-46d1-ac8d-0fb44328a863",
            "6b9cd14b-99a9-4b9d-b699-6cc8d413844c",
            "d78c71dc-2ea6-45e5-b393-14ef4aa76aa3",
            7119,
            [
                'description' => "xjaX4bkzoW5SSzFCKjOEE829PJZq44v95w5OTBAsM3ixdWcd35lzGg9k8zX5Zx6rdzZ6Kiw60EKpO7FL05ARSiRG2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNto",
                'request_id' => "ca208929-ae70-4cf1-893f-8fbf31547cbb"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
