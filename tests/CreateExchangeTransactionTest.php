<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "32aef0ff-68fb-4644-b824-3e08796d7e18",
            "e4a07bb3-60c6-44fd-adc4-0214212eafb9",
            "31f6216b-0e25-43e2-a2c0-181429bcf9ec",
            9000
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "32aef0ff-68fb-4644-b824-3e08796d7e18",
            "e4a07bb3-60c6-44fd-adc4-0214212eafb9",
            "31f6216b-0e25-43e2-a2c0-181429bcf9ec",
            9000,
            [
                'request_id' => "0587471e-13fb-4f11-a928-1eab8b91bab1"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "32aef0ff-68fb-4644-b824-3e08796d7e18",
            "e4a07bb3-60c6-44fd-adc4-0214212eafb9",
            "31f6216b-0e25-43e2-a2c0-181429bcf9ec",
            9000,
            [
                'description' => "vOnH69EFivIjA6JEHCCuKlnfNVTWFTkh4YZxFDhr8QjYlB42oGAhylpmFOwCdKPABZdrgh98RslDBuoJSIFUrTRne91u8Km",
                'request_id' => "e93949cf-e08a-46ce-bbd9-55031442dcd8"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
