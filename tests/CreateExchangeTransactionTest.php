<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "2df96e05-c4ef-4609-b272-dcee06be2890",
            "65f345a4-de4f-4aea-b8ef-e6dc00d81a23",
            "dc950c45-0257-4b8a-a2bc-6351e916fbba",
            4372
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "2df96e05-c4ef-4609-b272-dcee06be2890",
            "65f345a4-de4f-4aea-b8ef-e6dc00d81a23",
            "dc950c45-0257-4b8a-a2bc-6351e916fbba",
            4372,
            [
                'request_id' => "e6e0ac52-7331-4bfb-8676-3dd217cb1494"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "2df96e05-c4ef-4609-b272-dcee06be2890",
            "65f345a4-de4f-4aea-b8ef-e6dc00d81a23",
            "dc950c45-0257-4b8a-a2bc-6351e916fbba",
            4372,
            [
                'description' => "IpF3iscpM6ShIlShkrTtyevSXNjtGlfE",
                'request_id' => "50753507-37cd-4f5f-92f3-283e5dcbf95d"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
