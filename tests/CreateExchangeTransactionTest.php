<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "6e43f5c0-81d5-4843-bdc6-a0406f4e9ec3",
            "a8e3786f-0ebc-4a5c-9de1-76a777ec396f",
            "be70ceaf-9af6-4d8a-bc05-e98175b44bd1",
            5246
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "6e43f5c0-81d5-4843-bdc6-a0406f4e9ec3",
            "a8e3786f-0ebc-4a5c-9de1-76a777ec396f",
            "be70ceaf-9af6-4d8a-bc05-e98175b44bd1",
            5246,
            [
                'request_id' => "39820c8a-4878-4f84-bf44-afab68572d1b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "6e43f5c0-81d5-4843-bdc6-a0406f4e9ec3",
            "a8e3786f-0ebc-4a5c-9de1-76a777ec396f",
            "be70ceaf-9af6-4d8a-bc05-e98175b44bd1",
            5246,
            [
                'description' => "4o0ZdH18Q2s8RFQcVxzWFcTyfYycRLL3VkM8CYRcIoW48BeEtUf9D3NR18DRKlyDALg2AnvuH0sSwo7eP4o8HJkAOfsEVAjCZ9sEs1IsQvrLVj4c4",
                'request_id' => "81a3f9d6-7102-4fd8-86ad-bf569dfb3c58"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
