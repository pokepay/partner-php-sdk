<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "a5067d30-2da2-404b-aff3-21cbbfe23a51",
            "82b59381-c73f-45ea-ae62-1e2d716d363c",
            "196f5c49-dd46-4df0-aca5-e91d91973ac4",
            4705
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "a5067d30-2da2-404b-aff3-21cbbfe23a51",
            "82b59381-c73f-45ea-ae62-1e2d716d363c",
            "196f5c49-dd46-4df0-aca5-e91d91973ac4",
            4705,
            [
                'request_id' => "3c302ccc-2e5f-44a0-99e2-eccd842d3d3b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "a5067d30-2da2-404b-aff3-21cbbfe23a51",
            "82b59381-c73f-45ea-ae62-1e2d716d363c",
            "196f5c49-dd46-4df0-aca5-e91d91973ac4",
            4705,
            [
                'description' => "Mvlh9JCT1xGcQLRIyKzcfWhCzi1Z89pSvPCqCpyLyZq",
                'request_id' => "009743b5-a7fd-4c30-a691-3510e5264873"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
