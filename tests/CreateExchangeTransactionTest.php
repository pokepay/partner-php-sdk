<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "20b64fab-07cb-4869-b736-77309ace2f45",
            "7760bacb-448b-498e-b0cf-e1a7d8d57bb7",
            "1581d02e-d446-49dd-9ccc-47304c371c1c",
            4278
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "20b64fab-07cb-4869-b736-77309ace2f45",
            "7760bacb-448b-498e-b0cf-e1a7d8d57bb7",
            "1581d02e-d446-49dd-9ccc-47304c371c1c",
            4278,
            [
                'request_id' => "2d65e7db-21c1-49d2-9916-3e538fbebde9"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "20b64fab-07cb-4869-b736-77309ace2f45",
            "7760bacb-448b-498e-b0cf-e1a7d8d57bb7",
            "1581d02e-d446-49dd-9ccc-47304c371c1c",
            4278,
            [
                'description' => "G2UPRPUxcw9rvtxOfCP20hUm1E2Nlz5V1CO5TSFyNtopqI6bCrDgQTiBz8hopleWuv10dzqDmxXKufPIjjJ",
                'request_id' => "21073e70-f299-4d1a-ba1e-51d357a1b62e"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
