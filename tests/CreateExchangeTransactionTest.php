<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "e828f21f-4f5a-413f-9965-6be951376129",
            "471a0a6b-cb3c-4207-83b5-9efea7723b71",
            "b27e32aa-9d77-4b32-b182-ad18c841dc56",
            1360
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "e828f21f-4f5a-413f-9965-6be951376129",
            "471a0a6b-cb3c-4207-83b5-9efea7723b71",
            "b27e32aa-9d77-4b32-b182-ad18c841dc56",
            1360,
            [
                'request_id' => "137a30c4-86fd-4137-9f6c-da198823684a"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "e828f21f-4f5a-413f-9965-6be951376129",
            "471a0a6b-cb3c-4207-83b5-9efea7723b71",
            "b27e32aa-9d77-4b32-b182-ad18c841dc56",
            1360,
            [
                'description' => "woEqJ4uimGtF4vDevDABo",
                'request_id' => "b13e6a2e-a2fe-49fb-969a-2e31e143229b"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
