<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "68adbec6-70f4-417b-9ea8-12f135978ce8",
            "b0b1ea5d-e85f-47a4-8d4c-419c118ccb79",
            "c773cfb1-2f66-4d9f-a724-32ded2ed6453",
            8353
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "68adbec6-70f4-417b-9ea8-12f135978ce8",
            "b0b1ea5d-e85f-47a4-8d4c-419c118ccb79",
            "c773cfb1-2f66-4d9f-a724-32ded2ed6453",
            8353,
            [
                'request_id' => "8b7475f2-a2cf-4e83-bba7-dd1156c02207"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "68adbec6-70f4-417b-9ea8-12f135978ce8",
            "b0b1ea5d-e85f-47a4-8d4c-419c118ccb79",
            "c773cfb1-2f66-4d9f-a724-32ded2ed6453",
            8353,
            [
                'description' => "ZfnZ2mwTeB7HbtOFrcDL7mosyloW0gLyNig5qU77",
                'request_id' => "85b1c0b1-2b7d-46d3-bc59-e0ba00d65777"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
