<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateExchangeTransaction extends TestCase
{
    public function testCreateExchangeTransaction0()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "9970c06f-9a54-404c-a7b0-d2da68f43768",
            "7f48bb10-51a0-4730-b8b2-ccf2cf6bb4d3",
            "0bfa6305-65d5-420d-ad23-9e67fdbbbe0a",
            6475
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction1()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "9970c06f-9a54-404c-a7b0-d2da68f43768",
            "7f48bb10-51a0-4730-b8b2-ccf2cf6bb4d3",
            "0bfa6305-65d5-420d-ad23-9e67fdbbbe0a",
            6475,
            [
                'request_id' => "3c6f889b-432e-4e67-9b87-79ecd721802e"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateExchangeTransaction2()
    {
        $client = $this->newClient();
        $request = new Request\CreateExchangeTransaction(
            "9970c06f-9a54-404c-a7b0-d2da68f43768",
            "7f48bb10-51a0-4730-b8b2-ccf2cf6bb4d3",
            "0bfa6305-65d5-420d-ad23-9e67fdbbbe0a",
            6475,
            [
                'description' => "tXUvopMAE6nKVgCC79b4Ei190OQ71CLczodkHUHlo8",
                'request_id' => "dcc5bad5-96e9-453d-9f1e-e9c4becfec56"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
