<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateBill extends TestCase
{
    public function testCreateBill0()
    {
        $client = $this->newClient();
        $request = new Request\CreateBill(
            "0c713354-c78c-4e7c-9a93-bcdc32aa3bd5",
            "460688ba-b35d-4d0f-af63-7640929518b5"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateBill1()
    {
        $client = $this->newClient();
        $request = new Request\CreateBill(
            "0c713354-c78c-4e7c-9a93-bcdc32aa3bd5",
            "460688ba-b35d-4d0f-af63-7640929518b5",
            [
                'description' => "HWI6lY3NxA2Qq6LVyn2dOGJj5BoyL1MgjctfisLuYo4aorOwFrhmbs26EDkzDLnAr7NHvMDZLOk3Kn6N9IKA2DQ0UDl0RkGXqQRpkGArTGUPugetKJLdESdgB4DMlPhuAgx6J23S5a4KJH2dJnXOeAy8xYgmSSWd6nFdHza9f0TF30iljDxgS"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateBill2()
    {
        $client = $this->newClient();
        $request = new Request\CreateBill(
            "0c713354-c78c-4e7c-9a93-bcdc32aa3bd5",
            "460688ba-b35d-4d0f-af63-7640929518b5",
            [
                'amount' => 8640.0,
                'description' => "pyfoekUtYXnQ6dyRqDXbojqilSXXfgL13rI1kMYSkzLYWcqyBEPqq6jXoMPoI5dYhtAEAC8MN1MIRbysguh0xXqdkQK8VGfHRzulBqoPAVuBC2EUluqb81O3ZagKE8LcCa8bz2nHShe5EoHVudmx1iMacSt3whWHQ5cbR62EyfrAyRxoXmZ8au8D4esSHy55W"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
