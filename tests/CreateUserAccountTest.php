<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateUserAccount extends TestCase
{
    public function testCreateUserAccount0()
    {
        $client = $this->newClient();
        $request = new Request\CreateUserAccount(
            "1cca797a-a4ae-4807-a9ad-4bab80f00988",
            "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateUserAccount1()
    {
        $client = $this->newClient();
        $request = new Request\CreateUserAccount(
            "1cca797a-a4ae-4807-a9ad-4bab80f00988",
            "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
            [
                'external_id' => "FBMnn24Y00BddIYIaGsnHTfyj3vGhpYs6lE3PVx"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateUserAccount2()
    {
        $client = $this->newClient();
        $request = new Request\CreateUserAccount(
            "1cca797a-a4ae-4807-a9ad-4bab80f00988",
            "a7de9f4c-0cba-468f-80c5-ac4cef1a2e6d",
            [
                'name' => "hCRcEAVa4JmfjoJZ9ajsO39BqxPDSP5BpfA0dYcuMmHpa4aDHWm32hBFhI0DxRhz83lKq4Wp1hKlNvpHM0s7Dd9Uu6qWqC0qUtLag9adxARTcCtKjz1M2kusM3cVDMOGMtpxWNvKR6Gcp6PWCiNymBaUIu6lQIyVNDYRttS46oTXBYnbHbMuAdnXANiixumuncg7egxc7L05i8jkZ1Waa",
                'external_id' => "h6AAgB9jXehhbgs"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
