<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreatePaymentTransactionWithBill extends TestCase
{
    public function testCreatePaymentTransactionWithBill0()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransactionWithBill(
            "05c27c83-161f-495a-aaf3-9027f8a00157",
            "5fc53b74-229f-40ba-9ed9-cab10690c928"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransactionWithBill1()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransactionWithBill(
            "05c27c83-161f-495a-aaf3-9027f8a00157",
            "5fc53b74-229f-40ba-9ed9-cab10690c928",
            [
                'strategy' => "money-only"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransactionWithBill2()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransactionWithBill(
            "05c27c83-161f-495a-aaf3-9027f8a00157",
            "5fc53b74-229f-40ba-9ed9-cab10690c928",
            [
                'request_id' => "0b232386-c58b-4857-a92a-0c5cc8f09147",
                'strategy' => "point-preferred"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreatePaymentTransactionWithBill3()
    {
        $client = $this->newClient();
        $request = new Request\CreatePaymentTransactionWithBill(
            "05c27c83-161f-495a-aaf3-9027f8a00157",
            "5fc53b74-229f-40ba-9ed9-cab10690c928",
            [
                'metadata' => "{\"key\":\"value\"}",
                'request_id' => "3e1ce7f5-88ff-44bf-a263-40aea121a8e6",
                'strategy' => "money-only"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
