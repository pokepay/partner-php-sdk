<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCampaign extends TestCase
{
    public function testCreateCampaign0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'budget_caps_amount' => 43757898
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1499908736
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'dest_private_money_id' => "ba1854e1-93bb-4c29-b46d-2752c847edd8",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 278306817
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'max_total_point_amount' => 9185,
                'dest_private_money_id' => "1e019af6-079a-4149-a257-86111c15efa5",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 199902523
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'max_point_amount' => 1102,
                'max_total_point_amount' => 4556,
                'dest_private_money_id' => "a356b537-4dd6-4ca6-9028-a31ce24e1584",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1274551840
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 8670,
                'max_total_point_amount' => 4918,
                'dest_private_money_id' => "a5eca80a-af0a-45eb-9521-eb7a80a257af",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1477170522
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'minimum_number_for_combination_purchase' => 6489,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 9855,
                'max_total_point_amount' => 168,
                'dest_private_money_id' => "19c30652-2df5-44a2-b505-07fe25998682",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 725092631
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'applicable_shop_ids' => ["0b995df7-e223-4a88-8f34-112cc89908ff", "4e1133bc-e5a5-4999-92ba-d615a61a75ac", "31001a6f-3ca6-405d-8fd1-3ccdc3bf2ab3", "9f3f722d-2cde-48dd-adc7-46a8d7b1f968", "c98f59a6-153e-492e-afe1-0fa557f6f6ef"],
                'minimum_number_for_combination_purchase' => 1120,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 1663,
                'max_total_point_amount' => 8800,
                'dest_private_money_id' => "b29c6d0a-044b-4f3f-b43c-be26ea4c741b",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1246544777
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["eacdbcdc-bc4f-4411-b8b3-d243bc411cc9", "8e110b94-f149-4d26-b194-6fee071d4454"],
                'minimum_number_for_combination_purchase' => 715,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 8259,
                'max_total_point_amount' => 4489,
                'dest_private_money_id' => "1466a9e9-e97c-4eb1-b540-a71bb7b60b86",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 820530057
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'applicable_days_of_week' => [4, 6, 0],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["1e548fdb-5ef8-40fc-a05e-70182649dea4", "023b3ca0-145e-4b89-9a43-561bc3dd3ed2", "f2781946-2eed-4462-b04a-43f3b79ebeaa", "ce095d3e-c2cf-48dc-8699-43d0501779a6", "328f2f95-3bb0-4ec6-bec2-117eab295379", "96cccee0-a6cc-4e23-a9d9-f06bc32dfbf7", "6951dbd9-e9c6-4368-b478-3725c62b38ce", "80b38bfe-3f45-46a4-8034-a60d516b4ef2"],
                'minimum_number_for_combination_purchase' => 7183,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 9262,
                'max_total_point_amount' => 225,
                'dest_private_money_id' => "d237c89f-b8c9-44cc-bede-7b5e62ec7352",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 48551292
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [6, 0, 4, 6, 2, 4, 5],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["93f975c7-7f07-437e-b76c-04f137e393c3", "917e6bc8-a37d-4313-b95f-bea35a31c82e", "2f89f4a7-8a2d-4672-bb47-484f06313b62", "d07cab5f-5903-4055-a6fe-1922a9db6081", "50c1524a-0126-438c-ba8c-2f7e8b07d169", "3c1f2fb4-307f-4cf9-89d9-cf2e0f151046", "3bb2c71a-1bfd-435f-a950-4842e2a8aa24", "51fba118-55ad-48a5-b827-4dc2b85e5249", "6f201eb9-da08-45f1-ad88-17d0e2d0c6fc", "371c60b6-b5eb-4c0c-b977-d441b06c82fb"],
                'minimum_number_for_combination_purchase' => 1163,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 158,
                'max_total_point_amount' => 568,
                'dest_private_money_id' => "6514971c-b7f0-4766-a742-1d33efbe0cbe",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 914717078
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [5, 4, 4, 6],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["aa8d1e0b-7389-4545-990e-8ed741546e9d", "c42b6374-c849-4fad-bded-6968c4c2f2c8", "08045246-5f79-4fad-82cd-2784161fdf44", "0c068f3c-3052-493d-ab5a-9649b7159f66", "0dadf501-8a80-4add-90a6-5f7984287290", "5ea3c9f2-1927-40b8-a2af-5ab1172dfc9a"],
                'minimum_number_for_combination_purchase' => 3586,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 2760,
                'max_total_point_amount' => 967,
                'dest_private_money_id' => "83d3ef2f-7403-45c2-addd-d53fa52c5304",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 415707908
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [1, 1, 3, 4, 3, 2, 5, 1, 5, 4],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["2dccbc21-57f6-4c4c-898c-8355b61ad5e2", "0f3e6290-7e4f-49a9-834b-ae1c66bdc5b6", "ddad4cdc-2cca-4e1e-b14e-b98b13881e45", "ef163202-454e-4873-aab1-c8b39ef6b5fb", "19db9c8f-7ad0-4e9b-8aa0-7cfbab6240d0", "3fc2c1de-706a-4ca0-abf1-e8c7bb5b6599", "716591dc-c800-4c01-a565-1fc43e512e08", "3d0af63b-a20b-4013-928d-bdf6431a32e3"],
                'minimum_number_for_combination_purchase' => 3606,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 9784,
                'max_total_point_amount' => 3919,
                'dest_private_money_id' => "e71eff0c-df62-4eb6-b78c-da0002d8cd93",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1282906861
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [1, 3, 2, 1, 0],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["3e0141e7-097b-4b33-9fd5-d0d8b5359c0a", "b873d76d-0ea8-42b5-9c9d-f7fdee5d65d7"],
                'minimum_number_for_combination_purchase' => 3536,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 9927,
                'max_total_point_amount' => 2461,
                'dest_private_money_id' => "4b195317-4a5e-42f7-a76a-46ee4a6f994f",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 860010538
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'point_expires_in_days' => 7056,
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [4, 1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["9e1d750b-3bd7-421d-bdb6-e6f17b217580", "fd3ec34a-0278-429b-a39a-dcbca06fa37d", "d5f4f7b9-d8f5-4a2e-af13-dbb1c340d3bc", "007eb24b-b0d1-47c7-9328-961f11bd1f9b"],
                'minimum_number_for_combination_purchase' => 4317,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 9351,
                'max_total_point_amount' => 6432,
                'dest_private_money_id' => "510669c4-017f-4f29-bd36-9251715a479b",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1578612801
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'point_expires_at' => "2023-05-29T11:06:52.000000+09:00",
                'point_expires_in_days' => 4126,
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [5, 6, 2, 4, 5, 1, 1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["5c850e41-4868-40dd-ba7f-abb6f08c4e4a", "ca648b29-3b14-4acc-a244-5033c861ce11", "f0dfe00b-e7d9-43fe-a918-3bc4513a7f26", "d72efa0b-2c7e-4da9-b622-dcfce6dcd6e3", "de9cd20e-d6e0-4c35-9517-b4c6afd93317", "6b5948d1-325c-4bcf-a9d4-02161544e9ab"],
                'minimum_number_for_combination_purchase' => 6631,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 1651,
                'max_total_point_amount' => 5993,
                'dest_private_money_id' => "63f0c0ec-68eb-44a6-bfb1-ccb60df40f58",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1346106989
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'status' => "disabled",
                'point_expires_at' => "2022-03-06T23:01:46.000000+09:00",
                'point_expires_in_days' => 2419,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [1, 0, 2, 2, 5, 5],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["fd2e87f1-66fe-4c66-be21-5003e99f3dea", "5b5d4980-3672-458b-aef2-89dd851f007b", "f30bcd9f-292d-4522-a516-0139a7b39dc1", "7862ec76-18ca-42fc-99ab-cf4179787ab9", "8acd4f0d-211b-4bd7-aa93-c54f9111306a", "bb086e80-0b92-4d0e-b676-27d9c387f79d", "2a9170a6-ee17-43a2-822c-ef448cedcc4f", "c240817d-325f-40b5-9aa1-9134f7293866", "4f452b1f-3be9-4a03-9901-7701cbdab2f7"],
                'minimum_number_for_combination_purchase' => 7425,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 2520,
                'max_total_point_amount' => 8633,
                'dest_private_money_id' => "204bc34a-b856-430c-81c2-b9c9200f59c8",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 623225901
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'description' => "v1AcdiYIqm3y26VEJis0uSWY766tXpIDjm5PcwTGVB6U69mRLECUkaT6kz5F4VjFgWrHjEA4tqyiFKKWLn8si1ZYY4cSRvRpzrsrggVlZBqhYZR5d98E89yhrudSEoeeTdxasPrdMrgNsIZBwBBddyeYBXrdS3aoJxfTXDUFnTdqffrsLQTmoMIdcXWC6VLOAGEnOdh",
                'status' => "disabled",
                'point_expires_at' => "2023-04-26T15:23:37.000000+09:00",
                'point_expires_in_days' => 3938,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [1, 6, 2, 3, 1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["cff10f56-95cc-4752-8fa5-7e39c42e0309", "578c10bc-c672-4a44-9140-e4f04fc693fe", "308eb824-ac9e-42af-8a4e-ad964a8aefb2", "b324d4db-399f-4310-b182-8a6d42ff12bb", "434e27f5-4556-4af9-b1ed-003f27a49e25", "36eabff3-0509-4850-990d-56bb83bde65e", "155359af-f5a9-4952-a47f-f0c90c300269", "c944567b-b740-4424-9391-4e3ff04d22cb", "75172c41-0ce7-4fc2-a945-cc960ac80d7c", "d0987686-df1a-4f3f-a61c-f54cfd8b54ad"],
                'minimum_number_for_combination_purchase' => 2341,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 2638,
                'max_total_point_amount' => 9381,
                'dest_private_money_id' => "d42db143-d04a-4767-a112-7aa08ade4f7b",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 697971455
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "pihUtCbQlcte0DxzJINb7qjLgOzwscL3jLmZMEkfhWyVgQ",
            "82d4c294-9f31-4d3f-a7a6-86969fc51756",
            "2023-12-27T01:46:27.000000+09:00",
            "2020-10-18T07:27:35.000000+09:00",
            832,
            "external-transaction",
            [
                'bear_point_shop_id' => "b6f1cf61-3354-4b1c-a258-9f92efd6ef96",
                'description' => "QTg65oiBjAFOUl7mXgoC4kM5wNGPfd3TNYnUMVq6QpHO67dJ6lRZLt2CUgGkbGh32McJmtmPj1fTaWR6",
                'status' => "disabled",
                'point_expires_at' => "2020-03-26T15:36:41.000000+09:00",
                'point_expires_in_days' => 1541,
                'is_exclusive' => FALSE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [3, 4],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["b59095bf-2ab9-49ef-832f-b1f43292ec1e", "9da11676-7dec-46eb-be0d-d7fb75c0b86a", "a21f3091-e42f-495e-a52b-95868307d0ec", "355b3094-bfc4-4570-940f-dea3f115ea6e", "ab7559b6-c580-45b0-aed8-feba438b3501", "d3ed4eeb-a6f4-44a0-bece-65e8ca91851a", "ca36da33-bcdb-43a8-86d7-059f3587eae3", "d8c2aef4-4b08-48b0-8387-086f810308b7", "b883c589-0f04-48dc-b4de-9894fcc0bb02", "4986a4db-18cd-41df-b18b-969e50f924c7"],
                'minimum_number_for_combination_purchase' => 7609,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 9799,
                'max_total_point_amount' => 5630,
                'dest_private_money_id' => "fde5e707-b10a-4586-909e-9521bd40a59f",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 138725626
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
