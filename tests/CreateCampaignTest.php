<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCampaign extends TestCase
{
    public function testCreateCampaign0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'dest_private_money_id' => "6731fce6-6b1c-40c9-8bea-640a88472ffe",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'max_total_point_amount' => 8604,
                'dest_private_money_id' => "100592ef-d887-469f-b02e-12dc45e5eb1b",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'max_point_amount' => 559,
                'max_total_point_amount' => 7288,
                'dest_private_money_id' => "5a3c92be-70d2-404d-a92d-836f15d42356",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 6979,
                'max_total_point_amount' => 5466,
                'dest_private_money_id' => "e1deb3ba-f1ae-4654-bdd6-68cbb39dddcc",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'minimum_number_for_combination_purchase' => 2029,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 3052,
                'max_total_point_amount' => 3563,
                'dest_private_money_id' => "ef428ff4-53b5-4f0b-a456-8524b63954d1",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'applicable_shop_ids' => ["e7479353-70e6-43e7-9dcb-335815725942", "7229ebb4-4917-46fc-b6b7-62d461051898", "76c94924-9b96-485a-b99d-f1a74e276e01", "dd1d0c9b-94fa-4201-8f31-78dcb101fbf8", "faeded78-b02e-40f8-8698-591599080926", "e5fc49f5-78da-44ac-abed-59489a15edca", "2f03a6d8-7242-42d5-aa22-ee0e8c0abfcd"],
                'minimum_number_for_combination_purchase' => 4174,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 564,
                'max_total_point_amount' => 5433,
                'dest_private_money_id' => "cb3cf527-bf54-48e0-8f3d-3931a5f23a0e",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["f228de9f-d848-48b0-bcd8-30e888bba789", "94db3b66-9a60-4741-8479-03907c6bf0ff", "01d75153-8fff-47cc-8c6c-1e296d3c8933", "d9e5b766-c7bc-489e-a9b7-c30454d9bb2f", "5b503b1b-a64b-431a-9876-6ca488b91dc2", "d419068e-012a-424e-a332-701b7bc98136", "735da238-876d-44b7-b4c9-242697b82129"],
                'minimum_number_for_combination_purchase' => 2629,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 4987,
                'max_total_point_amount' => 5664,
                'dest_private_money_id' => "4d821983-8092-478b-812e-25b53c2b579c",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'applicable_days_of_week' => [3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["35b482df-810d-4ceb-9a39-122243f66fc7", "d257ac6f-c199-4792-9a7a-c7f96047daa4", "ced4d478-4dd6-4cf9-87f5-73d744350fd5", "91053ab1-9a1c-4d76-8507-44a8df97aac0", "47b619ae-bf42-4487-a119-0d43851ab333", "5623f0fa-62c5-4e94-988c-d3f3abe4c6ce", "a1af785f-3ee3-4f2a-8a17-c69efe56569e", "e18cbd42-ca3d-41b2-b943-24af4d905711"],
                'minimum_number_for_combination_purchase' => 6985,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 1861,
                'max_total_point_amount' => 838,
                'dest_private_money_id' => "de5013bf-a3c4-4f95-ae2a-cf79560bc420",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [3, 4, 6, 0, 5],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["d96ababf-2d5a-4be4-bb89-de3437a84c9a", "e74b9ce9-2fa0-40d6-af3b-f78712ac6df5", "cf5e8dbb-326c-464e-b430-19ac71968abb"],
                'minimum_number_for_combination_purchase' => 4316,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 244,
                'max_total_point_amount' => 841,
                'dest_private_money_id' => "dbeca47e-871d-4fb7-b783-158717c0c940",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [4, 1, 3, 1, 6, 4, 5],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["8d026fbb-6517-4dcd-90fc-ec6731396d8b", "8b5c993b-e1f6-45d8-bd82-b06cb4ddfdcc", "c56aca12-f5b8-4404-9dce-58b802fa4c39", "a9a755c2-b8ed-4922-a887-7c2fbc9f515a", "884f96d4-41ff-48a7-b2ce-bb82e3588b9a", "2482b036-9da9-43b4-b883-552a87d7a67d", "a6fb7da2-89ea-4526-856c-1a52106fd921"],
                'minimum_number_for_combination_purchase' => 9752,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 7100,
                'max_total_point_amount' => 5602,
                'dest_private_money_id' => "6fa83e1d-65e8-41c2-a227-747ef4da63c1",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [3, 5, 4, 0, 6],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["0e10eb3c-57e7-477b-8a64-73c5c2765209"],
                'minimum_number_for_combination_purchase' => 7732,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 6762,
                'max_total_point_amount' => 1259,
                'dest_private_money_id' => "cb0d80f9-8dba-4c8b-a3ae-6c0b252353f0",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [1, 4, 6, 0, 1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["38fb106d-a2c6-4f61-a958-14624915fa93", "497455f6-8b5a-4d04-8928-62255da96f0c", "12b8fe11-ebfb-4b49-8eb6-7ae9ba274c69", "6f1f9cd4-ceb0-490f-813d-ef2c59d7dc98"],
                'minimum_number_for_combination_purchase' => 5594,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 9429,
                'max_total_point_amount' => 1505,
                'dest_private_money_id' => "8d7babca-60ac-417b-9a8e-ee326091c498",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'point_expires_in_days' => 8243,
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [4, 0, 5, 4, 5],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["ec28276c-4455-4c5b-a914-fde2011fe437"],
                'minimum_number_for_combination_purchase' => 4032,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 8913,
                'max_total_point_amount' => 2540,
                'dest_private_money_id' => "9b81a4e0-8245-4b2b-98b7-b2a61a1688f4",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'point_expires_at' => "2020-07-01T21:12:04.000000+09:00",
                'point_expires_in_days' => 9704,
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [5, 6, 0, 6, 2, 6, 0, 6, 0],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["879832f8-6ede-4548-b1bd-aa79461aeb3d", "8bc99bf9-df25-4b1c-a9c9-f556d3e578a3", "7503a7eb-2953-4739-a89a-1f0fb96338d5", "e41e0230-eb45-417b-be43-4ec91a9810ad", "f54e2a4b-22c6-4c73-a793-73e806b74eb4", "958d37cf-5d18-49b8-977f-74eda346a368", "ea0ef5d6-2e33-4af2-b58c-a25cb5402932"],
                'minimum_number_for_combination_purchase' => 1544,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 712,
                'max_total_point_amount' => 9152,
                'dest_private_money_id' => "23c41549-7d0c-41c2-91fc-befe4f966397",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'status' => "enabled",
                'point_expires_at' => "2020-10-27T04:17:34.000000+09:00",
                'point_expires_in_days' => 3048,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [3, 6, 0, 5, 6, 5, 4, 3, 4, 3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["9c7bcab9-26a5-4917-ba7b-70abe5155282", "8dc90525-2358-4235-99b2-a8b3bd429c12", "e6857361-03b9-43af-a39f-4bb5e82daa3e", "8aba1487-3b4a-47fc-85f1-89c2709fdf7f", "b57cf485-ec6a-45ba-908d-4f1d6093fdb2", "296780ae-9da7-4553-9918-a05856b19aa9", "6b63d90d-998a-4603-ac26-f6072b3c7cfe"],
                'minimum_number_for_combination_purchase' => 1276,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 4166,
                'max_total_point_amount' => 5313,
                'dest_private_money_id' => "cd3a8ad9-0353-4b3b-b2ab-553798d06f73",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'description' => "YVHOTQOc8rnVrquLm8B0c8PpqSnkO9u0FKnuRq3e3KKoq6q3PDRanhmVummV0eLbs1I60AS6MQgynUcNdlweVZDRyvmejhYSnIT0",
                'status' => "enabled",
                'point_expires_at' => "2023-04-25T07:15:14.000000+09:00",
                'point_expires_in_days' => 6084,
                'is_exclusive' => FALSE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [4, 3, 4, 2, 6, 6, 3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["d98aa861-6081-487d-bca1-e1d13266e9d6", "a6eb62d2-435b-4d98-868a-3ca91a5087aa"],
                'minimum_number_for_combination_purchase' => 1067,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 7996,
                'max_total_point_amount' => 2892,
                'dest_private_money_id' => "ba608cb5-4df6-458d-83d2-bc217f833c52",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "X3t9DSdv9TraeqbSkaZsmByWpt5sh4oz7j2zvwSPc",
            "04e964fd-9053-4181-afb0-3de993e5d459",
            "2023-03-28T06:30:42.000000+09:00",
            "2022-03-21T02:37:17.000000+09:00",
            1893,
            "external-transaction",
            [
                'bear_point_shop_id' => "94acb2af-0523-4ff2-a716-88bc7c9bc14e",
                'description' => "wbRWoJ5YGW6CeYYNo01kxeiAgoaKUNXLGSooJBtv9s6np8w69i6FSBwpAOj0GRb8xx8lObg0vv5OtF6MHGS550gtZ5Fa9mUScogZZiygE4BQ7z3A7ibP9CLTB2VDA3tDIgFL0XnsuLvpsNQHN4VxDT7hK65KlzVJB4pNBSkzWxfuxnyD",
                'status' => "enabled",
                'point_expires_at' => "2022-05-10T02:58:15.000000+09:00",
                'point_expires_in_days' => 3274,
                'is_exclusive' => FALSE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [5, 6, 2, 0, 6],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["1c87b970-ec63-4829-b07b-8bc49e698336", "3fe16daf-0679-451b-8ea7-2c9e05cf2d03", "52f0c8c5-9344-402b-8869-b65776bc801f", "f4d9c483-6593-441f-8a81-59db037ab041", "8353b231-b4f8-4b43-8723-9ff2e9ce0398", "a55373b4-7037-414b-82cf-1aa58292dc25"],
                'minimum_number_for_combination_purchase' => 469,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 7675,
                'max_total_point_amount' => 793,
                'dest_private_money_id' => "07f8b169-577b-4a5e-8076-6b7faadb190c",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
