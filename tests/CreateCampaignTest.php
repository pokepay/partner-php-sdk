<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateCampaign extends TestCase
{
    public function testCreateCampaign0()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign1()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'budget_caps_amount' => 1229637636
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign2()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 900921384
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign3()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'dest_private_money_id' => "6de671a7-30e3-420d-b784-67587c68153d",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1624836611
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign4()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'max_total_point_amount' => 8823,
                'dest_private_money_id' => "f1dea725-0629-4e58-9792-e0d35950c4b9",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 224202689
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign5()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'max_point_amount' => 5368,
                'max_total_point_amount' => 3445,
                'dest_private_money_id' => "8b18c426-dad9-46bc-9631-1542f7431013",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1000746270
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign6()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 5092,
                'max_total_point_amount' => 2258,
                'dest_private_money_id' => "11b0c134-f3d2-4ca1-897d-e6c6b8cc3f39",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 21282092
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign7()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'minimum_number_for_combination_purchase' => 668,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 4185,
                'max_total_point_amount' => 1475,
                'dest_private_money_id' => "e3041130-e55f-4882-bf58-18530f710943",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1669405214
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign8()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'applicable_shop_ids' => ["c902ae90-7e0a-4eec-9750-dd7d5fc29415", "8fb2c334-fa53-47bf-b55f-b8000d0a73f3", "0c5ceeb6-cd2a-4c16-b065-2bf2d26a9ce4"],
                'minimum_number_for_combination_purchase' => 6835,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 1394,
                'max_total_point_amount' => 2856,
                'dest_private_money_id' => "df122e84-d0c6-492f-84e8-7216f01d559a",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1045099955
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign9()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["52c16c5c-649f-4e89-9287-90ba90d9e7ba", "56528931-cb2e-4d69-9f87-deed09f4cc31", "9ab44d23-9004-4ad8-85bf-5cbb4213e153"],
                'minimum_number_for_combination_purchase' => 3371,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 3705,
                'max_total_point_amount' => 9947,
                'dest_private_money_id' => "5c13451c-57dc-454b-88d2-417a977812fc",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 68688704
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign10()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'applicable_days_of_week' => [4, 5, 2, 1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["4a556396-9e56-4365-8425-63f22e36abc0", "7eef13fc-a391-48fd-8566-6ff7e3edd40f", "5b32afda-e807-48ec-b7da-d88c0a923126", "4bae97d5-08c5-45ba-911a-86dcd3e6b83b", "77104e96-ce8f-41c6-b23b-6805658e05ef", "72a434c4-5f62-4a9c-b2a1-8a8815cfcb86", "3cb023f9-c62e-4f9c-85f1-7054840e5719", "4587517d-a543-4328-8dd2-e8cb232caa07", "2f87fe0b-d5a0-4132-846b-9963335b16a4"],
                'minimum_number_for_combination_purchase' => 565,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 8537,
                'max_total_point_amount' => 225,
                'dest_private_money_id' => "6b143661-a4ec-49e2-9479-779de52ad322",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 393735680
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign11()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [0, 6, 1, 5, 1, 5, 3, 6, 0, 5],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["c1a0b5a3-d3d9-4207-9b37-18b9b483e39e", "2f503c9a-5e78-45f1-aae7-e913a96d71d2", "90063853-9a56-4b2d-a994-30ada595c441", "21466e3b-a029-4249-87ac-a3e5a71cc046", "0b64b827-6463-4c1e-9ea8-3da66f72ae0b", "95e9ba19-1f30-43c7-a265-0518892f0191", "847ca9d6-7f51-4a1c-abe8-f465bf620510"],
                'minimum_number_for_combination_purchase' => 2303,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 5480,
                'max_total_point_amount' => 4854,
                'dest_private_money_id' => "a6977c65-688a-4ae9-87fd-70992500b2d9",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 201129769
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign12()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [0, 6, 3, 1, 6],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["836d0208-39c8-4cba-a534-f8eb8201c4ad", "380e9dab-60b4-418c-9250-1d6b0aa10794", "f63e5cca-e6a0-45c5-acce-7c0dfe7ee4ed", "0df95488-5533-4a2d-812f-c833df89958d", "333645fb-d908-4035-85d8-f649f37b4edd"],
                'minimum_number_for_combination_purchase' => 789,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 9234,
                'max_total_point_amount' => 6932,
                'dest_private_money_id' => "693f2e95-a256-4866-b35f-dabb335de5cf",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 95986995
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign13()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [0, 1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["5ab71471-eb5e-4a16-9d0d-cd485c85e28b"],
                'minimum_number_for_combination_purchase' => 5078,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 7246,
                'max_total_point_amount' => 4240,
                'dest_private_money_id' => "95223a01-06f1-47d1-879e-6fb83faf7fe5",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 880375132
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign14()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [4, 4, 5, 0, 5, 6],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["a1f1ce15-1545-451d-96d1-4051c7477408", "c6eb0bbc-179c-439c-ae8d-19faac2cd60a", "4d7c8842-1df1-4e06-9241-8a164843991f", "e695795c-9e62-48d3-b415-55bacb4287bf", "60a4c727-5b70-49d3-b1d8-d919f4406b48", "a85c9cf1-2453-4ce3-9823-b77055bba0a4", "831ac2e7-56bf-4011-bf15-d6c5327a68fc", "2637da91-912d-4b1a-99a3-a0315a0862ce"],
                'minimum_number_for_combination_purchase' => 7920,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 4393,
                'max_total_point_amount' => 5939,
                'dest_private_money_id' => "aed3d2a6-4043-459c-babf-bf2e401577ce",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 691933652
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign15()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'point_expires_in_days' => 4997,
                'is_exclusive' => FALSE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [5, 6, 0, 0, 2, 4, 2, 1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["501ffa7f-769f-4f68-a0af-5540e05b57d7", "dd9288c7-a11c-4022-a58c-89108d6ff841", "fd135375-f35e-409b-93eb-8035006052b3", "d3acf420-7065-426c-a42b-f86c489b62dc", "c9f852a6-f0b7-4351-a79e-4cc1b908d655", "709486d5-5140-4895-a9e5-0ab8d4b4d4e9", "bb6da116-796b-4b81-a753-b8a3d142bbb3", "b64c5b1c-3571-4c15-9e88-d078231a9040"],
                'minimum_number_for_combination_purchase' => 9589,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 7779,
                'max_total_point_amount' => 5290,
                'dest_private_money_id' => "15bf0907-f777-4d26-8d46-fcbee85e7b39",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1270356575
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign16()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'point_expires_at' => "2022-02-09T04:24:04.000000+09:00",
                'point_expires_in_days' => 5061,
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [5, 2, 1, 0, 1, 4, 0],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["42d8038f-fe66-4cdd-bc8b-6bb6773f01fa", "af090e6c-b26f-48d1-bd1f-cef199f52433", "4c0775d4-9ef7-4ee3-a777-d95a2c63df7e"],
                'minimum_number_for_combination_purchase' => 5881,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 6743,
                'max_total_point_amount' => 2122,
                'dest_private_money_id' => "63ffefe9-ecb0-4890-aaf9-07292d74dd0b",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 311218036
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign17()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'status' => "disabled",
                'point_expires_at' => "2021-09-16T10:27:52.000000+09:00",
                'point_expires_in_days' => 2313,
                'is_exclusive' => FALSE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [2, 1, 1, 0],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["eff45781-c380-45c4-ad22-9ffb2832fa35", "1cb0a3ec-f9c6-4936-9bd3-c4dee3c2d0c6", "24c79397-fb1a-4394-a88b-22869303d868", "59023aef-8557-49bf-bcb3-402d19611094", "c690ce3a-c697-49ad-9830-b8addf29b439", "e7c68725-8f2b-4904-9631-3e375a60c7d8", "b341ced6-e3f9-456a-93a7-596ebd93ff8a", "05c908b8-d888-4a88-a82c-7fa273bf2dd7", "84fe7713-43f9-46db-9a28-604ebd44dadf"],
                'minimum_number_for_combination_purchase' => 8224,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 605,
                'max_total_point_amount' => 1209,
                'dest_private_money_id' => "b0c23ea3-8b8f-4e83-a4a6-565d6a78fdfe",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 41036120
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign18()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'description' => "Siwv12x5V3Zg5Mao70qi5yBOsKkOBBljUZz6xgHjSVbtnWsFSuVE2YXciCmNYdiUJk8JsznQuZVVvFGTTed2SgFYy35TKVCojFl2fSdT",
                'status' => "disabled",
                'point_expires_at' => "2021-03-05T09:53:30.000000+09:00",
                'point_expires_in_days' => 5805,
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [2],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["274a44cc-38b4-4d31-890d-6c22a9f51084", "646a487b-0b42-4cef-838a-3bc1c11aca36", "f3fc00df-78d3-4cd3-a8eb-fae80e812229", "4f8a3cda-bc60-4416-a1c7-fc10922b348d", "e44930e5-95a5-4c68-875a-add0055ee660", "935a402d-5cf8-402f-a5a7-aa626f251e2b"],
                'minimum_number_for_combination_purchase' => 4610,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 2644,
                'max_total_point_amount' => 3886,
                'dest_private_money_id' => "49e0cd6e-7380-4c1a-b05c-b3c2ec88b069",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1554148910
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateCampaign19()
    {
        $client = $this->newClient();
        $request = new Request\CreateCampaign(
            "9pISoMCtK5co1QPLQvj28KjuyQXeXfgCfF1EG98ee",
            "970f9e65-4ae3-428d-b5ef-ea0bdff38cba",
            "2021-02-21T11:30:08.000000+09:00",
            "2021-11-05T20:29:40.000000+09:00",
            1113,
            "payment",
            [
                'bear_point_shop_id' => "4dd3aae6-3bde-4d38-8629-4abc7a1137da",
                'description' => "qOk",
                'status' => "enabled",
                'point_expires_at' => "2022-07-31T10:55:15.000000+09:00",
                'point_expires_in_days' => 8516,
                'is_exclusive' => FALSE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [3, 0, 6, 1, 1, 3, 4, 3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["3f2f549c-1d94-4f43-9848-2c9b85c96ccd", "11f5ceb1-4083-4f7d-9312-3c5db2485ddc", "4181dfb9-7567-4ef3-94c4-08661dad8d06", "d1c02c42-fef6-490c-9f12-be701d991d5c", "7efe2a20-3b6c-4c99-b8af-b899d96df9c6", "0e59b61b-f76a-4613-bd55-4d5f1105fad2", "cfbf63e1-efac-40c9-9410-a1ed34b42ec0", "c4b6e4d2-2dd6-46e5-ad72-2ce39de4fa43", "61d3d832-ca51-46e9-9478-db83dbdd960b"],
                'minimum_number_for_combination_purchase' => 6823,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 6512,
                'max_total_point_amount' => 7374,
                'dest_private_money_id' => "2a7cf6ad-3536-48c2-9a70-41ed0ec256d7",
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1128321371
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
