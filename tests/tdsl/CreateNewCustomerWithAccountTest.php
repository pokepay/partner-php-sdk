<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateNewCustomerWithAccountTest extends TestCase
{
    public function testCreateNewCustomerWithAccount()
    {
        $client = $this->newClient();
        $userName = "user-name" . $this->randomString(6);
        $accountName = "account-name" . $this->randomString(6);
        $customerAccount = $client->send(new Request\CreateCustomerAccount(
            "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
            [
                "user_name" => $userName,
                "account_name" => $accountName,
            ]
        ));
        $this->assertEquals($userName, $customerAccount->user->name);
        $this->assertEquals($accountName, $customerAccount->name);
        $shopName = "shop-name" . $this->randomString(6);
        $shop = $client->send(new Request\CreateShopV2(
            $shopName,
            [
                "private_money_ids" => ["4b138a4c-8944-4f98-a5c4-96d3c1c415eb"],
                "can_topup_private_money_ids" => ["4b138a4c-8944-4f98-a5c4-96d3c1c415eb"],
            ]
        ));
        $topupTransaction = $client->send(new Request\CreateTopupTransaction(
            $shop->id,
            $customerAccount->user->id,
            "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
            [
                "money_amount" => 1000,
                "point_amount" => 1000,
            ]
        ));
        $this->assertEquals($topupTransaction->type, "topup");
        $paymentTransaction = $client->send(new Request\CreatePaymentTransaction(
            $shop->id,
            $customerAccount->user->id,
            "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
            100,
        ));
        $bill = $client->send(new Request\CreateBill(
            "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
            $shop->id,
        ));
        $billUpdated = $client->send(new Request\UpdateBill(
            $bill->id,
            [
                "amount" => 200.0,
            ]
        ));
        $billPayment = $client->send(new Request\CreatePaymentTransactionWithBill(
            $bill->id,
            $customerAccount->user->id,
        ));
        $this->assertEquals($paymentTransaction->type, "payment");
        $this->assertEquals($billPayment->type, "payment");
        $transactions = $client->send(new Request\ListTransactionsV2([
                "private_money_id" => "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
                "shop_id" => $shop->id,
                "customer_id" => $customerAccount->user->id,
            ]
        ));
        $billTransactions = $client->send(new Request\ListBillTransactions([
                "private_money_id" => "4b138a4c-8944-4f98-a5c4-96d3c1c415eb",
                "shop_id" => $shop->id,
                "customer_id" => $customerAccount->user->id,
            ]
        ));
        $this->assertEquals($transactions->count, 3);
        $this->assertEquals($billTransactions->count, 1);
    }
}
