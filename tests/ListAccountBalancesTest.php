<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListAccountBalances extends TestCase
{
    public function testListAccountBalances0()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "03f6f6ce-0b8a-49af-af9c-e9b11b30fe94"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances1()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "03f6f6ce-0b8a-49af-af9c-e9b11b30fe94",
            [
                'direction' => "desc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances2()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "03f6f6ce-0b8a-49af-af9c-e9b11b30fe94",
            [
                'expires_at_to' => "2021-10-04T18:01:04.000000+09:00",
                'direction' => "desc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances3()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "03f6f6ce-0b8a-49af-af9c-e9b11b30fe94",
            [
                'expires_at_from' => "2018-06-03T18:12:31.000000+09:00",
                'expires_at_to' => "2018-10-09T08:24:33.000000+09:00",
                'direction' => "desc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances4()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "03f6f6ce-0b8a-49af-af9c-e9b11b30fe94",
            [
                'per_page' => 6820,
                'expires_at_from' => "2019-06-17T13:07:02.000000+09:00",
                'expires_at_to' => "2018-02-03T08:20:46.000000+09:00",
                'direction' => "desc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances5()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "03f6f6ce-0b8a-49af-af9c-e9b11b30fe94",
            [
                'page' => 219,
                'per_page' => 1131,
                'expires_at_from' => "2025-07-29T19:58:59.000000+09:00",
                'expires_at_to' => "2019-11-06T11:44:53.000000+09:00",
                'direction' => "desc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
