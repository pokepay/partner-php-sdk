<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListAccountBalances extends TestCase
{
    public function testListAccountBalances0()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "0adcc451-9f5b-4fe8-8803-fd1118c34c95"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances1()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
            [
                'direction' => "desc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances2()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
            [
                'expires_at_to' => "2020-10-07T18:59:38.000000Z",
                'direction' => "desc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances3()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
            [
                'expires_at_from' => "2020-09-07T21:25:03.000000Z",
                'expires_at_to' => "2022-05-06T04:41:55.000000Z",
                'direction' => "desc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances4()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
            [
                'per_page' => 3844,
                'expires_at_from' => "2022-07-13T08:37:39.000000Z",
                'expires_at_to' => "2022-05-05T20:55:29.000000Z",
                'direction' => "asc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances5()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "0adcc451-9f5b-4fe8-8803-fd1118c34c95",
            [
                'page' => 677,
                'per_page' => 5673,
                'expires_at_from' => "2021-09-28T23:27:27.000000Z",
                'expires_at_to' => "2020-10-21T06:08:14.000000Z",
                'direction' => "desc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
