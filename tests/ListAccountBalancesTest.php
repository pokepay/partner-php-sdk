<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListAccountBalances extends TestCase
{
    public function testListAccountBalances0()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "1002d574-ca38-44bc-9d60-12b30220e53e"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances1()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "1002d574-ca38-44bc-9d60-12b30220e53e",
            [
                'direction' => "asc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances2()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "1002d574-ca38-44bc-9d60-12b30220e53e",
            [
                'expires_at_to' => "2022-08-03T00:18:17.000000+09:00",
                'direction' => "desc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances3()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "1002d574-ca38-44bc-9d60-12b30220e53e",
            [
                'expires_at_from' => "2021-04-07T11:17:38.000000+09:00",
                'expires_at_to' => "2023-02-28T13:37:07.000000+09:00",
                'direction' => "asc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances4()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "1002d574-ca38-44bc-9d60-12b30220e53e",
            [
                'per_page' => 8167,
                'expires_at_from' => "2023-12-18T12:49:52.000000+09:00",
                'expires_at_to' => "2020-01-08T16:52:06.000000+09:00",
                'direction' => "asc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListAccountBalances5()
    {
        $client = $this->newClient();
        $request = new Request\ListAccountBalances(
            "1002d574-ca38-44bc-9d60-12b30220e53e",
            [
                'page' => 2786,
                'per_page' => 2033,
                'expires_at_from' => "2022-09-09T12:00:51.000000+09:00",
                'expires_at_to' => "2022-01-11T22:44:42.000000+09:00",
                'direction' => "desc"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
