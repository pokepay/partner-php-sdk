<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class GetAccountTransferSummary extends TestCase
{
    public function testGetAccountTransferSummary0()
    {
        $client = $this->newClient();
        $request = new Request\GetAccountTransferSummary(
            "713aed7a-4b05-4a1c-a31a-855f6c9f8c13"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testGetAccountTransferSummary1()
    {
        $client = $this->newClient();
        $request = new Request\GetAccountTransferSummary(
            "713aed7a-4b05-4a1c-a31a-855f6c9f8c13",
            [
                'transfer_types' => ["campaign-topup", "exchange-inflow", "payment", "refund-campaign", "exchange-outflow", "topup", "refund-coupon"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testGetAccountTransferSummary2()
    {
        $client = $this->newClient();
        $request = new Request\GetAccountTransferSummary(
            "713aed7a-4b05-4a1c-a31a-855f6c9f8c13",
            [
                'to' => "2023-11-04T20:47:20.000000+09:00",
                'transfer_types' => ["payment", "refund-topup", "exchange-outflow"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testGetAccountTransferSummary3()
    {
        $client = $this->newClient();
        $request = new Request\GetAccountTransferSummary(
            "713aed7a-4b05-4a1c-a31a-855f6c9f8c13",
            [
                'from' => "2022-01-16T08:50:16.000000+09:00",
                'to' => "2020-04-03T14:19:44.000000+09:00",
                'transfer_types' => ["payment", "refund-campaign"]
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
