<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCampaign extends TestCase
{
    public function testUpdateCampaign0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'budget_caps_amount' => 1846048109
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1161308371
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'max_total_point_amount' => 5715,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1062068093
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'max_point_amount' => 6330,
                'max_total_point_amount' => 8831,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 769812961
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 1270,
                'max_total_point_amount' => 124,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 173694542
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'minimum_number_for_combination_purchase' => 2135,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 1276,
                'max_total_point_amount' => 9060,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1165020838
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'minimum_number_of_amount' => 3475,
                'minimum_number_for_combination_purchase' => 5299,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 6011,
                'max_total_point_amount' => 5516,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1777436902
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'minimum_number_of_products' => 2258,
                'minimum_number_of_amount' => 9990,
                'minimum_number_for_combination_purchase' => 4946,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 3456,
                'max_total_point_amount' => 7634,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1301092573
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'applicable_shop_ids' => ["4bbd3162-b4bb-4f35-b1a5-46ba6148651b", "cda6d07a-1155-4544-aa81-b166dcba48f9", "ae7c1721-ee2a-4ec7-8270-e69fcc091380", "1c897513-09ce-47a6-9e6b-68493eed742b", "ac9ee7e9-c302-4e55-845b-fc98e531b5ae", "1e361976-63f3-4583-baab-1764889ba0a5", "b57c3e30-6037-4bbd-8c69-5b82ea40fb33", "8e158dc7-99f9-4fbc-99ad-1a86bddc371e"],
                'minimum_number_of_products' => 9363,
                'minimum_number_of_amount' => 1299,
                'minimum_number_for_combination_purchase' => 4422,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 2933,
                'max_total_point_amount' => 6728,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 233495880
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["1ed1f2c7-d3a2-4058-af35-53e03c81bd2e", "f3b70088-e1ba-4a0f-9550-f6843e6f4da2"],
                'minimum_number_of_products' => 1838,
                'minimum_number_of_amount' => 5548,
                'minimum_number_for_combination_purchase' => 160,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 7207,
                'max_total_point_amount' => 2538,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 39477703
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign11()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'applicable_days_of_week' => [2, 6, 3, 3, 2, 5],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["4632bf59-dcb5-4049-b69d-11762472c923", "11cf33fe-56bb-4759-a17c-e44a9d4338aa", "5f77f094-7128-4e7f-bc71-8d454c8014e3", "0cafe261-eeee-4a73-9373-1fd0940982b2"],
                'minimum_number_of_products' => 2184,
                'minimum_number_of_amount' => 9496,
                'minimum_number_for_combination_purchase' => 5902,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 8382,
                'max_total_point_amount' => 230,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 144380158
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign12()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [3, 3, 5, 0, 1, 3, 2],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["2845dee1-e5ae-4111-ae0f-01514eafcce2", "aaea48d6-893a-4494-91cd-07398f70a35a", "2b95aab6-6c86-4dd2-87b0-49ebf6138ebc", "0cd7e98f-d043-4418-9873-3f1470955c26", "cbebc1d0-9be4-4922-baf7-0c90e3471f45", "912395f2-bc1d-4e7d-acb5-da116b009b6d", "29590a58-3988-4708-abbe-68296e105dc7", "3333f13f-cbfa-46f5-8c02-e58553d9c527", "4530dad7-5833-4546-abd7-807f3added3e", "83e6959a-1469-448d-b9da-4468386e4949"],
                'minimum_number_of_products' => 6652,
                'minimum_number_of_amount' => 3899,
                'minimum_number_for_combination_purchase' => 9776,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 4496,
                'max_total_point_amount' => 7383,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1025667088
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign13()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [0, 6, 3, 6, 6, 1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["0e2aad56-794a-4929-8ea7-13fd509cda05", "6aae338a-e89b-4004-9c95-f4936f465001", "92c529ce-c410-4920-b827-fcb108e1c009"],
                'minimum_number_of_products' => 7373,
                'minimum_number_of_amount' => 1994,
                'minimum_number_for_combination_purchase' => 3980,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 4784,
                'max_total_point_amount' => 889,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 148336805
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign14()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [6, 0],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["f0621bc6-dc0a-46d0-9c10-7175df743982"],
                'minimum_number_of_products' => 8390,
                'minimum_number_of_amount' => 5437,
                'minimum_number_for_combination_purchase' => 7632,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 1278,
                'max_total_point_amount' => 3071,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1972410865
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign15()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [6, 1, 1, 3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["60548624-851e-43e7-b391-1a02842e45d6", "4b08f189-379a-49e1-a356-4a858f1f9d67", "776b0929-65b5-45ec-9180-ac134a935051"],
                'minimum_number_of_products' => 3660,
                'minimum_number_of_amount' => 6030,
                'minimum_number_for_combination_purchase' => 7956,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 3775,
                'max_total_point_amount' => 1907,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1799661733
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign16()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [5, 2, 2, 1, 6, 5, 1, 6, 6, 4],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["cf34b680-c8a3-4b72-9b32-14b45c721506", "aefa6b11-0f76-40a8-ac52-c35b24629dee", "d6b7305e-c230-4d21-962f-dffbde8af631", "438843cb-0ded-453f-8b16-edbcf104e971", "7292d4dd-0989-43bb-8ee8-17f0d817fba0", "e6b55b0b-2df5-4e44-86b1-d741c0791253", "3fcab134-3e90-46c9-8218-4e789c6709f6", "44b73670-805b-4822-8601-f39ba5f626d0"],
                'minimum_number_of_products' => 9641,
                'minimum_number_of_amount' => 6216,
                'minimum_number_for_combination_purchase' => 9135,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 2658,
                'max_total_point_amount' => 4133,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1540138721
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign17()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'point_expires_in_days' => 4488,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [1, 5, 0, 0, 4, 3, 4, 3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["665e330b-d2ee-4fbd-8af9-b1f972c70910", "ad5607ce-f065-40b7-9fbe-17b45591cf51", "ebc4bf5c-c5a7-4215-80b2-a29760739c18"],
                'minimum_number_of_products' => 1681,
                'minimum_number_of_amount' => 1025,
                'minimum_number_for_combination_purchase' => 4579,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 164,
                'max_total_point_amount' => 7355,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 963819398
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign18()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'point_expires_at' => "2023-08-03T16:56:06.000000Z",
                'point_expires_in_days' => 991,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [3, 1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["d4babf2f-2164-4a0c-ba94-dfd0e22c3507", "814cc85f-f6d3-4881-b71e-95505508260e", "8d8b0a12-704a-4730-bd85-57b951e42c95", "e35a3a0b-3f99-4b77-a9e8-be1278e0f1ec", "9b21671b-11c6-4a36-948a-dcc31598c522", "c7fa359d-2e56-4f6c-8d2b-904b7b5a3cc6"],
                'minimum_number_of_products' => 6191,
                'minimum_number_of_amount' => 876,
                'minimum_number_for_combination_purchase' => 853,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 4550,
                'max_total_point_amount' => 2401,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1380771656
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign19()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'status' => "disabled",
                'point_expires_at' => "2022-11-11T20:49:22.000000Z",
                'point_expires_in_days' => 2090,
                'is_exclusive' => FALSE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [2, 3, 1, 1, 3, 6],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["1753db78-907a-461f-9f1a-014665548214", "b5afe7d5-30c6-42b6-82e9-c0683867ad2c"],
                'minimum_number_of_products' => 109,
                'minimum_number_of_amount' => 8590,
                'minimum_number_for_combination_purchase' => 970,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 4732,
                'max_total_point_amount' => 1589,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1833154823
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign20()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'description' => "uoOEnKraNjpsN9SjDxtxrgs7e0dkiAA",
                'status' => "disabled",
                'point_expires_at' => "2023-04-14T04:35:38.000000Z",
                'point_expires_in_days' => 5177,
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [1, 6, 4, 3, 2, 3, 1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["df324786-3dde-44dd-ac76-217ac2ccd605", "9d1e1b42-cd11-4461-babe-2e53af301fc3", "46fbbc45-b028-423d-bbba-fb9f27fbb731", "7661bbe8-a8bd-4360-850c-24479f5b5086", "340bfda0-a3bc-4bb2-a7c5-7c0633462791", "c59cf76b-5deb-42dd-9e0c-ebd05bd30532", "5678ba0d-93ae-4f56-a508-f31dad866a49", "78367916-efd0-41f9-823e-8b372ff08d7b", "8edb5d48-aa3e-4e89-8557-96b7c19cdb24"],
                'minimum_number_of_products' => 7775,
                'minimum_number_of_amount' => 6886,
                'minimum_number_for_combination_purchase' => 4520,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 5876,
                'max_total_point_amount' => 963,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1405008058
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign21()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'event' => "external-transaction",
                'description' => "BB1YNClE0n87A30l6vspNWH9u8x4Yq2mx",
                'status' => "enabled",
                'point_expires_at' => "2023-05-16T03:50:44.000000Z",
                'point_expires_in_days' => 74,
                'is_exclusive' => FALSE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [5, 4, 6, 1, 5],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["f8574894-d553-4f6e-8f48-87d3ab29e466"],
                'minimum_number_of_products' => 5099,
                'minimum_number_of_amount' => 348,
                'minimum_number_for_combination_purchase' => 180,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 4204,
                'max_total_point_amount' => 8618,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1222220490
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign22()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'priority' => 7836,
                'event' => "payment",
                'description' => "11kPUOWIOCC9XRXSkWvgwMdC6YsQVBM615BSLRTB4phpjbt6QHeDKxXdEg3OxGlsZaVSpjoQ6ffYAe6kpXiCTiSBUIe5iqIMOcjyqBKlSFGLuqDn2oMYRFh8cqnV2spFoKb7jYgx3gTJKy6dBb3ykYYVRZ4jdyfD",
                'status' => "disabled",
                'point_expires_at' => "2020-04-08T14:09:01.000000Z",
                'point_expires_in_days' => 5192,
                'is_exclusive' => FALSE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["2749e009-eadf-4e50-8343-a022772edc1c"],
                'minimum_number_of_products' => 3633,
                'minimum_number_of_amount' => 933,
                'minimum_number_for_combination_purchase' => 6089,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 2813,
                'max_total_point_amount' => 8116,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1181237434
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign23()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'ends_at' => "2021-09-25T13:53:31.000000Z",
                'priority' => 4029,
                'event' => "topup",
                'description' => "9N8hkxoSQFYDUU0HuG332kYdREQC39nZBUv4F8J7UzyDYEv7bctcmIqdmvTV8RBzp0gixsKZWoUeORL98QDv9TW3tonru5DxxR1kiR4daTST401zYU9O5bmxo5R8",
                'status' => "disabled",
                'point_expires_at' => "2021-12-03T15:45:24.000000Z",
                'point_expires_in_days' => 7212,
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [3, 0, 0, 3, 4, 1, 5, 3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["aad860f8-3ca1-4cde-92fb-5d82b3eac05e", "757a7ed1-fd20-4a9f-9f95-1593d5af36a1", "458ad14f-8819-4a60-b31f-e882be0574cf", "b89422f8-f4ca-4679-8e28-a53a9bd28a69", "6b74bc75-730a-4491-a106-a774b08c8733", "bae993de-4f04-4ab0-af5f-338866e78052", "3f1dbc06-17a8-45f3-8753-40ccce9c2a23", "bf738611-db5f-4c60-a926-45a8c22edb34", "10b24f0a-0e46-4816-94c1-15d756dd79de", "fee124ea-6476-4b9a-a3ce-382feab35f22"],
                'minimum_number_of_products' => 7040,
                'minimum_number_of_amount' => 2375,
                'minimum_number_for_combination_purchase' => 9581,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 8654,
                'max_total_point_amount' => 8581,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1869645226
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign24()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'starts_at' => "2022-03-11T20:12:55.000000Z",
                'ends_at' => "2024-03-04T10:50:16.000000Z",
                'priority' => 1819,
                'event' => "topup",
                'description' => "MjoFiHLtN9Yqy7R5Sel4rqjqD6mB2gz0FIdNSbIrXOBo1I3rdkLB5vuU",
                'status' => "disabled",
                'point_expires_at' => "2023-04-17T05:00:28.000000Z",
                'point_expires_in_days' => 6912,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [4, 3, 3, 6, 6, 2, 4, 3, 2],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["bcea9165-c034-43ef-b341-bca1eaf31ab7", "407f462f-c7c1-49f3-b4b7-7dc71bce209e", "d4fac0de-4a5a-4460-8b03-cd7d9d4a64cb"],
                'minimum_number_of_products' => 391,
                'minimum_number_of_amount' => 2150,
                'minimum_number_for_combination_purchase' => 5757,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 2699,
                'max_total_point_amount' => 4642,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 99696538
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign25()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "b1dc9469-075b-4d47-aab1-8b97ded3fe86",
            [
                'name' => "QbpvWdRIf0j2NcGpd9kTg7fbzWuGj28bjzoMkUfQZyG6ql9kvIc3ugQfVcwKEOAlMUYblAnOJUw5uY",
                'starts_at' => "2021-04-23T02:58:38.000000Z",
                'ends_at' => "2022-05-06T16:35:51.000000Z",
                'priority' => 2645,
                'event' => "external-transaction",
                'description' => "2LWIHcZ5Kh7Upt9fM2ThdFR4ZGmC3lYSdkRdIHlBo7iMGslQeLzTg9FCP6b",
                'status' => "disabled",
                'point_expires_at' => "2022-02-27T09:09:30.000000Z",
                'point_expires_in_days' => 3006,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'blacklisted_product_rules' => [["product_code" => "4912345678904", "classification_code" => "c123"]
        , ["product_code" => "4912345678904", "classification_code" => "c123"]
        ],
                'applicable_days_of_week' => [5, 3, 6, 5, 1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["5eed2a5a-33b0-4ff8-bc87-d7bd3bb16283", "7cc65c22-1a01-4e6b-af9b-97354412ef2c", "b20969ff-299f-47a4-b2a8-dbbf4edda3f4", "b36db3d8-21e4-41df-a8eb-756aa2aaba43", "619bcd0b-3c5a-4ab6-864b-c6de4440448f", "d2a73794-8e15-4d10-9814-66ada42426eb", "d47cf6e9-3e4d-46f8-b1eb-137f6d912f3d", "07e56a48-f496-4f14-9456-ce3d7c629b86"],
                'minimum_number_of_products' => 9329,
                'minimum_number_of_amount' => 2850,
                'minimum_number_for_combination_purchase' => 531,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 3974,
                'max_total_point_amount' => 393,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 467110137
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
