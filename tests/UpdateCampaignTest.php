<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCampaign extends TestCase
{
    public function testUpdateCampaign0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'budget_caps_amount' => 511437785
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1774930932
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'max_total_point_amount' => 5750,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 646689698
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'max_point_amount' => 8466,
                'max_total_point_amount' => 6861,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 90863943
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 4646,
                'max_total_point_amount' => 6052,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 721536238
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'minimum_number_for_combination_purchase' => 9955,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 1448,
                'max_total_point_amount' => 3620,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 748526441
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'applicable_shop_ids' => ["761d29bd-389b-462b-869d-b5d0429ae582", "441a76c4-a9af-4a2b-a2ce-0a80278fc956", "22a79fea-27e3-4b9d-be88-92ba719cfc93", "27acf789-44e0-4d13-9f74-b4af79f9e935", "941800f9-1b51-4ba7-81ce-9a1c7cacac00", "c020b329-cfe0-4da3-99ea-4356a8bde0db", "bb62c3ee-42bf-4d9c-bdc0-4733e2729ca3", "30751092-9c35-4772-848d-9ee88f762c96", "784a4807-3ab0-4bb4-a489-a3acd13588e0", "594006b0-378a-4fc0-a0f6-dfe81697aa1b"],
                'minimum_number_for_combination_purchase' => 6547,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 4818,
                'max_total_point_amount' => 7944,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1159219224
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["ad4df577-29fe-41e0-bcb5-447c46dc90d6", "3708625b-6317-4b6c-a4de-2abe11f6aaa2", "f427a9d4-aeb5-4694-9074-f547b7733822", "3f880420-656f-4669-bdc6-c028e6b14226", "d8273312-0ca2-4e06-b5ba-f86812bbf9e8", "670613a8-d5f8-4ad0-8e1d-47ff3b5a1178", "59143c1a-604a-4302-a514-81e4d4ab4141", "cbfd386f-0d82-4f83-b60f-ab3cf4e8fa84", "b2e34449-469e-4a42-b15e-c04a66175077", "adc2cf40-33c9-44df-b4c8-d074ca118d8c"],
                'minimum_number_for_combination_purchase' => 9069,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 7104,
                'max_total_point_amount' => 7080,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 447422406
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'applicable_days_of_week' => [0, 3, 2, 3, 3, 5],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["e85fa1f9-efe7-42fe-8f4f-4cd6314189d3", "a4f1bc94-3279-4484-86fa-642fe03f13d1", "29ee3dc0-169c-4971-80bd-93e5618a8654", "559bd7f8-8523-4e8a-8272-72fb4c321a53", "933a58e4-3847-49c2-b4db-68db0b40ce74", "be67a232-097d-4312-b022-9950251354fb", "52e7bd0f-1821-4a8b-81b3-3fcbd13a9e6f", "088006e8-af2b-4de2-8fae-22da300d0313", "bd9c4c73-fd25-4e2d-8127-11b8c6cc970d"],
                'minimum_number_for_combination_purchase' => 7580,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 3682,
                'max_total_point_amount' => 4593,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 784744017
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["f106eeee-d6b1-4b5a-9911-24f2124ae992", "68ccc6a9-ff1f-40cf-abc2-ec8d7213e0e1", "5a1bfb66-1013-4994-889b-a9fb33788ad5", "d89c76fa-454e-41d4-8291-5cbddb249f87", "c6697a11-6b58-4349-967f-4d915b7302b1"],
                'minimum_number_for_combination_purchase' => 1086,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 7836,
                'max_total_point_amount' => 9241,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 2072885165
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign11()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [2],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["4d0c1886-94ee-4bb3-9508-d194404a7398", "8e671c3d-5c09-4621-b416-c4cb7286cf3e", "c19527d1-af73-428c-9faf-73af7a74f72b"],
                'minimum_number_for_combination_purchase' => 4034,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 6638,
                'max_total_point_amount' => 3799,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 593625896
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign12()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [1, 1, 2, 4],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["30cc310d-d355-4fbd-9ee9-ad0e64487712", "bd81d168-cd4e-4af5-b2e6-d67fc9c3860b", "501734a5-86b4-4ebb-8b28-e03ce0cd4836"],
                'minimum_number_for_combination_purchase' => 8625,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 4781,
                'max_total_point_amount' => 2139,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1988478584
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign13()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [2, 6, 1, 1, 5, 4, 2],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["9689cfe9-af82-482b-a3a3-ca9228274a71", "315260e1-7647-4e3b-aa2f-49b24fe41070"],
                'minimum_number_for_combination_purchase' => 9431,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 4863,
                'max_total_point_amount' => 5247,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 908945196
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign14()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'point_expires_in_days' => 7080,
                'is_exclusive' => FALSE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [5, 3, 2, 2, 6],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["a4409e05-9f70-40e6-82a8-db814699e6b2", "799551a5-14f3-429d-9f62-3a05999167be", "ff5cd74d-3dfa-4a06-b5f3-ba5c91b87d22", "0c0193c7-46b1-4c0f-a68e-9f80205754c7", "1725d300-5e67-48ff-a179-22721bfdfccf", "62d005b7-1a7d-4f95-ac23-44efcb0c2ce1", "8beaeafc-6b91-4d92-8149-c5d05fa20815", "3cbb0cfe-17aa-4d3c-8716-624a29332437", "c7df64ca-2347-4c42-bec3-3b00e1548f9f", "ccedbd0b-1eb1-4e17-af91-e43506b339bc"],
                'minimum_number_for_combination_purchase' => 1107,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 221,
                'max_total_point_amount' => 6566,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1057765988
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign15()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'point_expires_at' => "2020-05-12T07:58:01.000000+09:00",
                'point_expires_in_days' => 2106,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [2, 2, 3, 4, 0, 0, 2],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["bc66c7e4-7796-4e97-906e-aa1c7ee21a70"],
                'minimum_number_for_combination_purchase' => 8351,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 2740,
                'max_total_point_amount' => 2287,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1595354560
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign16()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'status' => "enabled",
                'point_expires_at' => "2023-01-31T04:27:17.000000+09:00",
                'point_expires_in_days' => 3091,
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [1, 5, 2, 4, 5],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["c127b51b-9170-4fcf-a862-b238afbab276"],
                'minimum_number_for_combination_purchase' => 4131,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 7888,
                'max_total_point_amount' => 7106,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 448502827
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign17()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'description' => "eCaVZz",
                'status' => "enabled",
                'point_expires_at' => "2020-05-31T01:00:15.000000+09:00",
                'point_expires_in_days' => 5036,
                'is_exclusive' => FALSE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [0, 1, 4, 6, 5, 4, 6, 2, 3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["8514d659-8329-4d40-8630-6b9773434f59", "98aa12eb-8ce6-4f7c-b1c1-0b72c4956beb", "bfd57156-ea06-4e4f-912c-248042696f3d", "cf3e6efb-96f8-43bf-a8f4-a8c8623e2c06", "18243261-0251-4820-8ce2-798f5a800af1", "271abaf2-32e5-41eb-b8ea-b1aa1bdf4e20", "1bd8f4b6-a1de-454b-a056-004689f84ee2", "efe9b773-4c9d-445c-9ac9-bca4440fde3d", "53f46506-9df1-4359-a7c2-cf6ce1bd6a1b"],
                'minimum_number_for_combination_purchase' => 8506,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 9721,
                'max_total_point_amount' => 3622,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1238992985
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign18()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'event' => "payment",
                'description' => "Gv3Ovn3SH7ljqEdpqCcPOpWjivoOnvdw0Yvld3IeJyhTlRgTT2NxSiphZRlLoLjMmLSHQhe4tH",
                'status' => "disabled",
                'point_expires_at' => "2020-08-17T09:48:00.000000+09:00",
                'point_expires_in_days' => 5385,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [0],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["820dfebf-cc38-465e-900c-f651ce88840f", "17bcd1aa-297b-4a95-9440-83efb29c9e02", "720fa16a-b508-42ce-a9cb-277b870400ce", "25c2238f-cf81-4930-aefa-23951ca983f1", "d0418f16-2749-4043-8605-d23bba77ac90", "5c9f8912-5f74-4fc0-93b7-8c4245f17650", "8376f3c5-0b7b-4328-8989-a0a6de5b897e", "b7305a8d-4716-4e01-bef3-b315e34c3f20", "de8284c8-db1c-4429-b739-de2f05d4da0c", "411ff8ac-53e9-49e1-a8df-da2db80ace88"],
                'minimum_number_for_combination_purchase' => 1673,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 1122,
                'max_total_point_amount' => 2641,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1309115771
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign19()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'priority' => 6652,
                'event' => "external-transaction",
                'description' => "aDv6U6SXLkHad9cOSRej1Twb2rvpiwJLSy",
                'status' => "enabled",
                'point_expires_at' => "2022-01-30T03:41:48.000000+09:00",
                'point_expires_in_days' => 9968,
                'is_exclusive' => FALSE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [5, 5, 5, 2, 5, 5, 4, 3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["2cc8adeb-f041-480d-a4e0-57d08d68d91a", "71dc0a87-2a0a-408c-a626-fa7a4c0acee9", "82126686-70f9-4ba4-92de-efffb6910004", "8893413b-3ec2-49b2-88a3-818d189d1959", "19760078-71e1-44d3-92f5-00aa990d70bb"],
                'minimum_number_for_combination_purchase' => 5703,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 1126,
                'max_total_point_amount' => 5122,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1492450935
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign20()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'ends_at' => "2020-02-04T04:28:19.000000+09:00",
                'priority' => 9596,
                'event' => "external-transaction",
                'description' => "U2Qn83gWH7hF0T8Nh7eoO6asjOox0RRzWzgJ8qllmxnkMgshIHzbucfDhID3qemlo7JMNmGUe8JtqofMq1TyFcW0Uuc5ug2SpDoeGryI5OQQ9GoRehaS",
                'status' => "disabled",
                'point_expires_at' => "2023-08-16T04:05:33.000000+09:00",
                'point_expires_in_days' => 2896,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [1, 6, 4, 5, 2, 3, 6, 3, 3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["0fd11a58-03b8-42d7-973e-33e24d0606eb", "466b4978-315f-475d-8a62-70d757e2bf54"],
                'minimum_number_for_combination_purchase' => 1927,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 8119,
                'max_total_point_amount' => 5552,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 836539498
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign21()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'starts_at' => "2023-03-14T03:22:03.000000+09:00",
                'ends_at' => "2022-01-31T09:39:19.000000+09:00",
                'priority' => 9066,
                'event' => "payment",
                'description' => "lRR9XuMVcs2zeQQbQwb51zUDjfyGpNkIiUDvsd07Li3GyEdt6GGJ1GXo5UPiFJuScrEGcY5I6vYJqEcansSsP2ceIvKP9bgYanQbVQM9Z6RG0kCsPdzwEr5mXGzuLW3FkWi9ZhIojVZoApe0VcAXVJNN",
                'status' => "enabled",
                'point_expires_at' => "2023-01-22T18:02:08.000000+09:00",
                'point_expires_in_days' => 4793,
                'is_exclusive' => FALSE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [3, 3, 4, 4, 0, 4, 5, 3, 4, 3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["78751ce6-ab28-49f2-80c6-dc0a609b06d0", "78ab549c-1110-4175-82c5-d53cba2d2f9f"],
                'minimum_number_for_combination_purchase' => 7632,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 1278,
                'max_total_point_amount' => 3071,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 1972410865
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign22()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "43d4ff8e-b6b0-4d94-a59a-d67ab71cd480",
            [
                'name' => "zDCyUBg3VaVg5lQKirhrBQImBbFTGr24vRn0V1KmKqNhpuD1AS4IxvpFPGaTF6gXtd3nJyyNe74Q2bvFtDokudzPS7PJ09whlF6CVlMKFHkTHEGRWUBVUZa1rmAxzFUF6ihvlI4uoOEnKraNjpsN9SjDxtxrgs7e0dkiAAa8jwX6FLCB1XlvzBazSCE1hEG2EkkP2VIPy7HW7Ee7s",
                'starts_at' => "2020-06-18T16:50:51.000000+09:00",
                'ends_at' => "2023-09-20T16:58:42.000000+09:00",
                'priority' => 1850,
                'event' => "payment",
                'description' => "BB1YNClE0n87A30l6vspNWH9u8x4Yq2mx",
                'status' => "enabled",
                'point_expires_at' => "2023-05-16T03:50:44.000000+09:00",
                'point_expires_in_days' => 74,
                'is_exclusive' => FALSE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [4, 5, 4, 6, 1, 5, 1, 0, 4, 3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["ab29e466-fc5b-43ea-8a4b-c15b3adfebeb", "dee2f570-80b3-427c-91df-2d977d7fd06b", "d0e061a9-9ac9-4e9c-9d9f-06b1e157aeb1", "8bd20add-aceb-45a7-ab50-cbd5f2e682cf"],
                'minimum_number_for_combination_purchase' => 8611,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 5279,
                'max_total_point_amount' => 3908,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        ,
                'budget_caps_amount' => 435012257
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
