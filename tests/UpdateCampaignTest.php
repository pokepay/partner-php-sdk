<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCampaign extends TestCase
{
    public function testUpdateCampaign0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'max_total_point_amount' => 494,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'max_point_amount' => 7289,
                'max_total_point_amount' => 1783,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 6872,
                'max_total_point_amount' => 8312,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'minimum_number_for_combination_purchase' => 7834,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 6731,
                'max_total_point_amount' => 417,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'applicable_shop_ids' => ["fc298164-d991-43ca-baf4-b1c2a292233a", "5fe75edf-53fe-40c6-bb98-e9e327b99c82", "749e46e3-fa1d-4d06-b30f-a4d9178ba14a", "b0eb301e-a5cd-446e-a43f-1a711817b851", "5ee2c5f3-4b51-48eb-a81c-1fc4049b4b8f", "1b8bd731-8766-4b64-aa2a-78c4a539386e", "1a4f402b-daf2-4dd9-842f-2c127e7df8b9"],
                'minimum_number_for_combination_purchase' => 7957,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 8762,
                'max_total_point_amount' => 1926,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["a8443f77-56ef-44e9-b921-01fc9165384c", "df108340-0824-4c7c-92a0-155ceb613290", "6e07de15-659b-4488-b26c-317b3f816da7", "e274a187-0a85-4a2f-b7db-62720faf6af9", "df56c530-a749-4299-902b-8bf006fedb54"],
                'minimum_number_for_combination_purchase' => 4731,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 5545,
                'max_total_point_amount' => 4102,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'applicable_days_of_week' => [1, 6, 5, 0, 4],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["1330d106-c1d1-4a4e-b19a-acd326cc0be6", "238695b5-7e7e-448c-9ea2-fd3ac6437bd7", "d846c984-d9dc-47f9-97c4-d7d68c98dd22"],
                'minimum_number_for_combination_purchase' => 3918,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 4440,
                'max_total_point_amount' => 3338,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [2, 4, 1, 1, 6, 4, 6],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["ea676b33-3c1a-429f-8eea-2048ab96845a", "d056c416-1d9e-44e1-983e-daa851be72d5", "4b9a7af9-4853-4552-a8a4-5ee39a699419"],
                'minimum_number_for_combination_purchase' => 7731,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 6330,
                'max_total_point_amount' => 6513,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [2, 0, 5, 1, 6],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["71f97d1e-d7ae-4e52-9db0-bbd2322b33a0", "d7115f20-421e-4864-8722-8e21ff828a6c", "e1ec1f6b-89b3-4784-88a1-c8c4ca6cd9fd", "cd43f992-51de-4d8d-8a91-274fd161522a"],
                'minimum_number_for_combination_purchase' => 7606,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 3059,
                'max_total_point_amount' => 5615,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign11()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [6, 6, 5, 3, 3, 6, 1, 4, 1],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["bf615f8c-8bec-4257-abf2-b116d11171ee", "eaa2b017-e67b-41e9-90e6-796cdad1a055", "97e96a2c-d82b-4f72-81e0-8b0ad3f4d318", "8892cc16-902f-4ecb-bd72-6e2eb3a3106c", "32664b89-9db2-4c68-b67c-a1e07fca7050", "015fa592-0ddc-43a0-a175-145a15d41e43", "8561e8c4-3efc-494d-b97a-4499e9158d66"],
                'minimum_number_for_combination_purchase' => 8409,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 7038,
                'max_total_point_amount' => 962,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign12()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'is_exclusive' => FALSE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [4, 3, 3, 6, 5, 6, 3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["618fdd1c-d691-4496-8b1d-82b8bb556c7a", "b0aca296-e232-4106-a4a1-4e77b0737eef", "1ad82cf7-ebc6-485a-9b25-21a67c1a43a7", "31bf9fc4-41fc-4639-9405-6cb54ed363de", "2dc39402-e1d7-4517-9ae0-835d2a9df390"],
                'minimum_number_for_combination_purchase' => 4153,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 8555,
                'max_total_point_amount' => 2216,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign13()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'point_expires_in_days' => 8806,
                'is_exclusive' => FALSE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [0],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["c580b3c9-2ff9-4e8d-ba3e-5b6b2a7dcb4d", "f05554fc-169f-46e0-b404-a3f0368546d9", "0ab48d32-1846-4851-98bc-18b39c93d309", "0a91ae98-e46d-4561-bd45-cfabad1da71d", "8a3ab275-e25f-4679-8c17-dd8fbbc99a07", "2fc120fb-67c0-4983-ac19-6cd7311e9465"],
                'minimum_number_for_combination_purchase' => 4453,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 7617,
                'max_total_point_amount' => 7399,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign14()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'point_expires_at' => "2020-06-21T01:31:43.000000+09:00",
                'point_expires_in_days' => 2954,
                'is_exclusive' => FALSE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [5, 2, 0, 3, 1, 1, 2, 2, 4, 5],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["ed313b6c-c6bc-4ee9-be5e-657d568c4ad0", "08173a47-6a31-40b4-8114-fe3f26005fdf", "256fd2d9-ad2d-4409-9ceb-26971ca971e3", "182a2596-3722-4a43-9c78-02eb15126f01", "eb1f6600-2554-4149-b9e4-8a60f39fde7c", "4ce2e2b7-e64a-43bd-b3fc-0b5ce3c259ee", "a6166e39-b820-4cd1-8b9f-1d3eeb1ef2e3", "f94515e3-c5ea-4bce-afc4-785edd6500b7", "2620cabb-e162-493a-8776-74a41841ee64"],
                'minimum_number_for_combination_purchase' => 1250,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 5676,
                'max_total_point_amount' => 354,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign15()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'status' => "enabled",
                'point_expires_at' => "2020-04-06T16:58:53.000000+09:00",
                'point_expires_in_days' => 5139,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [5, 4, 5, 2, 1, 4],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["9bfa00d8-f230-4311-972d-2269b42c3bd2", "b282adea-8acf-4fe8-be80-15dbf9477473", "c4e814ce-01af-4b98-a7f4-a582c869d971", "a9f688fe-22a8-4010-8fde-e1e5048ba8de", "751d0881-1949-480a-b979-1a9b55b78182"],
                'minimum_number_for_combination_purchase' => 6406,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 688,
                'max_total_point_amount' => 9281,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign16()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'description' => "RYP301J1FCXpsK10BIkXMaiCohSzDm3NK5TzpqbYPKW4gVWnyPJ2FmQP8BFdj782lCRzxTLYRU4iYcxZKxkyxykYpcFxdBcA6IPQn7KYZAL7B1szB0NLLAN7US0RVDqOghPUWHnpEsjkFgzfdU9gvFrHt83zBZld6EzDqzY6baUbs",
                'status' => "enabled",
                'point_expires_at' => "2023-05-11T01:45:25.000000+09:00",
                'point_expires_in_days' => 3987,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [2, 1, 3, 2, 0, 0, 4, 4, 3, 4],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["2e26836b-66b4-46fd-a034-3ccb5efbf98d", "023403bb-ed55-4fac-8991-becb8ac6dfde", "bdf6d937-2a13-4526-a50d-d4cf27629c4a", "a997cd09-fe88-4621-a6e6-219acefceca8", "3f569d3c-b817-4b7c-b868-73021e8d14ec", "7b827561-7080-4c87-b6d5-d493a29de329", "2dcf5bb1-8d87-4956-9f94-e89ed542f1df"],
                'minimum_number_for_combination_purchase' => 7357,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 7322,
                'max_total_point_amount' => 4915,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign17()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'event' => "external-transaction",
                'description' => "4un8fV9LG7IXdfAKHdiM8w9hkL",
                'status' => "disabled",
                'point_expires_at' => "2021-12-10T20:35:14.000000+09:00",
                'point_expires_in_days' => 5900,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [1, 1, 3, 0, 2, 5, 1, 3, 2],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["952bf84c-d2c9-44bb-babd-e9bc33eb0dac"],
                'minimum_number_for_combination_purchase' => 3177,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 849,
                'max_total_point_amount' => 7519,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign18()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'priority' => 3490,
                'event' => "payment",
                'description' => "AOUrWB3H5VdX3Ik3XYaumbjOKpriSHoFIQPi3iu61FZ7wj9Ku71rdIt6zagBtLwupx",
                'status' => "disabled",
                'point_expires_at' => "2020-07-11T11:31:42.000000+09:00",
                'point_expires_in_days' => 8420,
                'is_exclusive' => FALSE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [5, 6, 6, 0, 6, 5, 5, 6, 6],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["a8cbd9cc-5ab6-456d-b3ef-dc548164cfbe", "c2c6d748-3fac-44af-b75d-ac47c7f8c7f7", "4db33715-a66f-4abd-b81a-d03431eb01ef"],
                'minimum_number_for_combination_purchase' => 5479,
                'exist_in_each_product_groups' => TRUE,
                'max_point_amount' => 3135,
                'max_total_point_amount' => 9422,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign19()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'ends_at' => "2021-11-11T00:11:18.000000+09:00",
                'priority' => 3199,
                'event' => "external-transaction",
                'description' => "ikud277ceaXmS13luXr4C13lSRQ7cPQSNxWc9fx1XXlBW6k9ePgUJFUyrDZOTP2dr1VXZUFZiKwTCHNY3Xh6M8fpZbZOoHcWc2sQ1aV0ZjjZXYCsykwHwQvsyDowYZW1l",
                'status' => "enabled",
                'point_expires_at' => "2023-01-25T14:42:34.000000+09:00",
                'point_expires_in_days' => 125,
                'is_exclusive' => FALSE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [2, 4, 5, 2, 3, 1, 2, 3],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["25b86707-7e4f-424b-80cc-5c268b7cef61", "56dfb999-e755-4b0e-ba5d-39e27c210790", "dd87a691-bf5b-48ef-9053-f979d9594c54", "fac466a3-7022-4932-9d76-a336ceff9008", "57a79b1a-7b55-4aaf-a654-2abc79f9ad22", "01c1cced-8ef6-4218-8aa1-287854d18b54", "db229b81-14a0-4550-be8c-e590442af847", "1277e6c1-b0b3-4fb5-b703-534cd62c0c5e", "10148bef-810f-4f47-9351-fa3fe4e4a264"],
                'minimum_number_for_combination_purchase' => 9139,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 8079,
                'max_total_point_amount' => 6765,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign20()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'starts_at' => "2022-12-13T06:05:54.000000+09:00",
                'ends_at' => "2020-08-01T18:40:41.000000+09:00",
                'priority' => 6556,
                'event' => "topup",
                'description' => "nU8oJIkRCorlAZX8hRab5l5jt8Up93bLzdB7YXNMuLZlQsOnNxTHfNS7K8uMxrtTKNP2rlkc2NA70O1BWaafUQAybj6OtCDywsmiLrTnr2LBs10J3P36SxcjgkEsBtsPOwlfof1JhYivIrllzIktp2VSTMas6PuWluQRPey8TrLElHa2G5kIO",
                'status' => "enabled",
                'point_expires_at' => "2022-03-10T01:28:18.000000+09:00",
                'point_expires_in_days' => 3688,
                'is_exclusive' => TRUE,
                'subject' => "money",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [3, 4, 2, 6, 5, 5, 2],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["4bd5d742-81c4-42ef-8caa-70a61d4de116", "6f4e4f46-646c-4ca9-8669-35716c01d0e5", "0fb3580f-8311-49b1-a213-fa8d86c9d723"],
                'minimum_number_for_combination_purchase' => 8139,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 9007,
                'max_total_point_amount' => 7722,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCampaign21()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCampaign(
            "d4d2298f-2e46-46a3-82e2-588d28f69f2a",
            [
                'name' => "RzsWK4DsoRRyD4v2755wMN6gJzbHpR9rk2EHi8QEcnZQJ4jfCfJzqFCrrb0oXvUzZWFTMeGWBwXBo2o4oiuSSVutyjKdcDsakezMumRECWZUvsqQ7dagggNog20kSqESnIMKeEOY8oIJNbcnQ9nlHa1pHLZDPzXifgmbCSiekv0sCCiPAmcxA3MInPmk7aBXL7xpiVE2BmQNRFr61L02QBXdunLLPlu3kubTBiX3aXLaduep8yfu",
                'starts_at' => "2020-07-17T16:04:55.000000+09:00",
                'ends_at' => "2023-07-15T01:52:26.000000+09:00",
                'priority' => 1150,
                'event' => "external-transaction",
                'description' => "d6PWvqbZmH785iKj8aEziwt8Wi3Ht0FqknJXSBrR2sdqsSKhWQtvZp5QHKWIJAHjHWF0gmqtoFO2iyh5SPOaBiQ1jwXS",
                'status' => "enabled",
                'point_expires_at' => "2021-03-15T04:58:33.000000+09:00",
                'point_expires_in_days' => 9753,
                'is_exclusive' => TRUE,
                'subject' => "all",
                'amount_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "subject_more_than_or_equal" => 1000, "subject_less_than" => 5000]
        ],
                'product_based_point_rules' => [["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        , ["point_amount" => 5, "point_amount_unit" => "percent", "product_code" => "4912345678904", "is_multiply_by_count" => TRUE, "required_count" => 2]
        ],
                'applicable_days_of_week' => [3, 4],
                'applicable_time_ranges' => [["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        , ["from" => "12:00", "to" => "23:59"]
        ],
                'applicable_shop_ids' => ["6d8c56b9-d258-48a3-901a-ad17f99b12ae", "373fa941-40be-447a-8e98-f43b0013f45f", "4a996a57-7c8d-4c66-a920-b246d0b05ff2", "60bee83a-caa1-4a1e-bb0b-b81cb6caafe8"],
                'minimum_number_for_combination_purchase' => 7391,
                'exist_in_each_product_groups' => FALSE,
                'max_point_amount' => 1282,
                'max_total_point_amount' => 6750,
                'applicable_account_metadata' => ["key" => "sex", "value" => "male"]
        
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
