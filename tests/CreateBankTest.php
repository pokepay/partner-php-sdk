<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class CreateBank extends TestCase
{
    public function testCreateBank0()
    {
        $client = $this->newClient();
        $request = new Request\CreateBank(
            "f06b96bd-cfdf-46f6-bcc8-1fb7e0a21e12",
            "ce66b996-7b8c-4399-8276-db06222528bf",
            "3G4rTAR1PvRtsLqLjeydG6gmSI7vTRRzSd9I7tngJBOt6kW5EFlpJq5pGCDJNj7E",
            "Sl3OZ98ZhZAmQ"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateBank1()
    {
        $client = $this->newClient();
        $request = new Request\CreateBank(
            "f06b96bd-cfdf-46f6-bcc8-1fb7e0a21e12",
            "ce66b996-7b8c-4399-8276-db06222528bf",
            "3G4rTAR1PvRtsLqLjeydG6gmSI7vTRRzSd9I7tngJBOt6kW5EFlpJq5pGCDJNj7E",
            "Sl3OZ98ZhZAmQ",
            [
                'birthdate' => "P"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testCreateBank2()
    {
        $client = $this->newClient();
        $request = new Request\CreateBank(
            "f06b96bd-cfdf-46f6-bcc8-1fb7e0a21e12",
            "ce66b996-7b8c-4399-8276-db06222528bf",
            "3G4rTAR1PvRtsLqLjeydG6gmSI7vTRRzSd9I7tngJBOt6kW5EFlpJq5pGCDJNj7E",
            "Sl3OZ98ZhZAmQ",
            [
                'email' => "QAirvkvpkW@aRxQ.com",
                'birthdate' => "p"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
