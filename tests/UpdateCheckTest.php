<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "7a499f19-5abf-4124-9117-e370a562db28"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "7a499f19-5abf-4124-9117-e370a562db28",
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "7a499f19-5abf-4124-9117-e370a562db28",
            [
                'bear_point_account' => "c16d5388-2a07-4ece-9640-c2f5680d869a",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "7a499f19-5abf-4124-9117-e370a562db28",
            [
                'point_expires_in_days' => 491,
                'bear_point_account' => "24f7cb60-92ad-4e43-90eb-aa5be687c990",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "7a499f19-5abf-4124-9117-e370a562db28",
            [
                'point_expires_at' => "2021-08-03T03:20:27.000000+09:00",
                'point_expires_in_days' => 741,
                'bear_point_account' => "d682e261-1687-4f5a-9e7d-bb3e1f7e8cb2",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "7a499f19-5abf-4124-9117-e370a562db28",
            [
                'expires_at' => "2020-07-23T18:50:43.000000+09:00",
                'point_expires_at' => "2021-01-19T09:45:29.000000+09:00",
                'point_expires_in_days' => 1722,
                'bear_point_account' => "1b91c515-59f4-4793-93a9-824ad171109f",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "7a499f19-5abf-4124-9117-e370a562db28",
            [
                'usage_limit' => 7195,
                'expires_at' => "2023-10-18T05:30:28.000000+09:00",
                'point_expires_at' => "2023-08-05T02:41:29.000000+09:00",
                'point_expires_in_days' => 4436,
                'bear_point_account' => "ca2b00df-3fe7-4b51-82fc-0e0a6aa48945",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "7a499f19-5abf-4124-9117-e370a562db28",
            [
                'is_onetime' => FALSE,
                'usage_limit' => 1958,
                'expires_at' => "2022-06-05T14:57:22.000000+09:00",
                'point_expires_at' => "2022-06-23T03:19:52.000000+09:00",
                'point_expires_in_days' => 263,
                'bear_point_account' => "7c778aaa-11fb-4a8c-bdb5-0a919a4ecd59",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "7a499f19-5abf-4124-9117-e370a562db28",
            [
                'description' => "FU59xMzbLO8b0VSvz1xy2V7JbWBwfLxMmIeEVd3dxG9UbqSGNMXeN2DzdaMvJriZQF70o8dDhgvjVdm3gKjse3R7PbhiQJUHnfVdFOB1AnJvyUh0Wh5wfohXUzbXhxqJzfJ0YTMzgzUgax0k0mnuw8yVn13sSgm5PVSrUP",
                'is_onetime' => TRUE,
                'usage_limit' => 3018,
                'expires_at' => "2022-07-17T07:14:30.000000+09:00",
                'point_expires_at' => "2022-04-20T23:30:38.000000+09:00",
                'point_expires_in_days' => 5463,
                'bear_point_account' => "6ac21809-fd25-4474-a1d4-7494a609bf66",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "7a499f19-5abf-4124-9117-e370a562db28",
            [
                'point_amount' => 8493.0,
                'description' => "xCQmZGN1yRNDFGRa214fgIrIfGI2nk9YQQwAJySwVC5Ow6pIICDeFS8qGofJjrbWf4MJ8VOAORaVnScXTOu8iGxKCUxJ7iWEuZEXpJcFNDCWKVdE2vbOacj4bTQw7n1HO4Ajr70e9dnlzw3ie0tjRwA1iLUaqUrxCtvgusy58A5jbSou0NTsTehoqfnBOpmpcE",
                'is_onetime' => FALSE,
                'usage_limit' => 2419,
                'expires_at' => "2023-01-02T07:24:09.000000+09:00",
                'point_expires_at' => "2022-06-02T18:12:08.000000+09:00",
                'point_expires_in_days' => 1064,
                'bear_point_account' => "a3c8a6cf-c14a-4329-9e97-fdc1cde4049f",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "7a499f19-5abf-4124-9117-e370a562db28",
            [
                'money_amount' => 6359.0,
                'point_amount' => 9069.0,
                'description' => "XfvzAVxYqJCWWGLYsaVMODp9eicEtJ595o7Aigld5upRiGoEZWfFsrNHxCV3Drc6h0eYf",
                'is_onetime' => FALSE,
                'usage_limit' => 4040,
                'expires_at' => "2023-11-01T06:03:03.000000+09:00",
                'point_expires_at' => "2021-11-21T17:09:58.000000+09:00",
                'point_expires_in_days' => 7560,
                'bear_point_account' => "5ed1a172-5e8d-4e14-a56c-ee89b3ef18ef",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
