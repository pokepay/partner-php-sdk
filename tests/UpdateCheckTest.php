<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "ac9b20d9-1bcc-4c1b-b014-9ee278fd62fb"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "ac9b20d9-1bcc-4c1b-b014-9ee278fd62fb",
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "ac9b20d9-1bcc-4c1b-b014-9ee278fd62fb",
            [
                'bear_point_account' => "52e54a6b-dcc3-4aab-9581-1541ff182d88",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "ac9b20d9-1bcc-4c1b-b014-9ee278fd62fb",
            [
                'point_expires_in_days' => 2600,
                'bear_point_account' => "cac4e72e-5456-40a3-ada6-36717435d653",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "ac9b20d9-1bcc-4c1b-b014-9ee278fd62fb",
            [
                'point_expires_at' => "2020-01-24T17:09:29.000000+09:00",
                'point_expires_in_days' => 28,
                'bear_point_account' => "3b1b229d-fe0b-4664-94e1-2f965aa45d63",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "ac9b20d9-1bcc-4c1b-b014-9ee278fd62fb",
            [
                'expires_at' => "2021-06-04T13:57:08.000000+09:00",
                'point_expires_at' => "2020-12-24T05:52:16.000000+09:00",
                'point_expires_in_days' => 7329,
                'bear_point_account' => "98651e74-b904-4960-820a-a88daf697277",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "ac9b20d9-1bcc-4c1b-b014-9ee278fd62fb",
            [
                'usage_limit' => 5571,
                'expires_at' => "2024-09-29T18:32:18.000000+09:00",
                'point_expires_at' => "2022-09-03T10:52:18.000000+09:00",
                'point_expires_in_days' => 7523,
                'bear_point_account' => "a92b9a11-f203-4a4f-8bf2-1e5bd6425b71",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "ac9b20d9-1bcc-4c1b-b014-9ee278fd62fb",
            [
                'is_onetime' => FALSE,
                'usage_limit' => 4805,
                'expires_at' => "2023-10-19T22:22:56.000000+09:00",
                'point_expires_at' => "2022-07-12T17:25:10.000000+09:00",
                'point_expires_in_days' => 5158,
                'bear_point_account' => "ab4617df-c42a-4ccc-a63d-b0db22df8536",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "ac9b20d9-1bcc-4c1b-b014-9ee278fd62fb",
            [
                'description' => "ZqSXb2Lr55RtyiRtGJ1HUxolj1KPz6vAaVd6Sg4zOt2LPb0nLBvCfu5QWsdUnRrH9KHVuXFGKt4lw9lRVMCAhIxweHf4mhVFw56RKDemCYdfHKy6kNARZB0e7gSo7Ck5GjWL9QXL9sfwRokQiO2gJLOs7NWiVmOaSDg31Umvi1k0xZ",
                'is_onetime' => FALSE,
                'usage_limit' => 2726,
                'expires_at' => "2025-02-05T10:07:44.000000+09:00",
                'point_expires_at' => "2024-03-25T09:37:02.000000+09:00",
                'point_expires_in_days' => 1225,
                'bear_point_account' => "af1bbcaf-129f-420e-9613-556c16088a55",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "ac9b20d9-1bcc-4c1b-b014-9ee278fd62fb",
            [
                'point_amount' => 1461.0,
                'description' => "Bk1mC260SZIPf7lUxpBEwOCUnBV1wl8i3xQfqNGTjhBSpAIG2GVjRLCF7S26ypTzMExe5LQXN3tfMMeaiTEdRlgPRLO6iu4xB9p9hHVjuFskSUixLpvflY8MFYZJvlfPZ9XRs2DjUex8FZcru468uiy2IBQsKNbECUonyUv3nTPZ701h3V5Qywi2pn04JUSx27eV",
                'is_onetime' => FALSE,
                'usage_limit' => 7843,
                'expires_at' => "2025-07-24T04:55:11.000000+09:00",
                'point_expires_at' => "2020-05-24T05:46:48.000000+09:00",
                'point_expires_in_days' => 6067,
                'bear_point_account' => "50301b5d-b077-4bfb-9460-9f8913af16cf",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "ac9b20d9-1bcc-4c1b-b014-9ee278fd62fb",
            [
                'money_amount' => 3320.0,
                'point_amount' => 2143.0,
                'description' => "9gOffBCzdPD5lY5ruzs73QnlHzwGBVLp2Vmg3eprOU7ktZcHWsZTpEtZX9770nlSO8H2DCl6imPJgn2XjYsZUpQvLebh65Hdtxmvs4SwxRthVVayjO1th3s3e6fayZ2E32vm3RMvvWttu1PJb3d04IfskzbRh2KXDkJqy1UyPaGHVkyM",
                'is_onetime' => FALSE,
                'usage_limit' => 8019,
                'expires_at' => "2025-09-04T12:30:28.000000+09:00",
                'point_expires_at' => "2024-11-24T13:54:24.000000+09:00",
                'point_expires_in_days' => 8384,
                'bear_point_account' => "d960c86d-e0e5-48ed-9afe-efaed6761525",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
