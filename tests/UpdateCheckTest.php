<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0da2a235-a61d-4fb0-895d-6bf9eae38e8e"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0da2a235-a61d-4fb0-895d-6bf9eae38e8e",
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0da2a235-a61d-4fb0-895d-6bf9eae38e8e",
            [
                'bear_point_account' => "f3ece267-e6dd-4c26-bb9a-a2145b58b94f",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0da2a235-a61d-4fb0-895d-6bf9eae38e8e",
            [
                'point_expires_in_days' => 7651,
                'bear_point_account' => "dc2a9537-2e25-428b-8c79-9759f46c2283",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0da2a235-a61d-4fb0-895d-6bf9eae38e8e",
            [
                'point_expires_at' => "2022-06-23T02:48:50.000000Z",
                'point_expires_in_days' => 462,
                'bear_point_account' => "588f723f-b8d0-4356-a138-15ece3046a56",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0da2a235-a61d-4fb0-895d-6bf9eae38e8e",
            [
                'expires_at' => "2021-06-27T23:48:12.000000Z",
                'point_expires_at' => "2021-04-14T11:48:16.000000Z",
                'point_expires_in_days' => 1536,
                'bear_point_account' => "5885fd4f-db4f-4e31-b732-dcc721d95a97",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0da2a235-a61d-4fb0-895d-6bf9eae38e8e",
            [
                'usage_limit' => 4840,
                'expires_at' => "2024-03-14T23:38:51.000000Z",
                'point_expires_at' => "2023-10-29T21:40:43.000000Z",
                'point_expires_in_days' => 4895,
                'bear_point_account' => "36989ecd-ea2e-4586-9178-d41a6010f1d0",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0da2a235-a61d-4fb0-895d-6bf9eae38e8e",
            [
                'is_onetime' => FALSE,
                'usage_limit' => 528,
                'expires_at' => "2021-06-28T16:46:16.000000Z",
                'point_expires_at' => "2022-04-18T04:46:18.000000Z",
                'point_expires_in_days' => 7522,
                'bear_point_account' => "dcc480ac-5d41-4298-b474-fb4dd4432d13",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0da2a235-a61d-4fb0-895d-6bf9eae38e8e",
            [
                'description' => "t9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHAM5JdvPW8u4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1",
                'is_onetime' => FALSE,
                'usage_limit' => 926,
                'expires_at' => "2022-11-29T22:15:30.000000Z",
                'point_expires_at' => "2023-07-27T03:52:53.000000Z",
                'point_expires_in_days' => 9891,
                'bear_point_account' => "0017f63e-2af1-4d56-b4bf-6b1950a35255",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0da2a235-a61d-4fb0-895d-6bf9eae38e8e",
            [
                'point_amount' => 774.0,
                'description' => "a8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4Vsa",
                'is_onetime' => TRUE,
                'usage_limit' => 9429,
                'expires_at' => "2021-10-28T01:43:41.000000Z",
                'point_expires_at' => "2020-04-30T07:58:27.000000Z",
                'point_expires_in_days' => 4328,
                'bear_point_account' => "ac255a21-4c61-49b8-885e-2c3b5040773d",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0da2a235-a61d-4fb0-895d-6bf9eae38e8e",
            [
                'money_amount' => 3664.0,
                'point_amount' => 7445.0,
                'description' => "Lfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27",
                'is_onetime' => FALSE,
                'usage_limit' => 2449,
                'expires_at' => "2020-08-03T06:46:10.000000Z",
                'point_expires_at' => "2021-03-26T22:06:24.000000Z",
                'point_expires_in_days' => 2622,
                'bear_point_account' => "a69aa3f1-6679-49e2-bfd4-193394ba5d95",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
