<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4cbfa1a2-eb34-4f3d-b73f-622fe392fa11"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4cbfa1a2-eb34-4f3d-b73f-622fe392fa11",
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4cbfa1a2-eb34-4f3d-b73f-622fe392fa11",
            [
                'bear_point_account' => "fd336c1f-d653-448c-90de-42d4b63db915",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4cbfa1a2-eb34-4f3d-b73f-622fe392fa11",
            [
                'point_expires_in_days' => 5421,
                'bear_point_account' => "6962aedc-fed3-46a3-83a3-812fecdf3605",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4cbfa1a2-eb34-4f3d-b73f-622fe392fa11",
            [
                'point_expires_at' => "2022-01-06T01:30:58.000000+09:00",
                'point_expires_in_days' => 4717,
                'bear_point_account' => "d2f99877-2f06-4088-b6ec-a4c34cc38c32",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4cbfa1a2-eb34-4f3d-b73f-622fe392fa11",
            [
                'expires_at' => "2021-01-04T19:38:02.000000+09:00",
                'point_expires_at' => "2022-04-26T13:11:10.000000+09:00",
                'point_expires_in_days' => 9245,
                'bear_point_account' => "6f8e1ec6-b432-4fa5-8982-d39d47aa1de0",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4cbfa1a2-eb34-4f3d-b73f-622fe392fa11",
            [
                'usage_limit' => 917,
                'expires_at' => "2020-09-29T19:42:22.000000+09:00",
                'point_expires_at' => "2023-03-14T13:08:04.000000+09:00",
                'point_expires_in_days' => 738,
                'bear_point_account' => "d560e768-44d6-4c28-9ebc-2164d5bafd03",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4cbfa1a2-eb34-4f3d-b73f-622fe392fa11",
            [
                'is_onetime' => TRUE,
                'usage_limit' => 3279,
                'expires_at' => "2022-05-21T07:12:52.000000+09:00",
                'point_expires_at' => "2021-08-18T21:13:38.000000+09:00",
                'point_expires_in_days' => 3486,
                'bear_point_account' => "5e6fe348-e95b-4d03-be0a-09f2f194dca6",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4cbfa1a2-eb34-4f3d-b73f-622fe392fa11",
            [
                'description' => "JBCpPik4bnPEThVDg0mONPiUpx3rlgwrst6SasOh77PjEf5mDaER2JL7lgpiLxyx1VV7KI8rkSEUFBdljGYC9RACX0aD6e5glCCCvcQ19I6FvC9NxCfGioP8ql",
                'is_onetime' => TRUE,
                'usage_limit' => 9896,
                'expires_at' => "2021-04-05T03:29:00.000000+09:00",
                'point_expires_at' => "2020-02-20T12:28:58.000000+09:00",
                'point_expires_in_days' => 9057,
                'bear_point_account' => "2c332e45-dfe2-48eb-8dce-a87d8fa026dd",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4cbfa1a2-eb34-4f3d-b73f-622fe392fa11",
            [
                'point_amount' => 745.0,
                'description' => "YqLxyZrUbidly0idO6zPlME3RDSkhYmlQYiWsj7N4Fl6u74FFr1WgNjNg75d9SRzrcYyD3VWAvE1ORjth88kCL",
                'is_onetime' => FALSE,
                'usage_limit' => 5908,
                'expires_at' => "2023-11-08T23:56:14.000000+09:00",
                'point_expires_at' => "2021-12-08T05:58:53.000000+09:00",
                'point_expires_in_days' => 6196,
                'bear_point_account' => "3c57eb33-8d80-4921-8d48-f555942ca30d",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4cbfa1a2-eb34-4f3d-b73f-622fe392fa11",
            [
                'money_amount' => 113.0,
                'point_amount' => 5386.0,
                'description' => "njvY7PZQWM1UUAjQFCZ970DiUBbhZ",
                'is_onetime' => FALSE,
                'usage_limit' => 5400,
                'expires_at' => "2021-10-14T06:45:32.000000+09:00",
                'point_expires_at' => "2022-10-16T13:55:57.000000+09:00",
                'point_expires_in_days' => 6787,
                'bear_point_account' => "782705d6-cc9a-4c2d-b091-c174a133823e",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
