<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "c4c45598-ef57-4655-8e69-1421060243b6"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "c4c45598-ef57-4655-8e69-1421060243b6",
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "c4c45598-ef57-4655-8e69-1421060243b6",
            [
                'bear_point_account' => "1f7a18d9-e0ae-4eda-a291-ab2c6a8e4a47",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "c4c45598-ef57-4655-8e69-1421060243b6",
            [
                'point_expires_in_days' => 7946,
                'bear_point_account' => "fa1a52e5-599f-46f9-8353-c5c6ad391f48",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "c4c45598-ef57-4655-8e69-1421060243b6",
            [
                'point_expires_at' => "2020-11-28T17:21:42.000000+09:00",
                'point_expires_in_days' => 3822,
                'bear_point_account' => "3a3e1f5f-7063-4008-b243-557bba1c9642",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "c4c45598-ef57-4655-8e69-1421060243b6",
            [
                'expires_at' => "2021-08-22T16:07:20.000000+09:00",
                'point_expires_at' => "2023-07-11T08:39:26.000000+09:00",
                'point_expires_in_days' => 4761,
                'bear_point_account' => "fdd364de-7f74-4924-838b-61f1274c8a8c",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "c4c45598-ef57-4655-8e69-1421060243b6",
            [
                'usage_limit' => 3835,
                'expires_at' => "2021-12-13T16:42:44.000000+09:00",
                'point_expires_at' => "2021-01-12T19:50:56.000000+09:00",
                'point_expires_in_days' => 4147,
                'bear_point_account' => "72063bc9-760e-4dd6-9903-3c32b775173c",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "c4c45598-ef57-4655-8e69-1421060243b6",
            [
                'is_onetime' => TRUE,
                'usage_limit' => 4309,
                'expires_at' => "2020-12-21T18:34:56.000000+09:00",
                'point_expires_at' => "2022-03-08T05:17:15.000000+09:00",
                'point_expires_in_days' => 5669,
                'bear_point_account' => "8ef3c31a-b9f8-4e27-8bc5-504b5bb9200c",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "c4c45598-ef57-4655-8e69-1421060243b6",
            [
                'description' => "mwHnigIC2xteLEmOps6u4P22rjT4dupTBgLrwJlYmSqD3jh0KtoQaeaW3",
                'is_onetime' => TRUE,
                'usage_limit' => 2862,
                'expires_at' => "2020-12-11T14:07:51.000000+09:00",
                'point_expires_at' => "2023-07-28T02:23:21.000000+09:00",
                'point_expires_in_days' => 1404,
                'bear_point_account' => "2adb5c77-903f-4d81-bfaa-0195ea4e98d9",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "c4c45598-ef57-4655-8e69-1421060243b6",
            [
                'point_amount' => 9122.0,
                'description' => "b9HTOawWBmOJlSRN9rogVZwJO2xNcltqUbvpNyoJI0vqJ8n0oUjQYsKaRMsrJUacY2rYQO4gmGHCfbUV5BkcqYiSNlDYC6MEWefziiHI3EykNpjwCPjAkzyY2kmUe2JJ53U3N6F0e26pbO3Httl",
                'is_onetime' => FALSE,
                'usage_limit' => 8341,
                'expires_at' => "2023-11-05T09:19:48.000000+09:00",
                'point_expires_at' => "2020-05-30T15:20:03.000000+09:00",
                'point_expires_in_days' => 358,
                'bear_point_account' => "ca635514-b2f9-4c22-a97d-40e15a286bf4",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "c4c45598-ef57-4655-8e69-1421060243b6",
            [
                'money_amount' => 1101.0,
                'point_amount' => 4671.0,
                'description' => "7VF3dtugJSz1Q3vovXNsgFsW05W19aXuGVVRQlUVJv9CZ2ZsBhmJBENJ2Jp2YLnPueitIaB8AWaFb8JKCZbl1FLUJSG0fudQ9bvTSzMBL1Qigyh82R8yfv5oZ1A8LucSTZwJytxSEpRfXYxFxMDsqe8NITOunWJGeGMfsCgwJoSsvq0p2vMuqT6yOdp",
                'is_onetime' => TRUE,
                'usage_limit' => 4013,
                'expires_at' => "2020-07-08T18:23:49.000000+09:00",
                'point_expires_at' => "2020-05-24T12:05:18.000000+09:00",
                'point_expires_in_days' => 5287,
                'bear_point_account' => "2c04be1f-06dc-4cf8-ad5b-736e57ea89c7",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
