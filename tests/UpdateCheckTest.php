<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0e2a7baa-43a1-48f6-94de-8294f4e75bf2"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0e2a7baa-43a1-48f6-94de-8294f4e75bf2",
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0e2a7baa-43a1-48f6-94de-8294f4e75bf2",
            [
                'bear_point_account' => "33df7695-fabd-4731-829f-130f0701e1f5",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0e2a7baa-43a1-48f6-94de-8294f4e75bf2",
            [
                'point_expires_in_days' => 2064,
                'bear_point_account' => "43e1aae1-0928-402f-93b2-654d2430f6b5",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0e2a7baa-43a1-48f6-94de-8294f4e75bf2",
            [
                'point_expires_at' => "2020-07-22T01:40:58.000000+09:00",
                'point_expires_in_days' => 6129,
                'bear_point_account' => "1cdbbbea-f2cf-496d-b257-95404dcb6a85",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0e2a7baa-43a1-48f6-94de-8294f4e75bf2",
            [
                'expires_at' => "2023-05-29T18:27:02.000000+09:00",
                'point_expires_at' => "2023-11-03T01:04:49.000000+09:00",
                'point_expires_in_days' => 4867,
                'bear_point_account' => "eb8c7c99-c7ae-408a-be1d-4bbd4ee7322d",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0e2a7baa-43a1-48f6-94de-8294f4e75bf2",
            [
                'usage_limit' => 335,
                'expires_at' => "2021-12-13T02:45:09.000000+09:00",
                'point_expires_at' => "2022-04-18T13:00:20.000000+09:00",
                'point_expires_in_days' => 1056,
                'bear_point_account' => "8cf69597-f55a-4b49-a0bc-753a3c09054d",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0e2a7baa-43a1-48f6-94de-8294f4e75bf2",
            [
                'is_onetime' => FALSE,
                'usage_limit' => 2130,
                'expires_at' => "2023-01-12T04:15:16.000000+09:00",
                'point_expires_at' => "2023-11-11T01:31:17.000000+09:00",
                'point_expires_in_days' => 8953,
                'bear_point_account' => "530e7b67-2f89-494c-a2cb-9ffdbfa93000",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0e2a7baa-43a1-48f6-94de-8294f4e75bf2",
            [
                'description' => "7YRyxyrZ",
                'is_onetime' => TRUE,
                'usage_limit' => 3053,
                'expires_at' => "2023-11-15T00:41:42.000000+09:00",
                'point_expires_at' => "2022-03-17T07:45:16.000000+09:00",
                'point_expires_in_days' => 7963,
                'bear_point_account' => "1c508d22-73ce-4466-a3df-084326932828",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0e2a7baa-43a1-48f6-94de-8294f4e75bf2",
            [
                'point_amount' => 6875.0,
                'description' => "kQgoeTymjnOdTRaPFDTArRmuPmAJnui42dV27i9zwUXlIkPR3RNiT4rDNO22rZegGMgKbqaHCdxrdmMPmKRRFUEcedJZUls3KJMYUY64Wh4KJyIKcNshMPn4Tc1wA1W8zmi3CE8LqDpJDBWQCyImKl1fcx9aLaH7vm",
                'is_onetime' => TRUE,
                'usage_limit' => 353,
                'expires_at' => "2022-06-30T17:32:46.000000+09:00",
                'point_expires_at' => "2022-06-29T11:14:38.000000+09:00",
                'point_expires_in_days' => 7012,
                'bear_point_account' => "f5a8cc70-fd70-455e-a356-2a76a614b91a",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "0e2a7baa-43a1-48f6-94de-8294f4e75bf2",
            [
                'money_amount' => 6349.0,
                'point_amount' => 4934.0,
                'description' => "a7O6C9FI5AA0WGZYQCq8dhTuuX5eizx73Hgqy1agrPyJ0pJNS8L2Odq93FDAWeKraA7KE7QJzRu6JVBVyQOdUHelh",
                'is_onetime' => FALSE,
                'usage_limit' => 3445,
                'expires_at' => "2022-06-14T16:15:12.000000+09:00",
                'point_expires_at' => "2021-07-31T10:32:22.000000+09:00",
                'point_expires_in_days' => 8816,
                'bear_point_account' => "9fa3c050-1aa9-4b26-bcf4-3e4529e96640",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
