<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "d869f644-0851-4143-b649-08190f207281"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "d869f644-0851-4143-b649-08190f207281",
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "d869f644-0851-4143-b649-08190f207281",
            [
                'bear_point_account' => "eb42c91c-e73f-40d6-834c-99ef543c85e8",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "d869f644-0851-4143-b649-08190f207281",
            [
                'point_expires_in_days' => 4792,
                'bear_point_account' => "cc3833d9-2dae-41d8-b74c-15fcfeb77149",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "d869f644-0851-4143-b649-08190f207281",
            [
                'point_expires_at' => "2024-02-05T18:41:14.000000Z",
                'point_expires_in_days' => 9760,
                'bear_point_account' => "14e25200-003a-483f-be1b-60f6edcaf1fd",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "d869f644-0851-4143-b649-08190f207281",
            [
                'expires_at' => "2022-07-11T01:08:29.000000Z",
                'point_expires_at' => "2020-02-24T21:12:04.000000Z",
                'point_expires_in_days' => 3017,
                'bear_point_account' => "93da2485-558e-44c9-84df-dd48a2f5772e",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "d869f644-0851-4143-b649-08190f207281",
            [
                'usage_limit' => 3789,
                'expires_at' => "2020-06-23T21:23:01.000000Z",
                'point_expires_at' => "2020-01-21T20:05:30.000000Z",
                'point_expires_in_days' => 7264,
                'bear_point_account' => "dbd1aeae-be97-4976-ab1e-5350b051a77b",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "d869f644-0851-4143-b649-08190f207281",
            [
                'is_onetime' => TRUE,
                'usage_limit' => 9205,
                'expires_at' => "2024-04-16T08:25:47.000000Z",
                'point_expires_at' => "2020-04-23T09:18:59.000000Z",
                'point_expires_in_days' => 8780,
                'bear_point_account' => "0230f239-3798-4121-aaba-20653712a6e8",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "d869f644-0851-4143-b649-08190f207281",
            [
                'description' => "FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6",
                'is_onetime' => TRUE,
                'usage_limit' => 1393,
                'expires_at' => "2023-04-03T19:01:29.000000Z",
                'point_expires_at' => "2022-09-18T18:20:04.000000Z",
                'point_expires_in_days' => 143,
                'bear_point_account' => "9a14a861-462c-46e0-9b1e-8d83b2c7873d",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "d869f644-0851-4143-b649-08190f207281",
            [
                'point_amount' => 7443.0,
                'description' => "H11",
                'is_onetime' => FALSE,
                'usage_limit' => 9434,
                'expires_at' => "2023-04-04T19:27:17.000000Z",
                'point_expires_at' => "2020-02-28T16:37:53.000000Z",
                'point_expires_in_days' => 8425,
                'bear_point_account' => "f0070bd7-9477-49aa-b45b-82decf946ca5",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "d869f644-0851-4143-b649-08190f207281",
            [
                'money_amount' => 8395.0,
                'point_amount' => 2627.0,
                'description' => "w4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDebROkI568",
                'is_onetime' => TRUE,
                'usage_limit' => 6777,
                'expires_at' => "2021-09-17T02:17:00.000000Z",
                'point_expires_at' => "2020-03-24T17:53:25.000000Z",
                'point_expires_in_days' => 2338,
                'bear_point_account' => "4a714c3c-dc8d-4d76-8164-2d67637a06b2",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
