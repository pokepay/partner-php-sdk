<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "40a50bcf-8206-4f40-98c9-b916f0c501de"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "40a50bcf-8206-4f40-98c9-b916f0c501de",
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "40a50bcf-8206-4f40-98c9-b916f0c501de",
            [
                'bear_point_account' => "17b01569-f389-43e0-9a6a-492e81004be4",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "40a50bcf-8206-4f40-98c9-b916f0c501de",
            [
                'point_expires_in_days' => 161,
                'bear_point_account' => "c70cc07e-1da4-4751-9178-bcfddb91beed",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "40a50bcf-8206-4f40-98c9-b916f0c501de",
            [
                'point_expires_at' => "2020-02-02T23:53:05.000000Z",
                'point_expires_in_days' => 9594,
                'bear_point_account' => "d03d8be0-1757-4c89-a30f-613e284a8ce7",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "40a50bcf-8206-4f40-98c9-b916f0c501de",
            [
                'expires_at' => "2021-07-17T01:51:25.000000Z",
                'point_expires_at' => "2023-11-16T14:00:50.000000Z",
                'point_expires_in_days' => 2172,
                'bear_point_account' => "d5226a40-015a-4c76-82d1-8e89c230eeaa",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "40a50bcf-8206-4f40-98c9-b916f0c501de",
            [
                'usage_limit' => 1579,
                'expires_at' => "2020-06-28T23:46:44.000000Z",
                'point_expires_at' => "2020-12-15T03:19:07.000000Z",
                'point_expires_in_days' => 7914,
                'bear_point_account' => "eb72643d-7248-459b-b620-bc80c9a95768",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "40a50bcf-8206-4f40-98c9-b916f0c501de",
            [
                'is_onetime' => TRUE,
                'usage_limit' => 9742,
                'expires_at' => "2021-11-19T16:07:04.000000Z",
                'point_expires_at' => "2021-07-05T05:27:00.000000Z",
                'point_expires_in_days' => 2836,
                'bear_point_account' => "dc63079b-1ee6-4b16-9afd-4d5c064d671b",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "40a50bcf-8206-4f40-98c9-b916f0c501de",
            [
                'description' => "0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x0iUyrfJOMPlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7",
                'is_onetime' => FALSE,
                'usage_limit' => 4747,
                'expires_at' => "2021-07-05T13:53:16.000000Z",
                'point_expires_at' => "2022-05-08T17:53:07.000000Z",
                'point_expires_in_days' => 2892,
                'bear_point_account' => "fd164407-f392-4f7b-92cd-723f3f88b8d0",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "40a50bcf-8206-4f40-98c9-b916f0c501de",
            [
                'point_amount' => 3896.0,
                'description' => "cOO1w2GShMQxP1XNaA4tMwkt9CEIs7P52Qn8Ps6rGg4gxhQEPHlDMgzo7RyqyjDQCvIVLohtP7YX7LIJvkHIDHA",
                'is_onetime' => FALSE,
                'usage_limit' => 4533,
                'expires_at' => "2020-01-21T20:05:30.000000Z",
                'point_expires_at' => "2021-02-16T05:42:00.000000Z",
                'point_expires_in_days' => 7264,
                'bear_point_account' => "dbd1aeae-be97-4976-ab1e-5350b051a77b",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "40a50bcf-8206-4f40-98c9-b916f0c501de",
            [
                'money_amount' => 9205.0,
                'point_amount' => 5387.0,
                'description' => "4K9jehE0FIX2d1fsIJRaq4cseT3Jr8x9EZ1qV4Ufa8eDKBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLyZpFNZ79bus52pNLLPoSL84SGwACEhVooVmB4cFvb",
                'is_onetime' => TRUE,
                'usage_limit' => 6217,
                'expires_at' => "2022-11-11T21:36:07.000000Z",
                'point_expires_at' => "2020-09-18T19:22:00.000000Z",
                'point_expires_in_days' => 8280,
                'bear_point_account' => "34592ec1-9371-4ec7-a088-7fb4b0220d0f",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
