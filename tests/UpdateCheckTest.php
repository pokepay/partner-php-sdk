<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "60141fdd-6ceb-42e1-9070-532c13725cf7"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "60141fdd-6ceb-42e1-9070-532c13725cf7",
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "60141fdd-6ceb-42e1-9070-532c13725cf7",
            [
                'bear_point_account' => "039690c9-b516-4b44-b092-30e5dc164209",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "60141fdd-6ceb-42e1-9070-532c13725cf7",
            [
                'point_expires_in_days' => 9805,
                'bear_point_account' => "d64426a4-a705-4a79-ab5a-aa2d135d029a",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "60141fdd-6ceb-42e1-9070-532c13725cf7",
            [
                'point_expires_at' => "2020-03-06T08:42:24.000000Z",
                'point_expires_in_days' => 4807,
                'bear_point_account' => "f22beb4e-a05a-4d14-b711-7187892faaa4",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "60141fdd-6ceb-42e1-9070-532c13725cf7",
            [
                'expires_at' => "2023-10-17T12:46:49.000000Z",
                'point_expires_at' => "2023-08-19T12:37:21.000000Z",
                'point_expires_in_days' => 3644,
                'bear_point_account' => "29d96a7c-f462-43df-b53c-217311ff0c80",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "60141fdd-6ceb-42e1-9070-532c13725cf7",
            [
                'usage_limit' => 2443,
                'expires_at' => "2022-09-03T04:25:36.000000Z",
                'point_expires_at' => "2021-09-16T19:47:01.000000Z",
                'point_expires_in_days' => 893,
                'bear_point_account' => "fa0714a9-dc3c-4b5e-8606-12b20beb9ef0",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "60141fdd-6ceb-42e1-9070-532c13725cf7",
            [
                'is_onetime' => TRUE,
                'usage_limit' => 2892,
                'expires_at' => "2023-08-07T14:16:44.000000Z",
                'point_expires_at' => "2023-01-30T13:36:59.000000Z",
                'point_expires_in_days' => 1584,
                'bear_point_account' => "f682f622-6426-4cd0-a41d-e49b8280abef",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "60141fdd-6ceb-42e1-9070-532c13725cf7",
            [
                'description' => "L84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPHLfj8VAxLQCn6DppPY7uZKs5wMf3MBYDCu",
                'is_onetime' => TRUE,
                'usage_limit' => 3267,
                'expires_at' => "2021-08-17T01:01:01.000000Z",
                'point_expires_at' => "2020-05-30T21:18:02.000000Z",
                'point_expires_in_days' => 7107,
                'bear_point_account' => "ffa3d0fd-053d-4c4f-a720-bff4179dfee0",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "60141fdd-6ceb-42e1-9070-532c13725cf7",
            [
                'point_amount' => 1815.0,
                'description' => "8MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqybT3XFSWXNEvBDeb",
                'is_onetime' => FALSE,
                'usage_limit' => 6610,
                'expires_at' => "2024-11-16T11:28:43.000000Z",
                'point_expires_at' => "2022-11-20T00:35:21.000000Z",
                'point_expires_in_days' => 54,
                'bear_point_account' => "2b6f2a8b-1889-4836-b88e-35fb225e1a79",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "60141fdd-6ceb-42e1-9070-532c13725cf7",
            [
                'money_amount' => 1281.0,
                'point_amount' => 6556.0,
                'description' => "3vAdg2WzE6cQfJbdKVhYmdIeaGtyZiVBFtaHsVEu5jHLt1IIKsQ450xUM6O5hfI4vi32RsgmtpDzruBR2bpCJbWCsF1XOMwOMfbCbRi8MeoObjQBbD5vivOmPF0WWy",
                'is_onetime' => FALSE,
                'usage_limit' => 2444,
                'expires_at' => "2023-08-18T16:22:25.000000Z",
                'point_expires_at' => "2020-01-02T00:23:01.000000Z",
                'point_expires_in_days' => 187,
                'bear_point_account' => "972ad034-c929-47b3-93c2-065dbceed3a9",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
