<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "f26577e9-e4d3-4d83-a105-89dd8db64c13"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "f26577e9-e4d3-4d83-a105-89dd8db64c13",
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "f26577e9-e4d3-4d83-a105-89dd8db64c13",
            [
                'bear_point_account' => "b52cddf0-923e-4ff0-954a-ae7f1548d029",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "f26577e9-e4d3-4d83-a105-89dd8db64c13",
            [
                'point_expires_in_days' => 1064,
                'bear_point_account' => "0e953b73-8584-4dfc-9bb5-33a87e86d49e",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "f26577e9-e4d3-4d83-a105-89dd8db64c13",
            [
                'point_expires_at' => "2021-10-08T16:10:51.000000+09:00",
                'point_expires_in_days' => 4043,
                'bear_point_account' => "f796bed7-12b1-4781-9307-c64efd8a814b",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "f26577e9-e4d3-4d83-a105-89dd8db64c13",
            [
                'expires_at' => "2020-01-01T22:07:54.000000+09:00",
                'point_expires_at' => "2022-11-03T06:52:44.000000+09:00",
                'point_expires_in_days' => 6924,
                'bear_point_account' => "3368f09a-5c94-4352-8580-4bea8b93d916",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "f26577e9-e4d3-4d83-a105-89dd8db64c13",
            [
                'usage_limit' => 3366,
                'expires_at' => "2020-09-23T19:42:14.000000+09:00",
                'point_expires_at' => "2023-11-01T23:54:04.000000+09:00",
                'point_expires_in_days' => 8925,
                'bear_point_account' => "b781be9f-ee40-4a00-9e03-27e4f76f7fe2",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "f26577e9-e4d3-4d83-a105-89dd8db64c13",
            [
                'is_onetime' => FALSE,
                'usage_limit' => 1200,
                'expires_at' => "2020-09-15T23:14:35.000000+09:00",
                'point_expires_at' => "2020-08-09T23:00:17.000000+09:00",
                'point_expires_in_days' => 6270,
                'bear_point_account' => "6fe00920-0f79-4c00-8c71-fd69f1f3e4d2",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "f26577e9-e4d3-4d83-a105-89dd8db64c13",
            [
                'description' => "7J0k7XPsVR9oseGHXXzmRLj4DdxFUQVc59aRIP00nDuelMdz7xqtpZBCLBICvijoHceVin4KrTKn1eR4MRXt2TcfFAUCplbmhXwpO3627hCZfhxtt0WWPstlRx33ZuE1QEweltkuKe9VRdQ5K",
                'is_onetime' => TRUE,
                'usage_limit' => 8416,
                'expires_at' => "2022-02-26T09:43:55.000000+09:00",
                'point_expires_at' => "2022-09-10T02:30:21.000000+09:00",
                'point_expires_in_days' => 2475,
                'bear_point_account' => "9e6b819d-5ed2-446b-a60e-cb6695781167",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "f26577e9-e4d3-4d83-a105-89dd8db64c13",
            [
                'point_amount' => 1201.0,
                'description' => "L8pzMgh2BYj1a8Zv8AHnrqjguqLf8pRQxzhwyXSsEC4bhtaesdPZyJ7IocTHmp0y",
                'is_onetime' => FALSE,
                'usage_limit' => 968,
                'expires_at' => "2021-09-18T10:04:45.000000+09:00",
                'point_expires_at' => "2021-01-30T07:45:57.000000+09:00",
                'point_expires_in_days' => 3655,
                'bear_point_account' => "5f2a09ee-b349-4170-8293-8ea75b512b6b",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "f26577e9-e4d3-4d83-a105-89dd8db64c13",
            [
                'money_amount' => 8527.0,
                'point_amount' => 6086.0,
                'description' => "k9UOZ",
                'is_onetime' => FALSE,
                'usage_limit' => 8445,
                'expires_at' => "2022-02-18T07:15:45.000000+09:00",
                'point_expires_at' => "2020-07-29T02:37:59.000000+09:00",
                'point_expires_in_days' => 2907,
                'bear_point_account' => "81ec0f2f-5266-4cbd-8341-0d7e387af438",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
