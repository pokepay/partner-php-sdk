<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "a0ef7449-4e4f-4599-ac7d-7d51deb706e0"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "a0ef7449-4e4f-4599-ac7d-7d51deb706e0",
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "a0ef7449-4e4f-4599-ac7d-7d51deb706e0",
            [
                'bear_point_account' => "30817db3-e518-46da-8361-a7382a1568ec",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "a0ef7449-4e4f-4599-ac7d-7d51deb706e0",
            [
                'point_expires_in_days' => 1627,
                'bear_point_account' => "8ce0107d-e96d-4a88-944d-8754660766ba",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "a0ef7449-4e4f-4599-ac7d-7d51deb706e0",
            [
                'point_expires_at' => "2022-07-27T16:17:57.000000+09:00",
                'point_expires_in_days' => 6594,
                'bear_point_account' => "80337edb-1d8f-4546-965e-f8dcc442e441",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "a0ef7449-4e4f-4599-ac7d-7d51deb706e0",
            [
                'expires_at' => "2020-04-02T03:21:33.000000+09:00",
                'point_expires_at' => "2022-07-01T16:03:21.000000+09:00",
                'point_expires_in_days' => 4509,
                'bear_point_account' => "00308720-a965-48ad-83ce-3e8a156a7d88",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "a0ef7449-4e4f-4599-ac7d-7d51deb706e0",
            [
                'usage_limit' => 7247,
                'expires_at' => "2022-03-11T06:11:14.000000+09:00",
                'point_expires_at' => "2023-07-05T18:49:54.000000+09:00",
                'point_expires_in_days' => 2244,
                'bear_point_account' => "a9512888-a263-44e2-8ccf-48f39a435229",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "a0ef7449-4e4f-4599-ac7d-7d51deb706e0",
            [
                'is_onetime' => FALSE,
                'usage_limit' => 6708,
                'expires_at' => "2022-05-12T18:08:03.000000+09:00",
                'point_expires_at' => "2020-02-02T06:35:25.000000+09:00",
                'point_expires_in_days' => 4136,
                'bear_point_account' => "a544bf6a-bf09-4614-af81-1ff8bccba5c2",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "a0ef7449-4e4f-4599-ac7d-7d51deb706e0",
            [
                'description' => "ROpiRc0j39oPNkDTFwGmGihFz2z0gAPfWDnSv3peMsqUtDBVf5JNWPBpzSQtetKx5V0IU1H2quyHwM52367FRSK6ZN3dPGJYhssMJ1c81K9V4uwaN6FqKGuMQEbIhSKLSxcJDAAH0jwIPbMhYlMMXruKsOetb8P3w3wpAlq46MRFhBa1KSFCImukjAtQPb0UOT",
                'is_onetime' => TRUE,
                'usage_limit' => 7552,
                'expires_at' => "2020-12-04T07:06:17.000000+09:00",
                'point_expires_at' => "2021-09-28T02:35:18.000000+09:00",
                'point_expires_in_days' => 8060,
                'bear_point_account' => "839d5e3a-0586-46a4-b7cb-cf7232bbefdb",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "a0ef7449-4e4f-4599-ac7d-7d51deb706e0",
            [
                'point_amount' => 9428.0,
                'description' => "AdseC51TTzGU05VTqLiAQDTT40IDYkIvu0sCcHMaDTHEOIiZjdOoQxmayWcgZvBQUAudiHvhALf0xr0YedjAtAhk4Q5ZEYWHc6DIDKem3xaXPio5o0q9x",
                'is_onetime' => TRUE,
                'usage_limit' => 5353,
                'expires_at' => "2020-11-01T23:44:21.000000+09:00",
                'point_expires_at' => "2022-09-16T09:25:28.000000+09:00",
                'point_expires_in_days' => 4352,
                'bear_point_account' => "c42d07db-5979-4a82-a596-107253afd989",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "a0ef7449-4e4f-4599-ac7d-7d51deb706e0",
            [
                'money_amount' => 2783.0,
                'point_amount' => 9423.0,
                'description' => "PlYYA9d24g2qlkQeuW1v6Ot04JjRtKJ3Y50yRgOZb7LyYKRM",
                'is_onetime' => FALSE,
                'usage_limit' => 4950,
                'expires_at' => "2024-08-06T17:10:57.000000+09:00",
                'point_expires_at' => "2021-08-08T21:23:34.000000+09:00",
                'point_expires_in_days' => 5544,
                'bear_point_account' => "59a01387-658c-4e2c-bc63-f580455305ff",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
