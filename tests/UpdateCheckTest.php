<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4047d61b-bb7c-425f-9a66-e07bd0611535"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4047d61b-bb7c-425f-9a66-e07bd0611535",
            [
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4047d61b-bb7c-425f-9a66-e07bd0611535",
            [
                'bear_point_account' => "564fe7a1-5bfc-43d6-a344-a246bf767c54",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4047d61b-bb7c-425f-9a66-e07bd0611535",
            [
                'point_expires_in_days' => 9734,
                'bear_point_account' => "7b51675e-7e0a-4ec7-9526-f1b1814eda37",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4047d61b-bb7c-425f-9a66-e07bd0611535",
            [
                'point_expires_at' => "2021-07-21T20:06:28.000000+09:00",
                'point_expires_in_days' => 6074,
                'bear_point_account' => "d184a056-f8f0-405d-a09e-b475af35dd9d",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4047d61b-bb7c-425f-9a66-e07bd0611535",
            [
                'expires_at' => "2021-06-27T11:46:25.000000+09:00",
                'point_expires_at' => "2024-01-18T04:34:45.000000+09:00",
                'point_expires_in_days' => 5301,
                'bear_point_account' => "2fbc74d9-a90d-400e-b03e-fdea4c54a982",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4047d61b-bb7c-425f-9a66-e07bd0611535",
            [
                'usage_limit' => 9217,
                'expires_at' => "2021-02-17T00:44:07.000000+09:00",
                'point_expires_at' => "2022-05-08T10:29:26.000000+09:00",
                'point_expires_in_days' => 8024,
                'bear_point_account' => "90b80086-bc53-42f8-817d-28dda58d9af3",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4047d61b-bb7c-425f-9a66-e07bd0611535",
            [
                'is_onetime' => TRUE,
                'usage_limit' => 2986,
                'expires_at' => "2022-06-14T13:54:01.000000+09:00",
                'point_expires_at' => "2023-12-30T08:35:55.000000+09:00",
                'point_expires_in_days' => 5468,
                'bear_point_account' => "ffcd6ca5-7605-4315-825a-c0602a190030",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4047d61b-bb7c-425f-9a66-e07bd0611535",
            [
                'description' => "3y624q6s6C75mNwoI9k17sVnfkQ5Eyxojf8SjHVQqelcTuNTx9EnjamXtHxCYnOgwlKWo9aGrLeWtPuHPbKjWLm7pwWLi7aQIyn6dpQVFgYaMHQhEUHgu2FDfFylHs4Tba0h12pmb7U3fGovEL2OdhTBsUvqQWIOZMXe8nNlpNDS8NJ5e7JgrSaD0wMa5psJkFPETFq",
                'is_onetime' => TRUE,
                'usage_limit' => 6445,
                'expires_at' => "2022-01-17T22:06:40.000000+09:00",
                'point_expires_at' => "2020-11-30T18:25:15.000000+09:00",
                'point_expires_in_days' => 5700,
                'bear_point_account' => "cfc5f55a-b813-40b6-a2c1-a6f49117ecd5",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4047d61b-bb7c-425f-9a66-e07bd0611535",
            [
                'point_amount' => 1433.0,
                'description' => "N1ps48f3IAVr7CjTbcPwIvnTigBaO0StB9OOlFfXCDFebuaA6RbdkXWiawBhIc6fOxGF9RUIJyfOQC1RaWxpqyVMak1LFhV5dsHYMhBcnJBYlln9lAVK5icM4IEhOaqJ7ItExajk4wb29yb6tbOkaMfrZdyXVajat5prQiTAOeDOo7bZxokU7ipD8XwSoy8VIr",
                'is_onetime' => FALSE,
                'usage_limit' => 1984,
                'expires_at' => "2023-12-30T00:33:43.000000+09:00",
                'point_expires_at' => "2023-11-04T15:26:13.000000+09:00",
                'point_expires_in_days' => 1428,
                'bear_point_account' => "9aedea31-77ca-4981-a5a2-dbd48fa83b57",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "4047d61b-bb7c-425f-9a66-e07bd0611535",
            [
                'money_amount' => 8475.0,
                'point_amount' => 5570.0,
                'description' => "ttoZlg6m",
                'is_onetime' => FALSE,
                'usage_limit' => 853,
                'expires_at' => "2024-02-05T20:02:54.000000+09:00",
                'point_expires_at' => "2020-08-24T17:36:04.000000+09:00",
                'point_expires_in_days' => 4046,
                'bear_point_account' => "0eb43fcd-5ff7-4a30-93dd-8a8e45340e70",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
