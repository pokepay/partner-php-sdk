<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "e05a6b17-63cd-4131-a34c-8817dff476c3"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "e05a6b17-63cd-4131-a34c-8817dff476c3",
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "e05a6b17-63cd-4131-a34c-8817dff476c3",
            [
                'bear_point_account' => "327ec328-f9cb-4070-ba55-6d6fb15b0ef5",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "e05a6b17-63cd-4131-a34c-8817dff476c3",
            [
                'point_expires_in_days' => 3321,
                'bear_point_account' => "dfc030d8-34b1-45a7-9258-c0910915b191",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "e05a6b17-63cd-4131-a34c-8817dff476c3",
            [
                'point_expires_at' => "2022-05-13T04:24:34.000000+09:00",
                'point_expires_in_days' => 4154,
                'bear_point_account' => "6a50802d-f21a-476a-841b-d6dc5c84dec2",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "e05a6b17-63cd-4131-a34c-8817dff476c3",
            [
                'expires_at' => "2022-04-21T05:00:21.000000+09:00",
                'point_expires_at' => "2022-05-21T21:10:15.000000+09:00",
                'point_expires_in_days' => 2342,
                'bear_point_account' => "b5a75b37-01a0-41e0-8617-d88f93d58761",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "e05a6b17-63cd-4131-a34c-8817dff476c3",
            [
                'usage_limit' => 8680,
                'expires_at' => "2020-08-10T13:38:11.000000+09:00",
                'point_expires_at' => "2021-09-29T07:16:36.000000+09:00",
                'point_expires_in_days' => 7260,
                'bear_point_account' => "a081dc70-6eab-42cd-bea3-ccab80b34089",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "e05a6b17-63cd-4131-a34c-8817dff476c3",
            [
                'is_onetime' => FALSE,
                'usage_limit' => 5816,
                'expires_at' => "2023-11-11T13:54:28.000000+09:00",
                'point_expires_at' => "2020-11-07T19:08:30.000000+09:00",
                'point_expires_in_days' => 1994,
                'bear_point_account' => "ea0f39d0-705d-4ef5-a17e-93bdd225fdc7",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "e05a6b17-63cd-4131-a34c-8817dff476c3",
            [
                'description' => "bNVaZSbM2FkM4gHM4fhzUQPgBDlnqHrjEZhrb1Q2tVadSTM7WCTKU5IfjEXVtCG16YkuoxHPHqsGl8ytKhkkr6EGjHQ4X4UuJzZqFQZgacAD1WFXwUXMuS68L1dIHn3eDBt3AkuvBSrhA1N42a0iXPFZiooloM3gEmFprAhGnBJ7GqKF7SyLxqWYynLE3Gn9wRDEWe",
                'is_onetime' => FALSE,
                'usage_limit' => 4265,
                'expires_at' => "2023-02-21T01:30:15.000000+09:00",
                'point_expires_at' => "2023-01-08T15:22:07.000000+09:00",
                'point_expires_in_days' => 379,
                'bear_point_account' => "9f6d15fd-d795-4f77-9833-7adcf4aea964",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "e05a6b17-63cd-4131-a34c-8817dff476c3",
            [
                'point_amount' => 8608.0,
                'description' => "FGI1UuXPaMVGQW235RIJu5btZ0NxXaBBMlMpLlcqEeGIYFoWNGZFYZxz2ElD",
                'is_onetime' => TRUE,
                'usage_limit' => 7931,
                'expires_at' => "2020-10-02T00:11:49.000000+09:00",
                'point_expires_at' => "2022-08-14T17:23:18.000000+09:00",
                'point_expires_in_days' => 5002,
                'bear_point_account' => "0b3158be-ffcd-43a4-a68d-9633f9746aaf",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "e05a6b17-63cd-4131-a34c-8817dff476c3",
            [
                'money_amount' => 4030.0,
                'point_amount' => 8775.0,
                'description' => "mpxDdSLjAdu6F8Vl08n6e",
                'is_onetime' => FALSE,
                'usage_limit' => 6254,
                'expires_at' => "2020-12-06T18:12:21.000000+09:00",
                'point_expires_at' => "2021-02-15T18:25:57.000000+09:00",
                'point_expires_in_days' => 7235,
                'bear_point_account' => "942b196f-1821-4ba2-8069-17acf9dd7d79",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
