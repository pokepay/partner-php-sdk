<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "b0957c83-aab4-424b-b998-c121e5e95f6a"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "b0957c83-aab4-424b-b998-c121e5e95f6a",
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "b0957c83-aab4-424b-b998-c121e5e95f6a",
            [
                'bear_point_account' => "0ef62065-a6e8-4745-b01e-b4465ebf2893",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "b0957c83-aab4-424b-b998-c121e5e95f6a",
            [
                'point_expires_in_days' => 8115,
                'bear_point_account' => "50b4b7e4-86c0-4731-a6c0-d000e06e77f3",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "b0957c83-aab4-424b-b998-c121e5e95f6a",
            [
                'point_expires_at' => "2022-09-17T04:14:34.000000Z",
                'point_expires_in_days' => 6114,
                'bear_point_account' => "120cd1dc-82f1-40db-b4e3-d8738f704eaf",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "b0957c83-aab4-424b-b998-c121e5e95f6a",
            [
                'expires_at' => "2021-12-26T07:08:50.000000Z",
                'point_expires_at' => "2020-04-20T21:24:42.000000Z",
                'point_expires_in_days' => 9361,
                'bear_point_account' => "add2afb3-924a-4e3f-b238-e78e930de5f8",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "b0957c83-aab4-424b-b998-c121e5e95f6a",
            [
                'usage_limit' => 5850,
                'expires_at' => "2022-09-20T22:54:41.000000Z",
                'point_expires_at' => "2022-06-21T06:26:38.000000Z",
                'point_expires_in_days' => 9091,
                'bear_point_account' => "e6b60915-66a2-463e-b156-c43425c0e7bf",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "b0957c83-aab4-424b-b998-c121e5e95f6a",
            [
                'is_onetime' => FALSE,
                'usage_limit' => 6690,
                'expires_at' => "2021-06-13T06:42:46.000000Z",
                'point_expires_at' => "2024-02-20T12:53:17.000000Z",
                'point_expires_in_days' => 3236,
                'bear_point_account' => "59559e61-6e5c-4a87-8d38-dd650e4cb294",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "b0957c83-aab4-424b-b998-c121e5e95f6a",
            [
                'description' => "KBhpNX1jWPk8Z43B0y0B9mfs2NjGqIbT9OwqnkaPpwID0eLy",
                'is_onetime' => FALSE,
                'usage_limit' => 666,
                'expires_at' => "2020-05-04T10:41:03.000000Z",
                'point_expires_at' => "2020-03-06T08:42:24.000000Z",
                'point_expires_in_days' => 4807,
                'bear_point_account' => "f22beb4e-a05a-4d14-b711-7187892faaa4",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "b0957c83-aab4-424b-b998-c121e5e95f6a",
            [
                'point_amount' => 7166.0,
                'description' => "9bus52pNLLPoSL84SGwACEhVooVmB4cFvbTIGcXWAqG4BSfipEZMFGhk16I7iXigWOnUAkBWGfv1h3SdKWf7Mk6qxlTgasH11ZahWwt0KCw4FDQO05qLTqGDbzQDuaFv4VsaDUMga8HPH",
                'is_onetime' => TRUE,
                'usage_limit' => 6288,
                'expires_at' => "2023-09-02T05:02:34.000000Z",
                'point_expires_at' => "2023-01-19T14:30:30.000000Z",
                'point_expires_in_days' => 7609,
                'bear_point_account' => "618163de-18d6-4441-aa8e-45f8f4b0868f",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "b0957c83-aab4-424b-b998-c121e5e95f6a",
            [
                'money_amount' => 9425.0,
                'point_amount' => 1504.0,
                'description' => "n6DppPY7uZKs5wMf3MBYDCuFCMBOgtd28MFakoJp4sttlPyu0hLTf3LV1FvqM27O2bqy",
                'is_onetime' => TRUE,
                'usage_limit' => 383,
                'expires_at' => "2022-04-12T23:40:04.000000Z",
                'point_expires_at' => "2021-03-06T21:54:59.000000Z",
                'point_expires_in_days' => 7574,
                'bear_point_account' => "eda3cfd8-5227-4ac6-939b-581886060b57",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
