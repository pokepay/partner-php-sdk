<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "6a9449b1-0bec-4566-ad85-32981a3b86d0"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "6a9449b1-0bec-4566-ad85-32981a3b86d0",
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "6a9449b1-0bec-4566-ad85-32981a3b86d0",
            [
                'bear_point_account' => "28ca2e85-8b1a-4da6-a633-fe8e3bd1c0cc",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "6a9449b1-0bec-4566-ad85-32981a3b86d0",
            [
                'point_expires_in_days' => 7126,
                'bear_point_account' => "4d3250f4-a421-478e-91bd-d441f6b24e4a",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "6a9449b1-0bec-4566-ad85-32981a3b86d0",
            [
                'point_expires_at' => "2023-02-03T19:38:14.000000+09:00",
                'point_expires_in_days' => 8854,
                'bear_point_account' => "100fcde6-ef9f-4969-bda6-f56d8bba2b6e",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "6a9449b1-0bec-4566-ad85-32981a3b86d0",
            [
                'expires_at' => "2021-09-30T12:09:05.000000+09:00",
                'point_expires_at' => "2022-09-16T09:52:42.000000+09:00",
                'point_expires_in_days' => 3081,
                'bear_point_account' => "336ac9cf-af5b-4e7a-8894-3a312156caf5",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "6a9449b1-0bec-4566-ad85-32981a3b86d0",
            [
                'usage_limit' => 4531,
                'expires_at' => "2022-11-17T21:09:16.000000+09:00",
                'point_expires_at' => "2021-06-03T16:03:25.000000+09:00",
                'point_expires_in_days' => 6843,
                'bear_point_account' => "68b7c9bd-ad7e-46b8-99a5-5306c72f13c0",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "6a9449b1-0bec-4566-ad85-32981a3b86d0",
            [
                'is_onetime' => FALSE,
                'usage_limit' => 2104,
                'expires_at' => "2020-12-28T21:03:16.000000+09:00",
                'point_expires_at' => "2020-02-23T09:00:19.000000+09:00",
                'point_expires_in_days' => 3590,
                'bear_point_account' => "a2c4d628-74e0-41b4-a4e1-5060835b782b",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "6a9449b1-0bec-4566-ad85-32981a3b86d0",
            [
                'description' => "o7kx5wuFo45IUV5f8vUR9X2XWLiw4AkVFxg6sxcNrz2l1k77ro0nnjkfyuQDTPl",
                'is_onetime' => FALSE,
                'usage_limit' => 2933,
                'expires_at' => "2022-07-18T12:33:33.000000+09:00",
                'point_expires_at' => "2020-11-20T08:57:03.000000+09:00",
                'point_expires_in_days' => 2567,
                'bear_point_account' => "d79dea21-7b1f-47a5-b82f-073cbb7e8e66",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "6a9449b1-0bec-4566-ad85-32981a3b86d0",
            [
                'point_amount' => 6435.0,
                'description' => "uyCsWqBHSpCvJqHDrRftrnOJp8TX1pDAjP6rYfdRCOpF0hRDCfYZKEBtl8JDJOFiI8w8uQAogxhot4P6CMFAPDwHUmaQIBGK7R7SlXXAVgo52c8bA297RAbTgr6pZaBy",
                'is_onetime' => FALSE,
                'usage_limit' => 8966,
                'expires_at' => "2024-01-29T16:56:50.000000+09:00",
                'point_expires_at' => "2021-10-29T15:03:52.000000+09:00",
                'point_expires_in_days' => 1596,
                'bear_point_account' => "1092a93a-aee0-41fe-9a1f-c5254e398e7d",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "6a9449b1-0bec-4566-ad85-32981a3b86d0",
            [
                'money_amount' => 3185.0,
                'point_amount' => 433.0,
                'description' => "Zh0RQrKoUwAVuKkJIfXiL4r7SLoUOdILxvjXk2nkDYXfuslqEqKkqKrEJzBP04CD2pbNpkJu0cLkFqoL6Xp5K1toMb0ZH9tSYyY5U1KG",
                'is_onetime' => TRUE,
                'usage_limit' => 9960,
                'expires_at' => "2023-09-02T05:07:19.000000+09:00",
                'point_expires_at' => "2023-06-15T12:22:35.000000+09:00",
                'point_expires_in_days' => 6686,
                'bear_point_account' => "d6f77ad7-a887-4b0b-8659-2272ed6f29e2",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
