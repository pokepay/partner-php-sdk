<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateCheck extends TestCase
{
    public function testUpdateCheck0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "87cf3f5b-addd-4a39-9152-bb32876966eb"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "87cf3f5b-addd-4a39-9152-bb32876966eb",
            [
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "87cf3f5b-addd-4a39-9152-bb32876966eb",
            [
                'bear_point_account' => "bc344a6c-82f3-4f94-8172-070fa5e9a27b",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "87cf3f5b-addd-4a39-9152-bb32876966eb",
            [
                'point_expires_in_days' => 304,
                'bear_point_account' => "d1857b15-54f1-4fd9-8384-e1461cf17a7e",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck4()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "87cf3f5b-addd-4a39-9152-bb32876966eb",
            [
                'point_expires_at' => "2023-08-04T10:10:36.000000+09:00",
                'point_expires_in_days' => 1378,
                'bear_point_account' => "6621f8bf-e9f2-42de-ba4d-7ebfd2c45f53",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck5()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "87cf3f5b-addd-4a39-9152-bb32876966eb",
            [
                'expires_at' => "2023-08-30T21:47:45.000000+09:00",
                'point_expires_at' => "2020-11-28T21:07:29.000000+09:00",
                'point_expires_in_days' => 2759,
                'bear_point_account' => "ab95d66d-65e3-4fb9-92ac-253d60f02724",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck6()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "87cf3f5b-addd-4a39-9152-bb32876966eb",
            [
                'usage_limit' => 3147,
                'expires_at' => "2021-12-26T14:58:03.000000+09:00",
                'point_expires_at' => "2023-05-05T12:33:11.000000+09:00",
                'point_expires_in_days' => 9218,
                'bear_point_account' => "cebad966-cff3-4f73-ae6b-74cef87a8765",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck7()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "87cf3f5b-addd-4a39-9152-bb32876966eb",
            [
                'is_onetime' => TRUE,
                'usage_limit' => 2982,
                'expires_at' => "2023-09-30T00:44:57.000000+09:00",
                'point_expires_at' => "2023-08-04T17:19:48.000000+09:00",
                'point_expires_in_days' => 1461,
                'bear_point_account' => "9ad659df-9840-4597-9109-576fc11bef7c",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck8()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "87cf3f5b-addd-4a39-9152-bb32876966eb",
            [
                'description' => "T7EXf5lozBE3xTeKrArH6t0skrqCgLKMxJA0NkLkBp",
                'is_onetime' => TRUE,
                'usage_limit' => 7576,
                'expires_at' => "2021-05-09T02:59:06.000000+09:00",
                'point_expires_at' => "2023-08-04T09:20:41.000000+09:00",
                'point_expires_in_days' => 8067,
                'bear_point_account' => "ce590bdf-1094-4e3e-a2a4-43bd2b10c7b8",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck9()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "87cf3f5b-addd-4a39-9152-bb32876966eb",
            [
                'point_amount' => 6129.0,
                'description' => "OrcGYNIpFK2KLi1M0mybuGR",
                'is_onetime' => FALSE,
                'usage_limit' => 7790,
                'expires_at' => "2021-03-25T01:36:49.000000+09:00",
                'point_expires_at' => "2022-07-09T05:20:43.000000+09:00",
                'point_expires_in_days' => 89,
                'bear_point_account' => "c3d29fe5-0079-4fe6-82a4-205e218a0454",
                'is_disabled' => FALSE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateCheck10()
    {
        $client = $this->newClient();
        $request = new Request\UpdateCheck(
            "87cf3f5b-addd-4a39-9152-bb32876966eb",
            [
                'money_amount' => 3853.0,
                'point_amount' => 334.0,
                'description' => "x3bRrgzV9NAwhe0WNqtenszTTaR0pxFWafJwkEnYon3hwCJ2e",
                'is_onetime' => FALSE,
                'usage_limit' => 8496,
                'expires_at' => "2020-11-27T22:18:54.000000+09:00",
                'point_expires_at' => "2020-08-07T23:39:30.000000+09:00",
                'point_expires_in_days' => 2706,
                'bear_point_account' => "dd23bb7b-9659-4bf5-9962-77e6bcd8bf37",
                'is_disabled' => TRUE
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
