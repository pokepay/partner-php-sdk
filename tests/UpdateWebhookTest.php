<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class UpdateWebhook extends TestCase
{
    public function testUpdateWebhook0()
    {
        $client = $this->newClient();
        $request = new Request\UpdateWebhook(
            "c3020c72-95ab-45e7-8351-e031d6728701"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateWebhook1()
    {
        $client = $this->newClient();
        $request = new Request\UpdateWebhook(
            "c3020c72-95ab-45e7-8351-e031d6728701",
            [
                'task' => "process_user_stats_operation"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateWebhook2()
    {
        $client = $this->newClient();
        $request = new Request\UpdateWebhook(
            "c3020c72-95ab-45e7-8351-e031d6728701",
            [
                'is_active' => TRUE,
                'task' => "bulk_shops"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testUpdateWebhook3()
    {
        $client = $this->newClient();
        $request = new Request\UpdateWebhook(
            "c3020c72-95ab-45e7-8351-e031d6728701",
            [
                'url' => "W",
                'is_active' => FALSE,
                'task' => "bulk_shops"
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
