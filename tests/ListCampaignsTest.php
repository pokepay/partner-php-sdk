<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCampaigns extends TestCase
{
    public function testListCampaigns0()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "d27fb8c0-6081-4b48-bac7-ef3be5b723f7"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns1()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "d27fb8c0-6081-4b48-bac7-ef3be5b723f7",
            [
                'per_page' => 22
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns2()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "d27fb8c0-6081-4b48-bac7-ef3be5b723f7",
            [
                'page' => 1719,
                'per_page' => 11
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns3()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "d27fb8c0-6081-4b48-bac7-ef3be5b723f7",
            [
                'available_to' => "2023-07-10T14:15:06.000000+09:00",
                'page' => 2442,
                'per_page' => 6
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns4()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "d27fb8c0-6081-4b48-bac7-ef3be5b723f7",
            [
                'available_from' => "2022-04-10T14:37:33.000000+09:00",
                'available_to' => "2022-02-19T03:05:39.000000+09:00",
                'page' => 8475,
                'per_page' => 41
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns5()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "d27fb8c0-6081-4b48-bac7-ef3be5b723f7",
            [
                'is_ongoing' => FALSE,
                'available_from' => "2020-06-20T11:01:01.000000+09:00",
                'available_to' => "2022-08-16T23:23:32.000000+09:00",
                'page' => 9960,
                'per_page' => 26
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
