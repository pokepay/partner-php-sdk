<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCampaigns extends TestCase
{
    public function testListCampaigns0()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "b70e4658-0e5c-4513-b9d6-3853f069f5e7"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns1()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "b70e4658-0e5c-4513-b9d6-3853f069f5e7",
            [
                'per_page' => 15
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns2()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "b70e4658-0e5c-4513-b9d6-3853f069f5e7",
            [
                'page' => 3180,
                'per_page' => 9
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns3()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "b70e4658-0e5c-4513-b9d6-3853f069f5e7",
            [
                'available_to' => "2020-08-20T06:29:56.000000+09:00",
                'page' => 8519,
                'per_page' => 19
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns4()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "b70e4658-0e5c-4513-b9d6-3853f069f5e7",
            [
                'available_from' => "2023-12-20T05:07:04.000000+09:00",
                'available_to' => "2022-02-13T08:19:47.000000+09:00",
                'page' => 6122,
                'per_page' => 41
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns5()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "b70e4658-0e5c-4513-b9d6-3853f069f5e7",
            [
                'is_ongoing' => TRUE,
                'available_from' => "2023-06-27T16:53:22.000000+09:00",
                'available_to' => "2023-07-06T08:58:14.000000+09:00",
                'page' => 8508,
                'per_page' => 16
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
