<?php
// DO NOT EDIT: File is generated by code generator.
namespace Pokepay;

class ListCampaigns extends TestCase
{
    public function testListCampaigns0()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "2e54dfcc-9cf6-415f-8c43-7f4a2ce24451"
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns1()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "2e54dfcc-9cf6-415f-8c43-7f4a2ce24451",
            [
                'per_page' => 2
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns2()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "2e54dfcc-9cf6-415f-8c43-7f4a2ce24451",
            [
                'page' => 1680,
                'per_page' => 38
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns3()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "2e54dfcc-9cf6-415f-8c43-7f4a2ce24451",
            [
                'available_to' => "2023-08-02T12:05:15.000000+09:00",
                'page' => 1868,
                'per_page' => 8
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns4()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "2e54dfcc-9cf6-415f-8c43-7f4a2ce24451",
            [
                'available_from' => "2022-10-07T21:29:33.000000+09:00",
                'available_to' => "2024-02-16T11:00:01.000000+09:00",
                'page' => 9839,
                'per_page' => 35
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
    public function testListCampaigns5()
    {
        $client = $this->newClient();
        $request = new Request\ListCampaigns(
            "2e54dfcc-9cf6-415f-8c43-7f4a2ce24451",
            [
                'is_ongoing' => FALSE,
                'available_from' => "2021-05-02T12:07:26.000000+09:00",
                'available_to' => "2020-02-29T08:51:06.000000+09:00",
                'page' => 8943,
                'per_page' => 11
            ]
        );
        try {
            $response = $client->send($request);
            $this->assertTrue(true);
        } catch (Error\HttpRequest $e) {
            $this->assertNotSame(400, $e->code);
        } catch (Error\ApiConnection $e) {
            $this->assertTrue(false);
        }
    }
}
